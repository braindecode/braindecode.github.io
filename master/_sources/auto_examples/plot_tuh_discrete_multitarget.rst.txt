
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_tuh_discrete_multitarget.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_tuh_discrete_multitarget.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_tuh_discrete_multitarget.py:

Multiple discrete targets with the TUH EEG Corpus
====================================================

In this example, we showcase usage of multiple discrete targets per recording
with the TUH EEG Corpus.

.. GENERATED FROM PYTHON SOURCE LINES 7-21

.. code-block:: default


    # Author: Lukas Gemein <l.gemein@gmail.com>
    #
    # License: BSD (3-clause)

    import mne
    from torch.utils.data.dataloader import DataLoader

    from braindecode.datasets import TUH
    from braindecode.preprocessing.windowers import create_fixed_length_windows

    mne.set_log_level('ERROR')  # avoid messages everytime a window is extracted









.. GENERATED FROM PYTHON SOURCE LINES 22-25

If you want to try this code with the actual data, please delete the next
section. We are required to mock some dataset functionality, since the data
is not available at creation time of this example.

.. GENERATED FROM PYTHON SOURCE LINES 25-28

.. code-block:: default

    from braindecode.datasets.tuh import _TUHMock as TUH  # noqa F811









.. GENERATED FROM PYTHON SOURCE LINES 29-32

We start by creating a TUH dataset. Instead of just a str, we give it
multiple strings as target names. Each of the strings has to exist as a
column in the description DataFrame.

.. GENERATED FROM PYTHON SOURCE LINES 32-44

.. code-block:: default


    TUH_PATH = 'please insert actual path to data here'
    tuh = TUH(
        path=TUH_PATH,
        recording_ids=None,
        target_name=('age', 'gender'),  # use both age and gender as decoding target
        preload=False,
        add_physician_reports=False,
    )
    tuh.description







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>path</th>
          <th>version</th>
          <th>year</th>
          <th>month</th>
          <th>day</th>
          <th>subject</th>
          <th>session</th>
          <th>segment</th>
          <th>age</th>
          <th>gender</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>tuh_eeg/v1.1.0/edf/02_tcp_le/000/00000058/s001...</td>
          <td>v1.1.0</td>
          <td>2003</td>
          <td>2</td>
          <td>5</td>
          <td>58</td>
          <td>1</td>
          <td>0</td>
          <td>0</td>
          <td>M</td>
        </tr>
        <tr>
          <th>1</th>
          <td>tuh_eeg/v1.1.0/edf/01_tcp_ar/099/00009932/s004...</td>
          <td>v1.1.0</td>
          <td>2014</td>
          <td>9</td>
          <td>30</td>
          <td>9932</td>
          <td>4</td>
          <td>13</td>
          <td>53</td>
          <td>F</td>
        </tr>
        <tr>
          <th>2</th>
          <td>tuh_eeg/v1.1.0/edf/03_tcp_ar_a/123/00012331/s0...</td>
          <td>v1.1.0</td>
          <td>2014</td>
          <td>12</td>
          <td>14</td>
          <td>12331</td>
          <td>3</td>
          <td>2</td>
          <td>39</td>
          <td>M</td>
        </tr>
        <tr>
          <th>3</th>
          <td>tuh_eeg/v1.1.0/edf/01_tcp_ar/000/00000000/s001...</td>
          <td>v1.1.0</td>
          <td>2015</td>
          <td>12</td>
          <td>30</td>
          <td>0</td>
          <td>1</td>
          <td>0</td>
          <td>37</td>
          <td>M</td>
        </tr>
        <tr>
          <th>4</th>
          <td>tuh_eeg/v1.2.0/edf/03_tcp_ar_a/149/00014928/s0...</td>
          <td>v1.2.0</td>
          <td>2016</td>
          <td>1</td>
          <td>15</td>
          <td>14928</td>
          <td>4</td>
          <td>7</td>
          <td>83</td>
          <td>F</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 45-48

Iterating through the dataset gives x as ndarray(n_channels x 1) as well as
the target as [age of the subject, gender of the subject]. Let's look at the last example
as it has more interesting age/gender labels (compare to the last row of the dataframe above).

.. GENERATED FROM PYTHON SOURCE LINES 48-53

.. code-block:: default

    x, y = tuh[-1]
    print('x:', x)
    print('y:', y)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    x: [[-1.16014735]
     [-0.94584445]
     [-0.46703436]
     [ 0.93884303]
     [-0.673249  ]
     [-0.71313539]
     [ 0.41526618]
     [-0.16079849]
     [ 0.67168957]
     [ 0.39998171]
     [ 0.07898866]
     [-0.72111879]
     [ 0.43374099]
     [-0.52690034]
     [-0.43035506]
     [ 0.15391537]
     [ 0.65853283]
     [-0.06104847]
     [-1.06412093]
     [-2.99182902]
     [ 0.24333184]]
    y: [83, 'F']




.. GENERATED FROM PYTHON SOURCE LINES 54-58

We will skip preprocessing steps for now, since it is not the aim of this
example. Instead, we will directly create compute windows. We specify a
mapping from genders 'M' and 'F' to integers, since this is required for
decoding.

.. GENERATED FROM PYTHON SOURCE LINES 58-73

.. code-block:: default


    tuh_windows = create_fixed_length_windows(
        tuh,
        start_offset_samples=0,
        stop_offset_samples=None,
        window_size_samples=1000,
        window_stride_samples=1000,
        drop_last_window=False,
        mapping={'M': 0, 'F': 1},  # map non-digit targets
    )
    # store the number of windows required for loading later on
    tuh_windows.set_description({
        "n_windows": [len(d) for d in tuh_windows.datasets]})









.. GENERATED FROM PYTHON SOURCE LINES 74-76

Iterating through the dataset gives x as ndarray(n_channels x 1000), y as
[age, gender], and ind. Let's look at the last example again.

.. GENERATED FROM PYTHON SOURCE LINES 76-82

.. code-block:: default

    x, y, ind = tuh_windows[-1]
    print('x:', x)
    print('y:', y)
    print('ind:', ind)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    x: [[ 0.41082472 -0.4601165   0.3551029  ...  0.42781815  0.2752102
      -1.1601473 ]
     [-1.8882366   0.49086967 -0.93152654 ... -2.2989893  -0.95386326
      -0.9458445 ]
     [-0.86345464 -0.539889   -1.5818632  ... -1.2759172   0.67269784
      -0.46703437]
     ...
     [-0.254874   -1.7431581   0.13339253 ...  0.5906102  -0.85372514
      -1.0641209 ]
     [ 2.1520355  -2.5544858   0.01612004 ... -1.7511061  -0.7496084
      -2.991829  ]
     [-0.4442795  -0.69317436 -0.900833   ... -0.3407314   0.21862479
       0.24333185]]
    y: [83, 1]
    ind: [3, 2600, 3600]




.. GENERATED FROM PYTHON SOURCE LINES 83-85

We give the dataset to a pytorch DataLoader, such that it can be used for
model training.

.. GENERATED FROM PYTHON SOURCE LINES 85-91

.. code-block:: default

    dl = DataLoader(
        dataset=tuh_windows,
        batch_size=4,
    )









.. GENERATED FROM PYTHON SOURCE LINES 92-96

Iterating through the DataLoader gives batch_X as tensor(4 x n_channels x
1000), batch_y as [tensor([4 x age of subject]), tensor([4 x gender of
subject])], and batch_ind. We will iterate to the end to look at the last example
again.

.. GENERATED FROM PYTHON SOURCE LINES 96-101

.. code-block:: default

    for batch_X, batch_y, batch_ind in dl:
        pass
    print('batch_X:', batch_X)
    print('batch_y:', batch_y)
    print('batch_ind:', batch_ind)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    batch_X: tensor([[[-0.2929,  0.8876, -1.3036,  ...,  0.2323, -0.5926,  1.5362],
             [-0.8194,  0.8217, -1.1725,  ..., -0.3256, -0.8118,  0.4782],
             [ 1.5619,  0.9153, -0.7694,  ..., -0.0775,  1.0520,  0.1880],
             ...,
             [ 0.7758, -1.6908,  0.4177,  ..., -2.8494,  1.2138, -0.0072],
             [ 1.4425, -0.2640,  1.0244,  ...,  0.2633, -0.4351,  1.6707],
             [-0.3786, -1.4310, -0.4847,  ..., -0.6524,  0.7326, -0.6418]],

            [[-0.1229,  1.6770, -0.8027,  ..., -0.5153, -0.6572,  0.2799],
             [ 1.3123, -1.0834,  1.0740,  ...,  1.1711,  0.4697,  1.0496],
             [ 0.2920, -1.4529, -1.3356,  ..., -0.7726,  0.9190,  0.7730],
             ...,
             [ 0.7072,  1.0014, -0.9881,  ..., -0.0985,  0.5972, -0.0228],
             [ 0.4248,  1.5222,  0.1446,  ..., -0.3677,  1.2426, -0.2609],
             [ 0.7022, -0.2641, -0.8213,  ..., -0.3130,  1.9315,  0.8247]],

            [[-1.9407, -1.2774, -1.6877,  ..., -0.1940, -1.2606, -1.5014],
             [ 1.0078, -0.9764,  1.3262,  ..., -1.0396,  0.4173,  1.8343],
             [ 0.5255, -1.3739,  0.0791,  ...,  0.5841,  0.4297,  1.4743],
             ...,
             [-1.2538,  0.3961, -0.8118,  ..., -0.3492,  0.6728,  0.2842],
             [ 1.1941,  1.5171,  0.1199,  ...,  1.7678, -0.1325, -1.3685],
             [-1.6096, -0.9454,  1.8134,  ..., -0.1456,  0.8719,  0.1853]],

            [[ 0.4108, -0.4601,  0.3551,  ...,  0.4278,  0.2752, -1.1601],
             [-1.8882,  0.4909, -0.9315,  ..., -2.2990, -0.9539, -0.9458],
             [-0.8635, -0.5399, -1.5819,  ..., -1.2759,  0.6727, -0.4670],
             ...,
             [-0.2549, -1.7432,  0.1334,  ...,  0.5906, -0.8537, -1.0641],
             [ 2.1520, -2.5545,  0.0161,  ..., -1.7511, -0.7496, -2.9918],
             [-0.4443, -0.6932, -0.9008,  ..., -0.3407,  0.2186,  0.2433]]])
    batch_y: [tensor([83, 83, 83, 83]), tensor([1, 1, 1, 1])]
    batch_ind: [tensor([0, 1, 2, 3]), tensor([   0, 1000, 2000, 2600]), tensor([1000, 2000, 3000, 3600])]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.159 seconds)

**Estimated memory usage:**  17 MB


.. _sphx_glr_download_auto_examples_plot_tuh_discrete_multitarget.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_tuh_discrete_multitarget.py <plot_tuh_discrete_multitarget.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_tuh_discrete_multitarget.ipynb <plot_tuh_discrete_multitarget.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
