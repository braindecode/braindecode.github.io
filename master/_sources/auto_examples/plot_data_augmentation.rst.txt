
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_data_augmentation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_data_augmentation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_data_augmentation.py:


Data Augmentation on BCIC IV 2a Dataset
=======================================

This tutorial shows how to train EEG deep models with data augmentation. It
follows the trial-wise decoding example and also illustrates the effect of a
transform on the input signals.

.. contents:: This example covers:
   :local:
   :depth: 2

.. GENERATED FROM PYTHON SOURCE LINES 14-20

.. code-block:: default


    # Authors: Simon Brandt <simonbrandt@protonmail.com>
    #          Cédric Rommel <cedric.rommel@inria.fr>
    #
    # License: BSD (3-clause)








.. GENERATED FROM PYTHON SOURCE LINES 21-26

Loading and preprocessing the dataset
-------------------------------------

Loading
~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 26-36

.. code-block:: default


    from skorch.helper import predefined_split
    from skorch.callbacks import LRScheduler

    from braindecode import EEGClassifier
    from braindecode.datasets import MOABBDataset

    subject_id = 3
    dataset = MOABBDataset(dataset_name="BNCI2014001", subject_ids=[subject_id])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|                                              | 0.00/44.1M [00:00<?, ?B/s]      0%|                                     | 17.4k/44.1M [00:00<08:22, 87.7kB/s]      0%|                                      | 33.8k/44.1M [00:00<06:08, 120kB/s]      0%|                                      | 50.2k/44.1M [00:00<05:23, 136kB/s]      0%|                                      | 82.9k/44.1M [00:00<03:36, 203kB/s]      0%|                                       | 105k/44.1M [00:00<03:29, 210kB/s]      0%|                                       | 128k/44.1M [00:00<03:24, 215kB/s]      0%|▏                                      | 157k/44.1M [00:00<03:05, 237kB/s]      0%|▏                                      | 188k/44.1M [00:00<02:47, 262kB/s]      0%|▏                                      | 216k/44.1M [00:00<02:44, 266kB/s]      1%|▏                                      | 264k/44.1M [00:01<02:11, 332kB/s]      1%|▎                                      | 312k/44.1M [00:01<01:56, 377kB/s]      1%|▎                                      | 361k/44.1M [00:01<01:46, 411kB/s]      1%|▍                                      | 427k/44.1M [00:01<01:30, 483kB/s]      1%|▍                                      | 476k/44.1M [00:01<01:29, 485kB/s]      1%|▍                                      | 542k/44.1M [00:01<01:21, 536kB/s]      1%|▌                                      | 607k/44.1M [00:01<01:16, 572kB/s]      2%|▌                                      | 673k/44.1M [00:01<01:12, 596kB/s]      2%|▋                                      | 755k/44.1M [00:01<01:05, 661kB/s]      2%|▊                                      | 853k/44.1M [00:02<00:57, 754kB/s]      2%|▊                                      | 951k/44.1M [00:02<00:52, 822kB/s]      2%|▉                                     | 1.03M/44.1M [00:02<00:52, 824kB/s]      3%|▉                                     | 1.15M/44.1M [00:02<00:46, 917kB/s]      3%|█                                    | 1.28M/44.1M [00:02<00:41, 1.03MB/s]      3%|█▏                                   | 1.43M/44.1M [00:02<00:36, 1.17MB/s]      4%|█▎                                   | 1.55M/44.1M [00:02<00:35, 1.20MB/s]      4%|█▍                                   | 1.72M/44.1M [00:02<00:32, 1.31MB/s]      4%|█▌                                   | 1.92M/44.1M [00:02<00:28, 1.50MB/s]      5%|█▊                                   | 2.13M/44.1M [00:02<00:24, 1.68MB/s]      5%|█▉                                   | 2.36M/44.1M [00:03<00:22, 1.85MB/s]      6%|██▏                                  | 2.60M/44.1M [00:03<00:20, 2.03MB/s]      6%|██▎                                  | 2.81M/44.1M [00:03<00:20, 2.03MB/s]      7%|██▌                                  | 3.05M/44.1M [00:03<00:19, 2.14MB/s]      8%|██▊                                  | 3.31M/44.1M [00:03<00:17, 2.28MB/s]      8%|███                                  | 3.59M/44.1M [00:03<00:16, 2.43MB/s]      9%|███▎                                 | 3.92M/44.1M [00:03<00:15, 2.67MB/s]     10%|███▌                                 | 4.28M/44.1M [00:03<00:13, 2.94MB/s]     10%|███▊                                 | 4.60M/44.1M [00:03<00:12, 3.04MB/s]     11%|████▏                                | 5.01M/44.1M [00:03<00:11, 3.34MB/s]     12%|████▌                                | 5.46M/44.1M [00:04<00:10, 3.64MB/s]     13%|████▉                                | 5.90M/44.1M [00:04<00:09, 3.87MB/s]     15%|█████▍                               | 6.41M/44.1M [00:04<00:08, 4.23MB/s]     16%|█████▊                               | 6.95M/44.1M [00:04<00:08, 4.56MB/s]     17%|██████▎                              | 7.54M/44.1M [00:04<00:07, 4.96MB/s]     19%|██████▊                              | 8.16M/44.1M [00:04<00:06, 5.28MB/s]     20%|███████▍                             | 8.82M/44.1M [00:04<00:06, 5.65MB/s]     22%|████████                             | 9.54M/44.1M [00:04<00:05, 6.11MB/s]     23%|████████▋                            | 10.3M/44.1M [00:04<00:05, 6.56MB/s]     25%|█████████▎                           | 11.2M/44.1M [00:04<00:04, 7.08MB/s]     27%|██████████▏                          | 12.1M/44.1M [00:05<00:04, 7.70MB/s]     30%|██████████▉                          | 13.1M/44.1M [00:05<00:03, 8.33MB/s]     32%|███████████▉                         | 14.1M/44.1M [00:05<00:03, 8.96MB/s]     35%|████████████▊                        | 15.3M/44.1M [00:05<00:02, 9.76MB/s]     38%|█████████████▉                       | 16.6M/44.1M [00:05<00:02, 10.5MB/s]     41%|███████████████                      | 18.0M/44.1M [00:05<00:02, 11.4MB/s]     44%|████████████████▎                    | 19.4M/44.1M [00:05<00:01, 12.4MB/s]     48%|█████████████████▋                   | 21.1M/44.1M [00:05<00:01, 13.5MB/s]     52%|███████████████████                  | 22.8M/44.1M [00:05<00:01, 14.5MB/s]     56%|████████████████████▋                | 24.6M/44.1M [00:05<00:01, 15.2MB/s]     60%|██████████████████████▏              | 26.5M/44.1M [00:06<00:01, 16.3MB/s]     65%|███████████████████████▉             | 28.5M/44.1M [00:06<00:00, 17.5MB/s]     70%|█████████████████████████▋           | 30.6M/44.1M [00:06<00:00, 18.6MB/s]     75%|███████████████████████████▌         | 32.9M/44.1M [00:06<00:00, 19.8MB/s]     80%|█████████████████████████████▌       | 35.2M/44.1M [00:06<00:00, 20.8MB/s]     86%|███████████████████████████████▋     | 37.8M/44.1M [00:06<00:00, 22.1MB/s]     91%|█████████████████████████████████▊   | 40.3M/44.1M [00:06<00:00, 22.8MB/s]     98%|████████████████████████████████████▏| 43.1M/44.1M [00:06<00:00, 24.2MB/s]      0%|                                              | 0.00/44.1M [00:00<?, ?B/s]    100%|█████████████████████████████████████| 44.1M/44.1M [00:00<00:00, 67.3GB/s]
      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]      0%|                                     | 17.4k/42.3M [00:00<08:17, 85.1kB/s]      0%|                                      | 50.2k/42.3M [00:00<05:21, 131kB/s]      0%|                                      | 82.9k/42.3M [00:00<03:43, 189kB/s]      0%|                                       | 132k/42.3M [00:00<02:37, 267kB/s]      0%|▏                                      | 181k/42.3M [00:00<02:37, 267kB/s]      1%|▏                                      | 229k/42.3M [00:00<02:11, 320kB/s]      1%|▎                                      | 291k/42.3M [00:01<01:45, 397kB/s]      1%|▎                                      | 345k/42.3M [00:01<01:36, 436kB/s]      1%|▍                                      | 412k/42.3M [00:01<01:23, 500kB/s]      1%|▍                                      | 493k/42.3M [00:01<01:30, 461kB/s]      1%|▌                                      | 567k/42.3M [00:01<01:18, 531kB/s]      2%|▌                                      | 673k/42.3M [00:01<01:03, 656kB/s]      2%|▋                                      | 790k/42.3M [00:01<00:52, 792kB/s]      2%|▊                                      | 886k/42.3M [00:01<00:49, 839kB/s]      2%|▉                                      | 996k/42.3M [00:01<00:45, 914kB/s]      3%|▉                                     | 1.11M/42.3M [00:02<00:42, 972kB/s]      3%|█                                    | 1.26M/42.3M [00:02<00:36, 1.13MB/s]      3%|█▏                                   | 1.40M/42.3M [00:02<00:33, 1.22MB/s]      4%|█▎                                   | 1.55M/42.3M [00:02<00:31, 1.29MB/s]      4%|█▍                                   | 1.70M/42.3M [00:02<00:29, 1.36MB/s]      5%|█▋                                   | 1.91M/42.3M [00:02<00:25, 1.56MB/s]      5%|█▊                                   | 2.08M/42.3M [00:02<00:25, 1.61MB/s]      5%|█▉                                   | 2.29M/42.3M [00:02<00:23, 1.74MB/s]      6%|██▏                                  | 2.54M/42.3M [00:02<00:20, 1.98MB/s]      7%|██▍                                  | 2.78M/42.3M [00:02<00:18, 2.11MB/s]      7%|██▋                                  | 3.04M/42.3M [00:03<00:17, 2.24MB/s]      8%|██▉                                  | 3.30M/42.3M [00:03<00:16, 2.35MB/s]      8%|███▏                                 | 3.59M/42.3M [00:03<00:15, 2.52MB/s]      9%|███▍                                 | 3.92M/42.3M [00:03<00:14, 2.74MB/s]     10%|███▋                                 | 4.23M/42.3M [00:03<00:13, 2.85MB/s]     11%|████                                 | 4.63M/42.3M [00:03<00:11, 3.21MB/s]     12%|████▍                                | 5.05M/42.3M [00:03<00:10, 3.43MB/s]     13%|████▊                                | 5.51M/42.3M [00:03<00:09, 3.78MB/s]     14%|█████▏                               | 6.00M/42.3M [00:03<00:08, 4.05MB/s]     15%|█████▋                               | 6.54M/42.3M [00:03<00:08, 4.44MB/s]     17%|██████▏                              | 7.10M/42.3M [00:04<00:07, 4.79MB/s]     18%|██████▋                              | 7.70M/42.3M [00:04<00:06, 5.14MB/s]     20%|███████▎                             | 8.37M/42.3M [00:04<00:06, 5.60MB/s]     21%|███████▉                             | 9.06M/42.3M [00:04<00:05, 5.98MB/s]     23%|████████▌                            | 9.80M/42.3M [00:04<00:05, 6.40MB/s]     25%|█████████▎                           | 10.6M/42.3M [00:04<00:04, 6.85MB/s]     27%|██████████                           | 11.5M/42.3M [00:04<00:04, 7.41MB/s]     29%|██████████▊                          | 12.4M/42.3M [00:04<00:03, 7.85MB/s]     32%|███████████▋                         | 13.4M/42.3M [00:04<00:03, 8.66MB/s]     34%|████████████▋                        | 14.5M/42.3M [00:04<00:02, 9.34MB/s]     37%|█████████████▋                       | 15.7M/42.3M [00:05<00:02, 9.93MB/s]     40%|██████████████▊                      | 17.0M/42.3M [00:05<00:02, 10.8MB/s]     43%|████████████████                     | 18.3M/42.3M [00:05<00:02, 11.6MB/s]     47%|█████████████████▏                   | 19.7M/42.3M [00:05<00:01, 12.3MB/s]     50%|██████████████████▌                  | 21.2M/42.3M [00:05<00:01, 13.1MB/s]     54%|███████████████████▉                 | 22.8M/42.3M [00:05<00:01, 14.0MB/s]     58%|█████████████████████▍               | 24.5M/42.3M [00:05<00:01, 14.9MB/s]     62%|███████████████████████              | 26.3M/42.3M [00:05<00:01, 15.8MB/s]     67%|████████████████████████▋            | 28.2M/42.3M [00:05<00:00, 16.7MB/s]     71%|██████████████████████████▍          | 30.2M/42.3M [00:05<00:00, 16.2MB/s]     76%|████████████████████████████▎        | 32.3M/42.3M [00:06<00:00, 17.5MB/s]     81%|██████████████████████████████       | 34.4M/42.3M [00:06<00:00, 18.5MB/s]     87%|████████████████████████████████     | 36.7M/42.3M [00:06<00:00, 19.6MB/s]     92%|██████████████████████████████████   | 38.9M/42.3M [00:06<00:00, 20.5MB/s]     97%|████████████████████████████████████ | 41.2M/42.3M [00:06<00:00, 21.1MB/s]      0%|                                              | 0.00/42.3M [00:00<?, ?B/s]    100%|█████████████████████████████████████| 42.3M/42.3M [00:00<00:00, 50.6GB/s]




.. GENERATED FROM PYTHON SOURCE LINES 37-40

Preprocessing
~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 40-60

.. code-block:: default


    from braindecode.preprocessing import (
        exponential_moving_standardize, preprocess, Preprocessor, scale)

    low_cut_hz = 4.  # low cut frequency for filtering
    high_cut_hz = 38.  # high cut frequency for filtering
    # Parameters for exponential moving standardization
    factor_new = 1e-3
    init_block_size = 1000

    preprocessors = [
        Preprocessor('pick_types', eeg=True, meg=False, stim=False),  # Keep EEG sensors
        Preprocessor(scale, factor=1e6, apply_on_array=True),  # Convert from V to uV
        Preprocessor('filter', l_freq=low_cut_hz, h_freq=high_cut_hz),  # Bandpass filter
        Preprocessor(exponential_moving_standardize,  # Exponential moving standardization
                     factor_new=factor_new, init_block_size=init_block_size)
    ]

    preprocess(dataset, preprocessors)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda/envs/braindecode/lib/python3.7/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function scale is deprecated; will be removed in 0.7.0. Use numpy.multiply instead.
      warnings.warn(msg, category=FutureWarning)

    <braindecode.datasets.moabb.MOABBDataset object at 0x7fc50c1b6f90>



.. GENERATED FROM PYTHON SOURCE LINES 61-64

Extracting windows
~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 64-83

.. code-block:: default


    from braindecode.preprocessing import create_windows_from_events

    trial_start_offset_seconds = -0.5
    # Extract sampling frequency, check that they are same in all datasets
    sfreq = dataset.datasets[0].raw.info['sfreq']
    assert all([ds.raw.info['sfreq'] == sfreq for ds in dataset.datasets])
    # Calculate the trial start offset in samples.
    trial_start_offset_samples = int(trial_start_offset_seconds * sfreq)

    # Create windows using braindecode function for this. It needs parameters to
    # define how trials should be used.
    windows_dataset = create_windows_from_events(
        dataset,
        trial_start_offset_samples=trial_start_offset_samples,
        trial_stop_offset_samples=0,
        preload=True,
    )








.. GENERATED FROM PYTHON SOURCE LINES 84-87

Split dataset into train and valid
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 87-92

.. code-block:: default


    splitted = windows_dataset.split('session')
    train_set = splitted['session_T']
    valid_set = splitted['session_E']








.. GENERATED FROM PYTHON SOURCE LINES 93-102

Defining a Transform
--------------------

Data can be manipulated by transforms, which are callable objects. A
transform is usually handled by a custom data loader, but can also be called
directly on input data, as demonstrated below for illutrative purposes.

First, we need to define a Transform. Here we chose the FrequencyShift, which
randomly translates all frequencies within a given range.

.. GENERATED FROM PYTHON SOURCE LINES 102-111

.. code-block:: default


    from braindecode.augmentation import FrequencyShift

    transform = FrequencyShift(
        probability=1.,  # defines the probability of actually modifying the input
        sfreq=sfreq,
        max_delta_freq=2.  # the frequency shifts are sampled now between -2 and 2 Hz
    )








.. GENERATED FROM PYTHON SOURCE LINES 112-118

Manipulating one session and visualizing the transformed data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Next, let us augment one session to show the resulting frequency shift. The
data of an mne Epoch is used here to make usage of mne functions.

.. GENERATED FROM PYTHON SOURCE LINES 118-127

.. code-block:: default


    import torch

    epochs = train_set.datasets[0].windows  # original epochs
    X = epochs.get_data()
    # This allows to apply the transform with a fixed shift (10 Hz) for
    # visualization instead of sampling the shift randomly between -2 and 2 Hz
    X_tr, _ = transform.operation(torch.as_tensor(X).float(), None, 10., sfreq)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/braindecode/braindecode/braindecode/augmentation/functional.py:547: UserWarning: The use of `x.T` on tensors of dimension other than 2 to reverse their shape is deprecated and it will throw an error in a future release. Consider `x.mT` to transpose batches of matricesor `x.permute(*torch.arange(x.ndim - 1, -1, -1))` to reverse the dimensions of a tensor. (Triggered internally at  /home/conda/feedstock_root/build_artifacts/pytorch-recipe_1654951036629/work/aten/src/ATen/native/TensorShape.cpp:2314.)
      N_padded, n_channels, 1).T




.. GENERATED FROM PYTHON SOURCE LINES 128-130

The psd of the transformed session has now been shifted by 10 Hz, as one can
see on the psd plot.

.. GENERATED FROM PYTHON SOURCE LINES 130-153

.. code-block:: default


    import mne
    import matplotlib.pyplot as plt
    import numpy as np


    def plot_psd(data, axis, label, color):
        psds, freqs = mne.time_frequency.psd_array_multitaper(data, sfreq=sfreq,
                                                              fmin=0.1, fmax=100)
        psds = 10. * np.log10(psds)
        psds_mean = psds.mean(0).mean(0)
        axis.plot(freqs, psds_mean, color=color, label=label)


    _, ax = plt.subplots()
    plot_psd(X, ax, 'original', 'k')
    plot_psd(X_tr.numpy(), ax, 'shifted', 'r')

    ax.set(title='Multitaper PSD (gradiometers)', xlabel='Frequency (Hz)',
           ylabel='Power Spectral Density (dB)')
    ax.legend()
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_data_augmentation_001.png
   :alt: Multitaper PSD (gradiometers)
   :srcset: /auto_examples/images/sphx_glr_plot_data_augmentation_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 154-165

Training a model with data augmentation
---------------------------------------

Now that we know how to instantiate ``Transforms``, it is time to learn how
to use them to train a model and try to improve its generalization power.
Let's first create a model.

Create model
~~~~~~~~~~~~

The model to be trained is defined as usual.

.. GENERATED FROM PYTHON SOURCE LINES 165-196

.. code-block:: default


    from braindecode.util import set_random_seeds
    from braindecode.models import ShallowFBCSPNet

    cuda = torch.cuda.is_available()  # check if GPU is available, if True chooses to use it
    device = 'cuda' if cuda else 'cpu'
    if cuda:
        torch.backends.cudnn.benchmark = True

    # Set random seed to be able to roughly reproduce results
    # Note that with cudnn benchmark set to True, GPU indeterminism
    # may still make results substantially different between runs.
    # To obtain more consistent results at the cost of increased computation time,
    # you can set `cudnn_benchmark=False` in `set_random_seeds`
    # or remove `torch.backends.cudnn.benchmark = True`
    seed = 20200220
    set_random_seeds(seed=seed, cuda=cuda)

    n_classes = 4

    # Extract number of chans and time steps from dataset
    n_channels = train_set[0][0].shape[0]
    input_window_samples = train_set[0][0].shape[1]

    model = ShallowFBCSPNet(
        n_channels,
        n_classes,
        input_window_samples=input_window_samples,
        final_conv_length='auto',
    )








.. GENERATED FROM PYTHON SOURCE LINES 197-203

Create an EEGClassifier with the desired augmentation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In order to train with data augmentation, a custom data loader can be
for the training. Multiple transforms can be passed to it and will be applied
sequentially to the batched data within the ``AugmentedDataLoader`` object.

.. GENERATED FROM PYTHON SOURCE LINES 203-223

.. code-block:: default


    from braindecode.augmentation import AugmentedDataLoader, SignFlip

    freq_shift = FrequencyShift(
        probability=.5,
        sfreq=sfreq,
        max_delta_freq=2.  # the frequency shifts are sampled now between -2 and 2 Hz
    )

    sign_flip = SignFlip(probability=.1)

    transforms = [
        freq_shift,
        sign_flip
    ]

    # Send model to GPU
    if cuda:
        model.cuda()








.. GENERATED FROM PYTHON SOURCE LINES 224-227

The model is now trained as in the trial-wise example. The
``AugmentedDataLoader`` is used as the train iterator and the list of
transforms are passed as arguments.

.. GENERATED FROM PYTHON SOURCE LINES 227-254

.. code-block:: default


    lr = 0.0625 * 0.01
    weight_decay = 0

    batch_size = 64
    n_epochs = 4

    clf = EEGClassifier(
        model,
        iterator_train=AugmentedDataLoader,  # This tells EEGClassifier to use a custom DataLoader
        iterator_train__transforms=transforms,  # This sets the augmentations to use
        criterion=torch.nn.NLLLoss,
        optimizer=torch.optim.AdamW,
        train_split=predefined_split(valid_set),  # using valid_set for validation
        optimizer__lr=lr,
        optimizer__weight_decay=weight_decay,
        batch_size=batch_size,
        callbacks=[
            "accuracy",
            ("lr_scheduler", LRScheduler('CosineAnnealingLR', T_max=n_epochs - 1)),
        ],
        device=device,
    )
    # Model training for a specified number of epochs. `y` is None as it is already
    # supplied in the dataset.
    clf.fit(train_set, y=None, epochs=n_epochs)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      epoch    train_accuracy    train_loss    valid_accuracy    valid_loss      lr     dur
    -------  ----------------  ------------  ----------------  ------------  ------  ------
          1            0.2569        1.6225            0.2431        5.5635  0.0006  8.5091
          2            0.2535        1.2218            0.2535        6.3996  0.0005  8.3228
          3            0.2535        1.0973            0.2535        5.2946  0.0002  8.2496
          4            0.2639        1.0922            0.2535        4.0276  0.0000  8.4008

    <class 'braindecode.classifier.EEGClassifier'>[initialized](
      module_=ShallowFBCSPNet(
        (ensuredims): Ensure4d()
        (dimshuffle): Expression(expression=transpose_time_to_spat) 
        (conv_time): Conv2d(1, 40, kernel_size=(25, 1), stride=(1, 1))
        (conv_spat): Conv2d(40, 40, kernel_size=(1, 22), stride=(1, 1), bias=False)
        (bnorm): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv_nonlin_exp): Expression(expression=square) 
        (pool): AvgPool2d(kernel_size=(75, 1), stride=(15, 1), padding=0)
        (pool_nonlin_exp): Expression(expression=safe_log) 
        (drop): Dropout(p=0.5, inplace=False)
        (conv_classifier): Conv2d(40, 4, kernel_size=(69, 1), stride=(1, 1))
        (softmax): LogSoftmax(dim=1)
        (squeeze): Expression(expression=squeeze_final_output) 
      ),
    )



.. GENERATED FROM PYTHON SOURCE LINES 255-260

Manually composing Transforms
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It would be equivalent (although more verbose) to pass to ``EEGClassifier`` a
composition of the same transforms:

.. GENERATED FROM PYTHON SOURCE LINES 260-265

.. code-block:: default


    from braindecode.augmentation import Compose

    composed_transforms = Compose(transforms=transforms)








.. GENERATED FROM PYTHON SOURCE LINES 266-274

Setting the data augmentation at the Dataset level
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Also note that it is also possible for most of the transforms to pass them
directly to the WindowsDataset object through the `transform` argument, as
most commonly done in other libraries. However, it is advised to use the
``AugmentedDataLoader`` as above, as it is compatible with all transforms and
can be more efficient.

.. GENERATED FROM PYTHON SOURCE LINES 274-276

.. code-block:: default


    train_set.transform = composed_transforms








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  7.502 seconds)

**Estimated memory usage:**  1162 MB


.. _sphx_glr_download_auto_examples_plot_data_augmentation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_data_augmentation.py <plot_data_augmentation.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_data_augmentation.ipynb <plot_data_augmentation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
