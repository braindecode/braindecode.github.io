Search.setIndex({"docnames": ["api", "auto_examples/benchmark_lazy_eager_loading", "auto_examples/index", "auto_examples/plot_bcic_iv_2a_moabb_cropped", "auto_examples/plot_bcic_iv_2a_moabb_trial", "auto_examples/plot_bcic_iv_4_ecog_cropped", "auto_examples/plot_bcic_iv_4_ecog_trial", "auto_examples/plot_benchmark_preprocessing", "auto_examples/plot_custom_dataset_example", "auto_examples/plot_data_augmentation", "auto_examples/plot_data_augmentation_search", "auto_examples/plot_dataset_example", "auto_examples/plot_how_train_test_and_tune", "auto_examples/plot_hyperparameter_tuning_with_scikit-learn", "auto_examples/plot_load_save_datasets", "auto_examples/plot_mne_dataset_example", "auto_examples/plot_regression", "auto_examples/plot_relative_positioning", "auto_examples/plot_sleep_staging_chambon2018", "auto_examples/plot_sleep_staging_eldele2021", "auto_examples/plot_sleep_staging_usleep", "auto_examples/plot_split_dataset", "auto_examples/plot_tuh_discrete_multitarget", "auto_examples/plot_tuh_eeg_corpus", "auto_examples/sg_execution_times", "cite", "generated/braindecode.augmentation.AugmentedDataLoader", "generated/braindecode.augmentation.BandstopFilter", "generated/braindecode.augmentation.ChannelsDropout", "generated/braindecode.augmentation.ChannelsShuffle", "generated/braindecode.augmentation.ChannelsSymmetry", "generated/braindecode.augmentation.Compose", "generated/braindecode.augmentation.FTSurrogate", "generated/braindecode.augmentation.FrequencyShift", "generated/braindecode.augmentation.GaussianNoise", "generated/braindecode.augmentation.IdentityTransform", "generated/braindecode.augmentation.Mixup", "generated/braindecode.augmentation.SensorsRotation", "generated/braindecode.augmentation.SensorsXRotation", "generated/braindecode.augmentation.SensorsYRotation", "generated/braindecode.augmentation.SensorsZRotation", "generated/braindecode.augmentation.SignFlip", "generated/braindecode.augmentation.SmoothTimeMask", "generated/braindecode.augmentation.TimeReverse", "generated/braindecode.augmentation.Transform", "generated/braindecode.augmentation.functional.bandstop_filter", "generated/braindecode.augmentation.functional.channels_dropout", "generated/braindecode.augmentation.functional.channels_permute", "generated/braindecode.augmentation.functional.channels_shuffle", "generated/braindecode.augmentation.functional.frequency_shift", "generated/braindecode.augmentation.functional.ft_surrogate", "generated/braindecode.augmentation.functional.gaussian_noise", "generated/braindecode.augmentation.functional.identity", "generated/braindecode.augmentation.functional.mixup", "generated/braindecode.augmentation.functional.sensors_rotation", "generated/braindecode.augmentation.functional.sign_flip", "generated/braindecode.augmentation.functional.smooth_time_mask", "generated/braindecode.augmentation.functional.time_reverse", "generated/braindecode.classifier.EEGClassifier", "generated/braindecode.datasets.BCICompetitionIVDataset4", "generated/braindecode.datasets.BNCI2014001", "generated/braindecode.datasets.BaseConcatDataset", "generated/braindecode.datasets.BaseDataset", "generated/braindecode.datasets.HGD", "generated/braindecode.datasets.MOABBDataset", "generated/braindecode.datasets.SleepPhysionet", "generated/braindecode.datasets.TUH", "generated/braindecode.datasets.TUHAbnormal", "generated/braindecode.datasets.WindowsDataset", "generated/braindecode.datasets.create_from_X_y", "generated/braindecode.datasets.create_from_mne_epochs", "generated/braindecode.datasets.create_from_mne_raw", "generated/braindecode.datautil.load_concat_dataset", "generated/braindecode.datautil.save_concat_dataset", "generated/braindecode.models.Deep4Net", "generated/braindecode.models.EEGITNet", "generated/braindecode.models.EEGInception", "generated/braindecode.models.EEGNetv1", "generated/braindecode.models.EEGNetv4", "generated/braindecode.models.EEGResNet", "generated/braindecode.models.HybridNet", "generated/braindecode.models.ShallowFBCSPNet", "generated/braindecode.models.SleepStagerBlanco2020", "generated/braindecode.models.SleepStagerChambon2018", "generated/braindecode.models.SleepStagerEldele2021", "generated/braindecode.models.TCN", "generated/braindecode.models.TIDNet", "generated/braindecode.models.TimeDistributed", "generated/braindecode.models.USleep", "generated/braindecode.models.get_output_shape", "generated/braindecode.preprocessing.Preprocessor", "generated/braindecode.preprocessing.create_fixed_length_windows", "generated/braindecode.preprocessing.create_windows_from_events", "generated/braindecode.preprocessing.create_windows_from_target_channels", "generated/braindecode.preprocessing.exponential_moving_demean", "generated/braindecode.preprocessing.exponential_moving_standardize", "generated/braindecode.preprocessing.filterbank", "generated/braindecode.preprocessing.preprocess", "generated/braindecode.preprocessing.scale", "generated/braindecode.regressor.EEGRegressor", "generated/braindecode.samplers.BalancedSequenceSampler", "generated/braindecode.samplers.RecordingSampler", "generated/braindecode.samplers.RelativePositioningSampler", "generated/braindecode.samplers.SequenceSampler", "generated/braindecode.training.CroppedLoss", "generated/braindecode.training.CroppedTimeSeriesEpochScoring", "generated/braindecode.training.CroppedTrialEpochScoring", "generated/braindecode.training.PostEpochTrainScoring", "generated/braindecode.training.TimeSeriesLoss", "generated/braindecode.training.mixup_criterion", "generated/braindecode.training.predict_trials", "generated/braindecode.training.trial_preds_from_window_preds", "generated/braindecode.util.set_random_seeds", "generated/braindecode.visualization.compute_amplitude_gradients", "generated/braindecode.visualization.plot_confusion_matrix", "help", "index", "install", "sg_api_usage", "starting", "whats_new"], "filenames": ["api.rst", "auto_examples/benchmark_lazy_eager_loading.rst", "auto_examples/index.rst", "auto_examples/plot_bcic_iv_2a_moabb_cropped.rst", "auto_examples/plot_bcic_iv_2a_moabb_trial.rst", "auto_examples/plot_bcic_iv_4_ecog_cropped.rst", "auto_examples/plot_bcic_iv_4_ecog_trial.rst", "auto_examples/plot_benchmark_preprocessing.rst", "auto_examples/plot_custom_dataset_example.rst", "auto_examples/plot_data_augmentation.rst", "auto_examples/plot_data_augmentation_search.rst", "auto_examples/plot_dataset_example.rst", "auto_examples/plot_how_train_test_and_tune.rst", "auto_examples/plot_hyperparameter_tuning_with_scikit-learn.rst", "auto_examples/plot_load_save_datasets.rst", "auto_examples/plot_mne_dataset_example.rst", "auto_examples/plot_regression.rst", "auto_examples/plot_relative_positioning.rst", "auto_examples/plot_sleep_staging_chambon2018.rst", "auto_examples/plot_sleep_staging_eldele2021.rst", "auto_examples/plot_sleep_staging_usleep.rst", "auto_examples/plot_split_dataset.rst", "auto_examples/plot_tuh_discrete_multitarget.rst", "auto_examples/plot_tuh_eeg_corpus.rst", "auto_examples/sg_execution_times.rst", "cite.rst", "generated/braindecode.augmentation.AugmentedDataLoader.rst", "generated/braindecode.augmentation.BandstopFilter.rst", "generated/braindecode.augmentation.ChannelsDropout.rst", "generated/braindecode.augmentation.ChannelsShuffle.rst", "generated/braindecode.augmentation.ChannelsSymmetry.rst", "generated/braindecode.augmentation.Compose.rst", "generated/braindecode.augmentation.FTSurrogate.rst", "generated/braindecode.augmentation.FrequencyShift.rst", "generated/braindecode.augmentation.GaussianNoise.rst", "generated/braindecode.augmentation.IdentityTransform.rst", "generated/braindecode.augmentation.Mixup.rst", "generated/braindecode.augmentation.SensorsRotation.rst", "generated/braindecode.augmentation.SensorsXRotation.rst", "generated/braindecode.augmentation.SensorsYRotation.rst", "generated/braindecode.augmentation.SensorsZRotation.rst", "generated/braindecode.augmentation.SignFlip.rst", "generated/braindecode.augmentation.SmoothTimeMask.rst", "generated/braindecode.augmentation.TimeReverse.rst", "generated/braindecode.augmentation.Transform.rst", "generated/braindecode.augmentation.functional.bandstop_filter.rst", "generated/braindecode.augmentation.functional.channels_dropout.rst", "generated/braindecode.augmentation.functional.channels_permute.rst", "generated/braindecode.augmentation.functional.channels_shuffle.rst", "generated/braindecode.augmentation.functional.frequency_shift.rst", "generated/braindecode.augmentation.functional.ft_surrogate.rst", "generated/braindecode.augmentation.functional.gaussian_noise.rst", "generated/braindecode.augmentation.functional.identity.rst", "generated/braindecode.augmentation.functional.mixup.rst", "generated/braindecode.augmentation.functional.sensors_rotation.rst", "generated/braindecode.augmentation.functional.sign_flip.rst", "generated/braindecode.augmentation.functional.smooth_time_mask.rst", "generated/braindecode.augmentation.functional.time_reverse.rst", "generated/braindecode.classifier.EEGClassifier.rst", "generated/braindecode.datasets.BCICompetitionIVDataset4.rst", "generated/braindecode.datasets.BNCI2014001.rst", "generated/braindecode.datasets.BaseConcatDataset.rst", "generated/braindecode.datasets.BaseDataset.rst", "generated/braindecode.datasets.HGD.rst", "generated/braindecode.datasets.MOABBDataset.rst", "generated/braindecode.datasets.SleepPhysionet.rst", "generated/braindecode.datasets.TUH.rst", "generated/braindecode.datasets.TUHAbnormal.rst", "generated/braindecode.datasets.WindowsDataset.rst", "generated/braindecode.datasets.create_from_X_y.rst", "generated/braindecode.datasets.create_from_mne_epochs.rst", "generated/braindecode.datasets.create_from_mne_raw.rst", "generated/braindecode.datautil.load_concat_dataset.rst", "generated/braindecode.datautil.save_concat_dataset.rst", "generated/braindecode.models.Deep4Net.rst", "generated/braindecode.models.EEGITNet.rst", "generated/braindecode.models.EEGInception.rst", "generated/braindecode.models.EEGNetv1.rst", "generated/braindecode.models.EEGNetv4.rst", "generated/braindecode.models.EEGResNet.rst", "generated/braindecode.models.HybridNet.rst", "generated/braindecode.models.ShallowFBCSPNet.rst", "generated/braindecode.models.SleepStagerBlanco2020.rst", "generated/braindecode.models.SleepStagerChambon2018.rst", "generated/braindecode.models.SleepStagerEldele2021.rst", "generated/braindecode.models.TCN.rst", "generated/braindecode.models.TIDNet.rst", "generated/braindecode.models.TimeDistributed.rst", "generated/braindecode.models.USleep.rst", "generated/braindecode.models.get_output_shape.rst", "generated/braindecode.preprocessing.Preprocessor.rst", "generated/braindecode.preprocessing.create_fixed_length_windows.rst", "generated/braindecode.preprocessing.create_windows_from_events.rst", "generated/braindecode.preprocessing.create_windows_from_target_channels.rst", "generated/braindecode.preprocessing.exponential_moving_demean.rst", "generated/braindecode.preprocessing.exponential_moving_standardize.rst", "generated/braindecode.preprocessing.filterbank.rst", "generated/braindecode.preprocessing.preprocess.rst", "generated/braindecode.preprocessing.scale.rst", "generated/braindecode.regressor.EEGRegressor.rst", "generated/braindecode.samplers.BalancedSequenceSampler.rst", "generated/braindecode.samplers.RecordingSampler.rst", "generated/braindecode.samplers.RelativePositioningSampler.rst", "generated/braindecode.samplers.SequenceSampler.rst", "generated/braindecode.training.CroppedLoss.rst", "generated/braindecode.training.CroppedTimeSeriesEpochScoring.rst", "generated/braindecode.training.CroppedTrialEpochScoring.rst", "generated/braindecode.training.PostEpochTrainScoring.rst", "generated/braindecode.training.TimeSeriesLoss.rst", "generated/braindecode.training.mixup_criterion.rst", "generated/braindecode.training.predict_trials.rst", "generated/braindecode.training.trial_preds_from_window_preds.rst", "generated/braindecode.util.set_random_seeds.rst", "generated/braindecode.visualization.compute_amplitude_gradients.rst", "generated/braindecode.visualization.plot_confusion_matrix.rst", "help.rst", "index.rst", "install.rst", "sg_api_usage.rst", "starting.rst", "whats_new.rst"], "titles": ["API Reference", "Benchmarking eager and lazy loading", "Examples", "Cropped Decoding on BCIC IV 2a Dataset", "Trialwise Decoding on BCIC IV 2a Dataset", "Fingers flexion cropped decoding on BCIC IV 4 ECoG Dataset", "Fingers flexion decoding on BCIC IV 4 ECoG Dataset", "Benchmarking preprocessing with parallelization and serialization", "Custom Dataset Example", "Data Augmentation on BCIC IV 2a Dataset", "Searching the best data augmentation on BCIC IV 2a Dataset", "MOABB Dataset Example", "How to train, test and tune your model", "Hyperparameter tuning with scikit-learn", "Load and save dataset example", "MNE Dataset Example", "Regression example on fake data", "Self-supervised learning on EEG with relative positioning", "Sleep staging on the Sleep Physionet dataset using Chambon2018 network", "Sleep staging on the Sleep Physionet dataset using Eldele2021", "Sleep staging on the Sleep Physionet dataset using U-Sleep network", "Split Dataset Example", "Multiple discrete targets with the TUH EEG Corpus", "Process a big data EEG resource (TUH EEG Corpus)", "Computation times", "How to cite Braindecode", "braindecode.augmentation.AugmentedDataLoader", "braindecode.augmentation.BandstopFilter", "braindecode.augmentation.ChannelsDropout", "braindecode.augmentation.ChannelsShuffle", "braindecode.augmentation.ChannelsSymmetry", "braindecode.augmentation.Compose", "braindecode.augmentation.FTSurrogate", "braindecode.augmentation.FrequencyShift", "braindecode.augmentation.GaussianNoise", "braindecode.augmentation.IdentityTransform", "braindecode.augmentation.Mixup", "braindecode.augmentation.SensorsRotation", "braindecode.augmentation.SensorsXRotation", "braindecode.augmentation.SensorsYRotation", "braindecode.augmentation.SensorsZRotation", "braindecode.augmentation.SignFlip", "braindecode.augmentation.SmoothTimeMask", "braindecode.augmentation.TimeReverse", "braindecode.augmentation.Transform", "braindecode.augmentation.functional.bandstop_filter", "braindecode.augmentation.functional.channels_dropout", "braindecode.augmentation.functional.channels_permute", "braindecode.augmentation.functional.channels_shuffle", "braindecode.augmentation.functional.frequency_shift", "braindecode.augmentation.functional.ft_surrogate", "braindecode.augmentation.functional.gaussian_noise", "braindecode.augmentation.functional.identity", "braindecode.augmentation.functional.mixup", "braindecode.augmentation.functional.sensors_rotation", "braindecode.augmentation.functional.sign_flip", "braindecode.augmentation.functional.smooth_time_mask", "braindecode.augmentation.functional.time_reverse", "braindecode.classifier.EEGClassifier", "braindecode.datasets.BCICompetitionIVDataset4", "braindecode.datasets.BNCI2014001", "braindecode.datasets.BaseConcatDataset", "braindecode.datasets.BaseDataset", "braindecode.datasets.HGD", "braindecode.datasets.MOABBDataset", "braindecode.datasets.SleepPhysionet", "braindecode.datasets.TUH", "braindecode.datasets.TUHAbnormal", "braindecode.datasets.WindowsDataset", "braindecode.datasets.create_from_X_y", "braindecode.datasets.create_from_mne_epochs", "braindecode.datasets.create_from_mne_raw", "braindecode.datautil.load_concat_dataset", "braindecode.datautil.save_concat_dataset", "braindecode.models.Deep4Net", "braindecode.models.EEGITNet", "braindecode.models.EEGInception", "braindecode.models.EEGNetv1", "braindecode.models.EEGNetv4", "braindecode.models.EEGResNet", "braindecode.models.HybridNet", "braindecode.models.ShallowFBCSPNet", "braindecode.models.SleepStagerBlanco2020", "braindecode.models.SleepStagerChambon2018", "braindecode.models.SleepStagerEldele2021", "braindecode.models.TCN", "braindecode.models.TIDNet", "braindecode.models.TimeDistributed", "braindecode.models.USleep", "braindecode.models.get_output_shape", "braindecode.preprocessing.Preprocessor", "braindecode.preprocessing.create_fixed_length_windows", "braindecode.preprocessing.create_windows_from_events", "braindecode.preprocessing.create_windows_from_target_channels", "braindecode.preprocessing.exponential_moving_demean", "braindecode.preprocessing.exponential_moving_standardize", "braindecode.preprocessing.filterbank", "braindecode.preprocessing.preprocess", "braindecode.preprocessing.scale", "braindecode.regressor.EEGRegressor", "braindecode.samplers.BalancedSequenceSampler", "braindecode.samplers.RecordingSampler", "braindecode.samplers.RelativePositioningSampler", "braindecode.samplers.SequenceSampler", "braindecode.training.CroppedLoss", "braindecode.training.CroppedTimeSeriesEpochScoring", "braindecode.training.CroppedTrialEpochScoring", "braindecode.training.PostEpochTrainScoring", "braindecode.training.TimeSeriesLoss", "braindecode.training.mixup_criterion", "braindecode.training.predict_trials", "braindecode.training.trial_preds_from_window_preds", "braindecode.util.set_random_seeds", "braindecode.visualization.compute_amplitude_gradients", "braindecode.visualization.plot_confusion_matrix", "Frequently Asked Questions (FAQ)", "Braindecode", "Install via <code class=\"code docutils literal notranslate\"><span class=\"pre\">pip</span></code> or <code class=\"code docutils literal notranslate\"><span class=\"pre\">conda</span></code>", "Unused API Entries", "Getting starting", "What\u2019s new"], "terms": {"thi": [0, 1, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 38, 39, 40, 58, 59, 60, 61, 63, 65, 66, 67, 71, 75, 76, 77, 78, 84, 88, 91, 92, 94, 95, 98, 99, 101, 107, 112, 115, 117, 120], "i": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 22, 23, 25, 27, 31, 32, 33, 36, 37, 42, 44, 45, 49, 50, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 68, 69, 70, 71, 74, 75, 76, 77, 78, 81, 82, 83, 84, 88, 90, 91, 92, 97, 98, 99, 102, 107, 111, 112, 116, 120], "class": [0, 1, 3, 4, 9, 10, 17, 18, 19, 20, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 50, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 114, 120], "camelcas": 0, "name": [0, 5, 6, 7, 8, 14, 16, 17, 18, 19, 20, 22, 23, 30, 58, 60, 61, 62, 64, 69, 72, 90, 99, 105, 106, 107, 117, 120], "function": [0, 1, 3, 4, 5, 6, 7, 9, 10, 13, 16, 17, 18, 19, 20, 22, 23, 25, 32, 44, 58, 61, 74, 76, 79, 81, 90, 92, 98, 99, 105, 106, 107, 112, 118, 120], "underscore_cas": 0, "braindecod": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 118, 119, 120], "datautil": [0, 14, 17, 68, 118, 120], "click": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "here": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 33, 49, 71, 91, 92, 119], "download": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 66, 67, 118], "full": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 112], "exampl": [1, 3, 4, 5, 6, 7, 10, 12, 13, 18, 19, 20, 22, 23, 24, 27, 29, 30, 34, 35, 36, 37, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 75, 85, 115, 119, 120], "code": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 75, 76, 84, 85, 86, 115, 120], "In": [1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 27, 34, 36, 37, 38, 39, 40, 42, 45, 51, 53, 54, 56, 58, 60, 99, 112], "we": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 25, 63, 99, 112, 115, 117, 119], "compar": [1, 3, 7, 12, 17, 22], "execut": [1, 7, 8, 15, 24, 63, 97], "time": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 43, 57, 58, 59, 61, 65, 68, 75, 83, 88, 94, 95, 99, 100, 104, 105, 108, 111, 120], "memori": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 92], "requir": [1, 7, 8, 11, 17, 20, 22, 23, 44, 58, 63, 68, 99, 117], "1": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 50, 51, 53, 54, 56, 58, 59, 60, 61, 63, 65, 66, 67, 72, 74, 76, 79, 81, 82, 84, 86, 88, 89, 91, 92, 93, 94, 95, 99, 100, 101, 109, 110, 111, 114], "e": [1, 3, 4, 7, 12, 17, 18, 19, 20, 23, 27, 30, 34, 42, 44, 45, 47, 51, 56, 58, 62, 65, 66, 67, 68, 71, 76, 82, 83, 84, 86, 87, 88, 90, 91, 92, 96, 99, 103, 107, 114, 120], "preload": [1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 65, 66, 67, 71, 72, 91, 92, 93, 97, 120], "entir": [1, 11, 17, 120], "data": [1, 2, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 48, 51, 53, 54, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 74, 81, 89, 90, 91, 92, 94, 95, 97, 98, 99, 104, 109, 112, 114, 115, 116, 119, 120], "2": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 32, 33, 34, 36, 42, 45, 50, 51, 53, 56, 58, 60, 63, 65, 74, 76, 77, 78, 79, 82, 84, 86, 88, 95, 99, 100, 101, 109, 110], "onli": [1, 3, 5, 6, 12, 14, 17, 18, 19, 20, 21, 23, 31, 44, 58, 63, 65, 71, 74, 75, 76, 77, 78, 81, 92, 99, 108, 115, 120], "from": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 28, 29, 32, 36, 37, 38, 39, 40, 46, 48, 50, 54, 58, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 91, 92, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 120], "disk": [1, 7, 23, 66, 67, 92], "when": [1, 3, 7, 12, 17, 18, 19, 20, 25, 31, 32, 37, 38, 39, 40, 44, 50, 54, 58, 59, 64, 69, 70, 71, 88, 91, 92, 97, 99, 112, 115, 120], "thei": [1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 120], "ar": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27, 36, 53, 58, 61, 68, 69, 71, 91, 92, 96, 99, 102, 104, 108, 115, 117, 119, 120], "also": [1, 4, 9, 10, 11, 13, 14, 17, 18, 19, 20, 21, 23, 25, 58, 68, 76, 84, 99, 110, 115, 117], "includ": [1, 12, 18, 20, 23, 29, 48, 64, 91, 92, 115, 116], "some": [1, 3, 4, 5, 6, 7, 8, 11, 13, 14, 15, 18, 19, 20, 22, 23, 25, 61, 112], "other": [1, 5, 6, 7, 9, 10, 12, 14, 17, 18, 19, 20, 23, 44, 58, 63, 65, 84, 99, 117], "experi": [1, 12, 59, 63], "paramet": [1, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 114, 120], "comparison": [1, 3, 4, 10], "sake": 1, "complet": [1, 3, 58, 99], "g": [1, 4, 7, 12, 17, 18, 19, 20, 23, 27, 30, 32, 34, 42, 44, 45, 47, 50, 51, 58, 62, 65, 66, 67, 68, 71, 83, 86, 87, 88, 90, 91, 92, 96, 99, 103, 107, 114, 120], "num_work": [1, 17, 110], "cuda": [1, 3, 4, 5, 6, 9, 10, 12, 13, 16, 17, 18, 19, 20, 58, 99, 112], "batch_siz": [1, 3, 4, 5, 6, 9, 10, 12, 13, 16, 17, 18, 19, 20, 22, 27, 36, 37, 45, 53, 54, 58, 80, 82, 83, 84, 85, 86, 87, 89, 99, 104, 108, 110, 113], "etc": [1, 4, 23, 90], "while": [1, 12, 17, 63, 82, 111], "might": [1, 7, 12, 13, 17, 92, 101, 117], "preprocess": [1, 2, 3, 11, 14, 16, 21, 22, 23, 24, 61, 65, 116, 118, 120], "step": [1, 4, 5, 6, 7, 9, 10, 12, 13, 14, 17, 18, 19, 20, 22, 23, 71, 91, 92, 115], "continu": [1, 5, 6, 7, 11, 16, 62, 63, 69, 70, 71, 91, 92, 98, 120], "tempor": [1, 17, 18, 19, 74, 75, 76, 81, 82, 83, 84, 85, 86, 88, 120], "filter": [1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 17, 18, 19, 20, 27, 45, 60, 74, 76, 81, 83, 85, 86, 88, 90, 96, 120], "resampl": [1, 11, 14, 17, 23, 65], "allow": [1, 9, 12, 17, 31, 58, 71, 76, 91, 92, 99, 120], "fast": [1, 7, 23, 112], "access": [1, 17, 18, 19, 20, 23, 75, 101], "dure": [1, 3, 4, 5, 6, 12, 13, 17, 18, 19, 20, 23, 58, 59, 99, 120], "train": [1, 2, 3, 16, 21, 22, 23, 24, 36, 53, 58, 61, 63, 64, 68, 81, 90, 92, 95, 97, 99, 112, 118, 120], "howev": [1, 3, 4, 5, 6, 7, 9, 12, 17, 20, 92, 99], "come": [1, 4, 5, 6, 13, 103, 112], "expens": 1, "larg": [1, 3, 5, 7, 17, 61, 92], "usag": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 115, 120], "can": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 25, 33, 37, 54, 58, 61, 65, 66, 67, 68, 88, 99, 110, 117, 120], "ultim": 1, "becom": [1, 7, 12], "imposs": 1, "dataset": [1, 2, 7, 16, 22, 23, 24, 26, 28, 31, 32, 33, 41, 42, 44, 58, 72, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 101, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 116, 117, 118, 120], "doe": [1, 3, 5, 6, 7, 12, 14, 35, 58, 92, 99, 115], "fit": [1, 3, 4, 5, 6, 9, 12, 13, 16, 17, 18, 19, 20, 58, 92, 99, 118, 119], "tuh": [1, 2, 24, 61, 67, 90, 91, 97, 98, 120], "eeg": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 18, 19, 20, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 63, 65, 66, 67, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 90, 91, 92, 97, 98, 101, 102, 109, 112, 114, 116, 120], "": [1, 5, 6, 7, 9, 10, 17, 18, 19, 20, 22, 30, 32, 34, 37, 38, 39, 40, 47, 50, 51, 54, 58, 59, 60, 62, 63, 64, 65, 66, 67, 77, 78, 83, 85, 88, 90, 99, 100, 104, 107, 108], "5": [1, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 58, 60, 74, 76, 81, 82, 83, 84, 88, 99], "tb": 1, "record": [1, 5, 6, 7, 11, 16, 18, 19, 20, 22, 23, 59, 60, 63, 65, 66, 67, 71, 91, 92, 100, 101, 102, 120], "most": [1, 9, 18, 19, 20, 102, 115], "machin": [1, 7, 12, 23, 25, 27, 30, 34, 42, 45, 47, 51, 56, 58, 99], "avoid": [1, 3, 7, 12, 18, 19, 20, 22, 23, 65, 99, 120], "potenti": [1, 7], "issu": [1, 7, 115], "mean": [1, 3, 5, 6, 7, 9, 10, 11, 12, 16, 63, 74, 78, 81, 94, 95, 99, 115], "us": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22, 23, 24, 25, 27, 29, 30, 34, 36, 37, 38, 39, 40, 43, 46, 48, 50, 51, 54, 58, 60, 63, 68, 76, 99, 107, 110, 115, 117, 118, 119, 120], "introduc": [1, 17, 18, 19, 20], "file": [1, 7, 8, 14, 15, 17, 23, 24, 61, 65, 66, 72, 103, 115, 120], "read": [1, 8, 14, 15, 23, 66, 67, 72, 92], "overhead": [1, 92], "everi": [1, 12, 14, 18, 19, 20, 63], "an": [1, 3, 5, 6, 12, 14, 16, 17, 19, 23, 31, 37, 38, 39, 40, 44, 58, 60, 62, 63, 68, 71, 75, 76, 82, 84, 85, 87, 88, 90, 92, 99, 101, 107, 115, 116, 120], "must": [1, 7, 23, 68, 74, 76, 81, 82, 87, 90, 91, 100, 120], "extract": [1, 3, 4, 5, 6, 8, 11, 12, 13, 15, 22, 23, 68, 76, 82, 84, 91, 92, 100, 102], "have": [1, 3, 4, 5, 6, 7, 8, 10, 12, 13, 15, 17, 20, 21, 23, 37, 42, 54, 56, 58, 69, 70, 71, 90, 91, 99, 107, 115], "implement": [1, 7, 12, 18, 19, 36, 44, 53, 58, 75, 76, 77, 78, 99, 109, 110, 116, 120], "differ": [1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 17, 18, 19, 20, 21, 60, 76, 88, 102, 117], "accomod": 1, "natur": [1, 5, 6, 59], "window": [1, 7, 11, 14, 16, 21, 22, 23, 58, 61, 68, 69, 70, 71, 76, 80, 82, 83, 84, 85, 86, 87, 91, 92, 98, 99, 100, 101, 102, 103, 110, 111, 120], "overal": 1, "though": [1, 7, 12], "reduc": [1, 7, 17, 19, 65, 92], "impact": 1, "pytorch": [1, 3, 4, 5, 6, 9, 13, 20, 22, 58, 76, 99, 110, 112, 117], "dataload": [1, 9, 10, 17, 22, 26, 58, 99, 110], "which": [1, 3, 5, 6, 7, 9, 10, 11, 12, 13, 17, 18, 19, 20, 23, 25, 26, 29, 32, 37, 48, 50, 54, 58, 61, 62, 63, 68, 84, 87, 99, 101, 102, 103, 115, 119], "dispatch": 1, "multipl": [1, 2, 3, 5, 6, 7, 9, 10, 18, 19, 21, 24, 58, 61, 66, 87, 88, 91, 96, 98, 99, 110, 120], "process": [1, 2, 5, 6, 7, 12, 17, 24, 61, 66, 90, 91, 97, 98, 120], "To": [1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 16, 17, 18, 19, 20, 117], "enabl": [1, 3, 7, 58, 60, 86, 99, 120], "save": [1, 2, 5, 6, 7, 10, 12, 24, 61, 64, 72, 90, 92, 97, 120], "mne": [1, 2, 4, 5, 6, 8, 9, 11, 13, 14, 18, 19, 20, 22, 23, 24, 37, 54, 59, 61, 62, 65, 68, 70, 71, 90, 91, 92, 96, 115], "compat": [1, 8, 9, 15, 23, 58, 69, 99, 120], "format": [1, 8, 10, 12, 15, 69, 70, 71], "fif": [1, 14, 61, 72, 120], "edf": [1, 8, 15, 22, 23], "object": [1, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 31, 62, 65, 66, 67, 68, 71, 90, 91, 92, 97, 114, 120], "been": [1, 3, 4, 5, 6, 7, 9, 10, 19, 75, 76, 77, 78, 109, 115, 120], "instanti": [1, 3, 4, 5, 6, 9, 10, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 51, 58, 64, 99, 120], "fals": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 32, 36, 37, 38, 39, 40, 50, 54, 58, 59, 61, 62, 65, 66, 67, 68, 71, 73, 74, 81, 82, 83, 84, 88, 90, 91, 92, 93, 96, 97, 99, 102, 105, 106, 112, 114, 120], "author": [1, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 75, 76, 77, 78], "hubert": [1, 7, 11, 17, 18, 120], "banvil": [1, 7, 10, 11, 17, 18, 102, 120], "jbanvil": [1, 7, 11, 17, 18], "gmail": [1, 5, 6, 7, 8, 11, 14, 15, 16, 17, 18, 19, 21, 22, 23], "com": [1, 3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 32, 36, 50, 53, 66, 67, 75, 76, 84, 85, 86, 88, 100, 109, 117], "licens": [1, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "bsd": [1, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "3": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 34, 36, 37, 51, 53, 54, 58, 59, 60, 63, 65, 74, 76, 79, 82, 86, 99, 100, 101, 110], "claus": [1, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 20, 21, 22, 23], "itertool": [1, 7], "import": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 32, 50, 115], "product": [1, 7], "torch": [1, 3, 4, 5, 6, 9, 10, 12, 13, 16, 17, 18, 19, 20, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 76, 80, 82, 83, 84, 85, 86, 87, 99, 104, 108, 109, 110, 112, 120], "nn": [1, 3, 4, 5, 6, 9, 10, 12, 13, 16, 17, 18, 19, 20, 58, 76, 87, 88, 99, 110], "optim": [1, 3, 4, 5, 6, 9, 10, 12, 13, 16, 17, 18, 19, 20, 58, 63, 99, 117], "util": [1, 3, 4, 5, 6, 9, 10, 13, 14, 16, 17, 18, 19, 20, 22, 117, 120], "numpi": [1, 3, 4, 5, 6, 8, 9, 10, 12, 13, 16, 17, 18, 19, 20, 23, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 50, 51, 54, 58, 98, 99, 112, 114], "np": [1, 5, 6, 9, 10, 12, 16, 17, 18, 19, 20, 23, 58, 94, 95, 98, 99, 100, 101, 102, 103, 110], "panda": [1, 3, 4, 5, 6, 7, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 58, 61, 62, 68, 71, 99], "pd": [1, 3, 4, 5, 6, 7, 10, 12, 13, 16, 17, 18, 19, 20, 61, 62, 68, 100, 101, 102, 103], "seaborn": [1, 3, 4, 5, 6, 17, 23], "sn": 1, "tuhabnorm": [1, 14, 120], "create_fixed_length_window": [1, 5, 7, 11, 16, 17, 22, 23, 120], "model": [1, 2, 16, 22, 23, 24, 25, 34, 51, 58, 61, 64, 90, 92, 95, 97, 99, 100, 104, 105, 106, 107, 108, 109, 110, 112, 113, 116, 118, 120], "shallowfbcspnet": [1, 3, 4, 5, 6, 9, 10, 12, 13, 16], "deep4net": [1, 16], "set_log_level": [1, 5, 6, 22, 23], "warn": [1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 16, 17, 18, 19, 60, 84, 91, 92, 112, 120], "messag": [1, 22, 23, 115], "everytim": [1, 22, 23], "start": [1, 3, 4, 7, 9, 10, 12, 13, 22, 23, 42, 56, 58, 71, 91, 92, 99], "set": [1, 3, 4, 5, 6, 7, 8, 10, 12, 13, 15, 16, 18, 19, 20, 23, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 50, 53, 58, 60, 61, 63, 74, 76, 81, 82, 83, 86, 88, 91, 92, 99, 112, 120], "two": [1, 3, 7, 10, 12, 14, 17, 18, 19, 20, 23, 36, 42, 53, 60, 63, 65, 82, 102, 103, 109, 117], "intern": [1, 7, 9, 11, 20, 21, 23, 34, 36, 37, 38, 39, 40, 51, 53, 54, 90], "affect": [1, 3, 107], "gener": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 50, 51, 58, 82, 85, 99, 107, 114, 120], "python": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 112, 116], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116], "line": [1, 3, 4, 5, 6, 16, 60, 115], "57": 1, "62": [1, 17], "n_job": [1, 7, 17, 23, 66, 67, 72, 91, 92, 93, 97, 120], "8": [1, 3, 4, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 19, 20, 21, 24, 76, 77, 78, 83, 96], "backend": [1, 3, 4, 5, 6, 9, 10, 12, 13, 16, 17, 18, 19, 20, 112, 120], "cudnn": [1, 3, 4, 5, 6, 9, 10, 12, 13, 16, 17, 18, 19, 20, 112, 120], "true": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 36, 37, 38, 39, 40, 58, 61, 62, 65, 66, 67, 68, 71, 74, 79, 81, 82, 83, 84, 88, 90, 91, 92, 93, 96, 99, 102, 105, 106, 107, 110, 112], "automat": [1, 23, 59, 86], "algorithm": 1, "set_num_thread": 1, "avail": [1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 18, 19, 20, 22, 23, 59, 65, 76, 84, 91, 92, 100, 101], "number": [1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 17, 18, 19, 20, 22, 23, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 51, 54, 56, 58, 61, 65, 66, 71, 72, 74, 75, 76, 81, 82, 83, 84, 85, 86, 88, 91, 92, 96, 97, 99, 100, 101, 102, 103, 110, 111], "thread": 1, "next": [1, 7, 9, 10, 11, 14, 17, 18, 19, 20, 22, 23], "defin": [1, 3, 4, 5, 11, 13, 17, 18, 19, 20, 30, 44, 47, 58, 68, 86, 92, 99, 102], "few": [1, 7, 17, 18, 19, 20, 120], "autom": [1, 12], "For": [1, 3, 4, 5, 6, 10, 12, 13, 17, 88, 101, 107, 109, 112, 116], "purpos": [1, 7, 9], "abnorm": [1, 67], "corpu": [1, 2, 24, 61, 66, 67, 90, 91, 97, 98], "slide": [1, 11, 91], "bundl": 1, "them": [1, 3, 7, 8, 9, 10, 12, 15, 17, 23, 58, 61, 99], "neural": [1, 3, 4, 5, 6, 10, 13, 17, 18, 19, 20, 25, 34, 51, 74, 76, 80, 81, 82, 83, 84, 86, 89, 114], "network": [1, 2, 3, 4, 5, 6, 13, 17, 19, 24, 25, 34, 51, 58, 61, 65, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 97, 98, 99, 101, 103, 110, 112, 114, 120], "epoch": [1, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 58, 61, 68, 70, 71, 90, 91, 92, 99, 102, 105, 106, 107, 120], "each": [1, 5, 6, 7, 8, 10, 12, 13, 15, 18, 19, 20, 22, 23, 26, 27, 28, 32, 37, 41, 43, 45, 46, 50, 54, 55, 57, 58, 59, 60, 61, 63, 65, 76, 85, 88, 91, 92, 99, 101, 103, 105, 106, 107, 111], "one": [1, 3, 5, 6, 7, 10, 11, 12, 18, 19, 20, 31, 36, 42, 56, 58, 60, 61, 88, 91, 92, 99, 100, 101, 102, 115], "so": [1, 3, 4, 5, 6, 7, 12, 13, 14, 17, 18, 19, 20, 27, 30, 58, 88, 91, 96, 99], "report": [1, 12, 17, 18, 19, 20, 23, 66, 67, 115], "total": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 60], "taken": [1, 5, 6, 17], "prepar": [1, 7, 11], "def": [1, 5, 6, 7, 9, 11, 12, 16, 17, 18, 19, 20, 23], "load_example_data": 1, "window_len_": 1, "n_record": [1, 101], "10": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 30, 37, 38, 39, 40, 54, 58, 59, 74, 75, 76, 80, 81, 82, 84, 86, 99, 100, 114], "creat": [1, 7, 8, 11, 14, 15, 21, 22, 23, 58, 61, 68, 69, 70, 71, 91, 92, 99, 110, 117, 120], "subject": [1, 11, 14, 15, 17, 18, 19, 20, 21, 22, 23, 27, 34, 42, 45, 51, 56, 59, 60, 62, 63, 64, 65, 101], "bool": [1, 32, 36, 37, 38, 39, 40, 50, 54, 58, 59, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 74, 81, 82, 83, 84, 85, 88, 90, 91, 92, 96, 97, 99, 102, 107, 110, 112, 114], "If": [1, 5, 6, 12, 14, 15, 21, 22, 23, 25, 27, 36, 58, 59, 60, 61, 63, 64, 65, 66, 67, 71, 72, 74, 81, 82, 83, 84, 86, 88, 90, 91, 92, 96, 97, 98, 99, 100, 102, 107, 108, 109, 110, 115], "otherwis": [1, 3, 5, 71, 91, 92], "int": [1, 3, 4, 7, 9, 10, 12, 13, 16, 17, 18, 19, 23, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 50, 51, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 88, 91, 92, 94, 95, 97, 99, 100, 101, 102, 103, 110, 112, 114], "length": [1, 3, 6, 13, 18, 20, 23, 36, 53, 61, 71, 74, 81, 84, 86, 91, 92, 120], "second": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 30, 60, 63, 66, 67, 82, 83, 84, 88], "list": [1, 3, 4, 7, 9, 12, 21, 25, 26, 30, 31, 38, 39, 40, 47, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 76, 91, 92, 96, 97, 99, 109, 111, 114, 120], "return": [1, 5, 6, 8, 12, 13, 15, 16, 17, 18, 19, 20, 21, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 62, 66, 67, 68, 69, 70, 71, 72, 82, 83, 84, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 107, 109, 110, 111, 114, 120], "windows_d": [1, 7, 11, 91, 92], "baseconcatdataset": [1, 5, 7, 16, 17, 18, 19, 21, 23, 58, 69, 70, 71, 72, 91, 92, 97, 99, 101, 110, 120], "The": [1, 3, 5, 6, 7, 9, 10, 12, 13, 14, 17, 19, 20, 21, 23, 26, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 42, 49, 58, 60, 62, 63, 68, 76, 84, 96, 99, 109, 110, 114], "do": [1, 3, 12, 13, 23, 58, 69, 70, 71, 88, 91, 92, 99, 103, 112], "all": [1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 23, 33, 34, 42, 49, 51, 56, 58, 59, 60, 63, 64, 65, 76, 91, 92, 99, 107, 120], "share": [1, 3, 4, 5, 6, 9, 10, 13, 16, 17, 18, 19, 20], "same": [1, 4, 5, 6, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 33, 42, 49, 56, 58, 63, 65, 84, 99, 102], "sampl": [1, 3, 4, 5, 6, 8, 9, 10, 12, 13, 17, 18, 19, 27, 28, 29, 32, 33, 36, 37, 38, 39, 40, 42, 45, 48, 49, 50, 56, 58, 60, 62, 65, 69, 71, 75, 76, 82, 83, 84, 86, 88, 91, 92, 100, 101, 102, 103, 109, 115, 120], "rate": [1, 3, 4, 5, 12, 17, 58, 76, 82, 83, 84, 88, 99, 120], "follow": [1, 9, 10, 12, 17, 18, 19, 20, 23, 76, 92, 117], "assum": [1, 58, 99, 104, 108, 120], "alreadi": [1, 3, 4, 5, 6, 9, 12, 15, 17, 18, 19, 20, 61, 62, 68, 97, 115, 117], "common": [1, 23], "recording_id": [1, 7, 17, 18, 19, 20, 22, 23, 65, 66, 67], "rang": [1, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 32, 50, 59, 96, 114], "d": [1, 3, 4, 5, 6, 9, 10, 11, 12, 13, 17, 21, 22, 23, 28, 29, 32, 46, 48, 50, 74, 78, 80, 81, 82, 86, 102, 114, 120], "tuh_path": [1, 22, 23], "target_nam": [1, 14, 16, 22, 23, 61, 62, 66, 67, 72, 120], "patholog": [1, 14, 67], "f": [1, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 22, 34, 51, 74, 76, 80, 81, 86, 114, 117], "0": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 32, 34, 35, 36, 44, 46, 48, 50, 53, 58, 60, 61, 65, 66, 67, 71, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 88, 91, 92, 94, 95, 98, 99, 101, 110, 114], "raw": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 23, 61, 62, 65, 66, 67, 71, 90, 91, 92, 96, 98, 116, 117], "info": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 21, 23, 61, 68, 101, 103, 115, 120], "sfreq": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 27, 33, 45, 49, 69, 76, 82, 83, 84, 88, 120], "window_len_sampl": 1, "window_stride_sampl": [1, 3, 5, 8, 11, 15, 16, 17, 18, 19, 20, 22, 23, 69, 70, 71, 91, 92], "4": [1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 59, 60, 61, 63, 74, 75, 76, 77, 78, 81, 83, 86, 88, 89, 90, 91, 93, 95, 96, 97, 100, 101, 105, 106, 108, 112], "start_offset_sampl": [1, 5, 11, 16, 22, 91], "stop_offset_sampl": [1, 5, 11, 16, 22, 91, 120], "none": [1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 77, 78, 81, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 105, 106, 107, 112, 114, 120], "window_size_sampl": [1, 3, 5, 6, 8, 11, 15, 16, 17, 18, 19, 20, 22, 23, 69, 70, 71, 91, 92, 93], "drop_last_window": [1, 3, 5, 8, 11, 15, 16, 22, 23, 69, 70, 71, 91, 92], "drop_bad_window": [1, 16, 71, 91, 92, 93], "drop": [1, 3, 4, 8, 9, 10, 14, 15, 21, 28, 46, 71, 92, 96], "bad": [1, 8, 14, 15, 21, 115], "xxx": [1, 77, 78, 79], "could": [1, 10, 12, 17], "parallel": [1, 2, 23, 24, 61, 65, 66, 72, 76, 90, 91, 92, 97, 120], "itself": [1, 11, 115], "drop_bad": [1, 71, 91, 92], "assert": [1, 3, 4, 5, 6, 9, 10, 12, 13, 23], "create_example_model": 1, "n_channel": [1, 8, 9, 10, 12, 15, 16, 17, 18, 19, 22, 36, 37, 53, 54, 69, 80, 82, 83, 84, 85, 86, 87, 94, 95, 98], "n_class": [1, 3, 4, 5, 9, 10, 12, 13, 16, 17, 18, 19, 20, 58, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 99, 104, 108, 110], "kind": 1, "shallow": [1, 3, 4, 5, 6, 13, 16, 81], "loss": [1, 3, 4, 5, 6, 16, 17, 18, 19, 20, 58, 99, 104, 108, 109], "channel": [1, 5, 6, 8, 15, 17, 18, 19, 20, 23, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 42, 46, 47, 48, 49, 50, 51, 53, 54, 56, 65, 68, 69, 74, 75, 76, 81, 82, 83, 84, 85, 86, 88, 91, 92, 96, 120], "input": [1, 3, 4, 5, 6, 9, 13, 19, 20, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 74, 75, 76, 81, 82, 83, 84, 85, 87, 88, 99, 120], "n_time": [1, 8, 15, 16, 23, 36, 53, 69, 80, 82, 83, 84, 85, 86, 87, 94, 95, 98, 104, 108], "output": [1, 3, 5, 17, 21, 23, 58, 74, 75, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 99], "str": [1, 3, 4, 22, 26, 58, 59, 61, 62, 64, 66, 67, 68, 71, 72, 74, 81, 90, 91, 92, 97, 99, 107, 114], "deep": [1, 3, 4, 5, 6, 9, 10, 12, 13, 16, 17, 18, 19, 20, 25, 34, 51, 74, 76, 80, 81, 83, 84, 86, 114, 116, 117], "move": [1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 16, 59, 94, 95], "devic": [1, 3, 4, 5, 6, 9, 10, 12, 13, 16, 17, 18, 19, 20, 26, 58, 99, 120], "modul": [1, 4, 5, 6, 10, 13, 17, 18, 19, 20, 58, 76, 84, 87, 99, 110, 112, 114, 116, 120], "input_window_sampl": [1, 3, 4, 5, 6, 9, 10, 12, 13, 16, 74, 75, 76, 77, 78, 79, 80, 81, 86, 89], "n_filters_tim": [1, 16, 74, 81], "40": [1, 3, 4, 8, 9, 10, 14, 16, 17, 20, 81], "filter_time_length": [1, 74, 81], "25": [1, 3, 4, 5, 6, 9, 10, 16, 17, 18, 20, 60, 74, 76, 77, 78, 81, 83], "n_filters_spat": [1, 16, 74, 81], "pool_time_length": [1, 74, 81], "75": [1, 3, 4, 9, 18, 81, 86], "pool_time_strid": [1, 74, 81], "15": [1, 3, 4, 5, 9, 12, 17, 19, 20, 22, 23, 24, 37, 38, 39, 40, 81, 86], "final_conv_length": [1, 3, 4, 5, 6, 9, 10, 12, 13, 16, 74, 77, 78, 81], "auto": [1, 4, 6, 8, 9, 10, 12, 13, 15, 58, 74, 77, 78, 81, 99, 120], "split_first_lay": [1, 74, 79, 81], "batch_norm": [1, 74, 81], "batch_norm_alpha": [1, 74, 76, 79, 81], "drop_prob": [1, 74, 75, 76, 77, 78, 81, 85, 86], "elif": [1, 16], "n_filters_2": [1, 16, 74], "50": [1, 4, 12, 13, 15, 17, 18, 19, 24, 60, 74], "filter_length_2": [1, 74], "n_filters_3": [1, 16, 74], "100": [1, 3, 4, 6, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 23, 27, 42, 60, 74, 88], "filter_length_3": [1, 74], "n_filters_4": [1, 16, 74], "200": [1, 5, 6, 19, 74], "filter_length_4": [1, 74], "first_pool_mod": [1, 74], "max": [1, 7, 74, 77, 81, 83, 86, 88, 95], "later_pool_mod": [1, 74], "double_time_conv": 1, "stride_before_pool": [1, 16, 74], "els": [1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 16, 17, 18, 19, 20, 23, 58, 99], "rais": [1, 10, 12, 13, 16, 58, 71, 92, 97, 120], "valueerror": [1, 16], "adam": [1, 17, 18, 19, 20], "nllloss": [1, 4, 9, 10, 12, 13, 58, 88], "run_train": 1, "n_epoch": [1, 3, 4, 5, 6, 9, 10, 12, 13, 16, 17, 18, 19, 20], "run": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 58, 60, 63, 71, 82, 90, 91, 92, 99, 101, 112, 115, 117], "loop": [1, 17, 18, 19, 20, 58, 99], "loader": [1, 9, 10, 17], "serv": [1, 60, 62, 68], "x": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 69, 70, 71, 80, 82, 83, 84, 85, 86, 87, 88, 94, 95, 98, 99, 104, 107, 108, 110], "y": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 69, 70, 71, 99, 107], "loss_val": 1, "_": [1, 3, 7, 8, 9, 12, 17], "zero_grad": 1, "long": [1, 6, 63], "append": [1, 3, 4, 5, 6, 7, 16, 23, 58, 99], "item": [1, 3, 4, 11, 14, 15, 17], "backward": 1, "print": [1, 5, 6, 8, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 58, 99, 115], "hyperparamet": [1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 24, 36, 58, 61, 64, 81, 90, 92, 95, 97, 98, 99, 112, 120], "want": [1, 4, 12, 13, 14, 16, 21, 22, 23, 58, 99, 116, 117, 119], "64": [1, 3, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 19, 20, 78, 83], "256": [1, 120], "minibatch": 1, "size": [1, 3, 4, 5, 7, 17, 27, 42, 45, 56, 58, 69, 70, 71, 76, 82, 83, 84, 85, 86, 88, 89, 91, 92, 99, 102, 104, 108, 110, 114], "pin_memori": 1, "whether": [1, 17, 28, 29, 30, 32, 37, 38, 39, 40, 41, 43, 44, 50, 54, 58, 61, 68, 69, 70, 71, 72, 74, 81, 85, 91, 96, 97, 99, 102, 107, 112, 115], "pin": 1, "is_avail": [1, 3, 4, 5, 6, 9, 10, 12, 13, 16, 17, 18, 19, 20], "n_repetit": 1, "repeat": [1, 115], "get": [1, 3, 4, 7, 8, 12, 23, 58, 99], "better": [1, 3, 4, 5, 6, 7, 12, 17, 19, 107], "estim": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "path": [1, 7, 8, 14, 15, 22, 23, 59, 61, 66, 67, 72, 73], "need": [1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 17, 18, 19, 20, 58, 99, 112, 117, 120], "chang": [1, 3, 5, 6, 11, 14, 16, 17, 35, 58, 99, 107], "your": [1, 2, 3, 4, 5, 6, 7, 13, 24, 25, 58, 61, 64, 81, 90, 92, 95, 97, 99, 112, 115, 117, 119], "local": [1, 59, 115], "folder": [1, 59], "contain": [1, 5, 6, 7, 11, 14, 17, 23, 26, 27, 28, 29, 30, 32, 33, 34, 36, 37, 42, 45, 53, 54, 56, 58, 59, 61, 64, 65, 68, 91, 92, 99, 100, 101, 102, 108, 109, 115, 120], "storag": 1, "store": [1, 4, 5, 6, 12, 13, 14, 18, 19, 20, 22, 23, 59, 61, 72, 120], "tuh_eeg": [1, 22, 23, 66, 67], "www": [1, 23, 25, 59, 66, 67], "isip": [1, 23, 66, 67], "piconepress": [1, 23, 66, 67], "project": [1, 14, 15, 17, 23, 66, 67], "tuh_eeg_abnorm": 1, "v2": 1, "final": [1, 3, 5, 6, 7, 10, 12, 17, 18, 19, 20, 23, 74, 81, 82, 83, 84, 95], "cycl": 1, "through": [1, 3, 4, 7, 9, 11, 13, 20, 22, 23, 37, 54, 62, 68, 82, 83, 84, 120], "combin": [1, 7, 11, 61], "abov": [1, 3, 7, 9, 11, 12, 22, 115], "evalu": [1, 5, 6, 13, 17, 18, 19, 20, 85], "all_result": 1, "win_len_": 1, "model_kind": 1, "result": [1, 7, 9, 10, 12, 13, 23, 58, 71, 91, 92, 99, 107, 112, 115], "repetit": [1, 7, 63], "nrepetit": 1, "n": [1, 7, 27, 28, 29, 34, 36, 42, 45, 46, 48, 51, 53, 56, 77, 78, 83, 109], "data_loading_start": 1, "data_loading_end": 1, "training_setup_start": 1, "shuffl": [1, 6, 10, 12, 13, 29, 36, 48, 58, 99], "worker_init_fn": 1, "len": [1, 6, 8, 11, 12, 17, 18, 19, 20, 22, 23, 96], "ch_name": [1, 8, 11, 23, 69, 96], "training_setup_end": 1, "model_training_start": 1, "trained_model": 1, "model_training_end": 1, "del": 1, "data_prepar": 1, "training_setup": 1, "model_train": 1, "datafram": [1, 3, 4, 5, 6, 7, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 58, 61, 99, 100, 101, 102, 103], "csv": 1, "results_df": 1, "fname": 1, "lazy_vs_eager_loading_result": 1, "to_csv": 1, "under": [1, 17, 59, 97, 120], "summar": 1, "inform": [1, 8, 12, 23, 32, 50, 58, 61, 68, 71, 99, 101], "plot": [1, 7, 9, 11, 12, 17, 120], "catplot": 1, "row": [1, 21, 22, 30, 61, 114], "hue": 1, "col": 1, "strip": 1, "depend": [1, 7, 10, 17, 18, 19, 20, 23, 25, 58, 63, 84, 99, 110, 117], "were": [1, 5, 6, 12, 13, 15, 18, 20, 60, 61, 63, 82, 120], "actual": [1, 9, 17, 22, 23], "hardwar": [1, 7], "being": [1, 10, 18, 19, 58, 63, 99, 117], "speak": [1, 18, 20], "expect": [1, 17, 58, 99], "slower": [1, 23], "than": [1, 3, 5, 6, 7, 9, 17, 18, 19, 20, 23, 27, 45, 58, 71, 92, 99, 120], "pretti": [1, 115], "competit": [1, 4, 5, 6, 10, 12, 13, 20, 59, 60, 76], "worker": [1, 110, 120], "should": [1, 3, 4, 5, 6, 7, 9, 10, 13, 17, 18, 19, 20, 23, 27, 30, 37, 42, 45, 54, 56, 58, 59, 61, 62, 84, 98, 99, 107, 115], "yield": [1, 11, 17, 60, 86, 115], "substanti": [1, 3, 4, 5, 6, 9, 10, 17, 18, 20], "speedup": 1, "script": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 112], "minut": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 65], "000": [1, 8, 14, 15, 17, 22, 24], "mb": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "benchmark_lazy_eager_load": [1, 24], "py": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 36, 53, 85, 88, 100, 109], "jupyt": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "notebook": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "ipynb": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "galleri": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "sphinx": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "split": [2, 11, 16, 23, 24, 58, 61, 64, 74, 81, 92, 99, 120], "load": [2, 3, 7, 8, 15, 22, 23, 24, 59, 61, 64, 65, 67, 72, 74, 81, 90, 91, 92, 97, 120], "custom": [2, 9, 10, 24, 26, 61, 69], "discret": [2, 24, 61, 66, 91], "target": [2, 3, 4, 5, 6, 8, 11, 12, 14, 16, 17, 18, 19, 24, 36, 44, 53, 58, 59, 61, 62, 66, 68, 69, 71, 72, 91, 92, 99, 100, 101, 104, 105, 108, 109, 110, 114, 120], "benchmark": [2, 3, 4, 5, 6, 9, 10, 12, 13, 16, 17, 18, 19, 20, 24, 61, 65, 67, 74, 81, 90, 91, 97, 112, 120], "serial": [2, 14, 23, 24, 61, 65, 90, 91, 97, 120], "moabb": [2, 3, 4, 9, 10, 12, 13, 14, 21, 24, 60, 61, 63, 64, 90, 91, 92, 97, 117], "regress": [2, 5, 6, 17, 24, 61, 62, 74, 81, 89, 91, 99, 104, 112], "fake": [2, 24, 61, 62, 74, 81, 89, 91, 104, 112], "tune": [2, 24, 61, 64, 81, 90, 92, 95, 97, 98, 112, 120], "scikit": [2, 17, 24, 58, 61, 64, 81, 90, 92, 95, 97, 98, 99, 112, 114, 120], "learn": [2, 3, 4, 5, 6, 9, 10, 12, 18, 19, 20, 24, 25, 27, 28, 29, 30, 34, 36, 42, 45, 46, 47, 48, 51, 53, 56, 58, 61, 64, 65, 74, 76, 80, 81, 83, 84, 90, 92, 95, 97, 98, 99, 101, 102, 112, 114, 116, 117, 119, 120], "big": [2, 24, 61, 66, 90, 91, 97, 98], "resourc": [2, 7, 17, 18, 19, 20, 24, 61, 66, 90, 91, 97, 98], "sleep": [2, 7, 24, 32, 50, 61, 65, 82, 83, 84, 87, 88, 90, 92, 97, 98, 100, 101, 103, 112, 120], "stage": [2, 12, 24, 61, 65, 82, 83, 84, 87, 88, 90, 92, 97, 98, 100, 101, 103, 112, 120], "physionet": [2, 7, 17, 24, 61, 65, 83, 84, 87, 88, 90, 92, 97, 98, 101, 103, 112, 120], "u": [2, 9, 17, 24, 61, 65, 88, 90, 92, 97, 100, 101, 103, 112, 117, 120], "augment": [2, 24, 61, 64, 81, 90, 92, 95, 97, 98, 112, 116, 118, 120], "bcic": [2, 11, 12, 13, 21, 24, 26, 28, 31, 32, 33, 41, 42, 44, 59, 61, 64, 81, 89, 90, 91, 92, 93, 95, 97, 98, 104, 105, 106, 108, 112, 114, 120], "iv": [2, 11, 12, 13, 21, 24, 26, 28, 31, 32, 33, 41, 42, 44, 59, 61, 64, 81, 89, 90, 91, 92, 93, 95, 97, 98, 104, 105, 106, 108, 112, 114, 120], "2a": [2, 11, 12, 13, 21, 24, 26, 28, 31, 32, 33, 41, 42, 44, 61, 64, 81, 89, 90, 92, 95, 97, 98, 104, 112, 114, 120], "eldele2021": [2, 24, 61, 65, 84, 87, 90, 92, 97, 98, 101, 103, 112], "search": [2, 12, 13, 24, 26, 28, 32, 42, 44, 58, 61, 64, 81, 90, 92, 95, 97, 98, 99, 112, 115, 116], "best": [2, 12, 13, 24, 26, 28, 32, 42, 44, 61, 64, 81, 90, 92, 95, 97, 98, 112, 119], "chambon2018": [2, 24, 61, 65, 83, 87, 90, 92, 97, 98, 101, 103, 112], "trialwis": [2, 5, 6, 10, 13, 24, 58, 61, 64, 81, 90, 92, 95, 97, 98, 99, 110, 112, 114, 120], "decod": [2, 9, 10, 12, 13, 20, 22, 24, 25, 58, 59, 61, 64, 69, 74, 75, 80, 81, 85, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 104, 105, 106, 108, 110, 112, 114, 116, 120], "finger": [2, 24, 59, 61, 63, 81, 89, 90, 91, 93, 95, 97, 105, 106, 108, 112, 120], "flexion": [2, 24, 59, 61, 81, 89, 90, 91, 93, 95, 97, 105, 106, 108, 112, 120], "ecog": [2, 24, 59, 61, 81, 89, 90, 91, 93, 95, 97, 105, 106, 108, 112, 116, 120], "eager": [2, 24, 67, 74, 81, 91], "lazi": [2, 7, 23, 24, 67, 74, 81, 91, 120], "crop": [2, 6, 7, 11, 12, 13, 16, 19, 20, 23, 24, 58, 59, 61, 64, 65, 68, 81, 89, 90, 91, 92, 95, 97, 98, 99, 104, 105, 106, 108, 110, 112, 114, 120], "self": [2, 3, 5, 10, 16, 20, 24, 58, 61, 65, 83, 90, 92, 97, 98, 99, 101, 102, 103, 112, 115, 120], "supervis": [2, 10, 12, 24, 61, 65, 83, 90, 92, 97, 98, 101, 102, 112, 120], "rel": [2, 24, 61, 65, 83, 90, 92, 97, 98, 101, 102, 112], "posit": [2, 24, 27, 37, 38, 39, 40, 42, 45, 54, 56, 61, 65, 83, 90, 92, 97, 98, 101, 102, 111, 112], "how": [2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 58, 61, 64, 81, 90, 92, 95, 97, 99, 112, 116, 117, 119, 120], "test": [2, 4, 7, 13, 18, 19, 20, 21, 24, 58, 61, 63, 64, 81, 90, 92, 95, 97, 99, 112], "auto_examples_python": 2, "zip": [2, 7, 17, 23], "auto_examples_jupyt": 2, "build": [3, 23], "tutori": [3, 4, 5, 6, 9, 10, 12, 13, 17, 18, 19, 20, 119, 120], "now": [3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 17, 18, 19, 20, 22, 23, 120], "more": [3, 4, 5, 6, 7, 9, 10, 12, 17, 18, 19, 20, 22, 58, 82, 86, 88, 99, 112, 120], "effici": [3, 5, 7, 9], "support": [3, 10, 14, 17, 18, 19, 20, 58, 96, 99, 120], "configur": [3, 7, 12, 23], "explain": [3, 10, 75], "visual": [3, 4, 5, 6, 11, 13, 25, 63, 74, 80, 81, 116, 118, 120], "imag": [3, 60, 76], "_static": 3, "trialwise_explan": 3, "png": 3, "cropped_explan": 3, "On": [3, 62, 68], "left": [3, 4, 30, 58, 60, 63, 99], "you": [3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 58, 99, 107, 115, 117, 119], "see": [3, 4, 5, 6, 7, 9, 13, 17, 36, 53, 58, 59, 60, 63, 65, 67, 68, 75, 77, 78, 80, 85, 86, 91, 92, 99, 100, 102, 103, 109, 112, 115, 119], "A": [3, 5, 6, 7, 9, 10, 17, 18, 19, 26, 28, 29, 32, 44, 46, 48, 50, 58, 59, 61, 64, 66, 67, 76, 77, 78, 82, 83, 86, 91, 92, 97, 99, 102, 110, 114], "trial": [3, 4, 5, 6, 9, 10, 11, 12, 13, 15, 16, 58, 60, 63, 69, 71, 92, 99, 105, 106, 110, 111, 120], "push": [3, 58, 99], "produc": [3, 12, 84], "predict": [3, 4, 5, 6, 10, 11, 17, 18, 19, 20, 58, 62, 74, 81, 87, 99, 104, 105, 106, 107, 108, 109, 110, 111, 118, 120], "label": [3, 4, 5, 6, 7, 9, 11, 17, 18, 19, 22, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 87, 99, 102, 104, 108, 110, 114], "right": [3, 4, 5, 6, 10, 12, 30, 60, 63], "instead": [3, 4, 9, 10, 13, 17, 18, 19, 22, 58, 98, 99, 120], "neighbour": 3, "simultan": [3, 76], "call": [3, 7, 9, 12, 58, 61, 68, 71, 90, 91, 92, 99, 105, 106, 107, 117], "therefor": [3, 4, 5, 6, 7, 12, 13, 107], "per": [3, 5, 6, 17, 18, 19, 20, 22, 36, 42, 56, 60, 63, 65, 86, 120], "individu": [3, 18, 19, 20, 120], "averag": [3, 12, 18, 19, 23, 58, 99, 104], "befor": [3, 4, 5, 7, 12, 13, 20, 23, 58, 61, 62, 65, 68, 74, 82, 83, 84, 94, 95, 99, 107, 112, 117, 120], "note": [3, 4, 5, 6, 8, 9, 10, 13, 17, 18, 20, 33, 49, 58, 59, 75, 76, 77, 78, 86, 88, 98, 99, 107, 112], "architectur": [3, 4, 5, 6, 13, 17, 18, 19, 20, 82, 83, 84, 88, 116, 117], "implicitli": [3, 12], "recept": [3, 5, 58, 99, 110], "field": [3, 5, 58, 99, 110], "timestep": 3, "make": [3, 4, 5, 6, 9, 10, 12, 13, 17, 18, 20, 23, 84, 115, 120], "singl": [3, 13, 17, 18, 19, 23, 31, 32, 33, 49, 50, 58, 84, 99, 110], "user": [3, 58, 99, 115], "It": [3, 4, 5, 6, 9, 10, 12, 13, 14, 18, 19, 20, 32, 50, 58, 61, 68, 71, 84, 91, 92, 99, 116], "mostli": 3, "runtim": 3, "larger": [3, 5, 17, 76], "faster": [3, 7, 19], "As": [3, 5, 7, 12, 16, 17, 58, 99], "rule": [3, 10, 58, 99], "thumb": [3, 5, 6], "togeth": [3, 7, 12, 120], "mani": [3, 5, 6, 7, 12, 16, 17, 61], "setup": [3, 5, 6], "mathemat": 3, "ident": [3, 18, 20, 35, 58, 74, 99, 118], "directli": [3, 4, 5, 6, 9, 13, 17, 22, 23, 58, 68, 90, 99, 117], "At": [3, 60], "much": [3, 17, 58, 99], "redund": 3, "dilat": [3, 18, 19, 20], "convolut": [3, 4, 5, 6, 13, 17, 18, 20, 25, 32, 34, 50, 51, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 88, 114, 120], "our": [3, 4, 5, 6, 7, 13, 17, 18, 19, 20, 63], "paper": [3, 10, 20, 25, 37, 38, 39, 40, 54, 75, 76, 77, 78, 84, 120], "http": [3, 4, 5, 6, 10, 17, 20, 23, 25, 32, 36, 50, 53, 58, 59, 65, 74, 75, 76, 80, 81, 82, 84, 85, 86, 88, 99, 100, 109, 112, 114, 117], "arxiv": [3, 10, 17, 27, 28, 29, 30, 32, 34, 36, 42, 45, 46, 47, 48, 50, 51, 53, 56, 77, 78, 85, 102, 109], "org": [3, 5, 6, 10, 17, 25, 36, 53, 58, 59, 65, 74, 76, 80, 81, 82, 84, 99, 109, 112, 114, 117], "ab": [3, 10, 17, 36, 53, 109], "1703": 3, "05051": 3, "noqa": [3, 22, 23], "e501": 3, "case": [3, 4, 5, 6, 7, 12, 13, 21, 58, 84, 99, 112, 120], "ani": [3, 8, 12, 14, 58, 84, 99], "pad": [3, 4, 5, 9, 18, 19, 20, 83], "lead": [3, 12, 16, 58, 99], "gradient": [3, 120], "first": [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 30, 42, 56, 58, 61, 65, 66, 67, 74, 81, 84, 92, 99, 115], "convnet": [3, 4, 5, 6, 13, 74, 80, 81], "log": [3, 58, 85, 91, 92, 99], "softmax": [3, 4, 5, 6, 9, 10, 16, 58, 85, 88, 99], "neg": [3, 17, 58, 102], "likelihood": [3, 58], "typic": [3, 58, 99], "classif": [3, 17, 18, 19, 20, 27, 32, 34, 42, 45, 50, 51, 56, 75, 76, 83, 84, 85], "stai": [3, 7, 60], "plot_bcic_iv_2a_moabb_tri": [3, 4, 24], "html": [3, 5, 6, 17, 23, 58, 65, 66, 67, 99, 112, 114], "__": 3, "moabbdataset": [3, 4, 9, 10, 11, 12, 13, 14, 21, 120], "subject_id": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 59, 60, 63, 64, 65, 120], "dataset_nam": [3, 4, 9, 10, 11, 12, 13, 14, 21, 64], "bnci2014001": [3, 4, 9, 10, 11, 12, 13, 14, 21, 118], "exponential_moving_standard": [3, 4, 5, 6, 9, 10, 12, 13], "preprocessor": [3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 23, 97, 118, 120], "scale": [3, 4, 7, 9, 10, 13, 17, 18, 19, 20, 23, 76, 120], "low_cut_hz": [3, 4, 5, 6, 9, 10, 12, 13], "low": [3, 4, 5, 6, 9, 10, 12, 13, 17, 18, 19, 20, 27, 45, 76], "frequenc": [3, 4, 5, 6, 8, 9, 10, 12, 13, 20, 23, 27, 33, 45, 49, 63, 69, 76, 82, 83, 84, 88, 96, 100, 120], "high_cut_hz": [3, 4, 5, 6, 9, 10, 12, 13, 17, 18, 19], "38": [3, 4, 6, 9, 10, 12, 13, 18, 20, 24], "high": [3, 4, 5, 6, 9, 10, 12, 13, 20, 27, 45, 63, 76, 88, 100], "exponenti": [3, 4, 5, 6, 9, 10, 12, 13, 88, 94, 95], "standard": [3, 4, 5, 6, 9, 10, 12, 13, 17, 18, 19, 20, 26, 34, 37, 38, 39, 40, 51, 54, 95], "factor_new": [3, 4, 5, 6, 9, 10, 12, 13, 94, 95], "1e": [3, 4, 5, 6, 9, 10, 12, 13, 18, 19, 20], "init_block_s": [3, 4, 5, 6, 9, 10, 12, 13, 94, 95], "1000": [3, 4, 5, 6, 9, 10, 11, 12, 13, 21, 22, 23, 63, 76, 101], "pick_typ": [3, 4, 5, 6, 9, 10, 11, 12, 13], "meg": [3, 4, 9, 10, 11, 12, 13, 25, 116], "stim": [3, 4, 9, 10, 11, 12, 13], "keep": [3, 4, 7, 9, 10, 12, 13, 19, 20, 63, 65], "sensor": [3, 4, 9, 10, 12, 13, 30, 37, 38, 39, 40, 54, 63], "factor": [3, 4, 9, 10, 12, 13, 17, 18, 19, 23, 84, 86, 88, 98], "1e6": [3, 4, 5, 6, 9, 10, 12, 13, 17, 18, 19, 23], "apply_on_arrai": [3, 4, 9, 10, 11, 13, 17, 18, 19, 23, 90], "convert": [3, 4, 5, 6, 8, 9, 10, 12, 13, 15, 17, 18, 19], "v": [3, 4, 5, 6, 7, 9, 10, 12, 13, 17, 76, 77, 78, 85], "uv": [3, 4, 5, 6, 9, 10, 12, 13], "l_freq": [3, 4, 5, 6, 7, 9, 10, 12, 13, 17, 18, 19], "h_freq": [3, 4, 5, 6, 7, 9, 10, 12, 13, 17, 18, 19], "bandpass": [3, 4, 5, 6, 9, 10, 11, 12, 13, 60, 96], "transform": [3, 4, 5, 6, 11, 12, 13, 16, 17, 18, 19, 20, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 62, 68, 69, 70, 71, 99, 118, 120], "usr": [3, 4, 5, 9, 10, 13, 16, 17, 18, 19, 20], "miniconda": [3, 4, 5, 9, 10, 13, 16, 17, 18, 19, 20], "env": [3, 4, 5, 9, 10, 13, 16, 17, 18, 19, 20, 117], "lib": [3, 4, 5, 9, 10, 13, 16, 17, 18, 19, 20], "python3": [3, 4, 5, 9, 10, 13, 16, 17, 18, 19, 20], "7": [3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 63, 82, 98], "site": [3, 4, 5, 9, 10, 13, 16, 17, 18, 19, 20], "packag": [3, 4, 5, 9, 10, 13, 16, 17, 18, 19, 20, 25], "sklearn": [3, 4, 5, 6, 7, 9, 10, 12, 13, 17, 18, 19, 20, 58, 99, 107, 114, 120], "deprec": [3, 4, 9, 10, 13, 17, 18, 19, 98, 120], "87": [3, 4, 9, 10, 13, 17, 18, 19], "futurewarn": [3, 4, 9, 10, 13, 17, 18, 19], "remov": [3, 4, 5, 6, 9, 10, 13, 17, 18, 19, 20, 98, 111, 120], "multipli": [3, 4, 9, 10, 12, 13, 17, 18, 19, 23, 76, 98], "msg": [3, 4, 9, 10, 13, 17, 18, 19], "categori": [3, 4, 5, 9, 10, 13, 16, 17, 18, 19], "0x7f8f1bfa7ed0": 3, "contrast": [3, 5, 10, 17, 27, 34, 42, 45, 51, 56, 99], "becaus": [3, 5, 7, 12, 115], "know": [3, 5, 9, 10], "stride": [3, 4, 5, 9, 10, 18, 19, 20, 69, 70, 71, 74, 81, 86, 91, 92], "choos": [3, 4, 5, 6, 9, 10, 12, 13, 14], "fed": [3, 5, 38, 39, 40], "ha": [3, 4, 5, 6, 9, 10, 11, 12, 13, 16, 17, 19, 21, 22, 23, 38, 39, 40, 58, 61, 62, 65, 68, 71, 75, 76, 77, 78, 88, 91, 92, 99, 109, 115, 120], "chosen": [3, 5, 7, 14, 42, 58, 99, 110], "explan": [3, 5, 96], "begin": [3, 5, 16, 60, 82, 91], "250": [3, 11, 17, 60], "hz": [3, 5, 6, 9, 17, 18, 20, 27, 33, 45, 49, 60, 88], "manual": [3, 12], "layer": [3, 5, 6, 12, 17, 18, 19, 74, 81, 82, 83, 84, 85, 86, 88, 120], "smaller": [3, 17, 71, 76, 92], "30": [3, 5, 6, 7, 10, 17, 18, 19, 20, 22, 24, 65, 81, 82, 83, 84, 88], "definit": [3, 58, 99], "set_random_se": [3, 4, 5, 6, 9, 10, 12, 13, 16, 17, 18, 19, 20, 120], "check": [3, 4, 5, 6, 9, 10, 12, 13, 18, 19, 20, 25, 75, 76, 77, 78, 115, 120], "gpu": [3, 4, 5, 6, 9, 10, 12, 13, 16, 17, 18, 19, 20, 120], "cpu": [3, 4, 5, 6, 9, 10, 12, 13, 16, 17, 18, 19, 20, 58, 99], "random": [3, 4, 5, 6, 9, 10, 13, 16, 17, 18, 19, 20, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 50, 51, 63, 100, 101, 102, 103, 107, 112, 120], "seed": [3, 4, 5, 6, 9, 10, 12, 13, 16, 17, 18, 19, 20, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 51, 112], "abl": [3, 4, 5, 6, 9, 10, 13, 17, 18, 19, 20, 58, 99, 115], "roughli": [3, 4, 5, 6, 9, 10, 17, 18, 20, 63], "reproduc": [3, 4, 5, 6, 9, 10, 13, 17, 18, 19, 20, 112, 119, 120], "indetermin": [3, 4, 5, 6, 9, 10, 17, 18, 20], "mai": [3, 4, 5, 6, 7, 9, 10, 12, 14, 17, 18, 20, 25, 58, 99, 107, 112, 115], "still": [3, 4, 5, 6, 9, 10, 12, 17, 18, 20, 63], "between": [3, 4, 5, 6, 9, 10, 12, 17, 18, 20, 27, 28, 29, 32, 33, 36, 37, 38, 39, 40, 44, 45, 46, 48, 50, 53, 60, 69, 70, 71, 74, 81, 82, 91, 92, 103, 108], "obtain": [3, 4, 5, 6, 9, 10, 17, 18, 20, 37, 54, 58, 62, 63, 68, 99, 101], "consist": [3, 4, 5, 6, 9, 10, 17, 18, 20, 38, 39, 40, 60, 63], "cost": [3, 4, 5, 6, 9, 10, 17, 18, 20], "increas": [3, 4, 5, 6, 7, 9, 10, 12, 17, 18, 19, 20, 84], "cudnn_benchmark": [3, 4, 5, 6, 9, 10, 17, 18, 20, 112], "20200220": [3, 4, 5, 6, 9, 10, 12, 13, 16], "chan": [3, 4, 5, 6, 9, 10, 12, 13], "n_chan": [3, 4, 5, 6, 13, 16], "shape": [3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20, 37, 54, 58, 80, 82, 83, 84, 85, 86, 87, 88, 89, 103, 104, 108], "send": [3, 4, 5, 6, 7, 9, 10, 12, 13, 18, 19, 20], "And": 3, "dens": [3, 16, 82, 83], "to_dense_prediction_model": [3, 5, 16], "get_output_shap": [3, 5, 16, 120], "calcul": [3, 4, 5, 9, 10, 12, 13, 86], "dummi": [3, 5], "n_preds_per_input": [3, 5, 16], "suppli": [3, 4, 5, 6, 9, 12, 17, 18, 19, 20], "explicit": [3, 107], "create_windows_from_ev": [3, 4, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 120], "trial_start_offset_second": [3, 4, 9, 10, 12, 13], "offset": [3, 4, 9, 10, 12, 13, 61, 71, 91, 92], "trial_start_offset_sampl": [3, 4, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 71, 92], "windows_dataset": [3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 69, 70, 71], "trial_stop_offset_sampl": [3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 71, 92, 120], "session": [3, 4, 5, 6, 10, 11, 12, 13, 14, 16, 21, 22, 23, 60, 101], "train_set": [3, 4, 5, 6, 9, 10, 12, 13, 16, 18, 19, 20], "session_t": [3, 4, 9, 10, 11, 12, 13, 14, 21, 101], "valid_set": [3, 4, 5, 6, 9, 16, 18, 19, 20], "session_": [3, 4, 9, 10, 11, 12, 13, 21], "eegclassifi": [3, 4, 5, 12, 13, 17, 18, 19, 20, 118, 120], "croppedloss": [3, 5, 16, 118], "criterion": [3, 4, 5, 6, 9, 10, 12, 13, 16, 17, 18, 19, 20, 58, 99], "well": [3, 4, 5, 6, 12, 17, 22, 23, 71, 91, 92, 116, 117, 120], "criterion__loss_funct": [3, 5, 16], "appli": [3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 62, 68, 82, 83, 87, 88, 90, 96, 97, 99, 109, 118, 120], "default": [3, 4, 5, 6, 13, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 50, 51, 58, 59, 65, 66, 67, 68, 71, 76, 92, 99, 107, 112, 120], "found": [3, 4, 5, 6, 12, 14, 15, 19, 21, 59, 91, 92], "work": [3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 16, 20, 23, 58, 88, 99, 107, 116, 119, 120], "motor": [3, 4, 5, 6, 60, 63, 75], "strongli": [3, 4, 5, 6, 76], "encourag": [3, 4, 5, 6, 119], "perform": [3, 4, 5, 6, 10, 12, 18, 19, 20, 23, 60, 61, 63, 84, 94, 95, 120], "own": [3, 4, 5, 6, 12, 13, 63, 115, 117], "cross": [3, 4, 5, 6, 7, 60], "valid": [3, 5, 21, 58, 84, 91, 92, 99, 107, 108, 120], "skorch": [3, 4, 5, 6, 8, 9, 10, 12, 13, 16, 17, 18, 19, 20, 58, 69, 70, 71, 99], "callback": [3, 4, 5, 6, 9, 10, 12, 13, 16, 17, 18, 19, 20, 58, 99, 107], "lrschedul": [3, 4, 5, 6, 9, 10, 12, 13, 16], "helper": [3, 4, 5, 6, 9, 10, 12, 13, 16, 17, 18, 19, 20], "predefined_split": [3, 4, 5, 6, 9, 12, 16, 17, 18, 19, 20], "These": [3, 4, 5, 6, 13, 17], "valu": [3, 4, 5, 6, 10, 12, 17, 18, 19, 20, 23, 33, 36, 53, 58, 61, 62, 68, 71, 76, 86, 91, 92, 99, 108, 109, 110, 120], "good": [3, 4, 5, 6], "lr": [3, 4, 5, 6, 9, 10, 12, 13, 16, 17, 18, 19, 20, 58, 99], "0625": [3, 4, 5, 6, 9, 10, 12], "01": [3, 4, 5, 6, 9, 10, 12, 16, 23, 24, 58, 76, 99], "weight_decai": [3, 4, 5, 6, 9, 10, 12], "deep4": [3, 4], "001": [3, 4, 60, 94, 95], "clf": [3, 4, 9, 10, 12, 13, 17, 18, 19, 20], "nll_loss": 3, "adamw": [3, 4, 5, 6, 9, 10, 12, 13, 16], "train_split": [3, 4, 5, 6, 9, 10, 12, 13, 16, 17, 18, 19, 20, 58, 99], "optimizer__lr": [3, 4, 5, 6, 9, 10, 12, 13, 16, 17, 18, 19, 20, 58, 99], "optimizer__weight_decai": [3, 4, 5, 6, 9, 10, 12, 16], "iterator_train__shuffl": [3, 5, 16, 17, 18, 19, 20, 58, 99], "accuraci": [3, 4, 5, 6, 9, 10, 12, 13, 17, 18, 19, 20, 107], "lr_schedul": [3, 4, 5, 6, 9, 10, 12, 13, 16], "cosineannealinglr": [3, 4, 5, 6, 9, 10, 12, 13, 16], "t_max": [3, 4, 5, 6, 9, 10, 12, 13, 16], "specifi": [3, 4, 5, 6, 9, 12, 14, 17, 18, 19, 20, 21, 22, 23, 58, 59, 97, 99], "base": [3, 5, 7, 11, 12, 13, 14, 16, 17, 18, 19, 21, 23, 26, 34, 36, 51, 53, 58, 60, 61, 75, 76, 77, 78, 84, 91, 92, 99, 101, 109], "146": [3, 5, 16, 120], "skorchwarn": [3, 5, 16], "overrid": [3, 5, 16, 59], "on_batch_begin": [3, 5, 16], "on_batch_end": [3, 5, 16, 58, 99, 106, 118], "signatur": [3, 5, 16, 107], "wa": [3, 4, 5, 10, 12, 13, 16, 17, 18, 19, 20, 58, 60, 63, 84, 99, 100, 120], "on_batch_": [3, 5, 16], "end": [3, 5, 11, 12, 16, 17, 18, 19, 22, 25, 58, 91, 92, 99, 105, 106, 107, 120], "batch": [3, 5, 9, 10, 16, 17, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 74, 80, 81, 82, 83, 84, 85, 86, 89, 99, 106, 110], "recov": [3, 5, 16], "accordingli": [3, 5, 16, 18], "add": [3, 4, 5, 16, 17, 33, 34, 49, 51, 58, 61, 62, 68, 85, 99, 107, 120], "method": [3, 5, 6, 10, 12, 16, 17, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 58, 59, 61, 62, 68, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 99, 100, 101, 102, 104, 105, 106, 107, 108, 120], "bodi": [3, 5, 16], "suppress": [3, 5, 16, 60], "except": [3, 5, 16, 63, 65], "filterwarn": [3, 5, 16], "ignor": [3, 5, 6, 16, 42, 58, 90, 91, 92, 99, 102], "warning_msg": [3, 5, 16], "train_accuraci": [3, 4, 9, 12, 13], "train_loss": [3, 4, 5, 6, 9, 12, 13, 16, 17, 18, 19, 20, 58, 99], "valid_accuraci": [3, 4, 9, 12], "valid_loss": [3, 4, 5, 6, 9, 12, 16, 17, 18, 19, 20], "dur": [3, 4, 5, 6, 9, 12, 13, 16, 17, 18, 19, 20], "2500": [3, 101], "4486": 3, "4386": 3, "0006": [3, 4, 5, 6, 9, 12, 13, 16], "20": [3, 5, 12, 17, 18, 19, 20, 23, 30, 37, 38, 39, 40, 54, 82], "5234": 3, "2569": [3, 9, 13], "2315": 3, "6824": 3, "0005": [3, 4, 5, 6, 9, 12, 13, 16], "19": [3, 17, 18, 19, 20], "9409": 3, "3958": 3, "1476": 3, "3611": 3, "2702": 3, "0002": [3, 4, 5, 6, 9, 12, 13], "8328": 3, "4340": 3, "1225": [3, 5, 6, 59], "4410": 3, "4375": 3, "0000": [3, 4, 5, 6, 9, 12, 13, 16], "7846": 3, "classifi": [3, 4, 9, 10, 17, 18, 19, 20, 118, 120], "initi": [3, 4, 9, 12, 16, 17, 18, 19, 20, 58, 76, 88, 99], "module_": [3, 4, 5, 6, 9, 16, 18, 19, 20, 58, 99], "ensuredim": [3, 4, 9, 10], "ensure4d": [3, 4, 9, 10], "dimshuffl": [3, 4, 9, 10], "express": [3, 4, 9, 10], "transpose_time_to_spat": [3, 4, 9, 10], "conv_tim": [3, 4, 9, 10], "conv2d": [3, 4, 9, 10, 18], "kernel_s": [3, 4, 9, 10, 18, 19, 20, 85], "conv_spat": [3, 4, 9, 10], "22": [3, 4, 8, 9, 15, 17, 19, 20], "bia": [3, 4, 9, 18, 19], "bnorm": [3, 4, 9], "batchnorm2d": [3, 4, 9, 74, 76, 81], "ep": [3, 4, 9, 19, 20, 95], "05": [3, 4, 9, 19, 20, 24, 86], "momentum": [3, 4, 9, 19, 20, 74, 76, 81], "affin": [3, 4, 9, 19, 20], "track_running_stat": [3, 4, 9, 19, 20], "conv_nonlin_exp": [3, 4, 9], "squar": [3, 4, 9, 81, 99], "pool": [3, 4, 9, 74, 76, 81, 83, 86, 88], "avgpool2d": [3, 4, 9], "pool_nonlin_exp": [3, 4, 9], "safe_log": [3, 4, 9, 81], "dropout": [3, 4, 9, 10, 17, 18, 19, 74, 75, 76, 81, 82, 83, 84, 85, 86], "p": [3, 4, 9, 10, 17, 18, 19, 27, 34, 42, 45, 51, 56, 77, 78, 83], "inplac": [3, 4, 7, 9, 10, 18, 19], "conv_classifi": [3, 4, 9, 10], "logsoftmax": [3, 4, 9, 10], "dim": [3, 4, 5, 6, 9, 10], "squeez": [3, 4, 5, 9, 10, 12, 13], "squeeze_final_output": [3, 4, 9, 10], "further": [3, 5, 6, 12, 17, 18, 19, 20, 58, 99], "error": [3, 9, 22, 23, 71, 91, 92, 93, 99, 115, 120], "matplotlib": [3, 4, 5, 6, 7, 9, 11, 12, 17, 18, 19, 20, 23, 114], "pyplot": [3, 4, 5, 6, 7, 9, 11, 12, 17, 18, 19, 20, 23], "plt": [3, 4, 5, 6, 7, 9, 11, 12, 17, 18, 19, 20, 23], "line2d": [3, 4, 5, 6], "histori": [3, 4, 5, 6, 17, 18, 19, 20, 58, 99], "results_column": [3, 4, 5, 6], "df": [3, 4, 5, 6, 7, 17, 18, 19, 20], "column": [3, 4, 5, 6, 12, 13, 14, 15, 21, 22, 61, 68, 72, 100, 101, 114], "index": [3, 4, 5, 6, 8, 16, 17, 18, 19, 20, 62, 94, 95, 100, 101, 111, 116], "percent": [3, 4], "misclass": [3, 4], "assign": [3, 4, 111], "train_misclass": [3, 4], "valid_misclass": [3, 4], "style": [3, 4, 5, 6, 17, 23, 38, 39, 40, 86], "fig": [3, 4, 5, 6, 7, 11, 12, 17, 18, 19, 20, 23, 114], "ax1": [3, 4, 5, 6, 17, 18, 19, 20], "subplot": [3, 4, 5, 6, 7, 9, 11, 12, 17, 18, 19, 20, 23], "figsiz": [3, 4, 5, 6, 7, 11, 12, 17, 18, 19, 20, 23, 114], "loc": [3, 4, 5, 6, 12], "ax": [3, 4, 5, 6, 7, 9, 12, 17, 18, 19, 20, 23], "marker": [3, 4, 5, 6, 7, 12, 17], "o": [3, 4, 5, 6, 7, 10, 17, 27, 28, 29, 30, 34, 42, 45, 46, 47, 48, 51, 56, 102, 117], "color": [3, 4, 5, 6, 7, 9, 12, 17, 18, 19, 20, 114], "tab": [3, 4, 5, 6, 7, 17], "blue": [3, 4, 5, 6, 7, 17], "legend": [3, 4, 5, 6, 7, 9, 12, 17, 18, 19, 20, 23], "fontsiz": [3, 4, 5, 6, 12], "14": [3, 4, 5, 6, 8, 15, 17, 18, 20, 22, 63, 112], "tick_param": [3, 4, 5, 6, 17], "axi": [3, 4, 5, 6, 9, 17, 37, 38, 39, 40, 41, 43, 54, 55, 57, 111], "labelcolor": [3, 4, 5, 6, 17], "labels": [3, 4, 5, 6], "set_ylabel": [3, 4, 5, 6, 7, 17, 18, 19, 20, 23], "ax2": [3, 4, 5, 6, 17, 18, 19, 20], "twinx": [3, 4, 5, 6, 17], "red": [3, 4, 5, 6], "misclassif": [3, 4], "set_ylim": [3, 4, 11], "get_ylim": [3, 4], "85": [3, 4, 17], "room": [3, 4], "set_xlabel": [3, 4, 5, 6, 7, 17, 23], "where": [3, 4, 5, 6, 10, 12, 18, 19, 27, 36, 37, 42, 45, 53, 54, 56, 58, 59, 61, 69, 99, 110, 112], "handl": [3, 4, 5, 6, 9, 10, 13], "black": [3, 4, 5, 6, 60, 63, 114], "linewidth": [3, 4, 5, 6], "linestyl": [3, 4, 5, 6], "h": [3, 4, 5, 6, 10, 17, 27, 30, 34, 42, 45, 47, 51, 56, 75, 102], "get_label": [3, 4, 5, 6, 12], "tight_layout": [3, 4, 5, 6, 11, 12, 17, 18, 19, 20], "onlinelibrari": [3, 4], "wilei": [3, 4], "doi": [3, 4, 5, 6, 19, 25, 59, 74, 75, 76, 80, 81, 82, 84, 86, 114], "1002": [3, 4, 25, 74, 80, 81, 114], "hbm": [3, 4, 25, 74, 80, 81, 114], "23730": [3, 4, 25, 74, 80, 81, 114], "metric": [3, 4, 5, 17, 18, 19, 20, 114], "confusion_matrix": [3, 4, 17, 18, 19, 20, 114], "plot_confusion_matrix": [3, 4, 120], "matric": [3, 4, 14, 38, 39, 40, 58, 99], "y_true": [3, 4, 17, 18, 19, 20, 58, 99], "get_metadata": [3, 4, 12, 17, 18, 19, 20, 61, 101], "y_pred": [3, 4, 17, 18, 19, 20, 58, 88, 99, 106], "confusion_mat": [3, 4, 114], "label_dict": [3, 4], "class_nam": [3, 4, 114], "i_class": [3, 4], "event_id": [3, 4], "sort": [3, 4, 23, 120], "integ": [3, 4, 21, 22, 30, 42, 47, 56, 61], "dict": [3, 4, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 32, 33, 34, 36, 37, 42, 61, 62, 64, 68, 71, 91, 92, 96, 120], "kei": [3, 4, 21, 23, 61, 62, 68, 91, 92], "lambda": [3, 4, 5, 6, 12, 58, 79, 99], "kv": [3, 4], "basic": [3, 4, 12, 44], "conf": [3, 4], "figur": [3, 4, 12, 60, 114], "800x550": [3, 4], "52": [3, 24], "548": [3, 24], "991": 3, "plot_bcic_iv_2a_moabb_crop": [3, 24], "show": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 63, 120], "classic": 4, "hand": [4, 8, 15, 60, 63, 119], "bci": [4, 5, 6, 10, 13, 32, 50, 59, 60, 86], "either": [4, 5, 6, 12, 13, 58, 60, 61, 63, 99, 110], "via": [4, 12, 13, 88, 120], "arrai": [4, 5, 6, 8, 10, 12, 13, 20, 27, 37, 44, 45, 54, 58, 69, 70, 71, 90, 99, 103, 110, 114], "like": [4, 5, 6, 7, 12, 13, 23, 27, 32, 37, 45, 50, 54, 58, 69, 70, 71, 84, 99, 101], "provid": [4, 5, 6, 13, 18, 19, 20, 25, 58, 60, 61, 62, 66, 67, 87, 90, 97, 99, 115], "underli": [4, 5, 6, 13, 17, 90], "prepocess": [4, 5, 6, 13], "fly": [4, 5, 6, 13, 62, 68, 120], "librari": [4, 5, 6, 9, 12, 13, 25, 59, 117, 119], "torchvis": [4, 5, 6, 13, 117], "0x7f8f36ce8f50": 4, "out": [4, 6, 13, 18, 19, 27, 42, 45, 56, 58, 60, 99, 100, 108, 115], "just": [4, 5, 6, 10, 12, 13, 22, 58, 74, 81, 99], "decid": [4, 6, 13, 28, 29, 30, 32, 41, 43, 44], "part": [4, 5, 6, 7, 8, 12, 13, 15, 28, 29, 42, 46, 48, 56, 76], "after": [4, 7, 12, 13, 16, 17, 21, 60, 65, 74, 81, 82, 83, 104, 107, 117, 120], "often": [4, 10, 13, 18, 19, 20], "benefici": [4, 13], "500": [4, 8, 13, 15, 101], "m": [4, 7, 13, 14, 17, 18, 19, 20, 22, 27, 30, 34, 37, 38, 39, 40, 42, 45, 47, 51, 54, 56, 74, 76, 77, 78, 80, 81, 83, 88, 100, 114], "easili": [4, 5, 6, 11, 12, 13, 23, 101], "addit": [4, 5, 6, 8, 11, 12, 13, 21, 23, 34, 51, 58, 60, 61, 62, 68, 71, 92, 99, 114], "descript": [4, 5, 6, 8, 11, 12, 13, 14, 15, 17, 21, 22, 23, 59, 60, 61, 62, 66, 67, 68, 71, 72, 77, 78, 91, 92], "attribut": [4, 5, 6, 12, 13, 58, 62, 68, 90, 99, 120], "select": [4, 5, 6, 7, 10, 11, 12, 13, 18, 23, 27, 63, 100], "predefin": [4, 5, 6, 13], "domain": [4, 5, 6, 10, 13, 33, 49, 88], "pure": [4, 5, 6, 13, 17], "normal": [4, 5, 6, 13, 17, 18, 19, 82, 83, 98, 101, 114], "respons": [4, 6, 13, 18, 19, 20], "manag": [4, 6, 13, 18, 19, 20, 117], "inherit": [4, 6, 13, 18, 19, 20, 58, 99], "neuralnetclassifi": [4, 13, 18, 19, 20], "logic": [4, 6, 13, 18, 19, 20], "2604": [4, 12, 22], "6159": [4, 12], "2465": 4, "6117": 4, "1866": 4, "2535": [4, 9], "2103": 4, "6": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 60, 63], "3208": 4, "1967": [4, 5], "0746": 4, "2375": 4, "3569": 4, "2674": 4, "0589": 4, "9899": 4, "2435": 4, "69": [4, 9, 10, 13, 17, 20], "throughout": [4, 5, 6, 12, 18, 19, 20], "curv": [4, 5, 6], "477": [4, 24], "789": 4, "mode": [5, 20, 58, 74, 99, 107, 119, 120], "correspond": [5, 6, 13, 17, 21, 23, 27, 30, 58, 59, 60, 61, 68, 69, 71, 92, 97, 99, 100, 108], "seri": [5, 6, 12, 16, 17, 18, 19, 58, 62, 68, 71, 82, 83, 99, 101, 105, 120], "maciej": [5, 6, 120], "sliwowski": [5, 6], "maciek": [5, 6], "moham": [5, 6, 120], "fattouh": [5, 6, 120], "mo": [5, 6], "searchwork": [5, 6, 59], "stanford": [5, 6, 59], "edu": [5, 6, 10, 59], "view": [5, 6, 10, 59], "zk881ps0522": [5, 6, 59], "signal": [5, 6, 9, 10, 11, 14, 17, 18, 19, 20, 23, 26, 27, 28, 29, 32, 33, 37, 38, 39, 40, 42, 45, 46, 48, 49, 50, 54, 56, 60, 62, 65, 69, 70, 71, 76, 82, 84, 91, 92, 96, 98, 102], "usual": [5, 6, 7, 9, 10, 12, 58, 99], "equal": [5, 6, 69, 70, 71, 89, 91], "pleas": [5, 6, 17, 20, 22, 23, 59, 96], "cite": [5, 6, 59, 116], "miller": [5, 6, 59], "kai": [5, 6, 59], "j": [5, 6, 10, 17, 27, 30, 32, 34, 42, 45, 47, 50, 51, 56, 59, 74, 75, 77, 78, 80, 81, 83, 85, 86, 114], "human": [5, 6, 25, 30, 47, 59, 74, 80, 81, 114], "electrocorticograph": [5, 6, 59], "analys": [5, 6, 59], "behaviour": [5, 6, 59], "11": [5, 6, 8, 11, 14, 15, 17, 19, 20, 21, 59], "2019": [5, 6, 59], "1235": [5, 6, 59], "1038": [5, 6, 59], "s41562": [5, 6, 59], "019": [5, 6, 59, 82], "0678": [5, 6, 59], "copi": [5, 7, 20, 32, 50, 59, 115], "bcicompetitionivdataset4": [5, 6, 118, 120], "test_set": [5, 6, 12], "pipelin": [5, 6, 12, 17], "cutoff": [5, 6], "proper": [5, 6], "higher": [5, 6, 17, 84], "limit": [5, 6, 7, 17, 20, 23], "whole": [5, 6, 18, 19], "deepcopi": 5, "tmin": [5, 6, 7, 11, 15, 23], "24": [5, 13, 16, 17, 18, 19, 20, 82, 86], "tmax": [5, 6, 11, 23], "0x7f8f3f4e6350": 5, "variabl": [5, 6, 59, 112], "type": [5, 6, 10, 27, 28, 29, 30, 32, 33, 34, 36, 37, 42, 53, 58, 61, 63, 69, 70, 71, 72, 82, 87, 89, 91, 92, 94, 95, 97, 99, 101, 103, 109, 111, 114], "misc": [5, 6, 68], "thu": [5, 6], "those": [5, 6, 17, 23, 58, 99], "oper": [5, 6, 7, 9, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 52, 117, 118], "tool": [5, 6, 65, 116], "stabl": [5, 6, 7, 17, 58, 65, 99, 112, 114], "glossari": [5, 6], "term": [5, 6], "todo": 5, "ensur": [5, 88, 112], "pick": [5, 6, 19, 23, 91, 92, 93], "target_sfreq": [5, 6], "temp": [5, 6], "home": [5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 20], "runner": [5, 6, 7, 8, 9, 11, 12, 14, 15, 16], "54": [5, 6, 12, 17], "userwarn": [5, 6, 7, 9, 11, 12, 14, 16, 20], "choic": [5, 6, 12, 120], "cannot": [5, 6, 12, 58, 99], "new_model": [5, 6, 16], "sequenti": [5, 6, 7, 9, 10, 16, 17, 18, 19, 20, 63], "named_children": [5, 6, 16], "add_modul": [5, 6, 16], "targets_from": [5, 68, 91], "last_target_onli": [5, 6, 68, 91, 93], "consid": [5, 9, 10, 12, 23, 38, 39, 40, 58, 99, 107], "find": [5, 6, 10], "wai": [5, 6, 7, 11, 12, 17, 21, 84, 119], "target_transform": [5, 6, 18, 19, 61, 120], "timeseriesloss": [5, 118], "eegregressor": [5, 6, 16, 118, 120], "croppedtimeseriesepochscor": [5, 118], "mi": [5, 6], "regressor": [5, 6, 16, 118, 120], "aggregate_predict": [5, 58, 99], "mse_loss": [5, 16], "r2_train": 5, "r2_score": 5, "lower_is_bett": [5, 6, 17, 18, 19, 20, 105, 106, 107], "on_train": [5, 6, 17, 18, 19, 20, 105, 106], "r2_valid": 5, "verbos": [5, 6, 9, 10, 12, 13, 58, 59, 91, 92, 93, 99, 120], "16": [5, 12, 13, 17, 18, 19, 20, 24, 78, 83], "9076": 5, "3120": 5, "5378": 5, "7403": 5, "0867": 5, "13": [5, 8, 15, 17, 18, 20, 22, 63, 65, 96], "7609": [5, 12], "1284": 5, "9596": 5, "18": [5, 10, 17, 20], "0812": 5, "8802": 5, "12": [5, 8, 10, 12, 14, 15, 17, 18, 19, 20, 22, 60, 88, 114], "7841": 5, "7447": 5, "6787": 5, "17": [5, 12, 17, 19, 20, 22, 24, 86], "8227": 5, "8040": [5, 22], "3943": 5, "5638": 5, "4476": 5, "0004": [5, 6], "8441": 5, "2775": [5, 13], "1869": 5, "4237": 5, "0150": 5, "8200": 5, "5792": 5, "9229": 5, "3549": 5, "4482": 5, "0001": [5, 6, 13, 79, 95], "8485": 5, "9": [5, 6, 8, 11, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 60, 63, 88], "8277": 5, "6203": 5, "3132": 5, "7839": 5, "8958": 5, "0686": 5, "3066": 5, "3316": 5, "0918": 5, "8112": 5, "pad_and_select_predict": 5, "pred": [5, 6, 104, 108, 109, 111], "constant": 5, "constant_valu": 5, "mask": [5, 17, 42, 56, 108], "isnan": 5, "t": [5, 8, 9, 10, 11, 14, 15, 17, 20, 23, 32, 50, 58, 59, 60, 74, 80, 81, 88, 94, 95, 99, 112, 114, 117], "preds_train": [5, 6], "y_train": [5, 6, 12, 18, 19, 20], "predict_tri": [5, 58, 99, 118, 120], "return_target": [5, 58, 99, 110], "preds_valid": [5, 6], "y_valid": [5, 6], "preds_test": [5, 6], "y_test": [5, 6, 12], "adn": [5, 6], "decreas": [5, 6, 20], "nede": [5, 6], "divers": [5, 6, 10], "caus": [5, 6], "overfit": [5, 6, 12, 18, 19, 20], "improv": [5, 6, 9, 17, 18, 19, 20, 115, 120], "set_titl": [5, 6, 7, 11, 12], "arang": [5, 6, 9, 12, 23], "correl": [5, 6, 12], "coeffici": [5, 6, 36, 53, 109], "corr_coeff": [5, 6], "corrcoef": [5, 6], "dimens": [5, 6, 9, 17, 42, 56, 84, 88, 120], "round": [5, 6], "r2": [5, 6], "score": [5, 10, 12, 13, 17, 18, 19, 20, 58, 82, 99, 105, 106, 107, 120], "center": [5, 6, 18, 19, 27, 45], "27": [5, 12, 16, 17, 20, 24, 63], "810": [5, 24], "1165": [5, 24], "plot_bcic_iv_4_ecog_crop": [5, 24], "bcicomp": 6, "0x7f8f0bd62e90": 6, "about": [6, 18, 19, 23, 62, 68, 71, 99, 112, 115], "preced": 6, "create_windows_from_target_channel": [6, 120], "cnosid": 6, "finer": [6, 120], "fexion": 6, "subset": [6, 11, 12, 17, 23, 61, 120], "model_select": [6, 10, 12, 13, 17], "train_test_split": [6, 12, 17], "idx_train": 6, "idx_valid": 6, "random_st": [6, 10, 13, 17, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 50, 51, 100, 101, 102, 103], "test_siz": [6, 12, 17], "n_out_chan": 6, "neuralnetregressor": 6, "epochscor": [6, 17, 18, 19, 20], "pearson": 6, "pearson_r_scor": 6, "net": [6, 58, 84, 88, 99, 105, 106, 107], "mseloss": [6, 99], "valid_pearson_r": 6, "train_pearson_r": 6, "train_r2": 6, "valid_r2": 6, "4961": 6, "1251": 6, "8470": 6, "1501": 6, "1156": 6, "8129": 6, "37": [6, 22], "9261": 6, "6229": 6, "3363": 6, "2718": 6, "9265": 6, "0649": 6, "7959": 6, "36": [6, 12, 18, 19], "3441": [6, 22], "2982": 6, "3714": 6, "0207": 6, "7428": 6, "0542": 6, "1693": 6, "4492": [6, 22], "1409": 6, "4637": 6, "3977": 6, "0261": 6, "0364": 6, "8414": 6, "9674": 6, "8905": 6, "5174": [6, 12], "5585": 6, "6465": 6, "0280": 6, "6678": 6, "6252": 6, "9764": 6, "4443": 6, "6028": 6, "6034": 6, "0377": 6, "6481": 6, "35": [6, 16, 20], "8894": 6, "9495": 6, "5218": 6, "6253": 6, "5203": 6, "0419": 6, "6101": [6, 17], "5050": 6, "8375": 6, "5307": 6, "6251": 6, "5190": 6, "0453": 6, "6095": 6, "7386": 6, "stack": [6, 23], "07": [6, 20], "337": [6, 24], "1984": [6, 24], "plot_bcic_iv_4_ecog_tri": [6, 24], "simplest": 7, "approach": [7, 10, 17, 18, 19, 20, 84, 100, 119], "scenario": [7, 92], "act": 7, "aris": 7, "bottleneck": [7, 76, 86], "take": [7, 8, 12, 18, 19, 20, 44, 72, 84], "consider": 7, "amount": [7, 18, 19, 20], "solut": 7, "clear": 7, "reload": [7, 23, 97], "onc": [7, 12, 17, 91, 102], "capabl": [7, 12, 23, 58, 99], "downsid": 7, "write": [7, 14], "cours": [7, 59], "space": [7, 11, 17], "slow": [7, 17, 18, 19, 20, 112], "over": [7, 10, 12, 19, 32, 37, 38, 39, 40, 50, 54, 58, 99, 120], "core": [7, 23], "whenev": 7, "possibl": [7, 9, 10, 14, 20, 23, 58, 60, 91, 99, 112, 115, 120], "speed": [7, 19, 20, 120], "up": [7, 8, 60, 88, 120], "significantli": 7, "joblib": 7, "made": [7, 120], "argument": [7, 9, 10, 12, 26, 28, 29, 30, 32, 41, 43, 44, 58, 64, 90, 96, 99, 107, 120], "both": [7, 10, 13, 17, 22, 60, 63, 82, 83, 88], "shown": [7, 10, 11, 12, 17, 18, 20, 60, 63], "remain": [7, 12], "tradeoff": 7, "specif": [7, 14, 17, 18, 19, 20, 58, 72, 82, 99, 101], "tempfil": [7, 14, 23], "memory_profil": 7, "memory_usag": 7, "sleepphysionet": [7, 17, 18, 19, 20, 120], "goe": 7, "three": [7, 10, 12, 58, 59, 76, 99, 115], "prepare_data": 7, "n_rec": 7, "tmp_dir": 7, "temporarydirectori": 7, "save_dir": [7, 23, 97], "concat_d": [7, 14, 23, 91, 92, 93, 97], "crop_wake_min": [7, 17, 18, 19, 20, 65], "overwrit": [7, 14, 58, 61, 62, 66, 67, 68, 73, 97, 99], "channel_wis": [7, 17, 18, 19, 20], "measur": 7, "its": [7, 9, 11, 18, 19, 21, 58, 61, 90, 99, 117], "peak": [7, 91, 92], "character": 7, "recommend": [7, 12, 18, 20, 25, 117], "adapt": [7, 18, 20, 75, 76, 84, 85, 86], "n_repet": 7, "all_n_rec": 7, "all_n_job": 7, "mem": 7, "proc": 7, "time_taken": 7, "max_mem": 7, "574": [7, 14], "directori": [7, 14, 23, 59, 61, 66, 67, 72, 97], "tmp": [7, 14], "tmphpmdmldg": 7, "subdirectori": [7, 14, 61, 97], "570": [7, 14], "match": [7, 14, 15, 61], "exist": [7, 14, 22, 23, 59, 61, 62, 68, 97], "encount": [7, 14, 115], "mix": [7, 14, 36, 53, 109], "tmphcb7nitz": 7, "tmp31a5crsk": 7, "orang": [7, 17], "sub_df": 7, "groupbi": 7, "scatter": [7, 12, 17], "mib": 7, "without": [7, 12, 23, 58, 99, 109, 120], "simpl": [7, 17, 23], "circl": 7, "advantag": [7, 12, 76], "31": [7, 17, 18, 19, 20, 24], "558": [7, 24], "385": [7, 24], "plot_benchmark_preprocess": [7, 24], "luka": [8, 11, 14, 15, 16, 21, 22, 23, 25, 120], "gemein": [8, 11, 14, 15, 16, 21, 22, 23, 120], "l": [8, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 74, 80, 81, 88, 100, 114], "create_from_x_i": 8, "fetch": [8, 11, 15, 21, 60, 63, 64], "imagin": [8, 15], "feet": [8, 14, 15, 21, 60, 63], "event_cod": [8, 15], "don": [8, 15, 17, 20, 58, 99, 117], "yet": [8, 15], "physionet_path": [8, 15], "eegbci": [8, 15], "load_data": [8, 15], "update_path": [8, 15], "io": [8, 15, 23, 62, 96], "read_raw_edf": [8, 15, 23], "stim_channel": [8, 15], "mne_data": [8, 15, 59], "eegmmidb": [8, 15], "s022": [8, 15], "s022r05": [8, 15], "detect": [8, 15, 63], "structur": [8, 10, 15, 17, 101, 102], "19999": [8, 15], "124": [8, 15], "994": [8, 15], "sec": [8, 14, 15], "s022r06": [8, 15], "s022r09": [8, 15], "s022r10": [8, 15], "s022r13": [8, 15], "s022r14": [8, 15], "origin": [8, 9, 12, 14, 15, 20, 21, 36, 37, 38, 39, 40, 42, 53, 54, 56, 61, 71, 75, 76, 77, 78, 92, 96], "get_data": [8, 9], "look": [8, 12, 20, 22, 23, 59, 101], "rawarrai": [8, 15, 71], "float64": [8, 15], "20000": 8, "readi": [8, 14, 15, 23], "event": [8, 11, 14, 15, 21, 65, 71, 91, 92], "point": [8, 11, 14, 15, 21, 60, 94, 95], "manipul": 8, "240": 8, "x_i": 8, "y_i": 8, "window_ind": [8, 11], "start_ind": 8, "stop_ind": 8, "358": [8, 24], "plot_custom_dataset_exampl": [8, 24], "wise": [9, 10, 17, 18, 19, 20], "illustr": 9, "effect": 9, "simon": [9, 11, 120], "brandt": [9, 11, 120], "simonbrandt": [9, 11], "protonmail": [9, 11], "c\u00e9dric": [9, 10], "rommel": [9, 10, 120], "cedric": [9, 10, 120], "inria": [9, 10, 20], "fr": [9, 10, 20], "cut": [9, 10, 15, 23, 27, 45, 69], "0x7f8f0b79d850": 9, "callabl": [9, 31, 44, 58, 61, 62, 68, 74, 81, 90, 99, 107], "demonstr": [9, 10], "below": [9, 17, 25, 27, 115], "illutr": 9, "chose": 9, "frequencyshift": [9, 118], "randomli": [9, 17, 27, 28, 29, 34, 42, 46, 48, 51], "translat": 9, "within": [9, 10, 63, 86, 102, 120], "given": [9, 10, 17, 21, 28, 29, 30, 32, 41, 43, 44, 58, 59, 72, 98, 99, 110, 117, 120], "probabl": [9, 10, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 58, 74, 75, 81, 85, 86, 99], "modifi": [9, 17, 18, 19, 23, 32, 50, 58, 90, 96, 99, 112], "max_delta_freq": [9, 33], "shift": [9, 12, 33, 49], "let": [9, 10, 22], "fix": [9, 30, 47, 115, 120], "x_tr": 9, "as_tensor": 9, "float": [9, 17, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 54, 58, 65, 69, 71, 74, 75, 76, 81, 82, 83, 84, 85, 86, 88, 92, 94, 95, 98, 99, 109, 114], "505": 9, "tensor": [9, 18, 19, 20, 22, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 80, 82, 83, 84, 85, 86, 87, 99, 104, 108, 109], "revers": 9, "throw": 9, "futur": 9, "releas": [9, 115], "mt": 9, "transpos": 9, "matricesor": 9, "permut": [9, 29, 30, 36, 47, 48, 53], "ndim": 9, "trigger": [9, 20], "conda": [9, 20], "feedstock_root": [9, 20], "build_artifact": [9, 20], "recipe_1664817695526": [9, 20], "aten": [9, 20], "src": [9, 20], "nativ": [9, 20], "tensorshap": 9, "cpp": [9, 20], "2981": 9, "n_pad": 9, "psd": 9, "plot_psd": 9, "freq": 9, "time_frequ": 9, "psd_array_multitap": 9, "fmin": 9, "fmax": 9, "log10": 9, "psds_mean": 9, "k": [9, 17, 18, 19, 20, 27, 34, 37, 38, 39, 40, 42, 45, 51, 54, 56, 74, 80, 81, 114], "r": [9, 17, 18, 19, 20, 27, 34, 42, 45, 51, 56, 74, 76, 77, 78, 80, 81, 114], "titl": [9, 12, 25], "multitap": 9, "gradiomet": 9, "xlabel": [9, 12], "ylabel": [9, 12], "power": [9, 17], "spectral": 9, "densiti": 9, "db": 9, "try": [9, 10, 14, 22, 23, 115, 119], "comput": [9, 10, 14, 17, 18, 19, 20, 22, 23, 25, 38, 39, 40, 58, 60, 71, 76, 77, 78, 82, 92, 94, 95, 99, 104, 105, 106, 108, 112, 115, 120], "order": [9, 10, 21, 23, 30, 38, 39, 40, 47, 63, 66, 67, 96], "pass": [9, 10, 18, 19, 21, 22, 26, 31, 44, 58, 64, 80, 82, 83, 84, 85, 86, 99, 104, 107, 108, 117, 120], "augmenteddataload": [9, 10, 120], "signflip": [9, 118], "freq_shift": 9, "sign_flip": [9, 118], "iter": [9, 10, 11, 12, 17, 22, 23, 36, 58, 99, 110], "iterator_train": [9, 10, 58, 99], "tell": [9, 10, 115], "iterator_train__transform": [9, 10], "6225": 9, "2431": 9, "5632": 9, "5001": 9, "2218": 9, "3993": 9, "3597": 9, "0973": 9, "2945": 9, "5365": 9, "2639": 9, "0922": 9, "0275": 9, "3752": 9, "would": [9, 12, 58, 74, 81, 99], "equival": 9, "although": [9, 58, 99], "composit": [9, 31], "composed_transform": 9, "windowsdataset": [9, 14, 61, 69, 70, 71, 72, 91, 92, 97, 118, 120], "commonli": 9, "done": [9, 14, 20, 91, 92], "advis": [9, 13, 32, 50, 99], "49": [9, 17, 24], "901": [9, 24], "1089": 9, "plot_data_augment": [9, 24], "inde": 10, "known": [10, 58], "task": [10, 18, 19, 20, 32, 50, 60, 62, 75, 85, 102], "phenomenon": 10, "studi": [10, 17], "methodologi": 10, "propos": [10, 28, 29, 32, 42, 46, 48, 50, 56, 120], "openli": [10, 17, 18, 19, 20], "brain": [10, 25, 74, 76, 77, 78, 80, 81, 114, 116], "recent": [10, 115], "artifici": 10, "cast": [10, 31], "paradigm": [10, 17, 58, 60, 99, 110], "present": [10, 12, 23, 60, 63], "pretext": 10, "demand": 10, "intens": 10, "c": [10, 12, 17, 18, 19, 20, 32, 50, 77, 78, 88, 100, 115], "paillard": 10, "moreau": [10, 120], "gramfort": [10, 17, 18, 19, 25, 83, 102, 120], "2022": [10, 75, 76], "who": [10, 116], "strength": 10, "context": [10, 17, 25, 84, 102], "systemat": 10, "2206": 10, "14483": 10, "chehab": [10, 17, 20, 102, 120], "hyv\u00e4rinen": [10, 17, 102], "engemann": [10, 17, 25, 102], "2021": [10, 19, 20, 76, 84, 88, 100], "uncov": [10, 17, 102], "clinic": [10, 17, 102], "journal": [10, 25], "engin": [10, 17, 18, 19, 37, 38, 39, 40, 54, 76, 83, 84], "046020": 10, "bruno": [10, 120], "aristimunha": [10, 120], "ufabc": 10, "br": 10, "0x7f8f099f0550": 10, "slicedataset": [10, 12, 13], "eval_set": [10, 13], "categor": [10, 100], "aggreg": 10, "sever": [10, 14, 23, 91, 92, 116, 119], "b": [10, 12, 17, 18, 19, 20, 30, 47, 77, 78, 88], "spatial": [10, 32, 50, 74, 81, 88], "ftsurrog": [10, 118], "smoothtimemask": [10, 118], "channelsdropout": [10, 118], "respect": [10, 13, 17], "adjust": [10, 12, 117], "insid": [10, 76], "rememb": [10, 12], "\u03c6max": 10, "2\u03c0": 10, "p_drop": [10, 28, 46], "linspac": 10, "transforms_freq": 10, "phase_noise_magnitud": [10, 32, 50], "phase_freq": 10, "transforms_tim": 10, "mask_len_sampl": [10, 42, 56], "transforms_spati": 10, "prob": 10, "gridsearchcv": [10, 12, 13, 107, 120], "control": [10, 12, 17, 18, 19, 58, 82, 91, 92, 97, 99, 120], "framework": 10, "necessari": [10, 58, 99], "slicedata": 10, "mandatori": 10, "eval": [10, 13, 16], "train_x": [10, 13], "idx": [10, 12, 13, 18, 19, 20], "train_i": [10, 13], "kfold": [10, 12, 13], "cv": [10, 12, 13], "n_split": [10, 12, 13], "fit_param": [10, 12, 13], "param_grid": [10, 12, 13], "return_train_scor": [10, 12, 13], "refit": [10, 12, 13], "error_scor": [10, 12, 13], "fold": [10, 13], "candid": [10, 12, 13], "uniniti": [10, 58, 99], "kern": 10, "analysi": [10, 17, 18, 19, 20, 25, 116], "search_result": [10, 12, 13], "cv_results_": [10, 12, 13], "best_run": [10, 12, 13], "rank_test_scor": [10, 12, 13], "best_aug": 10, "param": [10, 12, 13, 17, 27, 28, 29, 30, 32, 33, 34, 36, 37, 42, 82], "validation_scor": 10, "around": [10, 19, 37, 38, 39, 40, 54, 92, 100], "mean_test_scor": [10, 12, 13], "training_scor": 10, "mean_train_scor": [10, 12, 13], "report_messag": 10, "gave": [10, 12, 13], "eval_x": [10, 13], "eval_i": [10, 13], "2f": [10, 12, 13], "accuracyof": 10, "26": [10, 11, 12, 17, 18, 19, 83], "74": 10, "00": [10, 12, 14, 18, 19, 24], "942": [10, 24], "801": [10, 24], "plot_data_augmentation_search": [10, 24], "run_0": [11, 21, 101], "run_1": [11, 14, 21], "run_2": [11, 21], "run_3": [11, 14, 21], "run_4": [11, 21], "run_5": [11, 21], "break": [11, 23, 60], "place": [11, 96, 98], "electrod": [11, 60, 63], "criteria": [11, 58, 99], "subset_nam": 11, "232164": 11, "400": [11, 19, 20, 120], "i_window_in_tri": [11, 68, 101, 111], "i_start_in_tri": [11, 68, 101], "i_stop_in_tri": [11, 68, 101, 111], "scorer": [11, 107], "23": [11, 16, 17, 18, 19, 20, 24], "300": [11, 12], "700": 11, "inspect": 11, "max_i": 11, "ax_arr": 11, "sharex": [11, 18, 19, 20], "sharei": 11, "enumer": [11, 12, 17, 23], "4e": 11, "altern": [11, 17, 58, 99, 117], "evenli": 11, "sliding_windows_dataset": 11, "1200": 11, "603": [11, 16], "indic": [11, 12, 16, 17, 18, 19, 21, 36, 53, 61, 101, 102, 103, 120], "468": 11, "crop_window": 11, "include_tmax": [11, 23], "epochs_preprocessor": 11, "900": 11, "fz": [11, 23], "fc3": 11, "fc1": 11, "fcz": 11, "fc2": 11, "fc4": 11, "c5": 11, "c3": [11, 23], "c1": 11, "cz": [11, 19, 23, 96], "c2": 11, "c4": [11, 23], "c6": 11, "cp3": 11, "cp1": 11, "cpz": 11, "cp2": 11, "cp4": 11, "p1": 11, "pz": [11, 19, 23], "p2": 11, "poz": 11, "again": [11, 12, 14, 22], "576": 11, "368": [11, 24], "136": 11, "plot_dataset_exampl": [11, 24], "properli": 12, "showcas": [12, 22, 23], "detail": [12, 36, 53, 75, 77, 78, 80, 85, 86, 96, 112], "exclus": 12, "page": [12, 25, 115, 116, 117], "elabor": 12, "feel": 12, "free": 12, "skip": [12, 14, 22, 88], "distinguish": 12, "scheme": 12, "short": [12, 20, 23, 60], "answer": 12, "reliabl": 12, "sound": 12, "divis": [12, 82, 84, 95], "But": 12, "stori": 12, "develop": [12, 115], "ml": 12, "complex": [12, 17, 18, 19, 20, 63, 82, 117], "degre": [12, 37, 38, 39, 40, 54], "freedom": 12, "kept": 12, "adjustmenty": 12, "leakag": 12, "memor": 12, "longer": [12, 58, 99], "independ": [12, 32, 50, 120], "even": [12, 20, 59, 88], "never": 12, "explicitli": 12, "recogn": 12, "reason": [12, 17, 19, 58, 99, 107], "behind": 12, "alwai": [12, 25, 44, 58, 99], "paramt": 12, "segment": [12, 22, 23], "readabl": 12, "reiniti": 12, "0x7f8f1c0c5990": 12, "anoth": [12, 17, 102], "No": [12, 14, 15, 20, 60], "matter": [12, 66, 67], "easiest": 12, "distinct": 12, "separ": [12, 17, 60, 92, 102], "previous": 12, "earlystop": [12, 17], "less": [12, 17], "credibl": 12, "test_acc": 12, "acc": [12, 17], "6292": 12, "2986": [12, 13], "1877": 12, "2687": 12, "3333": [12, 13], "0653": 12, "3407": 12, "3576": 12, "0525": 12, "2602": 12, "78": [12, 17, 65], "patch": 12, "plot_simple_train_test": 12, "braindecode_cmap": 12, "3a6190": 12, "683e00": 12, "ddf2ff": 12, "2196f3": 12, "lw": 12, "ylim": 12, "ytick": 12, "yticklabel": 12, "nsplit": 12, "ndataset": 12, "02": [12, 24], "risk": [12, 36, 53, 109], "tweak": 12, "until": [12, 60], "visit": 12, "guid": 12, "realli": [12, 23], "small": [12, 20, 115], "quit": 12, "unreli": 12, "ratio": 12, "leav": 12, "empti": [12, 58], "80": [12, 15, 19, 20, 63, 84], "x_train": 12, "train_indic": 12, "val_indic": 12, "indices_": 12, "train_subset": 12, "val_subset": 12, "meaning": 12, "4304": 12, "9678": 12, "3103": 12, "6429": [12, 22], "7862": 12, "4043": 12, "8859": 12, "3448": 12, "5588": 12, "3738": 12, "4217": 12, "7960": 12, "3793": 12, "0956": 12, "3692": 12, "4739": 12, "8114": 12, "4138": 12, "6660": 12, "3587": 12, "81": [12, 15], "plot_train_valid_test": 12, "mention": [12, 23], "suffici": 12, "distribut": [12, 18, 19, 36], "compens": [12, 14], "afterward": [12, 23], "veri": [12, 20, 61, 92], "unseen": 12, "holdout": 12, "highli": 12, "cross_val_scor": 12, "splitter": 12, "train_val_split": 12, "cv_result": 12, "std": [12, 34, 51, 63], "5522": 12, "9052": 12, "3241": 12, "5870": [12, 22], "8137": 12, "9661": 12, "7000": [12, 17], "6922": 12, "9651": 12, "7652": 12, "6782": 12, "3088": 12, "5565": [12, 13], "8736": 12, "4259": 12, "6217": 12, "7499": 12, "3856": 12, "6855": 12, "4885": 12, "8000": 12, "6319": 12, "4815": 12, "5652": 12, "9333": 12, "5025": 12, "6696": 12, "7818": 12, "3947": [12, 22], "7217": 12, "4265": 12, "7826": 12, "6924": 12, "4976": 12, "4935": 12, "8893": 12, "4408": 12, "5844": 12, "7852": 12, "4621": 12, "7100": 12, "6929": 12, "3874": 12, "7879": 12, "6366": 12, "4193": 12, "6494": 12, "8331": 12, "4510": 12, "7489": 12, "6511": 12, "5093": [12, 22], "7965": 12, "6071": 12, "7423": 12, "8398": 12, "6172": 12, "5868": [12, 17], "encode_color": 12, "br_cmap": 12, "encod": [12, 20, 84, 88], "plot_k_fold": 12, "mosaic": 12, "aa": 12, "bc": 12, "constrained_layout": 12, "subplot_mosa": 12, "gridspec_kw": 12, "height_ratio": 12, "width_ratio": 12, "ii": 12, "tr": 12, "tt": 12, "fill": 12, "group": [12, 20, 82], "nan": [12, 108], "color_indic": 12, "map": [12, 17, 18, 19, 20, 22, 23, 25, 58, 71, 74, 80, 81, 87, 91, 92, 99, 114], "vmin": [12, 114], "vmax": [12, 114], "xlim": 12, "ndata": 12, "yaxi": 12, "set_fonts": 12, "subplots_adjust": 12, "wspace": 12, "075": 12, "plot_how_train_test_and_tun": [12, 24], "553": 12, "fixedformatt": 12, "fixedloc": 12, "586": 12, "incompat": 12, "disabl": [12, 58, 99], "One": [12, 60, 76], "earli": 12, "rough": 12, "understand": [12, 17, 119], "converg": [12, 17], "quickli": 12, "messi": 12, "jointli": 12, "sould": 12, "analog": [12, 107], "grid": 12, "strategi": 12, "tupl": [12, 13, 36, 44, 53, 58, 62, 65, 89, 96, 99, 102, 114], "00625": [12, 13], "000625": [12, 13, 16], "2696": 12, "3651": 12, "0063": [12, 13], "8247": 12, "2783": 12, "1264": 12, "0047": [12, 13], "4103": 12, "7553": 12, "0016": [12, 13], "4466": 12, "7174": 12, "4336": [12, 22], "6261": 12, "8520": 12, "5110": 12, "7261": 12, "7165": 12, "3758": 12, "6617": 12, "4183": 12, "8261": 12, "5548": 12, "4125": 12, "5590": [12, 17], "8790": 12, "7686": 12, "6424": 12, "7154": 12, "7473": [12, 22], "7743": 12, "6909": 12, "7535": 12, "8160": 12, "6767": 12, "8073": 12, "82": [12, 13, 34, 51], "61": [12, 18], "replac": [12, 42, 56, 120], "572": [12, 24], "718": [12, 22, 24], "0x7f8f1bd8ad90": 13, "slice": [13, 91, 92], "fine": 13, "sinc": [13, 17, 18, 19, 20, 22, 23, 58, 99, 115], "42": [13, 16, 17], "0000625": 13, "0037": 13, "2328": 13, "5417": 13, "0258": 13, "1791": 13, "6944": 13, "6430": 13, "2165": 13, "8472": 13, "4718": 13, "2486": 13, "0675": 13, "2472": 13, "4167": 13, "2638": 13, "1805": 13, "6736": 13, "7800": 13, "3341": 13, "8056": 13, "6616": 13, "2071": 13, "3056": 13, "6027": 13, "2207": 13, "2708": 13, "1093": 13, "2581": 13, "3681": 13, "9526": 13, "2244": 13, "5347": 13, "8761": 13, "2749": 13, "3125": 13, "5974": 13, "2005": 13, "2917": 13, "0369": [13, 22], "2189": 13, "9243": 13, "1998": 13, "5625": 13, "8559": 13, "2099": 13, "2361": 13, "7544": 13, "1925": 13, "2666": 13, "5915": [13, 20], "2429": 13, "3194": 13, "5404": 13, "1709": 13, "2153": 13, "7057": 13, "1903": 13, "2847": 13, "5504": 13, "2114": 13, "6305": 13, "2134": 13, "6165": 13, "1643": 13, "4861": 13, "2402": 13, "3621": 13, "5521": 13, "3622": 13, "8299": 13, "8836": 13, "2875": [13, 22], "6766": 13, "3823": 13, "39": [13, 22], "28": [13, 16, 17, 18, 20, 24, 76], "851": [13, 24], "485": [13, 24], "plot_hyperparameter_tuning_with_scikit": [13, 24], "load_concat_dataset": [14, 120], "48": [14, 17, 18, 19, 21, 60], "id": [14, 21, 23, 61, 66, 67, 72, 91, 92, 120], "fn": [14, 90], "0x7f8f1bfbc050": 14, "concat": [14, 61, 91, 92, 97], "addition": [14, 23, 25, 58, 99, 110], "json": [14, 61, 72, 120], "hold": [14, 23, 61, 62, 68, 91, 92], "due": 14, "tmpdir": 14, "mkdtemp": [14, 23], "temporari": 14, "tmpco64r83z": 14, "close": [14, 17, 102, 115], "complianc": 14, "option": [14, 17, 19, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 50, 51, 58, 61, 64, 71, 92, 99, 110, 114, 120], "ag": [14, 16, 17, 22, 23, 60, 63, 66, 67], "gender": [14, 22, 23, 66, 67], "version": [14, 17, 18, 19, 22, 115, 117], "upon": 14, "dataset_load": 14, "ids_to_load": [14, 72], "open": [14, 115, 116], "3868": 14, "386": 14, "800": [14, 23], "annot": [14, 15, 21], "left_hand": [14, 21], "right_hand": [14, 21], "tongu": [14, 21, 60], "epo": [14, 61, 72], "windows_dataset_load": 14, "interest": [14, 17, 22, 23], "3900": 14, "ctf": 14, "ad": [14, 15, 23, 61, 66, 67, 86, 88, 120], "metadata": [14, 15, 61, 68, 91, 100, 101, 102, 103], "baselin": [14, 15], "correct": [14, 15, 58, 75, 76, 77, 78, 99, 120], "activ": [14, 15, 58, 63, 74, 76, 117], "203": [14, 24], "410": [14, 20, 24], "plot_load_save_dataset": [14, 24], "create_from_mne_raw": 15, "create_from_mne_epoch": 15, "t0": 15, "t1": 15, "t2": 15, "60": [15, 16, 17, 19, 23], "beforehand": 15, "list_of_epoch": [15, 70], "Not": 15, "037": [15, 24], "plot_mne_dataset_exampl": [15, 24], "train_neg_root_mean_squared_error": 16, "valid_neg_root_mean_squared_error": 16, "1088": [16, 17, 24, 86], "8579": 16, "2168": 16, "7894": 16, "5414": 16, "1971": 16, "1086": 16, "1707": 16, "0353": 16, "1303": 16, "8094": 16, "0003": 16, "9055": 16, "1084": 16, "8258": 16, "1008": 16, "1279": 16, "9120": 16, "8641": 16, "basedataset": [16, 23, 26, 61, 68, 72, 97, 118, 120], "create_mne_dummy_raw": 16, "model_nam": 16, "6000": [16, 17], "21": [16, 17, 18, 20, 23], "z": [16, 17, 18, 19, 37, 40, 54, 85], "in_chan": [16, 20, 74, 77, 78, 79, 80, 81, 86, 88, 89], "optimizer_lr": 16, "optimizer_weight_decai": 16, "unknown": [16, 107], "fake_regression_dataset": 16, "n_fake_rec": 16, "n_fake_ch": 16, "fake_sfreq": 16, "fake_duration_": 16, "train_or_ev": 16, "save_fnam": 16, "savedir": 16, "randint": 16, "fake_descrit": 16, "base_d": 16, "neg_root_mean_squared_error": 16, "seem": 16, "desir": [16, 27, 37, 45, 54, 60], "behavior": [16, 18, 19, 58, 120], "954": [16, 24], "108": [16, 20], "plot_regress": [16, 24], "ssl": 17, "leverag": [17, 84], "unlabel": 17, "design": [17, 84], "prior": 17, "autocorrel": 17, "strutur": 17, "relat": [17, 25, 63], "reus": [17, 18, 20], "featur": [17, 18, 19, 76, 82, 83, 84, 88, 115], "extractor": [17, 18, 19, 82, 83, 84, 88], "weight": [17, 18, 19, 20, 114], "downstream": 17, "help": [17, 18, 19, 117], "quantiti": 17, "strictli": 17, "rp": 17, "far": [17, 102], "apart": 17, "physiolog": [17, 18, 19, 20], "relev": [17, 25, 58, 99], "boost": 17, "regim": 17, "sleep_physionet": [17, 18, 19, 20], "microvolt": [17, 18, 19], "lowpass": [17, 18, 19], "0x7f8f1b372b10": 17, "conveni": 17, "later": [17, 22, 23, 62, 63, 66, 67, 74], "window_size_": [17, 18, 19, 20], "merg": [17, 18, 19, 20], "aasm": [17, 18, 19, 20], "w": [17, 18, 19, 20], "standard_scal": [17, 18, 19], "0x7f8f0b08db50": 17, "new": [17, 18, 19, 20, 30, 47, 115, 117], "receiv": 17, "pair": [17, 102], "uniqu": [17, 18, 19, 20, 21, 23, 58, 62, 99], "subj_train": 17, "subj_test": 17, "subj_valid": 17, "relativepositioningdataset": 17, "__getitem__": [17, 58, 99], "__init__": 17, "list_of_d": [17, 61], "super": [17, 105, 106], "return_pair": 17, "ind1": 17, "ind2": 17, "properti": [17, 61, 120], "_return_pair": 17, "setter": 17, "split_id": [17, 18, 19, 20, 23, 61, 120], "main": [17, 76], "tau_po": [17, 102], "tau_neg": [17, 102], "min": [17, 23, 65], "n_exampl": [17, 102], "regular": [17, 94, 95], "instanc": [17, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 51, 58, 99, 101, 120], "lower": [17, 18, 23, 27, 45, 107], "relativepositioningsampl": [17, 118], "n_examples_train": 17, "n_examples_valid": 17, "n_examples_test": 17, "train_sampl": [17, 18, 19, 20], "same_rec_neg": [17, 102], "valid_sampl": [17, 18, 19, 20], "presampl": [17, 102, 118], "test_sampl": 17, "four": [17, 18, 37, 60, 63], "embedd": 17, "dimension": [17, 58, 99, 110], "last": [17, 22, 42, 56, 63, 65, 69, 70, 71, 74, 81, 91, 92], "embed": [17, 18, 19], "wrap": [17, 61], "siames": 17, "contrastivenet": 17, "sleepstagerchambon2018": [17, 18, 118], "input_size_sampl": [17, 18, 19, 20], "emb_siz": 17, "emb": 17, "n_conv_ch": [17, 83], "input_size_": [17, 18, 19, 20, 82, 83, 84, 88], "apply_batch_norm": [17, 82, 83], "linear": [17, 18, 19, 36, 53, 74, 81, 82, 83, 84], "top": [17, 25], "forward": [17, 31, 44, 58, 80, 82, 83, 84, 85, 86, 87, 88, 90, 99, 104, 108, 110, 118], "x1": [17, 102], "x2": [17, 102], "z1": 17, "z2": 17, "flatten": [17, 18, 19, 20], "similar": 17, "account": [17, 61, 91], "checkpoint": 17, "5e": 17, "512": 17, "cp": 17, "dirnam": 17, "f_criterion": 17, "f_optim": 17, "f_histori": 17, "early_stop": 17, "patienc": 17, "train_acc": 17, "valid_acc": 17, "bcewithlogitsloss": [17, 58, 99], "max_epoch": [17, 58, 99], "iterator_train__sampl": [17, 18, 19, 20], "iterator_valid__sampl": [17, 18, 19, 20], "iterator_train__num_work": 17, "iterator_valid__num_work": 17, "load_param": 17, "lowest": 17, "pt": 17, "delet": [17, 22, 23, 61, 97], "5520": 17, "7133": 17, "6080": 17, "6831": 17, "1561": 17, "5920": 17, "6791": 17, "5720": 17, "6326": 17, "7034": 17, "5160": 17, "8718": 17, "6880": 17, "6443": 17, "5924": 17, "5320": 17, "6846": 17, "5560": 17, "6835": 17, "5706": 17, "5600": 17, "7039": 17, "6200": 17, "6580": 17, "5914": 17, "6400": [17, 18], "6484": 17, "7040": 17, "6153": 17, "6003": 17, "6468": 17, "6760": 17, "5912": 17, "6699": 17, "6320": 17, "5976": 17, "6720": 17, "5821": 17, "5802": 17, "6487": 17, "7200": [17, 19], "5778": 17, "6640": 17, "6184": 17, "7120": 17, "5807": 17, "5464": 17, "6960": 17, "5648": 17, "6122": [17, 18], "6362": 17, "5694": 17, "5813": 17, "6840": 17, "5716": 17, "5604": 17, "5587": 17, "5734": 17, "7160": 17, "5542": 17, "5615": 17, "7320": 17, "5529": 17, "5485": 17, "6520": 17, "5785": 17, "5457": 17, "5647": 17, "5812": 17, "5461": 17, "6296": 17, "7080": 17, "5562": 17, "7240": 17, "5438": 17, "5685": 17, "5661": 17, "5400": 17, "5581": 17, "5816": 17, "7360": 17, "5298": 17, "5569": 17, "7480": 17, "5263": 17, "5251": 17, "5672": 17, "5258": 17, "5411": 17, "5458": 17, "5244": 17, "5820": 17, "7640": 17, "5730": 17, "7440": 17, "5200": 17, "6281": 17, "7520": 17, "5108": 17, "6132": 17, "balanc": [17, 18, 19, 20, 100, 120], "to_list": [17, 18, 19, 20], "ys1": 17, "ys2": 17, "talk": 17, "y1": 17, "y2": 17, "lines1": 17, "labels1": 17, "get_legend_handles_label": 17, "lines2": 17, "labels2": 17, "displai": [17, 18, 19, 20, 63, 112], "confus": [17, 18, 19, 20, 114, 120], "matrix": [17, 18, 19, 20, 29, 30, 37, 47, 48, 54, 114, 120], "classification_report": [17, 18, 19, 20], "switch": 17, "73": 17, "101": [17, 18, 19, 20], "precis": [17, 18, 19, 20, 114], "recal": [17, 18, 19, 20], "f1": [17, 18, 19, 20, 78, 107], "72": [17, 20, 88, 100], "66": 17, "121": 17, "68": [17, 18, 118], "129": 17, "70": 17, "macro": [17, 18, 19, 20], "avg": [17, 18, 19, 20], "logist": 17, "balanced_accuracy_scor": [17, 20], "linear_model": 17, "logisticregress": 17, "standardscal": 17, "make_pipelin": 17, "no_grad": 17, "feat": 17, "batch_x": [17, 22], "concaten": [17, 18, 19, 61, 87], "log_reg": 17, "penalti": 17, "l2": 17, "class_weight": [17, 18, 19, 20], "solver": 17, "lbfg": 17, "multi_class": 17, "multinomi": 17, "clf_pipe": 17, "train_y_pr": 17, "valid_y_pr": 17, "test_y_pr": 17, "train_bal_acc": [17, 18, 19, 20], "valid_bal_acc": [17, 18, 19, 20], "test_bal_acc": 17, "bal": 17, "4f": 17, "_logist": 17, "818": [17, 19, 84], "convergencewarn": 17, "fail": [17, 23], "statu": 17, "stop": [17, 27, 45, 71, 91, 92, 111, 120], "NO": 17, "reach": [17, 18, 19], "max_it": 17, "document": [17, 19, 23, 25, 115], "extra_warning_msg": 17, "_logistic_solver_convergence_msg": 17, "9254": 17, "5558": 17, "5095": 17, "29": [17, 19, 20, 84, 118], "317": 17, "213": 17, "92": 17, "34": 17, "111": 17, "71": 17, "77": [17, 20], "142": [17, 120], "44": [17, 63], "109": 17, "56": [17, 20], "562": 17, "93": [17, 34, 51], "105": 17, "65": 17, "170": [17, 18, 120], "55": [17, 20], "51": 17, "chanc": [17, 18, 19], "level": [17, 18, 19, 59, 120], "problem": [17, 32, 50, 115], "quick": [17, 101], "2d": [17, 114], "pca": 17, "decomposit": 17, "cm": [17, 60, 114], "n_compon": 17, "tsne": 17, "compon": [17, 18, 19, 20, 63, 76], "fit_transform": 17, "get_cmap": 17, "viridi": 17, "n1": 17, "n2": [17, 18, 19, 20], "n3": 17, "alpha": [17, 20, 23, 36, 76], "0x7f8f1bcd2090": 17, "nonlinear": [17, 58, 79, 99], "umap": 17, "insight": 17, "explor": 17, "sex": 17, "achiev": [17, 18, 19, 20], "avenu": 17, "describ": [17, 20, 74, 76, 81, 82, 83, 84, 88], "discov": 17, "2020": [17, 27, 28, 29, 34, 42, 45, 46, 48, 51, 56, 76, 82, 86, 102], "preprint": [17, 27, 28, 29, 30, 32, 34, 42, 45, 46, 47, 48, 50, 51, 56, 77, 78, 85, 102], "2007": [17, 27, 34, 42, 45, 51, 56, 102], "16104": [17, 102], "kemp": [17, 18, 19, 20], "zwinderman": [17, 18, 19, 20], "tuk": [17, 18, 19, 20], "kamphuisen": [17, 18, 19, 20], "obery": 17, "2000": [17, 18, 19, 20, 22, 101], "neuron": [17, 18, 19, 20], "feedback": [17, 18, 19, 20, 60], "wave": [17, 18, 19, 20], "microcontinu": [17, 18, 19, 20], "ieee": [17, 18, 19, 20, 37, 38, 39, 40, 54, 75, 76, 83, 84], "transact": [17, 19, 76, 83, 84], "biomed": 17, "47": [17, 18, 19, 20], "1185": [17, 18, 19, 20], "1194": [17, 18, 19, 20], "goldberg": [17, 18, 19, 20], "amar": [17, 18, 19, 20], "glass": [17, 18, 19, 20], "hausdorff": [17, 18, 19, 20], "ivanov": [17, 18, 19, 20], "mark": [17, 18, 19, 20], "stanlei": [17, 18, 19, 20], "physiobank": [17, 18, 19, 20], "physiotoolkit": [17, 18, 19, 20], "research": [17, 18, 19, 20, 25, 116], "circul": [17, 18, 19, 20], "e215": [17, 18, 19, 20], "e220": [17, 18, 19, 20], "chambon": [17, 18, 19, 83], "galtier": [17, 18, 19, 83], "arnal": [17, 18, 19, 83], "wainrib": [17, 18, 19, 83], "2018": [17, 18, 19, 30, 32, 34, 36, 47, 50, 51, 53, 78, 83, 85], "multivari": [17, 18, 19, 83], "multimod": [17, 18, 19, 83], "tran": [17, 18, 19], "system": [17, 18, 19, 37, 54, 76, 83, 84, 117], "rehabilit": [17, 18, 19, 76, 83, 84], "758": [17, 18, 19, 83], "769": [17, 18, 19, 83], "447": [17, 24], "375": 17, "plot_relative_posit": [17, 24], "ah": [18, 19, 20], "hac": [18, 19, 20], "jjl": [18, 19, 20], "obery\u00e9": [18, 19, 20], "bme": [18, 19, 20], "al": [18, 19, 20, 63, 74, 75, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 107], "lan": [18, 19, 20], "jm": [18, 19, 20], "pch": [18, 19, 20], "rg": [18, 19, 20], "mietu": [18, 19, 20], "je": [18, 19, 20], "moodi": [18, 19, 20], "gb": [18, 19, 20], "peng": [18, 19, 20, 34, 51], "he": [18, 19, 20], "integr": [18, 19], "omit": [18, 27], "downsampl": [18, 19], "0x7f8f3f5f2bd0": 18, "0x7f8f0bd628d0": 18, "consecut": [18, 19, 20, 42, 56, 87, 92, 100, 103], "simplifi": [18, 19, 101, 120], "rather": [18, 19], "freez": [18, 19, 120], "sequencesampl": [18, 19, 20, 120], "n_window": [18, 19, 20, 22, 98, 100, 103], "n_windows_strid": [18, 19, 20, 103], "maxim": [18, 19, 27], "overlap": [18, 19, 20, 69, 70, 71, 91, 92], "372": 18, "383": 18, "get_center_label": [18, 19], "isinst": [18, 19], "ceil": [18, 19, 86], "astyp": [18, 19], "appear": [18, 19, 20, 60], "lot": [18, 19, 20, 58, 99], "night": [18, 19, 20], "spent": [18, 19, 20], "imbalanc": [18, 19, 20], "frequent": [18, 19, 20], "compute_class_weight": [18, 19, 20], "vector": [18, 19], "timedistribut": [18, 19, 118, 120], "feat_extractor": [18, 19], "return_feat": [18, 19, 82, 83, 84], "start_dim": [18, 19], "len_last_lay": [18, 19], "mass": 18, "ss3": 18, "32": [18, 19, 20, 77, 86], "balanced_accuraci": [18, 19], "crossentropyloss": [18, 19, 20, 58, 88, 99], "criterion__weight": [18, 19, 20], "1199": 18, "6479": 18, "1962": 18, "7958": 18, "1818": 18, "6060": 18, "2113": 18, "6092": 18, "5790": 18, "2338": 18, "5971": 18, "6173": 18, "5775": 18, "2100": 18, "5665": 18, "6143": 18, "4774": 18, "2300": 18, "5198": 18, "4860": 18, "2167": [18, 22], "4407": 18, "6737": 18, "4751": 18, "2563": 18, "3851": 18, "7850": 18, "4700": 18, "2653": 18, "3207": 18, "2056": 18, "8074": 18, "5677": 18, "2701": 18, "2881": 18, "2047": 18, "8732": 18, "4895": 18, "3058": 18, "2525": 18, "2258": 18, "8284": 18, "5392": 18, "spatial_conv": 18, "feature_extractor": [18, 19], "relu": [18, 19], "maxpool2d": 18, "ceil_mod": [18, 19, 20], "end_dim": [18, 19], "in_featur": [18, 19], "816": 18, "out_featur": [18, 19], "58": [18, 22], "_classif": [18, 19], "1318": [18, 19], "undefinedmetricwarn": [18, 19], "ill": [18, 19], "zero_divis": [18, 19], "_warn_prf": [18, 19], "msg_start": [18, 19], "194": 18, "91": 18, "33": [18, 19, 20], "despit": [18, 19, 20], "held": [18, 19], "especi": 18, "795": [18, 24], "plot_sleep_staging_chambon2018": [18, 24], "attent": [19, 84], "eldel": [19, 84], "et": [19, 63, 74, 75, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 107], "With": [19, 84], "vol": [19, 84], "pp": [19, 27, 34, 37, 38, 39, 40, 42, 45, 51, 54, 56, 84], "809": [19, 84], "1109": [19, 75, 76, 84], "tnsre": [19, 76, 84], "3076234": [19, 84], "divyesh": [19, 120], "narayanan": [19, 120], "0x7f8f3f4d5a10": 19, "fpz": 19, "give": [19, 22, 37, 54, 115], "oz": 19, "0x7f8f0bddb550": 19, "133": [19, 20], "sleepstagereldele2021": [19, 118, 120], "0498": 19, "4169": 19, "1968": 19, "1390": 19, "8043": 19, "2342": 19, "3767": 19, "1851": 19, "7612": 19, "2054": 19, "3951": 19, "6227": 19, "2181": 19, "4292": 19, "1876": 19, "_mrcnn": 19, "gelu": 19, "approxim": [19, 38, 39, 40], "features1": 19, "conv1d": [19, 20, 88], "batchnorm1d": [19, 20], "maxpool1d": [19, 20], "128": [19, 20, 58, 63, 76, 83, 88, 99], "features2": 19, "afr": [19, 84], "_sebasicblock": 19, "conv1": 19, "bn1": 19, "conv2": 19, "bn2": 19, "se": 19, "_selay": 19, "avg_pool": 19, "adaptiveavgpool1d": [19, 86], "output_s": [19, 87], "fc": [19, 84], "sigmoid": [19, 58, 99], "_tce": 19, "modulelist": 19, "_encoderlay": 19, "self_attn": 19, "_multiheadedattent": 19, "conv": [19, 20, 88], "_causalconv1d": 19, "feed_forward": 19, "_positionwisefeedforward": 19, "w_1": 19, "120": [19, 84], "w_2": 19, "sublayer_output": 19, "_sublayeroutput": 19, "norm": 19, "layernorm": 19, "06": [19, 24], "elementwise_affin": 19, "79": 19, "43": 19, "89": 19, "833": [19, 24], "plot_sleep_staging_eldele2021": [19, 24], "simpler": 20, "go": [20, 117], "current": [20, 58, 99, 115], "seq2seq": 20, "written": [20, 97], "excecut": 20, "too": 20, "perslev": [20, 88, 100], "darkner": [20, 88, 100], "kempfner": [20, 88, 100], "nikol": [20, 88, 100], "jennum": [20, 88, 100], "pj": [20, 88, 100], "igel": [20, 88, 100], "resili": [20, 88, 100], "npj": [20, 88, 100], "digit": [20, 22, 88, 100], "med": [20, 88, 100], "github": [20, 32, 36, 50, 53, 75, 76, 84, 85, 86, 88, 100, 109, 115, 117], "blob": [20, 36, 53, 85, 88, 100, 109], "master": [20, 36, 53, 85, 88, 100, 109, 117], "utim": [20, 88, 100], "usleep": [20, 100, 118, 120], "theo": [20, 120], "gnassoun": [20, 120], "omar": [20, 120], "emir": 20, "zero": [20, 42, 56, 92, 95], "median": 20, "unit": 20, "interquartil": 20, "upsampl": [20, 88], "light": [20, 114], "robust_scal": 20, "0x7f8f1bdbad10": 20, "non": [20, 22, 58, 63, 74, 81, 99], "shorter": [20, 120], "fulli": [20, 23, 76], "depth": [20, 76, 88], "with_skip_connect": [20, 88], "apply_softmax": [20, 88], "balanced_accuracy_multi": 20, "304": [20, 120], "kernel": [20, 37, 38, 39, 40, 54, 74, 76, 81, 82, 83, 85, 88], "odd": [20, 88], "882": 20, "2365": 20, "5797": 20, "1606": 20, "5795": 20, "0100": 20, "2132": 20, "5550": 20, "1453": 20, "5837": 20, "2068": 20, "2404": 20, "5350": 20, "1787": 20, "2379": 20, "_encoderblock": 20, "block_prepool": 20, "elu": [20, 74, 76, 79], "constantpad1d": 20, "maxpool": [20, 88], "152": [20, 23, 120], "214": 20, "bottom": 20, "302": 20, "_decoderblock": 20, "block_preskip": 20, "scale_factor": 20, "nearest": 20, "block_postskip": 20, "428": 20, "216": 20, "154": 20, "110": 20, "tanh": 20, "avgpool1d": 20, "3000": [20, 22], "53": [20, 22], "08": 20, "197": [20, 120], "84": 20, "03": [20, 24], "399": 20, "plot_sleep_staging_usleep": [20, 24], "dictionari": [21, 58, 61, 64, 99], "string": [21, 22, 25, 30, 38, 39, 40, 58, 61, 90, 97, 99, 107], "entri": 21, "0x7f8f1c1022d0": 21, "0x7f8f1bd9bb50": 21, "0x7f8f1c119810": 21, "0x7f8f1be509d0": 21, "0x7f8f1bfd3290": 21, "0x7f8f1bd59ad0": 21, "0x7f8f1bd2eb50": 21, "repres": [21, 38, 39, 40], "0x7f8f1bfb2a50": 21, "0x7f8f3f597bd0": 21, "0x7f8f1be386d0": 21, "0x7f8f1bd53210": 21, "0x7f8f1bfcd390": 21, "similarli": 21, "0x7f8f1be38490": 21, "0x7f8f1bd5f250": 21, "0x7f8f3f597190": 21, "0x7f8f1bfae350": 21, "0x7f8f1bd9d450": 21, "205": [21, 24], "356": 21, "plot_split_dataset": [21, 24], "section": [22, 23, 63], "mock": [22, 23], "creation": [22, 23], "_tuhmock": [22, 23], "f811": [22, 23], "insert": [22, 23], "add_physician_report": [22, 23, 66, 67], "year": [22, 23, 25], "month": [22, 23, 25], "dai": [22, 23, 60], "v1": 22, "02_tcp_le": 22, "00000058": 22, "s001": 22, "2003": 22, "01_tcp_ar": 22, "099": 22, "00009932": 22, "s004": 22, "2014": [22, 60], "9932": 22, "03_tcp_ar_a": 22, "123": 22, "00012331": 22, "s0": 22, "12331": 22, "00000000": 22, "2015": 22, "149": 22, "00014928": 22, "2016": [22, 77], "14928": 22, "83": 22, "ndarrai": [22, 37, 54, 58, 94, 95, 98, 99, 103, 110, 111], "4196433": 22, "34414099": 22, "0858808": 22, "2251037": 22, "64357523": 22, "31926103": 22, "21110784": 22, "81862585": 22, "53262473": 22, "84001805": 22, "02931102": 22, "26433805": 22, "6181324": 22, "56671112": 22, "05248872": 22, "64222445": 22, "05587714": 22, "27645936": 22, "16332536": 22, "05948642": 22, "41518479": 22, "aim": 22, "tuh_window": [22, 23], "set_descript": [22, 61, 62, 68, 118], "ind": [22, 23], "9657379": 22, "9611343": 22, "3365488": 22, "3083003": 22, "20395586": 22, "41964328": 22, "01346887": 22, "1975864": 22, "21666345": 22, "63416547": 22, "40046117": 22, "344141": 22, "49578223": 22, "3900881": 22, "1908147": 22, "6548741": 22, "03716603": 22, "08588079": 22, "04785904": 22, "4410963": 22, "75391966": 22, "49309158": 22, "23934647": 22, "16332537": 22, "6428905": 22, "56875044": 22, "5637039": 22, "07687153": 22, "58599705": 22, "92729586": 22, "78799605": 22, "20939708": 22, "4037253": 22, "42066866": 22, "4151847": 22, "2600": 22, "3600": [22, 65], "dl": 22, "batch_i": 22, "batch_ind": 22, "2474": 22, "4053": 22, "4598": 22, "0206": 22, "1750": 22, "6336": 22, "2885": 22, "3486": 22, "6228": 22, "2642": 22, "3766": 22, "7162": 22, "4952": 22, "5327": 22, "2627": 22, "3797": 22, "1054": 22, "4665": 22, "9328": 22, "0493": 22, "6454": 22, "4260": 22, "9344": 22, "0442": 22, "0036": 22, "1857": 22, "1387": 22, "4673": 22, "6517": 22, "6022": 22, "0955": 22, "0600": 22, "2026": 22, "0598": 22, "4355": 22, "4803": 22, "6756": 22, "6068": 22, "3258": 22, "7311": 22, "2131": 22, "4881": 22, "1597": 22, "8813": 22, "1641": 22, "1619": 22, "6213": 22, "3101": 22, "3002": 22, "5104": 22, "6311": 22, "2549": 22, "4905": 22, "6905": 22, "0096": 22, "0331": 22, "2999": 22, "4357": 22, "6558": 22, "7098": 22, "0626": 22, "2650": 22, "4742": 22, "8712": 22, "4171": 22, "5794": 22, "0737": 22, "3358": 22, "0389": 22, "3873": 22, "7498": 22, "9041": 22, "4412": 22, "2789": 22, "3642": 22, "2641": 22, "7875": 22, "4950": 22, "4897": 22, "5100": 22, "8405": 22, "2997": 22, "1727": 22, "7713": 22, "5474": 22, "1161": 22, "1167": 22, "0095": 22, "0165": 22, "7525": 22, "2971": 22, "0637": 22, "4189": 22, "1893": 22, "1007": [22, 82], "3044": 22, "7334": 22, "1499": 22, "9657": 22, "9611": 22, "3365": 22, "3083": 22, "2040": 22, "4196": 22, "0135": 22, "1976": 22, "6342": 22, "4005": 22, "4958": 22, "3901": 22, "1908": 22, "6549": 22, "0372": 22, "0859": 22, "0479": 22, "4411": 22, "7539": 22, "4931": 22, "2393": 22, "1633": 22, "5688": 22, "5637": 22, "0769": 22, "5860": 22, "0595": 22, "9273": 22, "7880": 22, "2094": 22, "4037": 22, "4207": 22, "4152": 22, "plot_tuh_discrete_multitarget": [22, 24], "templ": [23, 66, 67], "univers": [23, 63, 66, 67], "hospit": [23, 66, 67], "shtml": [23, 66, 67], "c_tueg": [23, 66], "touch": 23, "pars": 23, "patient": [23, 59], "chronolog": [23, 66, 67], "header": 23, "physician": [23, 66, 67], "furthermor": 23, "nme": 23, "job": [23, 66, 72, 91, 92, 97], "__name__": 23, "statist": 23, "histogram": 23, "hist": 23, "bin": 23, "dtype": 23, "count": [23, 58, 99], "text": [23, 114], "97222222222223": 23, "durat": [23, 92], "least": [23, 101, 102], "five": [23, 59], "select_by_dur": 23, "inf": 23, "determin": [23, 74, 76, 81], "d_i": 23, "discard": [23, 65], "incomplet": 23, "wrt": 23, "placement": 23, "subdivid": 23, "le": 23, "refer": [23, 25, 27, 28, 29, 30, 32, 34, 36, 37, 38, 39, 40, 42, 45, 46, 47, 48, 50, 51, 53, 54, 56, 59, 60, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 96, 100, 102, 109, 114], "short_ch_nam": 23, "a1": 23, "a2": 23, "fp1": 23, "fp2": 23, "f3": 23, "f4": 23, "p3": 23, "p4": 23, "o1": [23, 96], "o2": 23, "f7": 23, "f8": 23, "t3": 23, "t4": 23, "t5": 23, "t6": 23, "ar_ch_nam": 23, "ref": 23, "le_ch_nam": 23, "ar_ch_map": 23, "le_ch_map": 23, "ch_map": 23, "select_by_channel": 23, "endswith": 23, "seta": 23, "recod": 23, "setb": 23, "issubset": 23, "chain": 23, "realiz": [23, 120], "bracket": 23, "region": 23, "re": [23, 58, 99, 115], "renam": [23, 120], "micro": 23, "volt": 23, "clip": 23, "outlier": 23, "custom_rename_channel": 23, "referenc": 23, "unexpect": [23, 115], "rename_channel": 23, "custom_crop": 23, "bigger": 23, "set_eeg_refer": 23, "ref_channel": 23, "ch_type": 23, "pick_channel": [23, 90], "a_min": 23, "a_max": 23, "out_path": 23, "tuh_preproc": 23, "405": [23, 24], "plot_tuh_eeg_corpu": [23, 24], "729": 24, "auto_exampl": 24, "04": 24, "717": 24, "990": 24, "374": 24, "788": 24, "09": 24, "135": 24, "409": [24, 120], "355": 24, "107": 24, "scientif": 25, "softwar": [25, 115], "canon": 25, "articl": 25, "hbm23730": 25, "schirrmeist": [25, 63, 74, 80, 81, 114, 120], "robin": [25, 120], "tibor": [25, 120], "springenberg": [25, 74, 80, 81, 114], "jost": 25, "tobia": 25, "fieder": [25, 74, 80, 81, 114], "dominiqu": 25, "josef": 25, "glasstett": [25, 74, 80, 81, 114], "martin": [25, 120], "eggensperg": [25, 74, 80, 81, 114], "katharina": 25, "tangermann": [25, 74, 80, 81, 114], "michael": 25, "hutter": [25, 74, 80, 81, 114], "frank": 25, "burgard": 25, "wolfram": 25, "ball": [25, 63, 74, 80, 81, 114], "tonio": 25, "issn": 25, "1097": 25, "0193": 25, "url": 25, "dx": [25, 74, 76, 80, 81, 114], "aug": [25, 74, 80, 81, 114], "2017": [25, 37, 38, 39, 40, 54, 63, 74, 80, 81, 114], "keyword": [25, 26, 64, 90, 96], "electroencephalographi": 25, "interfac": [25, 76, 77, 78], "interpret": [25, 30, 47, 99], "built": [25, 115], "zenodo": 25, "ask": [25, 60], "3389": 25, "fnin": 25, "2013": 25, "00267": 25, "alexandr": 25, "luessi": 25, "larson": 25, "eric": 25, "deni": 25, "strohmeier": 25, "daniel": 25, "brodbeck": 25, "christian": 25, "goj": 25, "roman": 25, "ja": 25, "mainak": 25, "brook": 25, "teon": 25, "parkkonen": 25, "lauri": 25, "h\u00e4m\u00e4l\u00e4inen": 25, "matti": 25, "frontier": 25, "neurosci": 25, "volum": 25, "267": 25, "frontiersin": 25, "1662": 25, "453x": 25, "topic": 25, "appropri": 25, "kwarg": [26, 58, 90, 99, 105, 106, 107], "sequenc": [26, 31, 58, 85, 87, 99, 100, 103, 110, 120], "bandwidth": [27, 45], "max_freq": 27, "band": [27, 45, 96, 120], "suggest": [27, 30, 34, 37, 38, 39, 40, 42, 45, 47, 51, 54, 71, 91, 92, 117], "distanc": [27, 45, 60], "admiss": 27, "transit": [27, 45], "1hz": 27, "nyquist": 27, "cheng": [27, 34, 42, 45, 51, 56], "goh": [27, 34, 42, 45, 51, 56], "dogrusoz": [27, 34, 42, 45, 51, 56], "tuzel": [27, 34, 42, 45, 51, 56], "azemi": [27, 34, 42, 45, 51, 56], "awar": [27, 34, 42, 45, 51, 56], "biosign": [27, 34, 42, 45, 51, 56], "04871": [27, 34, 42, 45, 51, 56], "mohsenvand": [27, 34, 42, 45, 51, 56], "izadi": [27, 34, 42, 45, 51, 56], "mae": [27, 34, 42, 45, 51, 56], "represent": [27, 34, 36, 42, 45, 51, 53, 56], "electroencephalogram": [27, 34, 42, 45, 51, 56], "health": [27, 34, 42, 45, 51, 56], "238": [27, 34, 42, 45, 51, 56], "253": [27, 34, 42, 45, 51, 56], "pmlr": [27, 34, 42, 45, 51, 56], "get_augmentation_param": [27, 28, 29, 30, 32, 33, 34, 36, 37, 42, 44, 118, 120], "freqs_to_notch": [27, 45], "greater": [27, 45], "static": [27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 41, 42, 43, 59], "flat": [28, 46, 91, 92, 93], "cmsaugment": [28, 29, 46, 48], "polici": [28, 29, 46, 48], "proba_drop": 28, "eras": 28, "saeed": [28, 29, 46, 48], "grangier": [28, 29, 46, 48], "pietquin": [28, 29, 46, 48], "zeghidour": [28, 29, 46, 48], "heterogen": [28, 29, 46, 48], "differenti": [28, 29, 46, 48], "reorder": [28, 29, 46, 48], "2010": [28, 29, 46, 48, 63], "13694": [28, 29, 46, 48], "p_shuffl": [29, 48], "carri": [29, 48, 60], "ordered_ch_nam": [30, 38, 39, 40], "invert": 30, "side": 30, "nomenclatur": 30, "deiss": [30, 47], "biswal": [30, 47], "jin": [30, 47], "sun": [30, 47], "westov": [30, 47], "hamlet": [30, 47], "co": [30, 47], "techniqu": [30, 47], "1803": [30, 47, 85], "09702": [30, 47], "accord": [30, 47, 76], "channel_indep": [32, 50], "ft": [32, 50], "surrog": [32, 50], "phase": [32, 50], "pertub": [32, 50], "uniformli": [32, 36, 37, 38, 39, 40, 50, 100], "pi": [32, 50], "perturb": [32, 50], "schwabed": [32, 50], "snyder": [32, 50], "cakmak": [32, 50], "nemati": [32, 50], "clifford": [32, 50], "address": [32, 50], "imbal": [32, 50, 65], "noisi": [32, 50], "fourier": [32, 50], "1806": [32, 50], "08675": [32, 50], "magnitud": [32, 42], "cliffordlab": [32, 50], "tf": [32, 50], "draw": [32, 50], "maximum": [33, 37, 38, 39, 40, 91], "absolut": 33, "delta_freq": [33, 49], "amplitud": [33, 49, 91, 92, 120], "white": [34, 51], "nois": [34, 51, 60], "deviat": [34, 51], "wang": [34, 51], "zhong": [34, 51], "jiang": [34, 51], "liu": [34, 51], "emot": [34, 51], "recognit": [34, 51], "confer": [34, 36, 37, 38, 39, 40, 51, 53, 54], "multimedia": [34, 51], "gaussian": [34, 51], "beta_per_sampl": 36, "By": [36, 58, 99], "drawn": 36, "beta": 36, "hongyi": [36, 53, 109], "zhang": [36, 53, 109], "moustapha": [36, 53, 109], "ciss": [36, 53, 109], "yann": [36, 53, 109], "dauphin": [36, 53, 109], "david": [36, 53, 109], "lopez": [36, 53, 109], "paz": [36, 53, 109], "beyond": [36, 53, 109], "empir": [36, 53, 85, 109], "minim": [36, 53, 109, 115], "iclr": [36, 53], "onlin": [36, 53, 74, 76, 80, 81, 109, 114], "1710": [36, 53, 109], "09412": [36, 53, 109], "facebookresearch": [36, 53, 109], "cifar10": [36, 53, 109], "interpol": [36, 37, 38, 39, 40, 53, 54], "lam": [36, 53], "idx_perm": [36, 53], "form": [36, 53, 60, 61, 62, 68], "sensors_positions_matrix": [37, 54], "max_degre": [37, 38, 39, 40], "spherical_splin": [37, 38, 39, 40, 54], "rotat": [37, 38, 39, 40, 54, 114], "angl": [37, 38, 39, 40, 54, 114], "3d": [37, 54, 120], "cartesian": [37, 54], "coordin": [37, 54], "ten_twenty_montag": [37, 54], "make_standard_montag": [37, 54], "standard_1020": [37, 54], "get_posit": [37, 54], "ch_po": [37, 54], "spheric": [37, 38, 39, 40, 54], "spline": [37, 38, 39, 40, 54], "scipi": [37, 38, 39, 40, 54, 58, 99], "rbf": [37, 38, 39, 40, 54], "quadrat": [37, 38, 39, 40, 54], "krell": [37, 38, 39, 40, 54], "kim": [37, 38, 39, 40, 54], "electroencephalograph": [37, 38, 39, 40, 54], "39th": [37, 38, 39, 40, 54], "annual": [37, 38, 39, 40, 54], "medicin": [37, 38, 39, 40, 54], "biologi": [37, 38, 39, 40, 54], "societi": [37, 38, 39, 40, 54], "embc": [37, 38, 39, 40, 54], "471": [37, 38, 39, 40, 54], "474": [37, 38, 39, 40, 54], "element": [37, 42, 54], "montag": [38, 39, 40, 60], "flip": [41, 43, 55, 57], "sign": [41, 55], "smoothli": [42, 56], "contigu": [42, 56], "Will": 42, "mask_start_per_sampl": [42, 56], "resp": 44, "uniform": 44, "instati": 44, "arg": [58, 99], "anyth": 58, "uninstanti": [58, 99], "get_loss": [58, 99, 118], "classes_": 58, "infer": [58, 92, 99, 107], "restor": 58, "attributeerror": 58, "sgd": [58, 99], "updat": [58, 59, 61, 62, 68, 71, 91, 92, 96, 99, 120], "outcom": [58, 99], "keyboard": [58, 99], "interrupt": [58, 99], "mini": [58, 99], "iterator_train__batch_s": [58, 99], "iterator_test__batch_s": [58, 99], "iterator_valid": [58, 99], "incom": [58, 99], "__len__": [58, 99], "deal": [58, 99], "box": [58, 99], "prefix": [58, 99], "dataset__": [58, 99], "initialz": [58, 99], "validsplit": [58, 99], "dataset_train": [58, 99, 105, 106, 107], "dataset_valid": [58, 99, 105, 106, 107], "get_default_callback": [58, 99], "conflict": [58, 99], "resolv": [58, 99], "suffix": [58, 99], "epochscoring_1": [58, 99], "print_log": [58, 99], "set_param": [58, 99], "callbacks__print_log__keys_ignor": [58, 99], "predict_nonlinear": [58, 99], "pickleabl": [58, 99], "accept": [58, 71, 87, 92, 99], "predict_proba": [58, 99, 118, 120], "whatev": [58, 99], "anywher": [58, 99], "notabl": [58, 99], "unaffect": [58, 99], "warm_start": [58, 99], "cold": [58, 99], "warm": [58, 99], "summari": [58, 86, 99], "regardless": [58, 99], "sent": [58, 99], "unmodifi": [58, 99], "model_evalu": [58, 99], "prefixes_": [58, 99], "special": [58, 99], "neuralnet": [58, 99], "optimizer__momentum": [58, 99], "95": [58, 99], "cuda_dependent_attributes_": [58, 99], "whose": [58, 71, 92, 99], "unpickl": [58, 99], "expand": [58, 88, 99], "initialized_": [58, 99], "criterion_": [58, 99], "callbacks_": [58, 99], "_modul": [58, 99], "collect": [58, 63, 99], "dynam": [58, 99], "_criteria": [58, 99], "_optim": [58, 99], "get_iter": [58, 99, 118], "drop_index": [58, 99], "iterator_test": [58, 99], "spars": [58, 99], "csr": [58, 99], "former": [58, 99], "doesn": [58, 59, 99], "y_proba": [58, 99], "trial_predict": [58, 99, 110], "n_trial": [58, 69, 99, 110], "n_predict": [58, 99, 104, 108, 110], "trial_label": [58, 99, 110], "n_target": [58, 99, 110], "predict_with_window_inds_and_i": [58, 99, 118], "bbci": 59, "de": 59, "desc_4": 59, "pdf": 59, "force_upd": 59, "locat": 59, "environ": [59, 112], "config": 59, "mne_datasets_": 59, "_path": 59, "forc": 59, "bnci": 60, "imageri": [60, 75], "iia": 60, "r382d436f3223": 60, "cue": [60, 63], "inat": 60, "movement": [60, 63], "compris": 60, "288": [60, 120], "sit": 60, "comfort": 60, "armchair": 60, "front": 60, "screen": 60, "fixat": 60, "acoust": 60, "tone": 60, "arrow": [60, 63], "down": [60, 82, 88, 112], "foot": 60, "prompt": [60, 115], "disappear": 60, "twenti": 60, "agcl": 60, "inter": [60, 63], "monopolarli": 60, "mastoid": 60, "ground": [60, 63], "sensit": [60, 114], "amplifi": 60, "\u03bcv": 60, "notch": 60, "raw_preproc_kwarg": 61, "window_kwarg": 61, "window_preproc_kwarg": 61, "old": [61, 97], "datapoint": 61, "along": [62, 68, 120], "gamma": 63, "discrib": 63, "r5e478952091a": 63, "cover": [63, 114], "cortex": 63, "healthi": [63, 65], "femal": 63, "963": 63, "150": 63, "divid": [63, 69, 70, 71, 91], "rest": 63, "approx": 63, "880": 63, "160": 63, "acquir": 63, "lab": 63, "invas": 63, "2008": 63, "darva": 63, "direct": [63, 115], "grai": 63, "back": 63, "had": [63, 76], "clench": 63, "toe": 63, "downward": 63, "tap": 63, "leftward": 63, "rightward": 63, "relax": 63, "upward": 63, "littl": 63, "proxim": 63, "muscular": 63, "enough": 63, "volv": 63, "pace": 63, "maintain": 63, "interv": [63, 92], "pseudo": 63, "ideal": 63, "260": 63, "stimuli": 63, "bci2000": 63, "schalk": 63, "2004": 63, "approv": 63, "ethic": 63, "committe": 63, "freiburg": 63, "schirrmeister2017": [63, 74, 80, 81], "dataset_kwarg": 64, "load_eeg_onli": 65, "content": 65, "edfx": 65, "overnight": 65, "auto_tutori": 65, "plot_sleep": 65, "eog": [65, 88], "emg": 65, "temperatur": 65, "respir": 65, "wake": 65, "3h": 65, "parent": [66, 67], "ascend": [66, 67], "preserv": [66, 67], "c_tuab": 67, "applic": 68, "pre": 69, "compativl": [70, 71], "accepted_bads_ratio": [71, 92], "onset": [71, 92], "identifi": [71, 91, 92], "fall": [71, 91, 92], "outsid": [71, 91, 92], "proport": [71, 76, 92], "withinconsist": 71, "exceed": [71, 92], "concat_dataset": [72, 73], "first_conv_nonlin": 74, "first_pool_nonlin": 74, "later_conv_nonlin": 74, "later_pool_nonlin": 74, "There": [74, 81, 119], "normalis": [74, 81], "in_channel": [75, 76], "itnet": [75, 120], "incept": [75, 76, 120], "salami": 75, "salami2022": 75, "abbassalami": 75, "n_in_chan": [75, 85], "andreu": 75, "perez": 75, "gillmeist": 75, "3161489": 75, "guarante": [75, 76, 77, 78], "reimplement": [75, 76, 77, 78], "scales_samples_": 76, "125": [76, 83], "n_filter": [76, 85], "depth_multipli": 76, "pooling_s": 76, "erp": 76, "santamaria2020": 76, "inceptionnet": 76, "goal": 76, "block": [76, 85, 88], "largest": 76, "associ": 76, "winner": 76, "beetl": 76, "neurip": 76, "r15fdf33b022f": 76, "input_size_m": 76, "millisecond": 76, "scales_tim": 76, "depthwis": 76, "santamaria": 76, "vazquez": 76, "martinez": 76, "cagig": 76, "vaquerizo": 76, "villar": 76, "hornero": 76, "novel": 76, "assist": 76, "3048106": 76, "grifcc": 76, "tree": 76, "90e412a407c5242dfc953d5ffb490bdb32faf022": 76, "pool_mod": [77, 78, 81], "second_kernel_s": 77, "third_kernel_s": [77, 78], "eegnet": [77, 78], "lawhern": [77, 78], "solon": [77, 78], "waytowich": [77, 78], "gordon": [77, 78], "hung": [77, 78], "lanc": [77, 78], "compact": [77, 78], "1611": [77, 78], "08024": [77, 78], "f2": 78, "kernel_length": 78, "v4": 78, "eegnet4": 78, "final_pool_length": [79, 120], "n_first_filt": 79, "n_layers_per_block": 79, "first_filter_length": 79, "batch_norm_epsilon": 79, "conv_weight_init_fn": 79, "residu": 79, "miss": 79, "hybrid": 80, "conv_nonlin": 81, "pool_nonlin": 81, "n_conv_chan": 82, "n_group": 82, "max_pool_s": 82, "blanco": 82, "blanco2020": 82, "seven": 82, "attempt": 82, "connect": [82, 88], "fernandez": 82, "rivero": 82, "pazo": 82, "soft": 82, "4067": 82, "4079": 82, "s00500": 82, "04174": 82, "time_conv_size_": [83, 88], "max_pool_size_": 83, "pad_size_": 83, "half": 83, "n_tce": 84, "d_model": 84, "d_ff": 84, "n_attn_head": 84, "after_reduced_cnn_s": 84, "multi": 84, "resolut": 84, "mrcnn": 84, "recalibr": 84, "tce": 84, "head": [84, 101], "mechan": [84, 120], "captur": 84, "among": 84, "100hz": 84, "125hz": 84, "shh": 84, "unintend": 84, "clone": [84, 120], "feed": 84, "positionwisefeedforward": 84, "emadeldeen24": 84, "attnsleep": 84, "sleepdata": 84, "n_output": 85, "n_block": 85, "add_log_softmax": 85, "bai": 85, "bai2018": 85, "locuslab": 85, "kolter": 85, "koltun": 85, "recurr": 85, "01271": 85, "s_growth": 86, "t_filter": 86, "temp_lay": 86, "spat_lay": 86, "temp_span": 86, "thinker": [86, 120], "invari": [86, 120], "densenet": 86, "kosta": 86, "growth": 86, "densefilt": 86, "width": 86, "percentag": 86, "temp_len": 86, "1500": [86, 101], "spoclab": 86, "ca": 86, "thinkerinvari": 86, "rudzicz": 86, "across": [86, 100, 104], "peopl": 86, "eng": 86, "056008": 86, "1741": 86, "2552": 86, "abb7a7": 86, "stager": 87, "middl": 87, "seq_len": 87, "n_time_filt": 88, "complexity_factor": 88, "67": 88, "0703125": 88, "ensure_odd_conv_s": 88, "autoencod": 88, "shrink": 88, "fewer": 88, "2x2": 88, "halv": 88, "ne": 88, "output_shap": 89, "apply_funct": [90, 98], "raw_or_epoch": 90, "reject": [91, 92, 93], "on_miss": [91, 92], "concatdataset": 91, "ie": 91, "winddow_size_sampl": 91, "what": [91, 92], "exactli": 92, "numer": 92, "inconsist": 92, "demeanin": 94, "exponent": [94, 95], "m_t": [94, 95], "mathrm": [94, 95], "factornew": [94, 95], "cdot": [94, 95], "x_t": [94, 95], "m_": [94, 95], "deman": 94, "_t": [94, 95], "demean": 94, "Then": 95, "varianc": 95, "v_t": 95, "v_": 95, "sqrt": 95, "stabil": 95, "frequency_band": 96, "drop_original_sign": 96, "order_by_frequency_band": 96, "mne_filter_kwarg": 96, "unfilt": 96, "oder": 96, "cz_4": 96, "o1_4": 96, "cz_8": 96, "o1_8": 96, "fileexistserror": 97, "suppos": 98, "mistakenli": 99, "forget": 99, "deriv": 99, "n_sequenc": [100, 103], "inspir": 100, "perslev2021": 100, "ones": 100, "recordingsampl": [100, 102, 103, 118], "randomst": [100, 101, 102, 103], "state": [100, 101, 102, 103], "sample_class": [100, 118], "rec_ind": [100, 101], "multiindex": 101, "sample_record": [101, 118], "sample_window": [101, 118], "tau_max": 102, "banville2020": 102, "file_id": 103, "ensembl": [103, 120], "loss_funct": [104, 108], "n_batch": [104, 108], "target_extractor": [105, 106, 107], "to_numpi": [105, 106, 107], "use_cach": [105, 106], "on_epoch_end": [105, 106, 107, 118], "recomput": 107, "global": 107, "slightli": 107, "scalar": 107, "wors": 107, "tri": 107, "timeseri": 108, "window_len": 108, "mixup": [109, 118, 120], "duplic": [111, 120], "atleast": 111, "2darrai": 111, "preds_per_tri": 111, "doc": 112, "lack": 112, "pythonhashse": 112, "forum": 112, "ai": 112, "solv": 112, "31628": 112, "use_deterministic_algorithm": 112, "colormap": 114, "linearsegmentedcolormap": 114, "textcolor": 114, "fontweight": 114, "rotate_row_label": 114, "90": 114, "rotate_col_label": 114, "with_f1_scor": 114, "norm_ax": 114, "rotate_precis": 114, "class_names_fonts": 114, "font": 114, "bold": 114, "heavi": 114, "ultrabold": 114, "ultralight": 114, "hard": 115, "happen": [115, 120], "mistak": 115, "corrupt": 115, "irregular": 115, "chat": 115, "bear": 115, "tracker": 115, "request": 115, "sure": 115, "ve": 115, "shell": 115, "__version__": 115, "latest": [115, 117], "replic": 115, "link": 115, "anonym": 115, "portion": 115, "persist": 115, "smallest": 115, "past": 115, "backtick": 115, "contributor": 115, "snippet": 115, "toolbox": 116, "electrophysiolog": 116, "fetcher": 116, "neuroscientist": 116, "neurophysiolog": 116, "driver": 117, "instruct": 117, "termin": 117, "api": 117, "repo": 117, "zipbal": 117, "curl": 117, "githubusercont": 117, "yml": 117, "bandstopfilt": 118, "channelsshuffl": 118, "channelssymmetri": 118, "compos": 118, "gaussiannois": 118, "identitytransform": 118, "sensorsrot": 118, "sensorsxrot": 118, "sensorsyrot": 118, "sensorszrot": 118, "timerevers": 118, "bandstop_filt": 118, "channels_dropout": 118, "channels_permut": 118, "channels_shuffl": 118, "frequency_shift": 118, "ft_surrog": [118, 120], "gaussian_nois": 118, "sensors_rot": 118, "smooth_time_mask": 118, "time_revers": 118, "hgd": 118, "save_concat_dataset": 118, "eegitnet": [118, 120], "eegincept": [118, 120], "eegnetv1": 118, "eegnetv4": 118, "eegresnet": [118, 120], "hybridnet": 118, "sleepstagerblanco2020": [118, 120], "tcn": [118, 120], "tidnet": [118, 120], "exponential_moving_demean": 118, "filterbank": [118, 120], "sampler": [118, 120], "balancedsequencesampl": [118, 120], "croppedtrialepochscor": 118, "postepochtrainscor": 118, "mixup_criterion": 118, "trial_preds_from_window_pr": 118, "compute_amplitude_gradi": [118, 120], "46": 118, "155": [118, 120], "390": 120, "ghaith": 120, "bouallegu": 120, "371": 120, "mohammad": 120, "javad": 120, "389": 120, "exemplifi": 120, "349": 120, "unifi": 120, "sheme": 120, "378": 120, "wimpff": 120, "391": 120, "406": 120, "recoding_id": 120, "402": 120, "get_param": 120, "388": 120, "alex": 120, "zscore": 120, "mnepreproc": 120, "numpypreproc": 120, "415": 120, "263": 120, "ann": 120, "kathrin": 120, "kiessner": 120, "dan": 120, "wilson": 120, "henrik": 120, "bonsmann": 120, "vytauta": 120, "jankauska": 120, "274": 120, "254": 120, "thoma": 120, "facilit": 120, "287": 120, "aggregate_proba": 120, "294": 120, "312": 120, "295": 120, "277": 120, "318": 120, "261": 120, "\u015bliwowski": 120, "cloneabl": 120, "347": 120, "353": 120, "docstr": 120, "333": 120, "365": 120, "pierr": 120, "guetschel": 120, "367": 120, "correctli": 120, "mismatch": 120, "327": 120, "propag": 120, "269": 120, "favour": 120, "292": 120, "199": 120, "198": 120, "178": 120, "161": 120, "138": 120, "147": 120, "158": 120, "159": 120, "timecrop": 120, "164": 120, "185": 120, "282": 120, "341": 120, "accident": 120, "sum": 120, "previou": 120, "167": 120, "4d": 120, "166": 120, "incorrect": 120, "169": 120, "window_s": 120, "148": 120, "171": 120, "223": 120, "favor": 120}, "objects": {"": [[0, 0, 0, "-", "braindecode"]], "braindecode.augmentation": [[26, 1, 1, "", "AugmentedDataLoader"], [27, 1, 1, "", "BandstopFilter"], [28, 1, 1, "", "ChannelsDropout"], [29, 1, 1, "", "ChannelsShuffle"], [30, 1, 1, "", "ChannelsSymmetry"], [31, 1, 1, "", "Compose"], [32, 1, 1, "", "FTSurrogate"], [33, 1, 1, "", "FrequencyShift"], [34, 1, 1, "", "GaussianNoise"], [35, 1, 1, "", "IdentityTransform"], [36, 1, 1, "", "Mixup"], [37, 1, 1, "", "SensorsRotation"], [38, 1, 1, "", "SensorsXRotation"], [39, 1, 1, "", "SensorsYRotation"], [40, 1, 1, "", "SensorsZRotation"], [41, 1, 1, "", "SignFlip"], [42, 1, 1, "", "SmoothTimeMask"], [43, 1, 1, "", "TimeReverse"], [44, 1, 1, "", "Transform"]], "braindecode.augmentation.BandstopFilter": [[27, 2, 1, "", "get_augmentation_params"], [27, 2, 1, "", "operation"]], "braindecode.augmentation.ChannelsDropout": [[28, 2, 1, "", "get_augmentation_params"], [28, 2, 1, "", "operation"]], "braindecode.augmentation.ChannelsShuffle": [[29, 2, 1, "", "get_augmentation_params"], [29, 2, 1, "", "operation"]], "braindecode.augmentation.ChannelsSymmetry": [[30, 2, 1, "", "get_augmentation_params"], [30, 2, 1, "", "operation"]], "braindecode.augmentation.Compose": [[31, 2, 1, "", "forward"]], "braindecode.augmentation.FTSurrogate": [[32, 2, 1, "", "get_augmentation_params"], [32, 2, 1, "", "operation"]], "braindecode.augmentation.FrequencyShift": [[33, 2, 1, "", "get_augmentation_params"], [33, 2, 1, "", "operation"]], "braindecode.augmentation.GaussianNoise": [[34, 2, 1, "", "get_augmentation_params"], [34, 2, 1, "", "operation"]], "braindecode.augmentation.IdentityTransform": [[35, 2, 1, "", "operation"]], "braindecode.augmentation.Mixup": [[36, 2, 1, "", "get_augmentation_params"], [36, 2, 1, "", "operation"]], "braindecode.augmentation.SensorsRotation": [[37, 2, 1, "", "get_augmentation_params"], [37, 2, 1, "", "operation"]], "braindecode.augmentation.SignFlip": [[41, 2, 1, "", "operation"]], "braindecode.augmentation.SmoothTimeMask": [[42, 2, 1, "", "get_augmentation_params"], [42, 2, 1, "", "operation"]], "braindecode.augmentation.TimeReverse": [[43, 2, 1, "", "operation"]], "braindecode.augmentation.Transform": [[44, 2, 1, "", "forward"], [44, 2, 1, "", "get_augmentation_params"]], "braindecode.augmentation.functional": [[45, 3, 1, "", "bandstop_filter"], [46, 3, 1, "", "channels_dropout"], [47, 3, 1, "", "channels_permute"], [48, 3, 1, "", "channels_shuffle"], [49, 3, 1, "", "frequency_shift"], [50, 3, 1, "", "ft_surrogate"], [51, 3, 1, "", "gaussian_noise"], [52, 3, 1, "", "identity"], [53, 3, 1, "", "mixup"], [54, 3, 1, "", "sensors_rotation"], [55, 3, 1, "", "sign_flip"], [56, 3, 1, "", "smooth_time_mask"], [57, 3, 1, "", "time_reverse"]], "braindecode.classifier": [[58, 1, 1, "", "EEGClassifier"]], "braindecode.classifier.EEGClassifier": [[58, 4, 1, "", "_criteria"], [58, 4, 1, "", "_modules"], [58, 4, 1, "", "_optimizers"], [58, 4, 1, "", "callbacks_"], [58, 4, 1, "", "classes_"], [58, 4, 1, "", "criterion_"], [58, 4, 1, "", "cuda_dependent_attributes_"], [58, 2, 1, "", "get_iterator"], [58, 2, 1, "", "get_loss"], [58, 4, 1, "", "initialized_"], [58, 4, 1, "", "module_"], [58, 2, 1, "", "on_batch_end"], [58, 2, 1, "", "predict"], [58, 2, 1, "", "predict_proba"], [58, 2, 1, "", "predict_trials"], [58, 2, 1, "", "predict_with_window_inds_and_ys"], [58, 4, 1, "", "prefixes_"]], "braindecode.datasets": [[59, 1, 1, "", "BCICompetitionIVDataset4"], [60, 1, 1, "", "BNCI2014001"], [61, 1, 1, "", "BaseConcatDataset"], [62, 1, 1, "", "BaseDataset"], [63, 1, 1, "", "HGD"], [64, 1, 1, "", "MOABBDataset"], [65, 1, 1, "", "SleepPhysionet"], [66, 1, 1, "", "TUH"], [67, 1, 1, "", "TUHAbnormal"], [68, 1, 1, "", "WindowsDataset"], [69, 3, 1, "", "create_from_X_y"], [70, 3, 1, "", "create_from_mne_epochs"], [71, 3, 1, "", "create_from_mne_raw"]], "braindecode.datasets.BCICompetitionIVDataset4": [[59, 2, 1, "", "download"]], "braindecode.datasets.BaseConcatDataset": [[61, 2, 1, "", "get_metadata"], [61, 2, 1, "", "save"], [61, 2, 1, "", "set_description"], [61, 2, 1, "", "split"]], "braindecode.datasets.BaseDataset": [[62, 2, 1, "", "set_description"]], "braindecode.datasets.WindowsDataset": [[68, 2, 1, "", "set_description"]], "braindecode.datautil": [[72, 3, 1, "", "load_concat_dataset"], [73, 3, 1, "", "save_concat_dataset"]], "braindecode.models": [[74, 1, 1, "", "Deep4Net"], [75, 1, 1, "", "EEGITNet"], [76, 1, 1, "", "EEGInception"], [77, 1, 1, "", "EEGNetv1"], [78, 1, 1, "", "EEGNetv4"], [79, 1, 1, "", "EEGResNet"], [80, 1, 1, "", "HybridNet"], [81, 1, 1, "", "ShallowFBCSPNet"], [82, 1, 1, "", "SleepStagerBlanco2020"], [83, 1, 1, "", "SleepStagerChambon2018"], [84, 1, 1, "", "SleepStagerEldele2021"], [85, 1, 1, "", "TCN"], [86, 1, 1, "", "TIDNet"], [87, 1, 1, "", "TimeDistributed"], [88, 1, 1, "", "USleep"], [89, 3, 1, "", "get_output_shape"]], "braindecode.models.HybridNet": [[80, 2, 1, "", "forward"]], "braindecode.models.SleepStagerBlanco2020": [[82, 2, 1, "", "forward"]], "braindecode.models.SleepStagerChambon2018": [[83, 2, 1, "", "forward"]], "braindecode.models.SleepStagerEldele2021": [[84, 2, 1, "", "forward"]], "braindecode.models.TCN": [[85, 2, 1, "", "forward"]], "braindecode.models.TIDNet": [[86, 2, 1, "", "forward"]], "braindecode.models.TimeDistributed": [[87, 2, 1, "", "forward"]], "braindecode.models.USleep": [[88, 2, 1, "", "forward"]], "braindecode.preprocessing": [[90, 1, 1, "", "Preprocessor"], [91, 3, 1, "", "create_fixed_length_windows"], [92, 3, 1, "", "create_windows_from_events"], [93, 3, 1, "", "create_windows_from_target_channels"], [94, 3, 1, "", "exponential_moving_demean"], [95, 3, 1, "", "exponential_moving_standardize"], [96, 3, 1, "", "filterbank"], [97, 3, 1, "", "preprocess"], [98, 3, 1, "", "scale"]], "braindecode.preprocessing.Preprocessor": [[90, 2, 1, "", "apply"]], "braindecode.regressor": [[99, 1, 1, "", "EEGRegressor"]], "braindecode.regressor.EEGRegressor": [[99, 4, 1, "", "_criteria"], [99, 4, 1, "", "_modules"], [99, 4, 1, "", "_optimizers"], [99, 4, 1, "", "callbacks_"], [99, 4, 1, "", "criterion_"], [99, 4, 1, "", "cuda_dependent_attributes_"], [99, 2, 1, "", "fit"], [99, 2, 1, "", "get_iterator"], [99, 2, 1, "", "get_loss"], [99, 4, 1, "", "initialized_"], [99, 4, 1, "", "module_"], [99, 2, 1, "", "on_batch_end"], [99, 2, 1, "", "predict_proba"], [99, 2, 1, "", "predict_trials"], [99, 2, 1, "", "predict_with_window_inds_and_ys"], [99, 4, 1, "", "prefixes_"]], "braindecode.samplers": [[100, 1, 1, "", "BalancedSequenceSampler"], [101, 1, 1, "", "RecordingSampler"], [102, 1, 1, "", "RelativePositioningSampler"], [103, 1, 1, "", "SequenceSampler"]], "braindecode.samplers.BalancedSequenceSampler": [[100, 2, 1, "", "sample_class"]], "braindecode.samplers.RecordingSampler": [[101, 4, 1, "", "info"], [101, 4, 1, "", "n_recordings"], [101, 2, 1, "", "sample_recording"], [101, 2, 1, "", "sample_window"]], "braindecode.samplers.RelativePositioningSampler": [[102, 2, 1, "", "presample"]], "braindecode.samplers.SequenceSampler": [[103, 4, 1, "", "file_ids"], [103, 4, 1, "", "info"]], "braindecode.training": [[104, 1, 1, "", "CroppedLoss"], [105, 1, 1, "", "CroppedTimeSeriesEpochScoring"], [106, 1, 1, "", "CroppedTrialEpochScoring"], [107, 1, 1, "", "PostEpochTrainScoring"], [108, 1, 1, "", "TimeSeriesLoss"], [109, 3, 1, "", "mixup_criterion"], [110, 3, 1, "", "predict_trials"], [111, 3, 1, "", "trial_preds_from_window_preds"]], "braindecode.training.CroppedLoss": [[104, 2, 1, "", "forward"]], "braindecode.training.CroppedTimeSeriesEpochScoring": [[105, 2, 1, "", "on_epoch_end"]], "braindecode.training.CroppedTrialEpochScoring": [[106, 2, 1, "", "on_batch_end"], [106, 2, 1, "", "on_epoch_end"]], "braindecode.training.PostEpochTrainScoring": [[107, 2, 1, "", "on_epoch_end"]], "braindecode.training.TimeSeriesLoss": [[108, 2, 1, "", "forward"]], "braindecode.util": [[112, 3, 1, "", "set_random_seeds"]], "braindecode.visualization": [[113, 3, 1, "", "compute_amplitude_gradients"], [114, 3, 1, "", "plot_confusion_matrix"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"]}, "titleterms": {"api": [0, 118, 120], "refer": [0, 10, 17, 18, 19, 20, 115], "classifi": [0, 58], "regressor": [0, 99], "model": [0, 3, 4, 5, 6, 9, 10, 12, 13, 17, 18, 19, 20, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "train": [0, 4, 5, 6, 9, 10, 12, 13, 17, 18, 19, 20, 104, 105, 106, 107, 108, 109, 110, 111], "dataset": [0, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "preprocess": [0, 4, 5, 6, 7, 9, 10, 12, 13, 17, 18, 19, 20, 90, 91, 92, 93, 94, 95, 96, 97, 98], "data": [0, 3, 9, 10, 16, 23], "util": [0, 12, 112], "sampler": [0, 17, 18, 19, 20, 100, 101, 102, 103], "augment": [0, 9, 10, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "visual": [0, 9, 12, 17, 113, 114], "benchmark": [1, 7], "eager": 1, "lazi": 1, "load": [1, 4, 5, 6, 9, 10, 12, 13, 14, 17, 18, 19, 20], "exampl": [2, 8, 9, 11, 14, 15, 16, 17, 21, 26, 28, 31, 32, 33, 41, 42, 44, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 74, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98, 101, 102, 103, 104, 105, 106, 108, 112, 114], "crop": [3, 5], "decod": [3, 4, 5, 6], "bcic": [3, 4, 5, 6, 9, 10], "iv": [3, 4, 5, 6, 9, 10], "2a": [3, 4, 9, 10], "creat": [3, 4, 5, 6, 9, 10, 12, 13, 17, 18, 19, 20], "comput": [3, 4, 5, 6, 12, 13, 24], "window": [3, 4, 5, 6, 9, 10, 12, 13, 17, 18, 19, 20], "paramet": 3, "cut": [3, 4, 5, 6, 12, 13], "split": [3, 4, 5, 6, 9, 10, 12, 13, 17, 18, 19, 20, 21], "plot": [3, 4, 5, 6, 18, 19, 20], "result": [3, 4, 5, 6, 17, 18, 19, 20], "thi": [3, 9, 17], "i": [3, 12, 115], "again": 3, "same": 3, "code": 3, "trialwis": [3, 4], "confus": [3, 4], "matrix": [3, 4], "valid": [4, 6, 9, 10, 12, 13, 17, 18, 19, 20], "finger": [5, 6], "flexion": [5, 6], "4": [5, 6], "ecog": [5, 6], "prepar": [5, 6, 117], "test": [5, 6, 12, 17], "parallel": 7, "serial": 7, "custom": 8, "cover": [9, 17], "extract": [9, 10, 17, 18, 19, 20], "defin": [9, 10, 12], "transform": [9, 10, 44], "manipul": 9, "one": 9, "session": 9, "an": [9, 10], "eegclassifi": [9, 10, 58], "desir": [9, 10], "manual": 9, "compos": [9, 31], "set": [9, 17], "level": 9, "search": 10, "best": 10, "list": 10, "analys": 10, "fit": 10, "moabb": 11, "how": [12, 25, 115], "tune": [12, 13], "your": 12, "why": 12, "should": 12, "care": 12, "about": 12, "evalu": 12, "etc": 12, "option": 12, "1": [12, 120], "simpl": 12, "let": 12, "": [12, 120], "first": 12, "function": [12, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "2": 12, "val": 12, "second": 12, "3": 12, "k": 12, "fold": 12, "cross": 12, "third": 12, "hyperparamet": [12, 13], "scikit": 13, "learn": [13, 17], "save": 14, "mne": [15, 25], "regress": 16, "fake": 16, "self": 17, "supervis": 17, "eeg": [17, 22, 23], "rel": 17, "posit": 17, "raw": 17, "record": 17, "inspect": 17, "pretext": 17, "task": 17, "perform": 17, "us": [17, 18, 19, 20, 26, 28, 31, 32, 33, 41, 42, 44, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 74, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98, 101, 102, 103, 104, 105, 106, 108, 112, 114], "represent": 17, "sleep": [17, 18, 19, 20], "stage": [17, 18, 19, 20], "conclus": 17, "physionet": [18, 19, 20], "chambon2018": 18, "network": [18, 20], "sequenc": [18, 19, 20], "eldele2021": 19, "u": 20, "multipl": 22, "discret": 22, "target": 22, "tuh": [22, 23, 66], "corpu": [22, 23], "process": 23, "big": 23, "resourc": 23, "time": 24, "cite": [25, 115], "braindecod": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117], "other": 25, "algorithm": 25, "augmenteddataload": 26, "bandstopfilt": 27, "channelsdropout": 28, "channelsshuffl": 29, "channelssymmetri": 30, "ftsurrog": 32, "frequencyshift": 33, "gaussiannois": 34, "identitytransform": 35, "mixup": [36, 53], "sensorsrot": 37, "sensorsxrot": 38, "sensorsyrot": 39, "sensorszrot": 40, "signflip": 41, "smoothtimemask": 42, "timerevers": 43, "bandstop_filt": 45, "channels_dropout": 46, "channels_permut": 47, "channels_shuffl": 48, "frequency_shift": 49, "ft_surrog": 50, "gaussian_nois": 51, "ident": 52, "sensors_rot": 54, "sign_flip": 55, "smooth_time_mask": 56, "time_revers": 57, "bcicompetitionivdataset4": 59, "bnci2014001": 60, "baseconcatdataset": 61, "basedataset": 62, "hgd": 63, "moabbdataset": 64, "sleepphysionet": 65, "tuhabnorm": 67, "windowsdataset": 68, "create_from_x_i": 69, "create_from_mne_epoch": 70, "create_from_mne_raw": 71, "datautil": [72, 73], "load_concat_dataset": 72, "save_concat_dataset": 73, "deep4net": 74, "eegitnet": 75, "eegincept": 76, "eegnetv1": 77, "eegnetv4": 78, "eegresnet": 79, "hybridnet": 80, "shallowfbcspnet": 81, "sleepstagerblanco2020": 82, "sleepstagerchambon2018": 83, "sleepstagereldele2021": 84, "tcn": 85, "tidnet": 86, "timedistribut": 87, "usleep": 88, "get_output_shap": 89, "preprocessor": 90, "create_fixed_length_window": 91, "create_windows_from_ev": 92, "create_windows_from_target_channel": 93, "exponential_moving_demean": 94, "exponential_moving_standard": 95, "filterbank": 96, "scale": 98, "eegregressor": 99, "balancedsequencesampl": 100, "recordingsampl": 101, "relativepositioningsampl": 102, "sequencesampl": 103, "croppedloss": 104, "croppedtimeseriesepochscor": 105, "croppedtrialepochscor": 106, "postepochtrainscor": 107, "timeseriesloss": 108, "mixup_criterion": 109, "predict_tri": 110, "trial_preds_from_window_pr": 111, "set_random_se": 112, "compute_amplitude_gradi": 113, "plot_confusion_matrix": 114, "frequent": 115, "ask": 115, "question": 115, "faq": 115, "do": 115, "help": 115, "can": 115, "t": 115, "get": [115, 119], "python": 115, "work": 115, "still": 115, "think": 115, "found": 115, "bug": [115, 120], "what": [115, 120], "homepag": 116, "indic": 116, "tabl": 116, "instal": 117, "via": 117, "pip": 117, "conda": 117, "environ": 117, "unus": 118, "entri": 118, "start": 119, "new": 120, "current": 120, "0": 120, "7": 120, "dev0": 120, "enhanc": 120, "chang": 120, "version": 120, "6": 120, "2021": 120, "12": 120, "06": 120, "5": 120, "07": 120, "14": 120, "author": 120}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"API Reference": [[0, "api-reference"]], "Classifier": [[0, "classifier"]], "Regressor": [[0, "regressor"]], "Models": [[0, "models"]], "Training": [[0, "training"], [4, "training"], [5, "training"], [6, "training"], [13, "training"], [17, "training"], [18, "training"], [19, "training"], [20, "training"]], "Datasets": [[0, "datasets"]], "Preprocessing": [[0, "preprocessing"], [4, "preprocessing"], [5, "preprocessing"], [6, "preprocessing"], [9, "preprocessing"], [10, "preprocessing"], [12, "preprocessing"], [13, "preprocessing"], [17, "preprocessing"], [18, "preprocessing"], [19, "preprocessing"], [20, "preprocessing"]], "Data Utils": [[0, "data-utils"]], "Samplers": [[0, "samplers"]], "Augmentation": [[0, "augmentation"]], "Utils": [[0, "utils"]], "Visualization": [[0, "visualization"]], "Benchmarking eager and lazy loading": [[1, "benchmarking-eager-and-lazy-loading"]], "Examples": [[2, "examples"]], "Cropped Decoding on BCIC IV 2a Dataset": [[3, "cropped-decoding-on-bcic-iv-2a-dataset"]], "Create model and compute windowing parameters": [[3, "create-model-and-compute-windowing-parameters"]], "Cut the data into windows": [[3, "cut-the-data-into-windows"]], "Split the dataset": [[3, "split-the-dataset"]], "Plot Results": [[3, "plot-results"], [4, "plot-results"], [5, "plot-results"], [6, "plot-results"]], "This is again the same code as in trialwise decoding.": [[3, "this-is-again-the-same-code-as-in-trialwise-decoding"]], "Plot Confusion Matrix": [[3, "plot-confusion-matrix"], [4, "plot-confusion-matrix"]], "Trialwise Decoding on BCIC IV 2a Dataset": [[4, "trialwise-decoding-on-bcic-iv-2a-dataset"]], "Loading and preprocessing the dataset": [[4, "loading-and-preprocessing-the-dataset"], [9, "loading-and-preprocessing-the-dataset"], [10, "loading-and-preprocessing-the-dataset"], [13, "loading-and-preprocessing-the-dataset"], [17, "loading-and-preprocessing-the-dataset"], [18, "loading-and-preprocessing-the-dataset"], [19, "loading-and-preprocessing-the-dataset"], [20, "loading-and-preprocessing-the-dataset"]], "Loading": [[4, "loading"], [5, "loading"], [6, "loading"], [9, "loading"], [10, "loading"], [12, "loading"], [13, "loading"], [18, "loading"], [19, "loading"], [20, "loading"]], "Cut Compute Windows": [[4, "cut-compute-windows"], [5, "cut-compute-windows"], [6, "cut-compute-windows"], [12, "cut-compute-windows"], [13, "cut-compute-windows"]], "Split dataset into train and valid": [[4, "split-dataset-into-train-and-valid"], [9, "split-dataset-into-train-and-valid"], [10, "split-dataset-into-train-and-valid"], [13, "split-dataset-into-train-and-valid"], [18, "split-dataset-into-train-and-valid"], [19, "split-dataset-into-train-and-valid"], [20, "split-dataset-into-train-and-valid"]], "Create model": [[4, "create-model"], [5, "create-model"], [6, "create-model"], [9, "create-model"], [10, "create-model"], [12, "create-model"], [13, "create-model"], [18, "create-model"], [19, "create-model"], [20, "create-model"]], "Fingers flexion cropped decoding on BCIC IV 4 ECoG Dataset": [[5, "fingers-flexion-cropped-decoding-on-bcic-iv-4-ecog-dataset"]], "Loading and preparing the dataset": [[5, "loading-and-preparing-the-dataset"], [6, "loading-and-preparing-the-dataset"]], "Split dataset into train and test": [[5, "split-dataset-into-train-and-test"], [12, "split-dataset-into-train-and-test"]], "Fingers flexion decoding on BCIC IV 4 ECoG Dataset": [[6, "fingers-flexion-decoding-on-bcic-iv-4-ecog-dataset"]], "Split dataset into train, valid, and test": [[6, "split-dataset-into-train-valid-and-test"]], "Benchmarking preprocessing with parallelization and serialization": [[7, "benchmarking-preprocessing-with-parallelization-and-serialization"]], "Custom Dataset Example": [[8, "custom-dataset-example"]], "Data Augmentation on BCIC IV 2a Dataset": [[9, "data-augmentation-on-bcic-iv-2a-dataset"]], "This example covers:": [[9, "this-example-covers"], [17, "this-example-covers"]], "Extracting windows": [[9, "extracting-windows"], [10, "extracting-windows"], [17, "extracting-windows"]], "Defining a Transform": [[9, "defining-a-transform"]], "Manipulating one session and visualizing the transformed data": [[9, "manipulating-one-session-and-visualizing-the-transformed-data"]], "Training a model with data augmentation": [[9, "training-a-model-with-data-augmentation"], [10, "training-a-model-with-data-augmentation"]], "Create an EEGClassifier with the desired augmentation": [[9, "create-an-eegclassifier-with-the-desired-augmentation"], [10, "create-an-eegclassifier-with-the-desired-augmentation"]], "Manually composing Transforms": [[9, "manually-composing-transforms"]], "Setting the data augmentation at the Dataset level": [[9, "setting-the-data-augmentation-at-the-dataset-level"]], "Searching the best data augmentation on BCIC IV 2a Dataset": [[10, "searching-the-best-data-augmentation-on-bcic-iv-2a-dataset"]], "Data Augmentation": [[10, null]], "References": [[10, "references"], [17, "references"], [18, "references"], [19, "references"], [20, "references"], [115, "references"]], "Defining a list of transforms": [[10, "defining-a-list-of-transforms"]], "Analysing the best fit": [[10, "analysing-the-best-fit"]], "MOABB Dataset Example": [[11, "moabb-dataset-example"]], "How to train, test and tune your model": [[12, "how-to-train-test-and-tune-your-model"]], "Why should I care about model evaluation?": [[12, "why-should-i-care-about-model-evaluation"]], "Loading, preprocessing, defining a model, etc.": [[12, "loading-preprocessing-defining-a-model-etc"]], "How to train and evaluate your model": [[12, "how-to-train-and-evaluate-your-model"]], "Option 1: Simple Train-Test Split": [[12, "option-1-simple-train-test-split"]], "Let\u2019s visualize the first option with a util function.": [[12, "let-s-visualize-the-first-option-with-a-util-function"]], "Option 2: Train-Val-Test Split": [[12, "option-2-train-val-test-split"]], "Let\u2019s visualize the second option with a util function.": [[12, "let-s-visualize-the-second-option-with-a-util-function"]], "Option 3: k-Fold Cross Validation": [[12, "option-3-k-fold-cross-validation"]], "Let\u2019s visualize the third option with a util function.": [[12, "let-s-visualize-the-third-option-with-a-util-function"]], "How to tune your hyperparameters": [[12, "how-to-tune-your-hyperparameters"]], "Option 1: Train-Val-Test Split": [[12, "option-1-train-val-test-split"]], "Option 2: k-Fold Cross Validation": [[12, "option-2-k-fold-cross-validation"]], "Hyperparameter tuning with scikit-learn": [[13, "hyperparameter-tuning-with-scikit-learn"]], "Load and save dataset example": [[14, "load-and-save-dataset-example"]], "MNE Dataset Example": [[15, "mne-dataset-example"]], "Regression example on fake data": [[16, "regression-example-on-fake-data"]], "Self-supervised learning on EEG with relative positioning": [[17, "self-supervised-learning-on-eeg-with-relative-positioning"]], "Self-supervised learning": [[17, null]], "Loading the raw recordings": [[17, "loading-the-raw-recordings"]], "Preprocessing windows": [[17, "preprocessing-windows"]], "Splitting dataset into train, valid and test sets": [[17, "splitting-dataset-into-train-valid-and-test-sets"]], "Creating samplers": [[17, "creating-samplers"]], "Creating the model": [[17, "creating-the-model"]], "Visualizing the results": [[17, "visualizing-the-results"]], "Inspecting pretext task performance": [[17, "inspecting-pretext-task-performance"]], "Using the learned representation for sleep staging": [[17, "using-the-learned-representation-for-sleep-staging"]], "Conclusion": [[17, "conclusion"]], "Sleep staging on the Sleep Physionet dataset using Chambon2018 network": [[18, "sleep-staging-on-the-sleep-physionet-dataset-using-chambon2018-network"]], "Extract windows": [[18, "extract-windows"], [19, "extract-windows"], [20, "extract-windows"]], "Window preprocessing": [[18, "window-preprocessing"], [19, "window-preprocessing"]], "Create sequence samplers": [[18, "create-sequence-samplers"], [19, "create-sequence-samplers"], [20, "create-sequence-samplers"]], "Plot results": [[18, "plot-results"], [19, "plot-results"], [20, "plot-results"]], "Sleep staging on the Sleep Physionet dataset using Eldele2021": [[19, "sleep-staging-on-the-sleep-physionet-dataset-using-eldele2021"]], "Sleep staging on the Sleep Physionet dataset using U-Sleep network": [[20, "sleep-staging-on-the-sleep-physionet-dataset-using-u-sleep-network"]], "Split Dataset Example": [[21, "split-dataset-example"]], "Multiple discrete targets with the TUH EEG Corpus": [[22, "multiple-discrete-targets-with-the-tuh-eeg-corpus"]], "Process a big data EEG resource (TUH EEG Corpus)": [[23, "process-a-big-data-eeg-resource-tuh-eeg-corpus"]], "Computation times": [[24, "computation-times"]], "How to cite Braindecode": [[25, "how-to-cite-braindecode"]], "Citing the Braindecode": [[25, "citing-the-braindecode"]], "Citing the MNE": [[25, "citing-the-mne"]], "Citing other algorithms": [[25, "citing-other-algorithms"]], "braindecode.augmentation.AugmentedDataLoader": [[26, "braindecode-augmentation-augmenteddataloader"]], "Examples using braindecode.augmentation.AugmentedDataLoader": [[26, "examples-using-braindecode-augmentation-augmenteddataloader"]], "braindecode.augmentation.BandstopFilter": [[27, "braindecode-augmentation-bandstopfilter"]], "braindecode.augmentation.ChannelsDropout": [[28, "braindecode-augmentation-channelsdropout"]], "Examples using braindecode.augmentation.ChannelsDropout": [[28, "examples-using-braindecode-augmentation-channelsdropout"]], "braindecode.augmentation.ChannelsShuffle": [[29, "braindecode-augmentation-channelsshuffle"]], "braindecode.augmentation.ChannelsSymmetry": [[30, "braindecode-augmentation-channelssymmetry"]], "braindecode.augmentation.Compose": [[31, "braindecode-augmentation-compose"]], "Examples using braindecode.augmentation.Compose": [[31, "examples-using-braindecode-augmentation-compose"]], "braindecode.augmentation.FTSurrogate": [[32, "braindecode-augmentation-ftsurrogate"]], "Examples using braindecode.augmentation.FTSurrogate": [[32, "examples-using-braindecode-augmentation-ftsurrogate"]], "braindecode.augmentation.FrequencyShift": [[33, "braindecode-augmentation-frequencyshift"]], "Examples using braindecode.augmentation.FrequencyShift": [[33, "examples-using-braindecode-augmentation-frequencyshift"]], "braindecode.augmentation.GaussianNoise": [[34, "braindecode-augmentation-gaussiannoise"]], "braindecode.augmentation.IdentityTransform": [[35, "braindecode-augmentation-identitytransform"]], "braindecode.augmentation.Mixup": [[36, "braindecode-augmentation-mixup"]], "braindecode.augmentation.SensorsRotation": [[37, "braindecode-augmentation-sensorsrotation"]], "braindecode.augmentation.SensorsXRotation": [[38, "braindecode-augmentation-sensorsxrotation"]], "braindecode.augmentation.SensorsYRotation": [[39, "braindecode-augmentation-sensorsyrotation"]], "braindecode.augmentation.SensorsZRotation": [[40, "braindecode-augmentation-sensorszrotation"]], "braindecode.augmentation.SignFlip": [[41, "braindecode-augmentation-signflip"]], "Examples using braindecode.augmentation.SignFlip": [[41, "examples-using-braindecode-augmentation-signflip"]], "braindecode.augmentation.SmoothTimeMask": [[42, "braindecode-augmentation-smoothtimemask"]], "Examples using braindecode.augmentation.SmoothTimeMask": [[42, "examples-using-braindecode-augmentation-smoothtimemask"]], "braindecode.augmentation.TimeReverse": [[43, "braindecode-augmentation-timereverse"]], "braindecode.augmentation.Transform": [[44, "braindecode-augmentation-transform"]], "Examples using braindecode.augmentation.Transform": [[44, "examples-using-braindecode-augmentation-transform"]], "braindecode.augmentation.functional.bandstop_filter": [[45, "braindecode-augmentation-functional-bandstop-filter"]], "braindecode.augmentation.functional.channels_dropout": [[46, "braindecode-augmentation-functional-channels-dropout"]], "braindecode.augmentation.functional.channels_permute": [[47, "braindecode-augmentation-functional-channels-permute"]], "braindecode.augmentation.functional.channels_shuffle": [[48, "braindecode-augmentation-functional-channels-shuffle"]], "braindecode.augmentation.functional.frequency_shift": [[49, "braindecode-augmentation-functional-frequency-shift"]], "braindecode.augmentation.functional.ft_surrogate": [[50, "braindecode-augmentation-functional-ft-surrogate"]], "braindecode.augmentation.functional.gaussian_noise": [[51, "braindecode-augmentation-functional-gaussian-noise"]], "braindecode.augmentation.functional.identity": [[52, "braindecode-augmentation-functional-identity"]], "braindecode.augmentation.functional.mixup": [[53, "braindecode-augmentation-functional-mixup"]], "braindecode.augmentation.functional.sensors_rotation": [[54, "braindecode-augmentation-functional-sensors-rotation"]], "braindecode.augmentation.functional.sign_flip": [[55, "braindecode-augmentation-functional-sign-flip"]], "braindecode.augmentation.functional.smooth_time_mask": [[56, "braindecode-augmentation-functional-smooth-time-mask"]], "braindecode.augmentation.functional.time_reverse": [[57, "braindecode-augmentation-functional-time-reverse"]], "braindecode.classifier.EEGClassifier": [[58, "braindecode-classifier-eegclassifier"]], "braindecode.datasets.BCICompetitionIVDataset4": [[59, "braindecode-datasets-bcicompetitionivdataset4"]], "Examples using braindecode.datasets.BCICompetitionIVDataset4": [[59, "examples-using-braindecode-datasets-bcicompetitionivdataset4"]], "braindecode.datasets.BNCI2014001": [[60, "braindecode-datasets-bnci2014001"]], "braindecode.datasets.BaseConcatDataset": [[61, "braindecode-datasets-baseconcatdataset"]], "Examples using braindecode.datasets.BaseConcatDataset": [[61, "examples-using-braindecode-datasets-baseconcatdataset"]], "braindecode.datasets.BaseDataset": [[62, "braindecode-datasets-basedataset"]], "Examples using braindecode.datasets.BaseDataset": [[62, "examples-using-braindecode-datasets-basedataset"]], "braindecode.datasets.HGD": [[63, "braindecode-datasets-hgd"]], "braindecode.datasets.MOABBDataset": [[64, "braindecode-datasets-moabbdataset"]], "Examples using braindecode.datasets.MOABBDataset": [[64, "examples-using-braindecode-datasets-moabbdataset"]], "braindecode.datasets.SleepPhysionet": [[65, "braindecode-datasets-sleepphysionet"]], "Examples using braindecode.datasets.SleepPhysionet": [[65, "examples-using-braindecode-datasets-sleepphysionet"]], "braindecode.datasets.TUH": [[66, "braindecode-datasets-tuh"]], "Examples using braindecode.datasets.TUH": [[66, "examples-using-braindecode-datasets-tuh"]], "braindecode.datasets.TUHAbnormal": [[67, "braindecode-datasets-tuhabnormal"]], "Examples using braindecode.datasets.TUHAbnormal": [[67, "examples-using-braindecode-datasets-tuhabnormal"]], "braindecode.datasets.WindowsDataset": [[68, "braindecode-datasets-windowsdataset"]], "braindecode.datasets.create_from_X_y": [[69, "braindecode-datasets-create-from-x-y"]], "Examples using braindecode.datasets.create_from_X_y": [[69, "examples-using-braindecode-datasets-create-from-x-y"]], "braindecode.datasets.create_from_mne_epochs": [[70, "braindecode-datasets-create-from-mne-epochs"]], "Examples using braindecode.datasets.create_from_mne_epochs": [[70, "examples-using-braindecode-datasets-create-from-mne-epochs"]], "braindecode.datasets.create_from_mne_raw": [[71, "braindecode-datasets-create-from-mne-raw"]], "Examples using braindecode.datasets.create_from_mne_raw": [[71, "examples-using-braindecode-datasets-create-from-mne-raw"]], "braindecode.datautil.load_concat_dataset": [[72, "braindecode-datautil-load-concat-dataset"]], "Examples using braindecode.datautil.load_concat_dataset": [[72, "examples-using-braindecode-datautil-load-concat-dataset"]], "braindecode.datautil.save_concat_dataset": [[73, "braindecode-datautil-save-concat-dataset"]], "braindecode.models.Deep4Net": [[74, "braindecode-models-deep4net"]], "Examples using braindecode.models.Deep4Net": [[74, "examples-using-braindecode-models-deep4net"]], "braindecode.models.EEGITNet": [[75, "braindecode-models-eegitnet"]], "braindecode.models.EEGInception": [[76, "braindecode-models-eeginception"]], "braindecode.models.EEGNetv1": [[77, "braindecode-models-eegnetv1"]], "braindecode.models.EEGNetv4": [[78, "braindecode-models-eegnetv4"]], "braindecode.models.EEGResNet": [[79, "braindecode-models-eegresnet"]], "braindecode.models.HybridNet": [[80, "braindecode-models-hybridnet"]], "braindecode.models.ShallowFBCSPNet": [[81, "braindecode-models-shallowfbcspnet"]], "Examples using braindecode.models.ShallowFBCSPNet": [[81, "examples-using-braindecode-models-shallowfbcspnet"]], "braindecode.models.SleepStagerBlanco2020": [[82, "braindecode-models-sleepstagerblanco2020"]], "braindecode.models.SleepStagerChambon2018": [[83, "braindecode-models-sleepstagerchambon2018"]], "Examples using braindecode.models.SleepStagerChambon2018": [[83, "examples-using-braindecode-models-sleepstagerchambon2018"]], "braindecode.models.SleepStagerEldele2021": [[84, "braindecode-models-sleepstagereldele2021"]], "Examples using braindecode.models.SleepStagerEldele2021": [[84, "examples-using-braindecode-models-sleepstagereldele2021"]], "braindecode.models.TCN": [[85, "braindecode-models-tcn"]], "braindecode.models.TIDNet": [[86, "braindecode-models-tidnet"]], "braindecode.models.TimeDistributed": [[87, "braindecode-models-timedistributed"]], "Examples using braindecode.models.TimeDistributed": [[87, "examples-using-braindecode-models-timedistributed"]], "braindecode.models.USleep": [[88, "braindecode-models-usleep"]], "Examples using braindecode.models.USleep": [[88, "examples-using-braindecode-models-usleep"]], "braindecode.models.get_output_shape": [[89, "braindecode-models-get-output-shape"]], "Examples using braindecode.models.get_output_shape": [[89, "examples-using-braindecode-models-get-output-shape"]], "braindecode.preprocessing.Preprocessor": [[90, "braindecode-preprocessing-preprocessor"]], "Examples using braindecode.preprocessing.Preprocessor": [[90, "examples-using-braindecode-preprocessing-preprocessor"]], "braindecode.preprocessing.create_fixed_length_windows": [[91, "braindecode-preprocessing-create-fixed-length-windows"]], "Examples using braindecode.preprocessing.create_fixed_length_windows": [[91, "examples-using-braindecode-preprocessing-create-fixed-length-windows"]], "braindecode.preprocessing.create_windows_from_events": [[92, "braindecode-preprocessing-create-windows-from-events"]], "Examples using braindecode.preprocessing.create_windows_from_events": [[92, "examples-using-braindecode-preprocessing-create-windows-from-events"]], "braindecode.preprocessing.create_windows_from_target_channels": [[93, "braindecode-preprocessing-create-windows-from-target-channels"]], "Examples using braindecode.preprocessing.create_windows_from_target_channels": [[93, "examples-using-braindecode-preprocessing-create-windows-from-target-channels"]], "braindecode.preprocessing.exponential_moving_demean": [[94, "braindecode-preprocessing-exponential-moving-demean"]], "braindecode.preprocessing.exponential_moving_standardize": [[95, "braindecode-preprocessing-exponential-moving-standardize"]], "Examples using braindecode.preprocessing.exponential_moving_standardize": [[95, "examples-using-braindecode-preprocessing-exponential-moving-standardize"]], "braindecode.preprocessing.filterbank": [[96, "braindecode-preprocessing-filterbank"]], "braindecode.preprocessing.preprocess": [[97, "braindecode-preprocessing-preprocess"]], "Examples using braindecode.preprocessing.preprocess": [[97, "examples-using-braindecode-preprocessing-preprocess"]], "braindecode.preprocessing.scale": [[98, "braindecode-preprocessing-scale"]], "Examples using braindecode.preprocessing.scale": [[98, "examples-using-braindecode-preprocessing-scale"]], "braindecode.regressor.EEGRegressor": [[99, "braindecode-regressor-eegregressor"]], "braindecode.samplers.BalancedSequenceSampler": [[100, "braindecode-samplers-balancedsequencesampler"]], "braindecode.samplers.RecordingSampler": [[101, "braindecode-samplers-recordingsampler"]], "Examples using braindecode.samplers.RecordingSampler": [[101, "examples-using-braindecode-samplers-recordingsampler"]], "braindecode.samplers.RelativePositioningSampler": [[102, "braindecode-samplers-relativepositioningsampler"]], "Examples using braindecode.samplers.RelativePositioningSampler": [[102, "examples-using-braindecode-samplers-relativepositioningsampler"]], "braindecode.samplers.SequenceSampler": [[103, "braindecode-samplers-sequencesampler"]], "Examples using braindecode.samplers.SequenceSampler": [[103, "examples-using-braindecode-samplers-sequencesampler"]], "braindecode.training.CroppedLoss": [[104, "braindecode-training-croppedloss"]], "Examples using braindecode.training.CroppedLoss": [[104, "examples-using-braindecode-training-croppedloss"]], "braindecode.training.CroppedTimeSeriesEpochScoring": [[105, "braindecode-training-croppedtimeseriesepochscoring"]], "Examples using braindecode.training.CroppedTimeSeriesEpochScoring": [[105, "examples-using-braindecode-training-croppedtimeseriesepochscoring"]], "braindecode.training.CroppedTrialEpochScoring": [[106, "braindecode-training-croppedtrialepochscoring"]], "Examples using braindecode.training.CroppedTrialEpochScoring": [[106, "examples-using-braindecode-training-croppedtrialepochscoring"]], "braindecode.training.PostEpochTrainScoring": [[107, "braindecode-training-postepochtrainscoring"]], "braindecode.training.TimeSeriesLoss": [[108, "braindecode-training-timeseriesloss"]], "Examples using braindecode.training.TimeSeriesLoss": [[108, "examples-using-braindecode-training-timeseriesloss"]], "braindecode.training.mixup_criterion": [[109, "braindecode-training-mixup-criterion"]], "braindecode.training.predict_trials": [[110, "braindecode-training-predict-trials"]], "braindecode.training.trial_preds_from_window_preds": [[111, "braindecode-training-trial-preds-from-window-preds"]], "braindecode.util.set_random_seeds": [[112, "braindecode-util-set-random-seeds"]], "Examples using braindecode.util.set_random_seeds": [[112, "examples-using-braindecode-util-set-random-seeds"]], "braindecode.visualization.compute_amplitude_gradients": [[113, "braindecode-visualization-compute-amplitude-gradients"]], "braindecode.visualization.plot_confusion_matrix": [[114, "braindecode-visualization-plot-confusion-matrix"]], "Examples using braindecode.visualization.plot_confusion_matrix": [[114, "examples-using-braindecode-visualization-plot-confusion-matrix"]], "Frequently Asked Questions (FAQ)": [[115, "frequently-asked-questions-faq"]], "How do I cite Braindecode?": [[115, "how-do-i-cite-braindecode"]], "Help! I can\u2019t get Python and Braindecode working!": [[115, "help-i-can-t-get-python-and-braindecode-working"]], "I still can\u2019t get it to work!": [[115, "i-still-can-t-get-it-to-work"]], "I think I found a bug, what do I do?": [[115, "i-think-i-found-a-bug-what-do-i-do"]], "Braindecode Homepage": [[116, "braindecode-homepage"]], "Indices and tables": [[116, "indices-and-tables"]], "Install via pip or conda": [[117, "install-via-pip-or-conda"]], "Preparing the environment for braindecode installation": [[117, "preparing-the-environment-for-braindecode-installation"]], "Installing the braindecode with pip": [[117, "installing-the-braindecode-with-pip"]], "Installing Braindecode with conda": [[117, "installing-braindecode-with-conda"]], "Unused API Entries": [[118, "unused-api-entries"]], "Getting starting": [[119, "getting-starting"]], "What\u2019s new": [[120, "what-s-new"]], "Current (0.7.dev0)": [[120, "current-0-7-dev0"]], "Enhancements": [[120, "enhancements"], [120, "id1"], [120, "id4"]], "Bugs": [[120, "bugs"], [120, "id2"], [120, "id5"]], "API changes": [[120, "api-changes"], [120, "id3"], [120, "id6"]], "Version 0.6 (2021-12-06)": [[120, "version-0-6-2021-12-06"]], "Version 0.5.1 (2021-07-14)": [[120, "version-0-5-1-2021-07-14"]], "Authors": [[120, "authors"]]}, "indexentries": {"braindecode": [[0, "module-braindecode"]], "module": [[0, "module-braindecode"]], "augmenteddataloader (class in braindecode.augmentation)": [[26, "braindecode.augmentation.AugmentedDataLoader"]], "bandstopfilter (class in braindecode.augmentation)": [[27, "braindecode.augmentation.BandstopFilter"]], "get_augmentation_params() (braindecode.augmentation.bandstopfilter method)": [[27, "braindecode.augmentation.BandstopFilter.get_augmentation_params"]], "operation() (braindecode.augmentation.bandstopfilter static method)": [[27, "braindecode.augmentation.BandstopFilter.operation"]], "channelsdropout (class in braindecode.augmentation)": [[28, "braindecode.augmentation.ChannelsDropout"]], "get_augmentation_params() (braindecode.augmentation.channelsdropout method)": [[28, "braindecode.augmentation.ChannelsDropout.get_augmentation_params"]], "operation() (braindecode.augmentation.channelsdropout static method)": [[28, "braindecode.augmentation.ChannelsDropout.operation"]], "channelsshuffle (class in braindecode.augmentation)": [[29, "braindecode.augmentation.ChannelsShuffle"]], "get_augmentation_params() (braindecode.augmentation.channelsshuffle method)": [[29, "braindecode.augmentation.ChannelsShuffle.get_augmentation_params"]], "operation() (braindecode.augmentation.channelsshuffle static method)": [[29, "braindecode.augmentation.ChannelsShuffle.operation"]], "channelssymmetry (class in braindecode.augmentation)": [[30, "braindecode.augmentation.ChannelsSymmetry"]], "get_augmentation_params() (braindecode.augmentation.channelssymmetry method)": [[30, "braindecode.augmentation.ChannelsSymmetry.get_augmentation_params"]], "operation() (braindecode.augmentation.channelssymmetry static method)": [[30, "braindecode.augmentation.ChannelsSymmetry.operation"]], "compose (class in braindecode.augmentation)": [[31, "braindecode.augmentation.Compose"]], "forward() (braindecode.augmentation.compose method)": [[31, "braindecode.augmentation.Compose.forward"]], "ftsurrogate (class in braindecode.augmentation)": [[32, "braindecode.augmentation.FTSurrogate"]], "get_augmentation_params() (braindecode.augmentation.ftsurrogate method)": [[32, "braindecode.augmentation.FTSurrogate.get_augmentation_params"]], "operation() (braindecode.augmentation.ftsurrogate static method)": [[32, "braindecode.augmentation.FTSurrogate.operation"]], "frequencyshift (class in braindecode.augmentation)": [[33, "braindecode.augmentation.FrequencyShift"]], "get_augmentation_params() (braindecode.augmentation.frequencyshift method)": [[33, "braindecode.augmentation.FrequencyShift.get_augmentation_params"]], "operation() (braindecode.augmentation.frequencyshift static method)": [[33, "braindecode.augmentation.FrequencyShift.operation"]], "gaussiannoise (class in braindecode.augmentation)": [[34, "braindecode.augmentation.GaussianNoise"]], "get_augmentation_params() (braindecode.augmentation.gaussiannoise method)": [[34, "braindecode.augmentation.GaussianNoise.get_augmentation_params"]], "operation() (braindecode.augmentation.gaussiannoise static method)": [[34, "braindecode.augmentation.GaussianNoise.operation"]], "identitytransform (class in braindecode.augmentation)": [[35, "braindecode.augmentation.IdentityTransform"]], "operation() (braindecode.augmentation.identitytransform static method)": [[35, "braindecode.augmentation.IdentityTransform.operation"]], "mixup (class in braindecode.augmentation)": [[36, "braindecode.augmentation.Mixup"]], "get_augmentation_params() (braindecode.augmentation.mixup method)": [[36, "braindecode.augmentation.Mixup.get_augmentation_params"]], "operation() (braindecode.augmentation.mixup static method)": [[36, "braindecode.augmentation.Mixup.operation"]], "sensorsrotation (class in braindecode.augmentation)": [[37, "braindecode.augmentation.SensorsRotation"]], "get_augmentation_params() (braindecode.augmentation.sensorsrotation method)": [[37, "braindecode.augmentation.SensorsRotation.get_augmentation_params"]], "operation() (braindecode.augmentation.sensorsrotation static method)": [[37, "braindecode.augmentation.SensorsRotation.operation"]], "sensorsxrotation (class in braindecode.augmentation)": [[38, "braindecode.augmentation.SensorsXRotation"]], "sensorsyrotation (class in braindecode.augmentation)": [[39, "braindecode.augmentation.SensorsYRotation"]], "sensorszrotation (class in braindecode.augmentation)": [[40, "braindecode.augmentation.SensorsZRotation"]], "signflip (class in braindecode.augmentation)": [[41, "braindecode.augmentation.SignFlip"]], "operation() (braindecode.augmentation.signflip static method)": [[41, "braindecode.augmentation.SignFlip.operation"]], "smoothtimemask (class in braindecode.augmentation)": [[42, "braindecode.augmentation.SmoothTimeMask"]], "get_augmentation_params() (braindecode.augmentation.smoothtimemask method)": [[42, "braindecode.augmentation.SmoothTimeMask.get_augmentation_params"]], "operation() (braindecode.augmentation.smoothtimemask static method)": [[42, "braindecode.augmentation.SmoothTimeMask.operation"]], "timereverse (class in braindecode.augmentation)": [[43, "braindecode.augmentation.TimeReverse"]], "operation() (braindecode.augmentation.timereverse static method)": [[43, "braindecode.augmentation.TimeReverse.operation"]], "transform (class in braindecode.augmentation)": [[44, "braindecode.augmentation.Transform"]], "forward() (braindecode.augmentation.transform method)": [[44, "braindecode.augmentation.Transform.forward"]], "get_augmentation_params() (braindecode.augmentation.transform method)": [[44, "braindecode.augmentation.Transform.get_augmentation_params"]], "bandstop_filter() (in module braindecode.augmentation.functional)": [[45, "braindecode.augmentation.functional.bandstop_filter"]], "channels_dropout() (in module braindecode.augmentation.functional)": [[46, "braindecode.augmentation.functional.channels_dropout"]], "channels_permute() (in module braindecode.augmentation.functional)": [[47, "braindecode.augmentation.functional.channels_permute"]], "channels_shuffle() (in module braindecode.augmentation.functional)": [[48, "braindecode.augmentation.functional.channels_shuffle"]], "frequency_shift() (in module braindecode.augmentation.functional)": [[49, "braindecode.augmentation.functional.frequency_shift"]], "ft_surrogate() (in module braindecode.augmentation.functional)": [[50, "braindecode.augmentation.functional.ft_surrogate"]], "gaussian_noise() (in module braindecode.augmentation.functional)": [[51, "braindecode.augmentation.functional.gaussian_noise"]], "identity() (in module braindecode.augmentation.functional)": [[52, "braindecode.augmentation.functional.identity"]], "mixup() (in module braindecode.augmentation.functional)": [[53, "braindecode.augmentation.functional.mixup"]], "sensors_rotation() (in module braindecode.augmentation.functional)": [[54, "braindecode.augmentation.functional.sensors_rotation"]], "sign_flip() (in module braindecode.augmentation.functional)": [[55, "braindecode.augmentation.functional.sign_flip"]], "smooth_time_mask() (in module braindecode.augmentation.functional)": [[56, "braindecode.augmentation.functional.smooth_time_mask"]], "time_reverse() (in module braindecode.augmentation.functional)": [[57, "braindecode.augmentation.functional.time_reverse"]], "eegclassifier (class in braindecode.classifier)": [[58, "braindecode.classifier.EEGClassifier"]], "_criteria (braindecode.classifier.eegclassifier attribute)": [[58, "braindecode.classifier.EEGClassifier._criteria"]], "_modules (braindecode.classifier.eegclassifier attribute)": [[58, "braindecode.classifier.EEGClassifier._modules"]], "_optimizers (braindecode.classifier.eegclassifier attribute)": [[58, "braindecode.classifier.EEGClassifier._optimizers"]], "callbacks_ (braindecode.classifier.eegclassifier attribute)": [[58, "braindecode.classifier.EEGClassifier.callbacks_"]], "classes_ (braindecode.classifier.eegclassifier attribute)": [[58, "braindecode.classifier.EEGClassifier.classes_"]], "criterion_ (braindecode.classifier.eegclassifier attribute)": [[58, "braindecode.classifier.EEGClassifier.criterion_"]], "cuda_dependent_attributes_ (braindecode.classifier.eegclassifier attribute)": [[58, "braindecode.classifier.EEGClassifier.cuda_dependent_attributes_"]], "get_iterator() (braindecode.classifier.eegclassifier method)": [[58, "braindecode.classifier.EEGClassifier.get_iterator"]], "get_loss() (braindecode.classifier.eegclassifier method)": [[58, "braindecode.classifier.EEGClassifier.get_loss"]], "initialized_ (braindecode.classifier.eegclassifier attribute)": [[58, "braindecode.classifier.EEGClassifier.initialized_"]], "module_ (braindecode.classifier.eegclassifier attribute)": [[58, "braindecode.classifier.EEGClassifier.module_"]], "on_batch_end() (braindecode.classifier.eegclassifier method)": [[58, "braindecode.classifier.EEGClassifier.on_batch_end"]], "predict() (braindecode.classifier.eegclassifier method)": [[58, "braindecode.classifier.EEGClassifier.predict"]], "predict_proba() (braindecode.classifier.eegclassifier method)": [[58, "braindecode.classifier.EEGClassifier.predict_proba"]], "predict_trials() (braindecode.classifier.eegclassifier method)": [[58, "braindecode.classifier.EEGClassifier.predict_trials"]], "predict_with_window_inds_and_ys() (braindecode.classifier.eegclassifier method)": [[58, "braindecode.classifier.EEGClassifier.predict_with_window_inds_and_ys"]], "prefixes_ (braindecode.classifier.eegclassifier attribute)": [[58, "braindecode.classifier.EEGClassifier.prefixes_"]], "bcicompetitionivdataset4 (class in braindecode.datasets)": [[59, "braindecode.datasets.BCICompetitionIVDataset4"]], "download() (braindecode.datasets.bcicompetitionivdataset4 static method)": [[59, "braindecode.datasets.BCICompetitionIVDataset4.download"]], "bnci2014001 (class in braindecode.datasets)": [[60, "braindecode.datasets.BNCI2014001"]], "baseconcatdataset (class in braindecode.datasets)": [[61, "braindecode.datasets.BaseConcatDataset"]], "get_metadata() (braindecode.datasets.baseconcatdataset method)": [[61, "braindecode.datasets.BaseConcatDataset.get_metadata"]], "save() (braindecode.datasets.baseconcatdataset method)": [[61, "braindecode.datasets.BaseConcatDataset.save"]], "set_description() (braindecode.datasets.baseconcatdataset method)": [[61, "braindecode.datasets.BaseConcatDataset.set_description"]], "split() (braindecode.datasets.baseconcatdataset method)": [[61, "braindecode.datasets.BaseConcatDataset.split"]], "basedataset (class in braindecode.datasets)": [[62, "braindecode.datasets.BaseDataset"]], "set_description() (braindecode.datasets.basedataset method)": [[62, "braindecode.datasets.BaseDataset.set_description"]], "hgd (class in braindecode.datasets)": [[63, "braindecode.datasets.HGD"]], "moabbdataset (class in braindecode.datasets)": [[64, "braindecode.datasets.MOABBDataset"]], "sleepphysionet (class in braindecode.datasets)": [[65, "braindecode.datasets.SleepPhysionet"]], "tuh (class in braindecode.datasets)": [[66, "braindecode.datasets.TUH"]], "tuhabnormal (class in braindecode.datasets)": [[67, "braindecode.datasets.TUHAbnormal"]], "windowsdataset (class in braindecode.datasets)": [[68, "braindecode.datasets.WindowsDataset"]], "set_description() (braindecode.datasets.windowsdataset method)": [[68, "braindecode.datasets.WindowsDataset.set_description"]], "create_from_x_y() (in module braindecode.datasets)": [[69, "braindecode.datasets.create_from_X_y"]], "create_from_mne_epochs() (in module braindecode.datasets)": [[70, "braindecode.datasets.create_from_mne_epochs"]], "create_from_mne_raw() (in module braindecode.datasets)": [[71, "braindecode.datasets.create_from_mne_raw"]], "load_concat_dataset() (in module braindecode.datautil)": [[72, "braindecode.datautil.load_concat_dataset"]], "save_concat_dataset() (in module braindecode.datautil)": [[73, "braindecode.datautil.save_concat_dataset"]], "deep4net (class in braindecode.models)": [[74, "braindecode.models.Deep4Net"]], "eegitnet (class in braindecode.models)": [[75, "braindecode.models.EEGITNet"]], "eeginception (class in braindecode.models)": [[76, "braindecode.models.EEGInception"]], "eegnetv1 (class in braindecode.models)": [[77, "braindecode.models.EEGNetv1"]], "eegnetv4 (class in braindecode.models)": [[78, "braindecode.models.EEGNetv4"]], "eegresnet (class in braindecode.models)": [[79, "braindecode.models.EEGResNet"]], "hybridnet (class in braindecode.models)": [[80, "braindecode.models.HybridNet"]], "forward() (braindecode.models.hybridnet method)": [[80, "braindecode.models.HybridNet.forward"]], "shallowfbcspnet (class in braindecode.models)": [[81, "braindecode.models.ShallowFBCSPNet"]], "sleepstagerblanco2020 (class in braindecode.models)": [[82, "braindecode.models.SleepStagerBlanco2020"]], "forward() (braindecode.models.sleepstagerblanco2020 method)": [[82, "braindecode.models.SleepStagerBlanco2020.forward"]], "sleepstagerchambon2018 (class in braindecode.models)": [[83, "braindecode.models.SleepStagerChambon2018"]], "forward() (braindecode.models.sleepstagerchambon2018 method)": [[83, "braindecode.models.SleepStagerChambon2018.forward"]], "sleepstagereldele2021 (class in braindecode.models)": [[84, "braindecode.models.SleepStagerEldele2021"]], "forward() (braindecode.models.sleepstagereldele2021 method)": [[84, "braindecode.models.SleepStagerEldele2021.forward"]], "tcn (class in braindecode.models)": [[85, "braindecode.models.TCN"]], "forward() (braindecode.models.tcn method)": [[85, "braindecode.models.TCN.forward"]], "tidnet (class in braindecode.models)": [[86, "braindecode.models.TIDNet"]], "forward() (braindecode.models.tidnet method)": [[86, "braindecode.models.TIDNet.forward"]], "timedistributed (class in braindecode.models)": [[87, "braindecode.models.TimeDistributed"]], "forward() (braindecode.models.timedistributed method)": [[87, "braindecode.models.TimeDistributed.forward"]], "usleep (class in braindecode.models)": [[88, "braindecode.models.USleep"]], "forward() (braindecode.models.usleep method)": [[88, "braindecode.models.USleep.forward"]], "get_output_shape() (in module braindecode.models)": [[89, "braindecode.models.get_output_shape"]], "preprocessor (class in braindecode.preprocessing)": [[90, "braindecode.preprocessing.Preprocessor"]], "apply() (braindecode.preprocessing.preprocessor method)": [[90, "braindecode.preprocessing.Preprocessor.apply"]], "create_fixed_length_windows() (in module braindecode.preprocessing)": [[91, "braindecode.preprocessing.create_fixed_length_windows"]], "create_windows_from_events() (in module braindecode.preprocessing)": [[92, "braindecode.preprocessing.create_windows_from_events"]], "create_windows_from_target_channels() (in module braindecode.preprocessing)": [[93, "braindecode.preprocessing.create_windows_from_target_channels"]], "exponential_moving_demean() (in module braindecode.preprocessing)": [[94, "braindecode.preprocessing.exponential_moving_demean"]], "exponential_moving_standardize() (in module braindecode.preprocessing)": [[95, "braindecode.preprocessing.exponential_moving_standardize"]], "filterbank() (in module braindecode.preprocessing)": [[96, "braindecode.preprocessing.filterbank"]], "preprocess() (in module braindecode.preprocessing)": [[97, "braindecode.preprocessing.preprocess"]], "scale() (in module braindecode.preprocessing)": [[98, "braindecode.preprocessing.scale"]], "eegregressor (class in braindecode.regressor)": [[99, "braindecode.regressor.EEGRegressor"]], "_criteria (braindecode.regressor.eegregressor attribute)": [[99, "braindecode.regressor.EEGRegressor._criteria"]], "_modules (braindecode.regressor.eegregressor attribute)": [[99, "braindecode.regressor.EEGRegressor._modules"]], "_optimizers (braindecode.regressor.eegregressor attribute)": [[99, "braindecode.regressor.EEGRegressor._optimizers"]], "callbacks_ (braindecode.regressor.eegregressor attribute)": [[99, "braindecode.regressor.EEGRegressor.callbacks_"]], "criterion_ (braindecode.regressor.eegregressor attribute)": [[99, "braindecode.regressor.EEGRegressor.criterion_"]], "cuda_dependent_attributes_ (braindecode.regressor.eegregressor attribute)": [[99, "braindecode.regressor.EEGRegressor.cuda_dependent_attributes_"]], "fit() (braindecode.regressor.eegregressor method)": [[99, "braindecode.regressor.EEGRegressor.fit"]], "get_iterator() (braindecode.regressor.eegregressor method)": [[99, "braindecode.regressor.EEGRegressor.get_iterator"]], "get_loss() (braindecode.regressor.eegregressor method)": [[99, "braindecode.regressor.EEGRegressor.get_loss"]], "initialized_ (braindecode.regressor.eegregressor attribute)": [[99, "braindecode.regressor.EEGRegressor.initialized_"]], "module_ (braindecode.regressor.eegregressor attribute)": [[99, "braindecode.regressor.EEGRegressor.module_"]], "on_batch_end() (braindecode.regressor.eegregressor method)": [[99, "braindecode.regressor.EEGRegressor.on_batch_end"]], "predict_proba() (braindecode.regressor.eegregressor method)": [[99, "braindecode.regressor.EEGRegressor.predict_proba"]], "predict_trials() (braindecode.regressor.eegregressor method)": [[99, "braindecode.regressor.EEGRegressor.predict_trials"]], "predict_with_window_inds_and_ys() (braindecode.regressor.eegregressor method)": [[99, "braindecode.regressor.EEGRegressor.predict_with_window_inds_and_ys"]], "prefixes_ (braindecode.regressor.eegregressor attribute)": [[99, "braindecode.regressor.EEGRegressor.prefixes_"]], "balancedsequencesampler (class in braindecode.samplers)": [[100, "braindecode.samplers.BalancedSequenceSampler"]], "sample_class() (braindecode.samplers.balancedsequencesampler method)": [[100, "braindecode.samplers.BalancedSequenceSampler.sample_class"]], "recordingsampler (class in braindecode.samplers)": [[101, "braindecode.samplers.RecordingSampler"]], "info (braindecode.samplers.recordingsampler attribute)": [[101, "braindecode.samplers.RecordingSampler.info"]], "n_recordings (braindecode.samplers.recordingsampler attribute)": [[101, "braindecode.samplers.RecordingSampler.n_recordings"]], "sample_recording() (braindecode.samplers.recordingsampler method)": [[101, "braindecode.samplers.RecordingSampler.sample_recording"]], "sample_window() (braindecode.samplers.recordingsampler method)": [[101, "braindecode.samplers.RecordingSampler.sample_window"]], "relativepositioningsampler (class in braindecode.samplers)": [[102, "braindecode.samplers.RelativePositioningSampler"]], "presample() (braindecode.samplers.relativepositioningsampler method)": [[102, "braindecode.samplers.RelativePositioningSampler.presample"]], "sequencesampler (class in braindecode.samplers)": [[103, "braindecode.samplers.SequenceSampler"]], "file_ids (braindecode.samplers.sequencesampler attribute)": [[103, "braindecode.samplers.SequenceSampler.file_ids"]], "info (braindecode.samplers.sequencesampler attribute)": [[103, "braindecode.samplers.SequenceSampler.info"]], "croppedloss (class in braindecode.training)": [[104, "braindecode.training.CroppedLoss"]], "forward() (braindecode.training.croppedloss method)": [[104, "braindecode.training.CroppedLoss.forward"]], "croppedtimeseriesepochscoring (class in braindecode.training)": [[105, "braindecode.training.CroppedTimeSeriesEpochScoring"]], "on_epoch_end() (braindecode.training.croppedtimeseriesepochscoring method)": [[105, "braindecode.training.CroppedTimeSeriesEpochScoring.on_epoch_end"]], "croppedtrialepochscoring (class in braindecode.training)": [[106, "braindecode.training.CroppedTrialEpochScoring"]], "on_batch_end() (braindecode.training.croppedtrialepochscoring method)": [[106, "braindecode.training.CroppedTrialEpochScoring.on_batch_end"]], "on_epoch_end() (braindecode.training.croppedtrialepochscoring method)": [[106, "braindecode.training.CroppedTrialEpochScoring.on_epoch_end"]], "postepochtrainscoring (class in braindecode.training)": [[107, "braindecode.training.PostEpochTrainScoring"]], "on_epoch_end() (braindecode.training.postepochtrainscoring method)": [[107, "braindecode.training.PostEpochTrainScoring.on_epoch_end"]], "timeseriesloss (class in braindecode.training)": [[108, "braindecode.training.TimeSeriesLoss"]], "forward() (braindecode.training.timeseriesloss method)": [[108, "braindecode.training.TimeSeriesLoss.forward"]], "mixup_criterion() (in module braindecode.training)": [[109, "braindecode.training.mixup_criterion"]], "predict_trials() (in module braindecode.training)": [[110, "braindecode.training.predict_trials"]], "trial_preds_from_window_preds() (in module braindecode.training)": [[111, "braindecode.training.trial_preds_from_window_preds"]], "set_random_seeds() (in module braindecode.util)": [[112, "braindecode.util.set_random_seeds"]], "compute_amplitude_gradients() (in module braindecode.visualization)": [[113, "braindecode.visualization.compute_amplitude_gradients"]], "plot_confusion_matrix() (in module braindecode.visualization)": [[114, "braindecode.visualization.plot_confusion_matrix"]]}})