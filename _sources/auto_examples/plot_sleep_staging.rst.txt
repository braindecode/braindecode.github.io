
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_sleep_staging.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_sleep_staging.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_sleep_staging.py:


Sleep staging on the Sleep Physionet dataset
============================================

This tutorial shows how to train and test a sleep staging neural network with
Braindecode. We follow the approach of [1]_ on the openly accessible Sleep
Physionet dataset [1]_ [2]_.

References
----------
.. [1] Chambon, S., Galtier, M., Arnal, P., Wainrib, G. and Gramfort, A.
      (2018)A Deep Learning Architecture for Temporal Sleep Stage
      Classification Using Multivariate and Multimodal Time Series.
      IEEE Trans. on Neural Systems and Rehabilitation Engineering 26:
      (758-769)

.. [2] B Kemp, AH Zwinderman, B Tuk, HAC Kamphuisen, JJL Obery√©. Analysis of
       a sleep-dependent neuronal feedback loop: the slow-wave
       microcontinuity of the EEG. IEEE-BME 47(9):1185-1194 (2000).

.. [3] Goldberger AL, Amaral LAN, Glass L, Hausdorff JM, Ivanov PCh,
       Mark RG, Mietus JE, Moody GB, Peng C-K, Stanley HE. (2000)
       PhysioBank, PhysioToolkit, and PhysioNet: Components of a New
       Research Resource for Complex Physiologic Signals.
       Circulation 101(23):e215-e220

.. GENERATED FROM PYTHON SOURCE LINES 27-32

.. code-block:: default

    # Authors: Hubert Banville <hubert.jbanville@gmail.com>
    #
    # License: BSD (3-clause)









.. GENERATED FROM PYTHON SOURCE LINES 33-36

Loading and preprocessing the dataset
-------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 38-41

Loading
~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 43-57

First, we load the data using the
:class:`braindecode.datasets.sleep_physionet.SleepPhysionet` class. We load
two recordings from two different individuals: we will use the first one to
train our network and the second one to evaluate performance (as in the `MNE`_
sleep staging example).

.. _MNE: https://mne.tools/stable/auto_tutorials/sample-datasets/plot_sleep.html

.. note::
   To load your own datasets either via MNE or from
   preprocessed X/y numpy arrays, see the `MNE Dataset
   Tutorial <./plot_mne_dataset_example.html>`__ and the `Numpy Dataset
   Tutorial <./plot_custom_dataset_example.html>`__.


.. GENERATED FROM PYTHON SOURCE LINES 57-64

.. code-block:: default


    from braindecode.datasets.sleep_physionet import SleepPhysionet

    dataset = SleepPhysionet(
        subject_ids=[0, 1], recording_ids=[1], crop_wake_mins=30)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using default location ~/mne_data for PHYSIONET_SLEEP...
    Downloading https://physionet.org/physiobank/database/sleep-edfx/sleep-cassette//SC4001E0-PSG.edf (46.1 MB)
      0%|          | Downloading : 0.00/46.1M [00:00<?,        ?B/s]      0%|          | Downloading : 120k/46.1M [00:00<00:09,    4.92MB/s]      1%|          | Downloading : 312k/46.1M [00:00<00:07,    6.72MB/s]      2%|2         | Downloading : 952k/46.1M [00:00<00:03,    15.1MB/s]      3%|3         | Downloading : 1.43M/46.1M [00:00<00:02,    18.7MB/s]      4%|4         | Downloading : 1.93M/46.1M [00:00<00:02,    19.3MB/s]      6%|6         | Downloading : 2.93M/46.1M [00:00<00:01,    26.0MB/s]      9%|8         | Downloading : 3.93M/46.1M [00:00<00:01,    29.1MB/s]     11%|#         | Downloading : 4.93M/46.1M [00:00<00:01,    31.4MB/s]     13%|#2        | Downloading : 5.93M/46.1M [00:00<00:01,    33.2MB/s]     15%|#5        | Downloading : 6.93M/46.1M [00:00<00:01,    34.5MB/s]     17%|#7        | Downloading : 7.93M/46.1M [00:00<00:01,    35.2MB/s]     19%|#9        | Downloading : 8.93M/46.1M [00:00<00:01,    36.1MB/s]     22%|##1       | Downloading : 9.93M/46.1M [00:00<00:01,    34.5MB/s]     24%|##3       | Downloading : 10.9M/46.1M [00:00<00:01,    34.8MB/s]     26%|##5       | Downloading : 11.9M/46.1M [00:00<00:01,    35.6MB/s]     28%|##8       | Downloading : 12.9M/46.1M [00:00<00:00,    36.1MB/s]     30%|###       | Downloading : 13.9M/46.1M [00:00<00:00,    36.5MB/s]     32%|###2      | Downloading : 14.9M/46.1M [00:00<00:00,    37.0MB/s]     35%|###4      | Downloading : 15.9M/46.1M [00:00<00:00,    35.8MB/s]     37%|###6      | Downloading : 16.9M/46.1M [00:00<00:00,    36.5MB/s]     39%|###8      | Downloading : 17.9M/46.1M [00:00<00:00,    34.5MB/s]     41%|####1     | Downloading : 18.9M/46.1M [00:00<00:00,    32.8MB/s]     43%|####3     | Downloading : 19.9M/46.1M [00:00<00:00,    31.3MB/s]     45%|####5     | Downloading : 20.9M/46.1M [00:00<00:00,    30.2MB/s]     48%|####7     | Downloading : 21.9M/46.1M [00:00<00:00,    29.2MB/s]     50%|####9     | Downloading : 22.9M/46.1M [00:00<00:00,    28.5MB/s]     52%|#####1    | Downloading : 23.9M/46.1M [00:00<00:00,    27.8MB/s]     54%|#####4    | Downloading : 24.9M/46.1M [00:00<00:00,    27.2MB/s]     56%|#####6    | Downloading : 25.9M/46.1M [00:00<00:00,    26.7MB/s]     58%|#####8    | Downloading : 26.9M/46.1M [00:00<00:00,    26.2MB/s]     61%|######    | Downloading : 27.9M/46.1M [00:01<00:00,    26.1MB/s]     63%|######2   | Downloading : 28.9M/46.1M [00:01<00:00,    25.6MB/s]     65%|######4   | Downloading : 29.9M/46.1M [00:01<00:00,    25.3MB/s]     67%|######7   | Downloading : 30.9M/46.1M [00:01<00:00,    25.3MB/s]     69%|######9   | Downloading : 31.9M/46.1M [00:01<00:00,    25.0MB/s]     71%|#######1  | Downloading : 32.9M/46.1M [00:01<00:00,    24.9MB/s]     74%|#######3  | Downloading : 33.9M/46.1M [00:01<00:00,    24.9MB/s]     76%|#######5  | Downloading : 34.9M/46.1M [00:01<00:00,    24.6MB/s]     78%|#######7  | Downloading : 35.9M/46.1M [00:01<00:00,    24.7MB/s]     80%|########  | Downloading : 36.9M/46.1M [00:01<00:00,    24.5MB/s]     82%|########2 | Downloading : 37.9M/46.1M [00:01<00:00,    24.6MB/s]     84%|########4 | Downloading : 38.9M/46.1M [00:01<00:00,    24.6MB/s]     87%|########6 | Downloading : 39.9M/46.1M [00:01<00:00,    24.6MB/s]     89%|########8 | Downloading : 40.9M/46.1M [00:01<00:00,    24.4MB/s]     91%|######### | Downloading : 41.9M/46.1M [00:01<00:00,    24.6MB/s]     93%|#########3| Downloading : 42.9M/46.1M [00:01<00:00,    24.6MB/s]     95%|#########5| Downloading : 43.9M/46.1M [00:01<00:00,    24.7MB/s]     97%|#########7| Downloading : 44.9M/46.1M [00:01<00:00,    24.4MB/s]    100%|#########9| Downloading : 45.9M/46.1M [00:01<00:00,    23.9MB/s]    100%|##########| Downloading : 46.1M/46.1M [00:01<00:00,    25.9MB/s]
    Verifying hash adabd3b01fc7bb75c523a974f38ee3ae4e57b40f.
    Downloading https://physionet.org/physiobank/database/sleep-edfx/sleep-cassette//SC4001EC-Hypnogram.edf (5 kB)
      0%|          | Downloading : 0.00/4.51k [00:00<?,        ?B/s]    100%|##########| Downloading : 4.51k/4.51k [00:00<00:00,    8.63MB/s]
    Verifying hash 21c998eadc8b1e3ea6727d3585186b8f76e7e70b.
    Downloading https://physionet.org/physiobank/database/sleep-edfx/sleep-cassette//SC4011E0-PSG.edf (48.7 MB)
      0%|          | Downloading : 0.00/48.7M [00:00<?,        ?B/s]      0%|          | Downloading : 88.0k/48.7M [00:00<00:13,    3.81MB/s]      1%|          | Downloading : 376k/48.7M [00:00<00:06,    7.97MB/s]       2%|1         | Downloading : 760k/48.7M [00:00<00:04,    10.9MB/s]      3%|2         | Downloading : 1.24M/48.7M [00:00<00:03,    13.9MB/s]      4%|4         | Downloading : 1.99M/48.7M [00:00<00:02,    17.1MB/s]      5%|5         | Downloading : 2.49M/48.7M [00:00<00:02,    18.0MB/s]      7%|7         | Downloading : 3.49M/48.7M [00:00<00:02,    20.4MB/s]      8%|8         | Downloading : 3.99M/48.7M [00:00<00:02,    19.8MB/s]     11%|#1        | Downloading : 5.49M/48.7M [00:00<00:02,    22.4MB/s]     13%|#3        | Downloading : 6.49M/48.7M [00:00<00:01,    22.7MB/s]     15%|#5        | Downloading : 7.49M/48.7M [00:00<00:01,    22.9MB/s]     17%|#7        | Downloading : 8.49M/48.7M [00:00<00:01,    22.8MB/s]     19%|#9        | Downloading : 9.49M/48.7M [00:00<00:01,    23.0MB/s]     22%|##1       | Downloading : 10.5M/48.7M [00:00<00:01,    23.2MB/s]     24%|##3       | Downloading : 11.5M/48.7M [00:00<00:01,    23.2MB/s]     26%|##5       | Downloading : 12.5M/48.7M [00:00<00:01,    23.5MB/s]     28%|##7       | Downloading : 13.5M/48.7M [00:00<00:01,    23.4MB/s]     30%|##9       | Downloading : 14.5M/48.7M [00:00<00:01,    23.6MB/s]     32%|###1      | Downloading : 15.5M/48.7M [00:00<00:01,    23.9MB/s]     34%|###3      | Downloading : 16.5M/48.7M [00:00<00:01,    24.0MB/s]     36%|###5      | Downloading : 17.5M/48.7M [00:00<00:01,    24.1MB/s]     38%|###7      | Downloading : 18.5M/48.7M [00:00<00:01,    24.3MB/s]     40%|###9      | Downloading : 19.5M/48.7M [00:00<00:01,    24.5MB/s]     42%|####2     | Downloading : 20.5M/48.7M [00:00<00:01,    24.7MB/s]     44%|####4     | Downloading : 21.5M/48.7M [00:00<00:01,    24.8MB/s]     46%|####6     | Downloading : 22.5M/48.7M [00:00<00:01,    24.8MB/s]     48%|####8     | Downloading : 23.5M/48.7M [00:01<00:01,    25.0MB/s]     50%|#####     | Downloading : 24.5M/48.7M [00:01<00:01,    25.1MB/s]     52%|#####2    | Downloading : 25.5M/48.7M [00:01<00:00,    25.1MB/s]     54%|#####4    | Downloading : 26.5M/48.7M [00:01<00:00,    25.2MB/s]     56%|#####6    | Downloading : 27.5M/48.7M [00:01<00:00,    25.3MB/s]     58%|#####8    | Downloading : 28.5M/48.7M [00:01<00:00,    25.4MB/s]     61%|######    | Downloading : 29.5M/48.7M [00:01<00:00,    25.5MB/s]     63%|######2   | Downloading : 30.5M/48.7M [00:01<00:00,    25.7MB/s]     65%|######4   | Downloading : 31.5M/48.7M [00:01<00:00,    25.8MB/s]     67%|######6   | Downloading : 32.5M/48.7M [00:01<00:00,    26.0MB/s]     69%|######8   | Downloading : 33.5M/48.7M [00:01<00:00,    26.1MB/s]     71%|#######   | Downloading : 34.5M/48.7M [00:01<00:00,    26.2MB/s]     73%|#######2  | Downloading : 35.5M/48.7M [00:01<00:00,    26.3MB/s]     75%|#######4  | Downloading : 36.5M/48.7M [00:01<00:00,    26.5MB/s]     77%|#######6  | Downloading : 37.5M/48.7M [00:01<00:00,    26.6MB/s]     79%|#######8  | Downloading : 38.5M/48.7M [00:01<00:00,    26.7MB/s]     81%|########1 | Downloading : 39.5M/48.7M [00:01<00:00,    27.0MB/s]     83%|########3 | Downloading : 40.5M/48.7M [00:01<00:00,    27.1MB/s]     85%|########5 | Downloading : 41.5M/48.7M [00:01<00:00,    27.2MB/s]     87%|########7 | Downloading : 42.5M/48.7M [00:01<00:00,    27.1MB/s]     89%|########9 | Downloading : 43.5M/48.7M [00:01<00:00,    26.7MB/s]     91%|#########1| Downloading : 44.5M/48.7M [00:01<00:00,    26.2MB/s]     93%|#########3| Downloading : 45.5M/48.7M [00:01<00:00,    25.9MB/s]     95%|#########5| Downloading : 46.5M/48.7M [00:01<00:00,    25.6MB/s]     97%|#########7| Downloading : 47.5M/48.7M [00:01<00:00,    25.4MB/s]     99%|#########9| Downloading : 48.5M/48.7M [00:02<00:00,    25.1MB/s]    100%|##########| Downloading : 48.7M/48.7M [00:02<00:00,    25.0MB/s]
    Verifying hash 4d17451f7847355bcab17584de05e7e1df58c660.
    Downloading https://physionet.org/physiobank/database/sleep-edfx/sleep-cassette//SC4011EH-Hypnogram.edf (4 kB)
      0%|          | Downloading : 0.00/3.80k [00:00<?,        ?B/s]    100%|##########| Downloading : 3.80k/3.80k [00:00<00:00,    6.81MB/s]
    Verifying hash d582a3cbe2db481a362af890bc5a2f5ca7c878dc.
    Extracting EDF parameters from /home/circleci/mne_data/physionet-sleep-data/SC4001E0-PSG.edf...
    EDF file detected
    Setting channel info structure...
    Creating raw.info structure...
    Extracting EDF parameters from /home/circleci/mne_data/physionet-sleep-data/SC4011E0-PSG.edf...
    EDF file detected
    Setting channel info structure...
    Creating raw.info structure...




.. GENERATED FROM PYTHON SOURCE LINES 65-68

Preprocessing
~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 71-75

Next, we preprocess the raw data. We apply convert the data to microvolts and
apply a lowpass filter. We omit the downsampling step of [1]_ as the Sleep
Physionet data is already sampled at a lower 100 Hz.


.. GENERATED FROM PYTHON SOURCE LINES 75-92

.. code-block:: default


    from braindecode.datautil.preprocess import (
        MNEPreproc, NumpyPreproc, preprocess)

    high_cut_hz = 30

    preprocessors = [
        # convert from volt to microvolt, directly modifying the numpy array
        NumpyPreproc(fn=lambda x: x * 1e6),
        # bandpass filter
        MNEPreproc(fn='filter', l_freq=None, h_freq=high_cut_hz),
    ]

    # Transform the data
    preprocess(dataset, preprocessors)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Reading 0 ... 2508000  =      0.000 ... 25080.000 secs...
    Filtering raw data in 1 contiguous segment
    Setting up low-pass filter at 30 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal lowpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Upper passband edge: 30.00 Hz
    - Upper transition bandwidth: 7.50 Hz (-6 dB cutoff frequency: 33.75 Hz)
    - Filter length: 45 samples (0.450 sec)

    Reading 0 ... 3261000  =      0.000 ... 32610.000 secs...
    Filtering raw data in 1 contiguous segment
    Setting up low-pass filter at 30 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal lowpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Upper passband edge: 30.00 Hz
    - Upper transition bandwidth: 7.50 Hz (-6 dB cutoff frequency: 33.75 Hz)
    - Filter length: 45 samples (0.450 sec)





.. GENERATED FROM PYTHON SOURCE LINES 93-96

Extract windows
~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 99-100

We extract 30-s windows to be used in the classification task.

.. GENERATED FROM PYTHON SOURCE LINES 100-123

.. code-block:: default


    from braindecode.datautil.windowers import create_windows_from_events


    mapping = {  # We merge stages 3 and 4 following AASM standards.
        'Sleep stage W': 0,
        'Sleep stage 1': 1,
        'Sleep stage 2': 2,
        'Sleep stage 3': 3,
        'Sleep stage 4': 3,
        'Sleep stage R': 4
    }

    window_size_s = 30
    sfreq = 100
    window_size_samples = window_size_s * sfreq

    windows_dataset = create_windows_from_events(
        dataset, trial_start_offset_samples=0, trial_stop_offset_samples=0,
        window_size_samples=window_size_samples,
        window_stride_samples=window_size_samples, preload=True, mapping=mapping)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Used Annotations descriptions: ['Sleep stage 1', 'Sleep stage 2', 'Sleep stage 3', 'Sleep stage 4', 'Sleep stage R', 'Sleep stage W']
    Adding metadata with 4 columns
    Replacing existing metadata with 4 columns
    837 matching events found
    No baseline correction applied
    0 projection items activated
    Loading data for 837 events and 3000 original time points ...
    0 bad epochs dropped
    Used Annotations descriptions: ['Sleep stage 1', 'Sleep stage 2', 'Sleep stage 3', 'Sleep stage 4', 'Sleep stage R', 'Sleep stage W']
    Adding metadata with 4 columns
    Replacing existing metadata with 4 columns
    1088 matching events found
    No baseline correction applied
    0 projection items activated
    Loading data for 1088 events and 3000 original time points ...
    0 bad epochs dropped




.. GENERATED FROM PYTHON SOURCE LINES 124-127

Window preprocessing
~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 130-133

We also preprocess the windows by applying channel-wise z-score normalization
in each window.


.. GENERATED FROM PYTHON SOURCE LINES 133-139

.. code-block:: default


    from braindecode.datautil.preprocess import zscore

    preprocess(windows_dataset, [MNEPreproc(fn=zscore)])









.. GENERATED FROM PYTHON SOURCE LINES 140-143

Split dataset into train and valid
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 145-149

We can easily split the dataset using additional info stored in the
`description` attribute of :class:`braindecode.datasets.BaseDataset`,
in this case using the ``subject`` column. Here, we split the examples per subject.


.. GENERATED FROM PYTHON SOURCE LINES 149-159

.. code-block:: default


    splitted = windows_dataset.split('subject')
    train_set = splitted['0']
    valid_set = splitted['1']

    # Print number of examples per class
    print(train_set.datasets[0].windows)
    print(valid_set.datasets[0].windows)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <Epochs |  837 events (all good), 0 - 29.99 sec, baseline off, ~38.3 MB, data loaded, with metadata,
     'Sleep stage 1': 58
     'Sleep stage 2': 250
     'Sleep stage 3': 220
     'Sleep stage 4': 220
     'Sleep stage R': 125
     'Sleep stage W': 184>
    <Epochs |  1088 events (all good), 0 - 29.99 sec, baseline off, ~49.8 MB, data loaded, with metadata,
     'Sleep stage 1': 109
     'Sleep stage 2': 562
     'Sleep stage 3': 105
     'Sleep stage 4': 105
     'Sleep stage R': 170
     'Sleep stage W': 142>




.. GENERATED FROM PYTHON SOURCE LINES 160-163

Create model
------------


.. GENERATED FROM PYTHON SOURCE LINES 165-169

We can now create the deep learning model. In this tutorial, we use the sleep
staging architecture introduced in [1]_, which is a four-layer convolutional
neural network.


.. GENERATED FROM PYTHON SOURCE LINES 169-198

.. code-block:: default


    import torch
    from braindecode.util import set_random_seeds
    from braindecode.models import SleepStagerChambon2018

    cuda = torch.cuda.is_available()  # check if GPU is available
    device = 'cuda' if torch.cuda.is_available() else 'cpu'
    if cuda:
        torch.backends.cudnn.benchmark = True
    # Set random seed to be able to reproduce results
    set_random_seeds(seed=87, cuda=cuda)

    n_classes = 5
    # Extract number of channels and time steps from dataset
    n_channels = train_set[0][0].shape[0]
    input_size_samples = train_set[0][0].shape[1]

    model = SleepStagerChambon2018(
        n_channels,
        sfreq,
        n_classes=n_classes,
        input_size_s=input_size_samples / sfreq
    )

    # Send model to GPU
    if cuda:
        model.cuda()









.. GENERATED FROM PYTHON SOURCE LINES 199-202

Training
--------


.. GENERATED FROM PYTHON SOURCE LINES 205-211

We can now train our network. :class:`braindecode.EEGClassifier` is a
braindecode object that is responsible for managing the training of neural
networks. It inherits from :class:`skorch.NeuralNetClassifier`, so the
training logic is the same as in
`Skorch <https://skorch.readthedocs.io/en/stable/>`__.


.. GENERATED FROM PYTHON SOURCE LINES 214-220

**Note**: We use different hyperparameters from [1]_, as
these hyperparameters were optimized on a different dataset (MASS SS3) and
with a different number of recordings. Generally speaking, it is
recommended to perform hyperparameter optimization if reusing this code on
a different dataset or with more recordings.


.. GENERATED FROM PYTHON SOURCE LINES 220-253

.. code-block:: default


    from skorch.helper import predefined_split
    from skorch.callbacks import EpochScoring
    from braindecode import EEGClassifier

    lr = 5e-4
    batch_size = 16
    n_epochs = 5

    train_bal_acc = EpochScoring(
        scoring='balanced_accuracy', on_train=True, name='train_bal_acc',
        lower_is_better=False)
    valid_bal_acc = EpochScoring(
        scoring='balanced_accuracy', on_train=False, name='valid_bal_acc',
        lower_is_better=False)
    callbacks = [('train_bal_acc', train_bal_acc),
                 ('valid_bal_acc', valid_bal_acc)]

    clf = EEGClassifier(
        model,
        criterion=torch.nn.CrossEntropyLoss,
        optimizer=torch.optim.Adam,
        train_split=predefined_split(valid_set),  # using valid_set for validation
        optimizer__lr=lr,
        batch_size=batch_size,
        callbacks=callbacks,
        device=device
    )
    # Model training for a specified number of epochs. `y` is None as it is already
    # supplied in the dataset.
    clf.fit(train_set, y=None, epochs=n_epochs)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      epoch    train_bal_acc    train_loss    valid_bal_acc    valid_loss       dur
    -------  ---------------  ------------  ---------------  ------------  --------
          1           [36m0.2483[0m        [32m1.4752[0m           [35m0.3525[0m        [31m1.4364[0m  662.6564
          2           [36m0.4277[0m        [32m1.1294[0m           [35m0.4570[0m        [31m1.0498[0m  651.7033
          3           [36m0.5466[0m        [32m0.8522[0m           0.4150        [31m0.9985[0m  607.2698
          4           [36m0.5960[0m        [32m0.7219[0m           [35m0.5007[0m        [31m0.9172[0m  547.9986
          5           0.5904        [32m0.7080[0m           [35m0.5616[0m        1.0147  551.7980

    <class 'braindecode.classifier.EEGClassifier'>[initialized](
      module_=SleepStagerChambon2018(
        (spatial_conv): Conv2d(1, 2, kernel_size=(2, 1), stride=(1, 1))
        (feature_extractor): Sequential(
          (0): Conv2d(1, 8, kernel_size=(1, 50), stride=(1, 1), padding=(0, 25))
          (1): Identity()
          (2): ReLU()
          (3): MaxPool2d(kernel_size=(1, 12), stride=(1, 12), padding=0, dilation=1, ceil_mode=False)
          (4): Conv2d(8, 8, kernel_size=(1, 50), stride=(1, 1), padding=(0, 25))
          (5): Identity()
          (6): ReLU()
          (7): MaxPool2d(kernel_size=(1, 12), stride=(1, 12), padding=0, dilation=1, ceil_mode=False)
        )
        (fc): Sequential(
          (0): Dropout(p=0.25, inplace=False)
          (1): Linear(in_features=320, out_features=5, bias=True)
        )
      ),
    )



.. GENERATED FROM PYTHON SOURCE LINES 254-257

Plot results
------------


.. GENERATED FROM PYTHON SOURCE LINES 260-265

We use the history stored by Skorch during training to plot the performance of
the model throughout training. Specifically, we plot the loss and the balanced
misclassification rate (1 - balanced accuracy) for the training and validation
sets.


.. GENERATED FROM PYTHON SOURCE LINES 265-305

.. code-block:: default


    import matplotlib.pyplot as plt
    from matplotlib.lines import Line2D
    import pandas as pd

    # Extract loss and balanced accuracy values for plotting from history object
    df = pd.DataFrame(clf.history.to_list())
    df[['train_mis_clf', 'valid_mis_clf']] = 100 - df[
        ['train_bal_acc', 'valid_bal_acc']] * 100

    # get percent of misclass for better visual comparison to loss
    plt.style.use('seaborn-talk')
    fig, ax1 = plt.subplots(figsize=(8, 3))
    df.loc[:, ['train_loss', 'valid_loss']].plot(
        ax=ax1, style=['-', ':'], marker='o', color='tab:blue', legend=False,
        fontsize=14)

    ax1.tick_params(axis='y', labelcolor='tab:blue', labelsize=14)
    ax1.set_ylabel("Loss", color='tab:blue', fontsize=14)

    ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

    df.loc[:, ['train_mis_clf', 'valid_mis_clf']].plot(
        ax=ax2, style=['-', ':'], marker='o', color='tab:red', legend=False)
    ax2.tick_params(axis='y', labelcolor='tab:red', labelsize=14)
    ax2.set_ylabel('Balanced misclassification rate [%]', color='tab:red',
                   fontsize=14)
    ax2.set_ylim(ax2.get_ylim()[0], 85)  # make some room for legend
    ax1.set_xlabel('Epoch', fontsize=14)

    # where some data has already been plotted to ax
    handles = []
    handles.append(
        Line2D([0], [0], color='black', linewidth=1, linestyle='-', label='Train'))
    handles.append(
        Line2D([0], [0], color='black', linewidth=1, linestyle=':', label='Valid'))
    plt.legend(handles, [h.get_label() for h in handles], fontsize=14)
    plt.tight_layout()





.. image:: /auto_examples/images/sphx_glr_plot_sleep_staging_001.png
    :alt: plot sleep staging
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 306-308

Finally, we also display the confusion matrix and classification report:


.. GENERATED FROM PYTHON SOURCE LINES 308-320

.. code-block:: default


    from sklearn.metrics import confusion_matrix
    from sklearn.metrics import classification_report

    y_true = valid_set.datasets[0].windows.metadata['target'].values
    y_pred = clf.predict(valid_set)

    print(confusion_matrix(y_true, y_pred))

    print(classification_report(y_true, y_pred))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[132   0   7   1   2]
     [ 70   0  21   0  18]
     [ 69   0 405  13  75]
     [  0   0  18  87   0]
     [ 59   0  55   0  56]]
    /home/circleci/.local/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1245: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
      _warn_prf(average, modifier, msg_start, len(result))
    /home/circleci/.local/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1245: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
      _warn_prf(average, modifier, msg_start, len(result))
    /home/circleci/.local/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1245: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
      _warn_prf(average, modifier, msg_start, len(result))
                  precision    recall  f1-score   support

               0       0.40      0.93      0.56       142
               1       0.00      0.00      0.00       109
               2       0.80      0.72      0.76       562
               3       0.86      0.83      0.84       105
               4       0.37      0.33      0.35       170

        accuracy                           0.62      1088
       macro avg       0.49      0.56      0.50      1088
    weighted avg       0.61      0.62      0.60      1088





.. GENERATED FROM PYTHON SOURCE LINES 321-329

Our model was able to perform reasonably well given the low amount of data
available, reaching a balanced accuracy of around 55% in a 5-class
classification task (chance-level = 20%) on held-out data.

To further improve performance, more recordings can be included in the
training set, and various modifications can be made to the model (e.g.,
aggregating the representation of multiple consecutive windows [1]_).



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 52 minutes  52.201 seconds)

**Estimated memory usage:**  180 MB


.. _sphx_glr_download_auto_examples_plot_sleep_staging.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_sleep_staging.py <plot_sleep_staging.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_sleep_staging.ipynb <plot_sleep_staging.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
