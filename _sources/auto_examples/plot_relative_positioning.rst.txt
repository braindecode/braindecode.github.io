
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_relative_positioning.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_relative_positioning.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_relative_positioning.py:


Self-supervised learning on EEG with relative positioning
=========================================================

This example shows how to train a neural network with self-supervision on sleep
EEG data. We follow the relative positioning approach of [1]_ on the openly
accessible Sleep Physionet dataset [2]_ [3]_.

.. topic:: Self-supervised learning

    Self-supervised learning (SSL) is a learning paradigm that leverages
    unlabelled data to train neural networks. First, neural networks are
    trained on a "pretext task" which uses unlabelled data only. The pretext
    task is designed based on a prior understanding of the data under study
    (e.g., EEG has an underlying autocorrelation struture) and such that the
    processing required to perform well on this pretext task is related to the
    processing required to perform well on another task of interest.
    Once trained, these neural networks can be reused as feature extractors or
    weight initialization in a "downstream task", which is the task that we are
    actually interested in (e.g., sleep staging). The pretext task step can
    help reduce the quantity of labelled data needed to perform well on the
    downstream task and/or improve downstream performance as compared to a
    strictly supervised approach [1]_.

Here, we use relative positioning (RP) as our pretext task, and perform sleep
staging as our downstream task. RP is a simple SSL task, in which a neural
network is trained to predict whether two randomly sampled EEG windows are
close or far apart in time. This method was shown to yield physiologically- and
clinically-relevant features and to boost classification performance in
low-labels data regimes [1]_.

.. contents:: This example covers:
   :local:
   :depth: 2

.. GENERATED FROM PYTHON SOURCE LINES 37-46

.. code-block:: default


    # Authors: Hubert Banville <hubert.jbanville@gmail.com>
    #
    # License: BSD (3-clause)


    random_state = 87
    n_jobs = 1








.. GENERATED FROM PYTHON SOURCE LINES 47-50

Loading and preprocessing the dataset
-------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 52-55

Loading the raw recordings
~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 57-61

First, we load a few recordings from the Sleep Physionet dataset. Running
this example with more recordings should yield better representations and
downstream classification performance.


.. GENERATED FROM PYTHON SOURCE LINES 61-68

.. code-block:: default


    from braindecode.datasets.sleep_physionet import SleepPhysionet

    dataset = SleepPhysionet(
        subject_ids=[0, 1, 2], recording_ids=[1], crop_wake_mins=30)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using default location ~/mne_data for PHYSIONET_SLEEP...
    Downloading https://physionet.org/physiobank/database/sleep-edfx/sleep-cassette//SC4021E0-PSG.edf (48.8 MB)
      0%|          | Downloading : 0.00/48.8M [00:00<?,        ?B/s]      0%|          | Downloading : 88.0k/48.8M [00:00<00:12,    3.94MB/s]      1%|          | Downloading : 344k/48.8M [00:00<00:12,    4.05MB/s]       1%|          | Downloading : 472k/48.8M [00:00<00:12,    4.11MB/s]      1%|1         | Downloading : 600k/48.8M [00:00<00:12,    4.18MB/s]      2%|1         | Downloading : 856k/48.8M [00:00<00:11,    4.25MB/s]      2%|1         | Downloading : 984k/48.8M [00:00<00:11,    4.31MB/s]      2%|2         | Downloading : 1.21M/48.8M [00:00<00:11,    4.38MB/s]      3%|2         | Downloading : 1.46M/48.8M [00:00<00:11,    4.46MB/s]      3%|3         | Downloading : 1.59M/48.8M [00:00<00:10,    4.51MB/s]      4%|3         | Downloading : 1.84M/48.8M [00:00<00:10,    4.60MB/s]      4%|4         | Downloading : 1.96M/48.8M [00:00<00:10,    4.70MB/s]      4%|4         | Downloading : 2.09M/48.8M [00:00<00:10,    4.75MB/s]      5%|4         | Downloading : 2.34M/48.8M [00:00<00:10,    4.82MB/s]      5%|5         | Downloading : 2.59M/48.8M [00:00<00:09,    4.90MB/s]      6%|5         | Downloading : 2.71M/48.8M [00:00<00:09,    4.98MB/s]      6%|5         | Downloading : 2.84M/48.8M [00:00<00:09,    4.95MB/s]      6%|6         | Downloading : 2.96M/48.8M [00:00<00:09,    4.96MB/s]      6%|6         | Downloading : 3.09M/48.8M [00:00<00:09,    4.98MB/s]      7%|6         | Downloading : 3.21M/48.8M [00:00<00:09,    5.05MB/s]      7%|6         | Downloading : 3.34M/48.8M [00:00<00:09,    5.07MB/s]      7%|7         | Downloading : 3.46M/48.8M [00:00<00:09,    5.13MB/s]      7%|7         | Downloading : 3.59M/48.8M [00:00<00:09,    5.14MB/s]      8%|7         | Downloading : 3.71M/48.8M [00:00<00:09,    5.16MB/s]      8%|7         | Downloading : 3.84M/48.8M [00:00<00:09,    5.17MB/s]      8%|8         | Downloading : 3.96M/48.8M [00:00<00:08,    5.24MB/s]      8%|8         | Downloading : 4.09M/48.8M [00:00<00:08,    5.29MB/s]      9%|8         | Downloading : 4.21M/48.8M [00:00<00:08,    5.30MB/s]      9%|8         | Downloading : 4.34M/48.8M [00:00<00:08,    5.37MB/s]      9%|9         | Downloading : 4.46M/48.8M [00:00<00:08,    5.42MB/s]      9%|9         | Downloading : 4.59M/48.8M [00:00<00:08,    5.50MB/s]     10%|9         | Downloading : 4.71M/48.8M [00:00<00:08,    5.54MB/s]     10%|9         | Downloading : 4.84M/48.8M [00:00<00:08,    5.54MB/s]     10%|#         | Downloading : 4.96M/48.8M [00:00<00:08,    5.62MB/s]     10%|#         | Downloading : 5.09M/48.8M [00:00<00:08,    5.66MB/s]     11%|#         | Downloading : 5.21M/48.8M [00:00<00:07,    5.73MB/s]     11%|#         | Downloading : 5.34M/48.8M [00:00<00:07,    5.78MB/s]     11%|#1        | Downloading : 5.59M/48.8M [00:00<00:07,    5.87MB/s]     12%|#1        | Downloading : 5.71M/48.8M [00:00<00:07,    5.90MB/s]     12%|#1        | Downloading : 5.84M/48.8M [00:00<00:07,    5.98MB/s]     12%|#2        | Downloading : 5.96M/48.8M [00:00<00:07,    6.00MB/s]     13%|#2        | Downloading : 6.21M/48.8M [00:01<00:07,    6.04MB/s]     13%|#3        | Downloading : 6.46M/48.8M [00:01<00:07,    6.15MB/s]     14%|#3        | Downloading : 6.59M/48.8M [00:01<00:07,    6.14MB/s]     14%|#4        | Downloading : 6.84M/48.8M [00:01<00:07,    6.25MB/s]     14%|#4        | Downloading : 6.96M/48.8M [00:01<00:07,    6.23MB/s]     15%|#4        | Downloading : 7.09M/48.8M [00:01<00:07,    6.21MB/s]     15%|#4        | Downloading : 7.21M/48.8M [00:01<00:06,    6.26MB/s]     15%|#5        | Downloading : 7.34M/48.8M [00:01<00:06,    6.23MB/s]     15%|#5        | Downloading : 7.46M/48.8M [00:01<00:07,    6.19MB/s]     16%|#5        | Downloading : 7.59M/48.8M [00:01<00:07,    6.16MB/s]     16%|#5        | Downloading : 7.71M/48.8M [00:01<00:07,    6.13MB/s]     16%|#6        | Downloading : 7.84M/48.8M [00:01<00:06,    6.19MB/s]     16%|#6        | Downloading : 7.96M/48.8M [00:01<00:06,    6.17MB/s]     17%|#6        | Downloading : 8.21M/48.8M [00:01<00:06,    6.20MB/s]     17%|#7        | Downloading : 8.34M/48.8M [00:01<00:06,    6.19MB/s]     17%|#7        | Downloading : 8.46M/48.8M [00:01<00:06,    6.25MB/s]     18%|#7        | Downloading : 8.59M/48.8M [00:01<00:06,    6.11MB/s]     18%|#7        | Downloading : 8.71M/48.8M [00:01<00:06,    6.03MB/s]     18%|#8        | Downloading : 8.84M/48.8M [00:01<00:07,    5.97MB/s]     18%|#8        | Downloading : 8.96M/48.8M [00:01<00:07,    5.92MB/s]     19%|#8        | Downloading : 9.09M/48.8M [00:01<00:07,    5.87MB/s]     19%|#8        | Downloading : 9.21M/48.8M [00:01<00:07,    5.84MB/s]     19%|#9        | Downloading : 9.34M/48.8M [00:01<00:07,    5.81MB/s]     19%|#9        | Downloading : 9.46M/48.8M [00:01<00:07,    5.77MB/s]     20%|#9        | Downloading : 9.59M/48.8M [00:01<00:07,    5.76MB/s]     20%|#9        | Downloading : 9.71M/48.8M [00:01<00:07,    5.74MB/s]     20%|##        | Downloading : 9.84M/48.8M [00:01<00:07,    5.74MB/s]     20%|##        | Downloading : 9.96M/48.8M [00:01<00:07,    5.73MB/s]     21%|##        | Downloading : 10.1M/48.8M [00:01<00:07,    5.71MB/s]     21%|##        | Downloading : 10.2M/48.8M [00:01<00:06,    5.78MB/s]     21%|##1       | Downloading : 10.3M/48.8M [00:01<00:06,    5.78MB/s]     21%|##1       | Downloading : 10.5M/48.8M [00:01<00:06,    5.78MB/s]     22%|##1       | Downloading : 10.6M/48.8M [00:01<00:06,    5.86MB/s]     22%|##1       | Downloading : 10.7M/48.8M [00:01<00:06,    5.85MB/s]     22%|##2       | Downloading : 10.8M/48.8M [00:01<00:06,    5.86MB/s]     22%|##2       | Downloading : 11.0M/48.8M [00:01<00:06,    5.93MB/s]     23%|##2       | Downloading : 11.1M/48.8M [00:01<00:06,    5.94MB/s]     23%|##2       | Downloading : 11.2M/48.8M [00:01<00:06,    5.96MB/s]     23%|##3       | Downloading : 11.3M/48.8M [00:01<00:06,    6.00MB/s]     23%|##3       | Downloading : 11.5M/48.8M [00:01<00:06,    6.06MB/s]     24%|##3       | Downloading : 11.6M/48.8M [00:01<00:06,    6.09MB/s]     24%|##4       | Downloading : 11.7M/48.8M [00:01<00:06,    6.15MB/s]     24%|##4       | Downloading : 11.8M/48.8M [00:01<00:06,    6.20MB/s]     25%|##4       | Downloading : 12.0M/48.8M [00:01<00:06,    6.23MB/s]     25%|##4       | Downloading : 12.1M/48.8M [00:01<00:06,    6.28MB/s]     25%|##5       | Downloading : 12.2M/48.8M [00:02<00:06,    6.35MB/s]     25%|##5       | Downloading : 12.3M/48.8M [00:02<00:05,    6.38MB/s]     26%|##5       | Downloading : 12.6M/48.8M [00:02<00:05,    6.44MB/s]     26%|##6       | Downloading : 12.7M/48.8M [00:02<00:05,    6.48MB/s]     27%|##6       | Downloading : 13.0M/48.8M [00:02<00:05,    6.55MB/s]     27%|##6       | Downloading : 13.1M/48.8M [00:02<00:05,    6.59MB/s]     27%|##7       | Downloading : 13.3M/48.8M [00:02<00:05,    6.63MB/s]     28%|##7       | Downloading : 13.6M/48.8M [00:02<00:05,    6.73MB/s]     28%|##8       | Downloading : 13.7M/48.8M [00:02<00:05,    6.71MB/s]     29%|##8       | Downloading : 14.0M/48.8M [00:02<00:05,    6.81MB/s]     29%|##9       | Downloading : 14.2M/48.8M [00:02<00:05,    6.89MB/s]     29%|##9       | Downloading : 14.3M/48.8M [00:02<00:05,    6.90MB/s]     30%|##9       | Downloading : 14.6M/48.8M [00:02<00:05,    6.99MB/s]     30%|###       | Downloading : 14.8M/48.8M [00:02<00:05,    7.11MB/s]     31%|###       | Downloading : 15.0M/48.8M [00:02<00:04,    7.13MB/s]     31%|###1      | Downloading : 15.2M/48.8M [00:02<00:04,    7.19MB/s]     32%|###1      | Downloading : 15.5M/48.8M [00:02<00:04,    7.29MB/s]     32%|###2      | Downloading : 15.7M/48.8M [00:02<00:04,    7.40MB/s]     32%|###2      | Downloading : 15.8M/48.8M [00:02<00:04,    7.30MB/s]     33%|###2      | Downloading : 16.1M/48.8M [00:02<00:04,    7.34MB/s]     33%|###3      | Downloading : 16.2M/48.8M [00:02<00:04,    7.32MB/s]     33%|###3      | Downloading : 16.3M/48.8M [00:02<00:04,    7.29MB/s]     34%|###3      | Downloading : 16.5M/48.8M [00:02<00:04,    7.29MB/s]     34%|###4      | Downloading : 16.6M/48.8M [00:02<00:04,    7.27MB/s]     34%|###4      | Downloading : 16.7M/48.8M [00:02<00:04,    7.27MB/s]     35%|###4      | Downloading : 16.8M/48.8M [00:02<00:04,    7.23MB/s]     35%|###4      | Downloading : 17.0M/48.8M [00:02<00:04,    7.26MB/s]     35%|###5      | Downloading : 17.1M/48.8M [00:02<00:04,    7.22MB/s]     35%|###5      | Downloading : 17.2M/48.8M [00:02<00:04,    7.25MB/s]     36%|###5      | Downloading : 17.5M/48.8M [00:02<00:04,    7.25MB/s]     36%|###6      | Downloading : 17.7M/48.8M [00:02<00:04,    7.27MB/s]     37%|###6      | Downloading : 18.0M/48.8M [00:02<00:04,    7.33MB/s]     37%|###7      | Downloading : 18.1M/48.8M [00:02<00:04,    7.28MB/s]     38%|###7      | Downloading : 18.3M/48.8M [00:02<00:04,    7.36MB/s]     38%|###7      | Downloading : 18.5M/48.8M [00:02<00:04,    7.30MB/s]     38%|###8      | Downloading : 18.7M/48.8M [00:02<00:04,    7.38MB/s]     39%|###8      | Downloading : 19.0M/48.8M [00:02<00:04,    7.39MB/s]     39%|###9      | Downloading : 19.2M/48.8M [00:02<00:04,    7.47MB/s]     40%|###9      | Downloading : 19.5M/48.8M [00:02<00:04,    7.50MB/s]     40%|####      | Downloading : 19.7M/48.8M [00:02<00:04,    7.57MB/s]     41%|####      | Downloading : 20.0M/48.8M [00:03<00:03,    7.66MB/s]     41%|####1     | Downloading : 20.2M/48.8M [00:03<00:03,    7.75MB/s]     42%|####1     | Downloading : 20.3M/48.8M [00:03<00:03,    7.69MB/s]     42%|####2     | Downloading : 20.6M/48.8M [00:03<00:03,    7.76MB/s]     42%|####2     | Downloading : 20.7M/48.8M [00:03<00:03,    7.69MB/s]     43%|####3     | Downloading : 21.1M/48.8M [00:03<00:03,    7.69MB/s]     44%|####3     | Downloading : 21.3M/48.8M [00:03<00:03,    7.62MB/s]     44%|####4     | Downloading : 21.6M/48.8M [00:03<00:03,    7.48MB/s]     45%|####4     | Downloading : 21.8M/48.8M [00:03<00:03,    7.43MB/s]     45%|####5     | Downloading : 22.1M/48.8M [00:03<00:03,    7.22MB/s]     46%|####5     | Downloading : 22.3M/48.8M [00:03<00:03,    7.09MB/s]     46%|####6     | Downloading : 22.6M/48.8M [00:03<00:03,    6.98MB/s]     47%|####6     | Downloading : 22.8M/48.8M [00:03<00:03,    6.93MB/s]     47%|####7     | Downloading : 23.1M/48.8M [00:03<00:03,    6.87MB/s]     48%|####7     | Downloading : 23.3M/48.8M [00:03<00:03,    6.78MB/s]     48%|####8     | Downloading : 23.6M/48.8M [00:03<00:03,    6.78MB/s]     49%|####8     | Downloading : 23.8M/48.8M [00:03<00:03,    6.76MB/s]     49%|####9     | Downloading : 24.1M/48.8M [00:03<00:03,    6.76MB/s]     50%|####9     | Downloading : 24.3M/48.8M [00:03<00:03,    6.77MB/s]     50%|#####     | Downloading : 24.6M/48.8M [00:03<00:03,    6.78MB/s]     51%|#####     | Downloading : 24.8M/48.8M [00:03<00:03,    6.80MB/s]     51%|#####1    | Downloading : 25.1M/48.8M [00:03<00:03,    6.83MB/s]     52%|#####1    | Downloading : 25.3M/48.8M [00:03<00:03,    6.84MB/s]     52%|#####2    | Downloading : 25.6M/48.8M [00:03<00:03,    6.87MB/s]     53%|#####2    | Downloading : 25.8M/48.8M [00:03<00:03,    6.92MB/s]     53%|#####3    | Downloading : 26.1M/48.8M [00:03<00:03,    6.98MB/s]     54%|#####3    | Downloading : 26.3M/48.8M [00:04<00:03,    7.00MB/s]     55%|#####4    | Downloading : 26.6M/48.8M [00:04<00:03,    7.10MB/s]     55%|#####5    | Downloading : 26.8M/48.8M [00:04<00:03,    7.11MB/s]     56%|#####5    | Downloading : 27.1M/48.8M [00:04<00:03,    7.21MB/s]     56%|#####6    | Downloading : 27.3M/48.8M [00:04<00:03,    7.23MB/s]     57%|#####6    | Downloading : 27.6M/48.8M [00:04<00:03,    7.32MB/s]     57%|#####7    | Downloading : 27.8M/48.8M [00:04<00:02,    7.38MB/s]     58%|#####7    | Downloading : 28.1M/48.8M [00:04<00:02,    7.43MB/s]     58%|#####8    | Downloading : 28.3M/48.8M [00:04<00:02,    7.54MB/s]     59%|#####8    | Downloading : 28.6M/48.8M [00:04<00:02,    7.60MB/s]     59%|#####9    | Downloading : 28.8M/48.8M [00:04<00:02,    7.69MB/s]     60%|#####9    | Downloading : 29.1M/48.8M [00:04<00:02,    7.74MB/s]     60%|######    | Downloading : 29.3M/48.8M [00:04<00:02,    7.84MB/s]     61%|######    | Downloading : 29.6M/48.8M [00:04<00:02,    7.93MB/s]     61%|######1   | Downloading : 29.8M/48.8M [00:04<00:02,    8.02MB/s]     62%|######1   | Downloading : 30.1M/48.8M [00:04<00:02,    8.07MB/s]     62%|######2   | Downloading : 30.3M/48.8M [00:04<00:02,    8.16MB/s]     63%|######2   | Downloading : 30.6M/48.8M [00:04<00:02,    8.10MB/s]     63%|######3   | Downloading : 30.8M/48.8M [00:04<00:02,    8.04MB/s]     64%|######3   | Downloading : 31.1M/48.8M [00:04<00:02,    8.04MB/s]     64%|######4   | Downloading : 31.3M/48.8M [00:04<00:02,    7.99MB/s]     65%|######4   | Downloading : 31.6M/48.8M [00:04<00:02,    7.97MB/s]     65%|######5   | Downloading : 31.8M/48.8M [00:04<00:02,    7.94MB/s]     66%|######5   | Downloading : 32.1M/48.8M [00:04<00:02,    7.98MB/s]     66%|######6   | Downloading : 32.3M/48.8M [00:04<00:02,    7.95MB/s]     67%|######6   | Downloading : 32.6M/48.8M [00:04<00:02,    7.98MB/s]     67%|######7   | Downloading : 32.8M/48.8M [00:04<00:02,    7.93MB/s]     68%|######7   | Downloading : 33.1M/48.8M [00:04<00:02,    7.84MB/s]     68%|######8   | Downloading : 33.3M/48.8M [00:04<00:02,    7.69MB/s]     69%|######8   | Downloading : 33.6M/48.8M [00:04<00:02,    7.65MB/s]     69%|######9   | Downloading : 33.8M/48.8M [00:04<00:02,    7.54MB/s]     70%|######9   | Downloading : 34.1M/48.8M [00:05<00:02,    7.51MB/s]     70%|#######   | Downloading : 34.3M/48.8M [00:05<00:02,    7.48MB/s]     71%|#######   | Downloading : 34.6M/48.8M [00:05<00:01,    7.46MB/s]     71%|#######1  | Downloading : 34.8M/48.8M [00:05<00:01,    7.43MB/s]     72%|#######1  | Downloading : 35.1M/48.8M [00:05<00:01,    7.43MB/s]     72%|#######2  | Downloading : 35.3M/48.8M [00:05<00:01,    7.42MB/s]     73%|#######2  | Downloading : 35.6M/48.8M [00:05<00:01,    7.47MB/s]     73%|#######3  | Downloading : 35.8M/48.8M [00:05<00:01,    7.47MB/s]     74%|#######3  | Downloading : 36.1M/48.8M [00:05<00:01,    7.49MB/s]     74%|#######4  | Downloading : 36.3M/48.8M [00:05<00:01,    7.40MB/s]     75%|#######5  | Downloading : 36.6M/48.8M [00:05<00:01,    7.42MB/s]     76%|#######5  | Downloading : 36.8M/48.8M [00:05<00:01,    7.31MB/s]     76%|#######6  | Downloading : 37.1M/48.8M [00:05<00:01,    7.24MB/s]     77%|#######6  | Downloading : 37.3M/48.8M [00:05<00:01,    7.17MB/s]     77%|#######7  | Downloading : 37.6M/48.8M [00:05<00:01,    7.13MB/s]     78%|#######7  | Downloading : 37.8M/48.8M [00:05<00:01,    7.03MB/s]     78%|#######8  | Downloading : 38.1M/48.8M [00:05<00:01,    6.87MB/s]     79%|#######8  | Downloading : 38.3M/48.8M [00:05<00:01,    6.73MB/s]     79%|#######9  | Downloading : 38.6M/48.8M [00:05<00:01,    6.63MB/s]     80%|#######9  | Downloading : 38.8M/48.8M [00:05<00:01,    6.55MB/s]     80%|########  | Downloading : 39.1M/48.8M [00:05<00:01,    6.50MB/s]     81%|########  | Downloading : 39.3M/48.8M [00:05<00:01,    6.46MB/s]     81%|########1 | Downloading : 39.6M/48.8M [00:05<00:01,    6.26MB/s]     82%|########1 | Downloading : 39.8M/48.8M [00:06<00:01,    6.14MB/s]     82%|########2 | Downloading : 40.1M/48.8M [00:06<00:01,    6.05MB/s]     83%|########2 | Downloading : 40.3M/48.8M [00:06<00:01,    5.97MB/s]     83%|########3 | Downloading : 40.6M/48.8M [00:06<00:01,    5.93MB/s]     84%|########3 | Downloading : 40.8M/48.8M [00:06<00:01,    5.93MB/s]     84%|########4 | Downloading : 41.1M/48.8M [00:06<00:01,    5.90MB/s]     85%|########4 | Downloading : 41.3M/48.8M [00:06<00:01,    5.88MB/s]     85%|########5 | Downloading : 41.6M/48.8M [00:06<00:01,    5.91MB/s]     86%|########5 | Downloading : 41.8M/48.8M [00:06<00:01,    5.92MB/s]     86%|########6 | Downloading : 42.1M/48.8M [00:06<00:01,    5.94MB/s]     87%|########6 | Downloading : 42.3M/48.8M [00:06<00:01,    5.97MB/s]     87%|########7 | Downloading : 42.6M/48.8M [00:06<00:01,    6.02MB/s]     88%|########7 | Downloading : 42.8M/48.8M [00:06<00:01,    6.06MB/s]     88%|########8 | Downloading : 43.1M/48.8M [00:06<00:00,    6.02MB/s]     89%|########8 | Downloading : 43.3M/48.8M [00:06<00:00,    6.06MB/s]     89%|########9 | Downloading : 43.6M/48.8M [00:06<00:00,    6.01MB/s]     90%|########9 | Downloading : 43.8M/48.8M [00:06<00:00,    5.98MB/s]     90%|######### | Downloading : 44.1M/48.8M [00:06<00:00,    6.01MB/s]     91%|######### | Downloading : 44.3M/48.8M [00:06<00:00,    5.97MB/s]     91%|#########1| Downloading : 44.6M/48.8M [00:06<00:00,    6.01MB/s]     92%|#########1| Downloading : 44.8M/48.8M [00:06<00:00,    5.98MB/s]     92%|#########2| Downloading : 45.1M/48.8M [00:06<00:00,    6.02MB/s]     93%|#########2| Downloading : 45.3M/48.8M [00:07<00:00,    5.98MB/s]     93%|#########3| Downloading : 45.6M/48.8M [00:07<00:00,    5.94MB/s]     94%|#########3| Downloading : 45.8M/48.8M [00:07<00:00,    5.91MB/s]     94%|#########4| Downloading : 46.1M/48.8M [00:07<00:00,    5.87MB/s]     95%|#########4| Downloading : 46.3M/48.8M [00:07<00:00,    5.84MB/s]     96%|#########5| Downloading : 46.6M/48.8M [00:07<00:00,    5.82MB/s]     96%|#########6| Downloading : 46.8M/48.8M [00:07<00:00,    5.85MB/s]     97%|#########6| Downloading : 47.1M/48.8M [00:07<00:00,    5.82MB/s]     97%|#########7| Downloading : 47.3M/48.8M [00:07<00:00,    5.71MB/s]     98%|#########7| Downloading : 47.6M/48.8M [00:07<00:00,    5.63MB/s]     98%|#########8| Downloading : 47.8M/48.8M [00:07<00:00,    5.48MB/s]     99%|#########8| Downloading : 48.1M/48.8M [00:07<00:00,    5.33MB/s]     99%|#########9| Downloading : 48.3M/48.8M [00:07<00:00,    5.22MB/s]    100%|#########9| Downloading : 48.6M/48.8M [00:07<00:00,    5.14MB/s]    100%|##########| Downloading : 48.8M/48.8M [00:07<00:00,    5.07MB/s]    100%|##########| Downloading : 48.8M/48.8M [00:07<00:00,    6.56MB/s]
    Verifying hash 8b135afa7fb93bb5f1998fda50355944777c245e.
    Downloading https://physionet.org/physiobank/database/sleep-edfx/sleep-cassette//SC4021EH-Hypnogram.edf (5 kB)
      0%|          | Downloading : 0.00/4.69k [00:00<?,        ?B/s]    100%|##########| Downloading : 4.69k/4.69k [00:00<00:00,    11.4MB/s]
    Verifying hash 91043cfe46695088b17b6a02937b25efd674c3fb.
    Extracting EDF parameters from /home/circleci/mne_data/physionet-sleep-data/SC4001E0-PSG.edf...
    EDF file detected
    Setting channel info structure...
    Creating raw.info structure...
    Extracting EDF parameters from /home/circleci/mne_data/physionet-sleep-data/SC4011E0-PSG.edf...
    EDF file detected
    Setting channel info structure...
    Creating raw.info structure...
    Extracting EDF parameters from /home/circleci/mne_data/physionet-sleep-data/SC4021E0-PSG.edf...
    EDF file detected
    Setting channel info structure...
    Creating raw.info structure...




.. GENERATED FROM PYTHON SOURCE LINES 69-72

Preprocessing
~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 75-79

Next, we preprocess the raw data. We convert the data to microvolts and apply
a lowpass filter. Since the Sleep Physionet data is already sampled at 100 Hz
we don't need to apply resampling.


.. GENERATED FROM PYTHON SOURCE LINES 79-96

.. code-block:: default


    from braindecode.datautil.preprocess import (
        MNEPreproc, NumpyPreproc, preprocess)

    high_cut_hz = 30

    preprocessors = [
        # convert from volt to microvolt, directly modifying the numpy array
        NumpyPreproc(fn=lambda x: x * 1e6),
        # bandpass filter
        MNEPreproc(fn='filter', l_freq=None, h_freq=high_cut_hz, n_jobs=n_jobs),
    ]

    # Transform the data
    preprocess(dataset, preprocessors)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Reading 0 ... 2508000  =      0.000 ... 25080.000 secs...
    Filtering raw data in 1 contiguous segment
    Setting up low-pass filter at 30 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal lowpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Upper passband edge: 30.00 Hz
    - Upper transition bandwidth: 7.50 Hz (-6 dB cutoff frequency: 33.75 Hz)
    - Filter length: 45 samples (0.450 sec)

    Reading 0 ... 3261000  =      0.000 ... 32610.000 secs...
    Filtering raw data in 1 contiguous segment
    Setting up low-pass filter at 30 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal lowpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Upper passband edge: 30.00 Hz
    - Upper transition bandwidth: 7.50 Hz (-6 dB cutoff frequency: 33.75 Hz)
    - Filter length: 45 samples (0.450 sec)

    Reading 0 ... 3060000  =      0.000 ... 30600.000 secs...
    Filtering raw data in 1 contiguous segment
    Setting up low-pass filter at 30 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal lowpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Upper passband edge: 30.00 Hz
    - Upper transition bandwidth: 7.50 Hz (-6 dB cutoff frequency: 33.75 Hz)
    - Filter length: 45 samples (0.450 sec)





.. GENERATED FROM PYTHON SOURCE LINES 97-100

Extracting windows
~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 103-110

We extract 30-s windows to be used in both the pretext and downstream tasks.
As RP (and SSL in general) don't require labelled data, the pretext task
could be performed using unlabelled windows extracted with
:func:`braindecode.datautil.windower.create_fixed_length_window`.
Here however, purely for convenience, we directly extract labelled windows so
that we can reuse them in the sleep staging downstream task later.


.. GENERATED FROM PYTHON SOURCE LINES 110-132

.. code-block:: default


    from braindecode.datautil.windowers import create_windows_from_events

    window_size_s = 30
    sfreq = 100
    window_size_samples = window_size_s * sfreq

    mapping = {  # We merge stages 3 and 4 following AASM standards.
        'Sleep stage W': 0,
        'Sleep stage 1': 1,
        'Sleep stage 2': 2,
        'Sleep stage 3': 3,
        'Sleep stage 4': 3,
        'Sleep stage R': 4
    }

    windows_dataset = create_windows_from_events(
        dataset, trial_start_offset_samples=0, trial_stop_offset_samples=0,
        window_size_samples=window_size_samples,
        window_stride_samples=window_size_samples, preload=True, mapping=mapping)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Used Annotations descriptions: ['Sleep stage 1', 'Sleep stage 2', 'Sleep stage 3', 'Sleep stage 4', 'Sleep stage R', 'Sleep stage W']
    Adding metadata with 4 columns
    Replacing existing metadata with 4 columns
    837 matching events found
    No baseline correction applied
    0 projection items activated
    Loading data for 837 events and 3000 original time points ...
    0 bad epochs dropped
    Used Annotations descriptions: ['Sleep stage 1', 'Sleep stage 2', 'Sleep stage 3', 'Sleep stage 4', 'Sleep stage R', 'Sleep stage W']
    Adding metadata with 4 columns
    Replacing existing metadata with 4 columns
    1088 matching events found
    No baseline correction applied
    0 projection items activated
    Loading data for 1088 events and 3000 original time points ...
    0 bad epochs dropped
    Used Annotations descriptions: ['Sleep stage 1', 'Sleep stage 2', 'Sleep stage 3', 'Sleep stage 4', 'Sleep stage R', 'Sleep stage W']
    Adding metadata with 4 columns
    Replacing existing metadata with 4 columns
    1021 matching events found
    No baseline correction applied
    0 projection items activated
    Loading data for 1021 events and 3000 original time points ...
    0 bad epochs dropped




.. GENERATED FROM PYTHON SOURCE LINES 133-136

Preprocessing windows
~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 139-141

We also preprocess the windows by applying channel-wise z-score normalization.


.. GENERATED FROM PYTHON SOURCE LINES 141-147

.. code-block:: default


    from braindecode.datautil.preprocess import zscore

    preprocess(windows_dataset, [MNEPreproc(fn=zscore)])









.. GENERATED FROM PYTHON SOURCE LINES 148-151

Splitting dataset into train, valid and test sets
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 153-158

We randomly split the recordings by subject into train, validation and
testing sets. We further define a new Dataset class which can receive a pair
of indices and return the corresponding windows. This will be needed when
training and evaluating on the pretext task.


.. GENERATED FROM PYTHON SOURCE LINES 158-202

.. code-block:: default


    import numpy as np
    from sklearn.model_selection import train_test_split
    from braindecode.datasets import BaseConcatDataset

    subjects = np.unique(windows_dataset.description['subject'])
    subj_train, subj_test = train_test_split(
        subjects, test_size=0.4, random_state=random_state)
    subj_valid, subj_test = train_test_split(
        subj_test, test_size=0.5, random_state=random_state)


    class RelativePositioningDataset(BaseConcatDataset):
        """BaseConcatDataset with __getitem__ that expects 2 indices and a target.
        """
        def __init__(self, list_of_ds):
            super().__init__(list_of_ds)
            self.return_pair = True

        def __getitem__(self, index):
            if self.return_pair:
                ind1, ind2, y = index
                return (super().__getitem__(ind1)[0],
                        super().__getitem__(ind2)[0]), y
            else:
                return super().__getitem__(index)

        @property
        def return_pair(self):
            return self._return_pair

        @return_pair.setter
        def return_pair(self, value):
            self._return_pair = value


    split_ids = {'train': subj_train, 'valid': subj_valid, 'test': subj_test}
    splitted = dict()
    for name, values in split_ids.items():
        splitted[name] = RelativePositioningDataset(
            [ds for ds in windows_dataset.datasets
             if ds.description['subject'] in values])









.. GENERATED FROM PYTHON SOURCE LINES 203-206

Creating samplers
~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 208-224

Next, we need to create samplers. These samplers will be used to randomly
sample pairs of examples to train and validate our model with
self-supervision.

The RP samplers have two main hyperparameters. `tau_pos` and `tau_neg`
control the size of the "positive" and "negative" contexts, respectively.
Pairs of windows that are separated by less than `tau_pos` samples will be
given a label of `1`, while pairs of windows that are separated by more than
`tau_neg` samples will be given a label of `0`. Here, we use the same values
as in [1]_, i.e., `tau_pos`= 1 min and `tau_neg`= 15 mins.

The samplers also control the number of pairs to be sampled (defined with
`n_examples`). This number can be large to help regularize the pretext task
training, for instance 2,000 pairs per recording as in [1]_. Here, we use a
lower number of 250 pairs per recording to reduce training time.


.. GENERATED FROM PYTHON SOURCE LINES 224-245

.. code-block:: default


    from braindecode.samplers.ssl import RelativePositioningSampler

    tau_pos, tau_neg = int(sfreq * 60), int(sfreq * 15 * 60)
    n_examples_train = 250 * len(splitted['train'].datasets)
    n_examples_valid = 250 * len(splitted['valid'].datasets)
    n_examples_test = 250 * len(splitted['test'].datasets)

    train_sampler = RelativePositioningSampler(
        splitted['train'].get_metadata(), tau_pos=tau_pos, tau_neg=tau_neg,
        n_examples=n_examples_train, same_rec_neg=True, random_state=random_state)
    valid_sampler = RelativePositioningSampler(
        splitted['valid'].get_metadata(), tau_pos=tau_pos, tau_neg=tau_neg,
        n_examples=n_examples_valid, same_rec_neg=True,
        random_state=random_state).presample()
    test_sampler = RelativePositioningSampler(
        splitted['test'].get_metadata(), tau_pos=tau_pos, tau_neg=tau_neg,
        n_examples=n_examples_test, same_rec_neg=True,
        random_state=random_state).presample()









.. GENERATED FROM PYTHON SOURCE LINES 246-249

Creating the model
------------------


.. GENERATED FROM PYTHON SOURCE LINES 251-262

We can now create the deep learning model. In this tutorial, we use a
modified version of the sleep staging architecture introduced in [4]_ -
a four-layer convolutional neural network - as our embedder.
We change the dimensionality of the last layer to obtain a 100-dimension
embedding, use 16 convolutional channels instead of 8, and add batch
normalization after both temporal convolution layers.

We further wrap the model into a siamese architecture using the
# :class:`ContrastiveNet` class defined below. This allows us to train the
feature extractor end-to-end.


.. GENERATED FROM PYTHON SOURCE LINES 262-318

.. code-block:: default


    import torch
    from torch import nn
    from braindecode.util import set_random_seeds
    from braindecode.models import SleepStagerChambon2018

    device = 'cuda' if torch.cuda.is_available() else 'cpu'
    if device == 'cuda':
        torch.backends.cudnn.benchmark = True
    # Set random seed to be able to reproduce results
    set_random_seeds(seed=random_state, cuda=device == 'cuda')

    # Extract number of channels and time steps from dataset
    n_channels, input_size_samples = windows_dataset[0][0].shape
    emb_size = 100

    emb = SleepStagerChambon2018(
        n_channels,
        sfreq,
        n_classes=emb_size,
        n_conv_chs=16,
        input_size_s=input_size_samples / sfreq,
        dropout=0,
        apply_batch_norm=True
    )


    class ContrastiveNet(nn.Module):
        """Contrastive module with linear layer on top of siamese embedder.

        Parameters
        ----------
        emb : nn.Module
            Embedder architecture.
        emb_size : int
            Output size of the embedder.
        dropout : float
            Dropout rate applied to the linear layer of the contrastive module.
        """
        def __init__(self, emb, emb_size, dropout=0.5):
            super().__init__()
            self.emb = emb
            self.clf = nn.Sequential(
                nn.Dropout(dropout),
                nn.Linear(emb_size, 1)
            )

        def forward(self, x):
            x1, x2 = x
            z1, z2 = self.emb(x1), self.emb(x2)
            return self.clf(torch.abs(z1 - z2)).flatten()


    model = ContrastiveNet(emb, emb_size).to(device)









.. GENERATED FROM PYTHON SOURCE LINES 319-322

Training
--------


.. GENERATED FROM PYTHON SOURCE LINES 325-329

We can now train our network on the pretext task. We use similar
hyperparameters as in [1]_, but reduce the number of epochs and increase the
learning rate to account for the smaller setting of this example.


.. GENERATED FROM PYTHON SOURCE LINES 329-378

.. code-block:: default

    import os

    from skorch.helper import predefined_split
    from skorch.callbacks import Checkpoint, EarlyStopping, EpochScoring
    from braindecode import EEGClassifier

    lr = 5e-3
    batch_size = 256
    n_epochs = 50
    num_workers = 0 if n_jobs <= 1 else n_jobs

    cp = Checkpoint(dirname='', f_criterion=None, f_optimizer=None, f_history=None)
    early_stopping = EarlyStopping(patience=10)
    train_acc = EpochScoring(
        scoring='accuracy', on_train=True, name='train_acc', lower_is_better=False)
    valid_acc = EpochScoring(
        scoring='accuracy', on_train=False, name='valid_acc',
        lower_is_better=False)
    callbacks = [
        ('cp', cp),
        ('patience', early_stopping),
        ('train_acc', train_acc),
        ('valid_acc', valid_acc)
    ]

    clf = EEGClassifier(
        model,
        criterion=torch.nn.BCEWithLogitsLoss,
        optimizer=torch.optim.Adam,
        max_epochs=n_epochs,
        iterator_train__shuffle=False,
        iterator_train__sampler=train_sampler,
        iterator_valid__sampler=valid_sampler,
        iterator_train__num_workers=num_workers,
        iterator_valid__num_workers=num_workers,
        train_split=predefined_split(splitted['valid']),
        optimizer__lr=lr,
        batch_size=batch_size,
        callbacks=callbacks,
        device=device
    )
    # Model training for a specified number of epochs. `y` is None as it is already
    # supplied in the dataset.
    clf.fit(splitted['train'], y=None)
    clf.load_params(checkpoint=cp)  # Load the model with the lowest valid_loss

    os.remove('./params.pt')  # Delete parameters file






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      epoch    train_acc    train_loss    valid_acc    valid_loss    cp     dur
    -------  -----------  ------------  -----------  ------------  ----  ------
          1       [36m0.5040[0m        [32m0.7028[0m       [35m0.5920[0m        [31m0.6776[0m     +  3.0962
          2       [36m0.6000[0m        [32m0.6707[0m       [35m0.6480[0m        [31m0.6208[0m     +  2.1900
          3       0.5560        0.8949       0.5240        0.7298        2.2942
          4       0.5960        0.8165       [35m0.6880[0m        0.6452        1.9781
          5       [36m0.6120[0m        0.6770       [35m0.7200[0m        [31m0.5918[0m     +  1.6913
          6       0.5800        [32m0.6600[0m       0.7120        [31m0.5841[0m     +  1.8074
          7       0.6120        0.6637       0.6920        [31m0.5814[0m     +  1.8736
          8       [36m0.6280[0m        [32m0.6298[0m       0.6920        [31m0.5760[0m     +  1.7345
          9       0.6120        0.6501       0.7000        0.5776        1.8904
         10       0.6240        0.6535       0.7000        0.5801        1.8380
         11       [36m0.6760[0m        [32m0.5778[0m       0.7040        [31m0.5660[0m     +  1.9770
         12       0.6000        0.6298       0.6880        [31m0.5518[0m     +  1.7656
         13       0.6760        [32m0.5706[0m       0.6840        [31m0.5455[0m     +  1.8168
         14       [36m0.7040[0m        0.5950       0.6880        [31m0.5393[0m     +  1.8998
         15       0.7040        [32m0.5508[0m       0.7000        [31m0.5354[0m     +  1.6441
         16       0.6960        0.5618       [35m0.7240[0m        0.5427        1.7448
         17       [36m0.7720[0m        [32m0.5458[0m       0.7080        0.5625        1.8002
         18       [36m0.8000[0m        [32m0.4816[0m       0.7120        0.5705        1.7978
         19       0.7640        0.5015       0.7120        0.5595        1.7159
         20       0.7360        0.5755       [35m0.7440[0m        0.5358        1.8172
         21       0.7840        0.5428       [35m0.7680[0m        [31m0.5079[0m     +  3.8129
         22       0.7800        0.4842       [35m0.7800[0m        [31m0.4891[0m     +  3.1740
         23       0.7560        0.5212       [35m0.8040[0m        [31m0.4777[0m     +  5.2943
         24       0.7520        0.5172       [35m0.8080[0m        [31m0.4740[0m     +  4.4597
         25       0.7280        0.5100       0.7920        [31m0.4701[0m     +  3.2544
         26       0.7480        0.4975       0.7840        [31m0.4655[0m     +  2.1321
         27       0.7280        0.5153       0.8040        [31m0.4624[0m     +  2.5529
         28       [36m0.8080[0m        [32m0.4716[0m       0.8080        [31m0.4609[0m     +  2.0812
         29       [36m0.8160[0m        [32m0.4282[0m       0.8080        0.4643        1.9911
         30       0.7320        0.5118       0.7960        0.4631        1.9057
         31       0.8120        0.4437       0.8040        [31m0.4576[0m     +  2.4593
         32       0.7760        0.4956       0.7840        [31m0.4573[0m     +  1.9490
         33       0.7720        0.4762       0.7800        0.4573        2.0258
         34       0.8080        0.4610       0.7880        0.4594        2.0957
         35       [36m0.8240[0m        [32m0.4225[0m       0.7960        [31m0.4549[0m     +  1.8010
         36       0.7800        0.4408       0.7920        [31m0.4527[0m     +  1.8192
         37       0.8120        0.4286       0.8040        0.4557        2.1909
         38       0.7720        0.4548       0.8040        0.4550        2.3537
         39       [36m0.8280[0m        [32m0.4191[0m       0.8000        0.4559        2.1897
         40       0.7920        0.4495       0.7960        0.4543        2.4504
         41       0.8120        0.4313       0.7920        [31m0.4507[0m     +  1.8842
         42       0.7920        0.4860       0.7960        [31m0.4490[0m     +  1.9184
         43       0.8080        0.4456       0.7920        [31m0.4443[0m     +  2.5605
         44       0.7880        0.5039       0.7920        0.4478        1.9148
         45       0.8080        0.4446       0.7920        [31m0.4425[0m     +  1.8172
         46       0.7920        0.4550       0.7960        0.4487        1.8678
         47       0.7640        0.4609       0.7840        0.4559        1.9836
         48       [36m0.8480[0m        [32m0.3924[0m       0.7800        0.4541        1.9752
         49       0.7800        0.4754       0.7880        0.4448        1.9420
         50       0.8240        0.4041       0.7920        [31m0.4337[0m     +  2.0713




.. GENERATED FROM PYTHON SOURCE LINES 379-382

Visualizing the results
-----------------------


.. GENERATED FROM PYTHON SOURCE LINES 384-387

Inspecting pretext task performance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 389-392

We plot the loss and pretext task performance for the training and validation
sets.


.. GENERATED FROM PYTHON SOURCE LINES 392-431

.. code-block:: default


    import matplotlib.pyplot as plt
    from matplotlib.lines import Line2D
    import pandas as pd

    # Extract loss and balanced accuracy values for plotting from history object
    df = pd.DataFrame(clf.history.to_list())

    df['train_acc'] *= 100
    df['valid_acc'] *= 100

    ys1 = ['train_loss', 'valid_loss']
    ys2 = ['train_acc', 'valid_acc']
    styles = ['-', ':']
    markers = ['.', '.']

    plt.style.use('seaborn-talk')

    fig, ax1 = plt.subplots(figsize=(8, 3))
    ax2 = ax1.twinx()
    for y1, y2, style, marker in zip(ys1, ys2, styles, markers):
        ax1.plot(df['epoch'], df[y1], ls=style, marker=marker, ms=7,
                 c='tab:blue', label=y1)
        ax2.plot(df['epoch'], df[y2], ls=style, marker=marker, ms=7,
                 c='tab:orange', label=y2)

    ax1.tick_params(axis='y', labelcolor='tab:blue')
    ax1.set_ylabel('Loss', color='tab:blue')
    ax2.tick_params(axis='y', labelcolor='tab:orange')
    ax2.set_ylabel('Accuracy [%]', color='tab:orange')
    ax1.set_xlabel('Epoch')

    lines1, labels1 = ax1.get_legend_handles_labels()
    lines2, labels2 = ax2.get_legend_handles_labels()
    ax2.legend(lines1 + lines2, labels1 + labels2)

    plt.tight_layout()





.. image:: /auto_examples/images/sphx_glr_plot_relative_positioning_001.png
    :alt: plot relative positioning
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 432-435

We also display the confusion matrix and classification report for the
pretext task:


.. GENERATED FROM PYTHON SOURCE LINES 435-448

.. code-block:: default


    from sklearn.metrics import confusion_matrix
    from sklearn.metrics import classification_report

    # Switch to the test sampler
    clf.iterator_valid__sampler = test_sampler
    y_pred = clf.forward(splitted['test'], training=False) > 0
    y_true = [y for _, _, y in test_sampler]

    print(confusion_matrix(y_true, y_pred))
    print(classification_report(y_true, y_pred))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[82 39]
     [37 92]]
                  precision    recall  f1-score   support

             0.0       0.69      0.68      0.68       121
             1.0       0.70      0.71      0.71       129

        accuracy                           0.70       250
       macro avg       0.70      0.70      0.70       250
    weighted avg       0.70      0.70      0.70       250





.. GENERATED FROM PYTHON SOURCE LINES 449-452

Using the learned representation for sleep staging
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 454-458

We can now use the trained convolutional neural network as a feature
extractor. We perform sleep stage classification from the learned feature
representation using a linear logistic regression classifier.


.. GENERATED FROM PYTHON SOURCE LINES 458-500

.. code-block:: default


    from torch.utils.data import DataLoader
    from sklearn.metrics import balanced_accuracy_score
    from sklearn.linear_model import LogisticRegression
    from sklearn.preprocessing import StandardScaler
    from sklearn.pipeline import make_pipeline

    # Extract features with the trained embedder
    data = dict()
    for name, split in splitted.items():
        split.return_pair = False  # Return single windows
        loader = DataLoader(split, batch_size=batch_size, num_workers=num_workers)
        with torch.no_grad():
            feats = [emb(batch_x.to(device)).cpu().numpy()
                     for batch_x, _, _ in loader]
        data[name] = (np.concatenate(feats), split.get_metadata()['target'].values)

    # Initialize the logistic regression model
    log_reg = LogisticRegression(
        penalty='l2', C=1.0, class_weight='balanced', solver='lbfgs',
        multi_class='multinomial', random_state=random_state)
    clf_pipe = make_pipeline(StandardScaler(), log_reg)

    # Fit and score the logistic regression
    clf_pipe.fit(*data['train'])
    train_y_pred = clf_pipe.predict(data['train'][0])
    valid_y_pred = clf_pipe.predict(data['valid'][0])
    test_y_pred = clf_pipe.predict(data['test'][0])

    train_bal_acc = balanced_accuracy_score(data['train'][1], train_y_pred)
    valid_bal_acc = balanced_accuracy_score(data['valid'][1], valid_y_pred)
    test_bal_acc = balanced_accuracy_score(data['test'][1], test_y_pred)

    print('Sleep staging performance with logistic regression:')
    print(f'Train bal acc: {train_bal_acc:0.4f}')
    print(f'Valid bal acc: {valid_bal_acc:0.4f}')
    print(f'Test bal acc: {test_bal_acc:0.4f}')

    print('Results on test set:')
    print(confusion_matrix(data['test'][1], test_y_pred))
    print(classification_report(data['test'][1], test_y_pred))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/.local/lib/python3.7/site-packages/sklearn/linear_model/_logistic.py:764: ConvergenceWarning: lbfgs failed to converge (status=1):
    STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

    Increase the number of iterations (max_iter) or scale the data as shown in:
        https://scikit-learn.org/stable/modules/preprocessing.html
    Please also refer to the documentation for alternative solver options:
        https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
      extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)
    Sleep staging performance with logistic regression:
    Train bal acc: 0.9088
    Valid bal acc: 0.5196
    Test bal acc: 0.5715
    Results on test set:
    [[ 98  21   7   0  16]
     [ 13  67   6   0  23]
     [  3  28 327   1 203]
     [  0   0  84  21   0]
     [  0  17  22   0 131]]
                  precision    recall  f1-score   support

               0       0.86      0.69      0.77       142
               1       0.50      0.61      0.55       109
               2       0.73      0.58      0.65       562
               3       0.95      0.20      0.33       105
               4       0.35      0.77      0.48       170

        accuracy                           0.59      1088
       macro avg       0.68      0.57      0.56      1088
    weighted avg       0.69      0.59      0.60      1088





.. GENERATED FROM PYTHON SOURCE LINES 501-505

The balanced accuracy is much higher than chance-level (i.e., 20% for our
5-class classification problem). Finally, we perform a quick 2D visualization
of the feature space using a PCA:


.. GENERATED FROM PYTHON SOURCE LINES 505-526

.. code-block:: default


    from sklearn.decomposition import PCA
    # from sklearn.manifold import TSNE
    from matplotlib import cm

    X = np.concatenate([v[0] for k, v in data.items()])
    y = np.concatenate([v[1] for k, v in data.items()])

    pca = PCA(n_components=2)
    # tsne = TSNE(n_components=2)
    components = pca.fit_transform(X)

    fig, ax = plt.subplots()
    colors = cm.get_cmap('viridis', 5)(range(5))
    for i, stage in enumerate(['W', 'N1', 'N2', 'N3', 'R']):
        mask = y == i
        ax.scatter(components[mask, 0], components[mask, 1], s=10, alpha=0.7,
                   color=colors[i], label=stage)
    ax.legend()





.. image:: /auto_examples/images/sphx_glr_plot_relative_positioning_002.png
    :alt: plot relative positioning
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7feaf410bb50>



.. GENERATED FROM PYTHON SOURCE LINES 527-532

We see that there is sleep stage-related structure in the embedding. A
nonlinear projection method (e.g., tSNE, UMAP) might yield more insightful
visualizations. Using a similar approach, the embedding space could also be
explored with respect to subject-level features, e.g., age and sex.


.. GENERATED FROM PYTHON SOURCE LINES 534-537

Conclusion
----------


.. GENERATED FROM PYTHON SOURCE LINES 539-577

In this example, we used self-supervised learning (SSL) as a way to learn
representations from unlabelled raw EEG data. Specifically, we used the
relative positioning (RP) pretext task to train a feature extractor on a
subset of the Sleep Physionet dataset. We then reused these features in a
downstream sleep staging task. We achieved reasonable downstream performance
and further showed with a 2D projection that the learned embedding space
contained sleep-related structure.

Many avenues could be taken to improve on these results. For instance, using
the entire Sleep Physionet dataset or training on larger datasets should help
the feature extractor learn better representations during the pretext task.
Other SSL tasks such as those described in [1]_ could further help discover
more powerful features.


References
----------

.. [1] Banville, H., Chehab, O., Hyvärinen, A., Engemann, D. A., & Gramfort, A.
      (2020). Uncovering the structure of clinical EEG signals with
      self-supervised learning. arXiv preprint arXiv:2007.16104.

.. [2] Kemp, B., Zwinderman, A. H., Tuk, B., Kamphuisen, H. A., & Oberye, J. J.
       (2000). Analysis of a sleep-dependent neuronal feedback loop: the
       slow-wave microcontinuity of the EEG. IEEE Transactions on Biomedical
       Engineering, 47(9), 1185-1194.

.. [3] Goldberger, A. L., Amaral, L. A., Glass, L., Hausdorff, J. M., Ivanov,
       P. C., Mark, R. G., ... & Stanley, H. E. (2000). PhysioBank,
       PhysioToolkit, and PhysioNet: components of a new research resource for
       complex physiologic signals. circulation, 101(23), e215-e220.

.. [4] Chambon, S., Galtier, M., Arnal, P., Wainrib, G. and Gramfort, A.
      (2018)A Deep Learning Architecture for Temporal Sleep Stage
      Classification Using Multivariate and Multimodal Time Series.
      IEEE Trans. on Neural Systems and Rehabilitation Engineering 26:
      (758-769)



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  12.605 seconds)

**Estimated memory usage:**  559 MB


.. _sphx_glr_download_auto_examples_plot_relative_positioning.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_relative_positioning.py <plot_relative_positioning.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_relative_positioning.ipynb <plot_relative_positioning.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
