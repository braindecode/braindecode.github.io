.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_skorch_trial_decoding.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_skorch_trial_decoding.py:


Skorch Trialwise Decoding
=========================

Example using skorch trialwise decoding on a simple dataset.




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using default location ~/mne_data for EEGBCI...
    Using default location ~/mne_data for EEGBCI...
    Using default location ~/mne_data for EEGBCI...
    Using default location ~/mne_data for EEGBCI...
    Using default location ~/mne_data for EEGBCI...
    Using default location ~/mne_data for EEGBCI...
    Used Annotations descriptions: ['T0', 'T1', 'T2']
    90 matching events found
    No baseline correction applied
    Not setting metadata
    Loading data for 90 events and 497 original time points ...
    0 bad epochs dropped
      epoch    train_accuracy    train_f1    train_loss    train_roc_auc    valid_accuracy    valid_f1    valid_loss    valid_roc_auc     dur
    -------  ----------------  ----------  ------------  ---------------  ----------------  ----------  ------------  ---------------  ------
          1            [36m0.8750[0m      [32m0.8649[0m        [35m1.1002[0m           [31m0.8421[0m            [94m0.6000[0m      [36m0.5385[0m        [32m0.8061[0m           [35m0.6652[0m  1.0137
          2            0.8000      0.7647        [35m0.8014[0m           [31m0.9749[0m            0.6000      0.4545        [32m0.7471[0m           [35m0.8080[0m  0.5953
          3            0.8250      0.8000        [35m0.5191[0m           [31m1.0000[0m            [94m0.6333[0m      0.5217        [32m0.6093[0m           [35m0.8795[0m  0.5837
          4            [36m0.9500[0m      [32m0.9500[0m        0.7393           1.0000            [94m0.7333[0m      [36m0.6923[0m        [32m0.5473[0m           [35m0.8929[0m  0.5241

    0.625





|


.. code-block:: default


    # Authors: Maciej Sliwowski
    #          Robin Tibor Schirrmeister
    #          Alexandre Gramfort
    #
    # License: BSD-3

    import mne
    import numpy as np
    import torch
    from mne.io import concatenate_raws
    from sklearn.metrics import f1_score
    from skorch.callbacks.scoring import EpochScoring
    from torch import optim
    from torch.utils.data import Dataset

    from braindecode.classifier import EEGClassifier
    from braindecode.models import ShallowFBCSPNet
    from braindecode.scoring import PostEpochTrainScoring
    from braindecode.util import set_random_seeds

    subject_id = (
        22  # carefully cherry-picked to give nice results on such limited data :)
    )
    event_codes = [
        5,
        6,
        9,
        10,
        13,
        14,
    ]  # codes for executed and imagined hands/feet

    # This will download the files if you don't have them yet,
    # and then return the paths to the files.
    physionet_paths = mne.datasets.eegbci.load_data(
        subject_id, event_codes, update_path=False
    )

    # Load each of the files
    raws = [
        mne.io.read_raw_edf(
            path, preload=True, stim_channel="auto", verbose="WARNING"
        )
        for path in physionet_paths
    ]

    # Concatenate them
    raw = concatenate_raws(raws)
    del raws

    # Find the events in this dataset
    events, _ = mne.events_from_annotations(raw)

    # Use only EEG channels
    picks = mne.pick_types(raw.info, meg=False, eeg=True, exclude="bads")

    # Extract trials, only using EEG channels
    epochs = mne.Epochs(
        raw,
        events,
        event_id=dict(hands_or_left=2, feet_or_right=3),
        tmin=1,
        tmax=4.1,
        proj=False,
        picks=picks,
        baseline=None,
        preload=True,
    )

    X = (epochs.get_data() * 1e6).astype(np.float32)
    y = (epochs.events[:, 2] - 2).astype(np.int64)  # 2,3 -> 0,1
    del epochs

    # Set if you want to use GPU
    # You can also use torch.cuda.is_available() to determine if cuda is available on your machine.
    cuda = False
    set_random_seeds(seed=20170629, cuda=cuda)
    n_classes = 2
    in_chans = X.shape[1]


    class EEGDataSet(Dataset):
        def __init__(self, X, y):
            self.X = X
            if self.X.ndim == 3:
                self.X = self.X[:, :, :, None]
            self.y = y

        def __len__(self):
            return len(self.X)

        def __getitem__(self, idx):
            return self.X[idx], self.y[idx]


    train_set = EEGDataSet(X[:70], y[:70])
    test_set = EEGDataSet(X[70:], y=y[70:])


    class TrainTestSplit(object):
        def __init__(self, train_size):
            assert isinstance(train_size, (int, float))
            self.train_size = train_size

        def __call__(self, dataset, y, **kwargs):
            # can we directly use this https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html
            # or stick to same API
            if isinstance(self.train_size, int):
                n_train_samples = self.train_size
            else:
                n_train_samples = int(self.train_size * len(dataset))

            X, y = dataset.X, dataset.y
            return (
                EEGDataSet(X[:n_train_samples], y[:n_train_samples]),
                EEGDataSet(X[n_train_samples:], y[n_train_samples:]),
            )


    set_random_seeds(20200114, True)

    # final_conv_length = auto ensures we only get a single output in the time dimension
    model = ShallowFBCSPNet(
        in_chans=in_chans,
        n_classes=n_classes,
        input_time_length=train_set.X.shape[2],
        final_conv_length="auto",
    )
    if cuda:
        model.cuda()

    # It can use also NeuralNetClassifier
    clf = EEGClassifier(
        model,
        criterion=torch.nn.NLLLoss,
        optimizer=optim.AdamW,
        train_split=TrainTestSplit(train_size=40),
        optimizer__lr=0.0625 * 0.01,
        optimizer__weight_decay=0,
        batch_size=64,
        callbacks=['accuracy', 'f1', 'roc_auc']
    )
    clf.fit(train_set, y=None, epochs=4)

    preds = clf.predict(test_set.X)
    y_true = test_set.y
    f1_score(y_true, preds)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.291 seconds)

**Estimated memory usage:**  467 MB


.. _sphx_glr_download_auto_examples_plot_skorch_trial_decoding.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_skorch_trial_decoding.py <plot_skorch_trial_decoding.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_skorch_trial_decoding.ipynb <plot_skorch_trial_decoding.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
