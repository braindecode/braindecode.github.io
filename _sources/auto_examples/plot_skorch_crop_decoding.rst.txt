.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_skorch_crop_decoding.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_skorch_crop_decoding.py:


Skorch Crop Decoding
=========================

Example using Skorch for crop decoding




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using default location ~/mne_data for EEGBCI...
    Using default location ~/mne_data for EEGBCI...
    Using default location ~/mne_data for EEGBCI...
    Using default location ~/mne_data for EEGBCI...
    Using default location ~/mne_data for EEGBCI...
    Using default location ~/mne_data for EEGBCI...
    Used Annotations descriptions: ['T0', 'T1', 'T2']
    90 matching events found
    No baseline correction applied
    Not setting metadata
    Loading data for 90 events and 497 original time points ...
    0 bad epochs dropped
      epoch    train_loss    train_trial_accuracy    valid_loss    valid_trial_accuracy     dur
    -------  ------------  ----------------------  ------------  ----------------------  ------
          1        [36m1.3460[0m                  [32m0.8250[0m        [35m0.7710[0m                  [31m0.6333[0m  1.1377
          2        [36m0.6829[0m                  [32m0.8750[0m        [35m0.5806[0m                  [31m0.6667[0m  0.6176
          3        [36m0.4439[0m                  [32m0.9500[0m        [35m0.5148[0m                  [31m0.7667[0m  0.5901
          4        [36m0.3396[0m                  [32m0.9750[0m        [35m0.5103[0m                  0.7333  0.6511

    array([[[-0.72593135, -0.70480764, -0.6929935 , -0.6789333 ,
             -0.6795268 , -0.6565    , -0.62472534, -0.59308964,
             -0.5819341 ],
            [-0.6614037 , -0.6816211 , -0.69330084, -0.70756596,
             -0.7069557 , -0.73118865, -0.7665967 , -0.80434084,
             -0.81829447]],

           [[-0.1384759 , -0.13280776, -0.13573387, -0.13853848,
             -0.13948628, -0.14080149, -0.1361963 , -0.13200611,
             -0.13192198],
            [-2.0454981 , -2.0845218 , -2.0641584 , -2.0450768 ,
             -2.0387216 , -2.029979  , -2.0609834 , -2.0901842 ,
             -2.0907805 ]],

           [[-2.827416  , -2.8091013 , -2.7979934 , -2.8275623 ,
             -2.8432662 , -2.859635  , -2.8487384 , -2.8073335 ,
             -2.7639952 ],
            [-0.06098808, -0.06215111, -0.0628676 , -0.06097888,
             -0.05999966, -0.05899621, -0.05966227, -0.06226458,
             -0.06511406]],

           [[-0.10486438, -0.10452203, -0.10257522, -0.09784779,
             -0.09458357, -0.09162305, -0.08991986, -0.08999731,
             -0.0895144 ],
            [-2.3070614 , -2.3101633 , -2.3280082 , -2.372867  ,
             -2.4051905 , -2.4355342 , -2.4534595 , -2.4526367 ,
             -2.4577792 ]],

           [[-0.04643438, -0.04860929, -0.05058507, -0.05219714,
             -0.05433676, -0.05615785, -0.05651602, -0.05731877,
             -0.05853983],
            [-3.0928426 , -3.0481467 , -3.0092847 , -2.9787128 ,
             -2.9395998 , -2.9075363 , -2.901356  , -2.8876495 ,
             -2.867175  ]],

           [[-0.03329183, -0.03409307, -0.03584076, -0.03819335,
             -0.0385564 , -0.0369964 , -0.03487581, -0.03340114,
             -0.0321394 ],
            [-3.419043  , -3.3956592 , -3.3465364 , -3.2841299 ,
             -3.2748494 , -3.3153758 , -3.373349  , -3.4158196 ,
             -3.453699  ]],

           [[-2.7905843 , -2.7877474 , -2.7218225 , -2.7346914 ,
             -2.8123462 , -2.869512  , -2.9920444 , -3.1391768 ,
             -3.2748187 ],
            [-0.06335025, -0.06353607, -0.06801635, -0.06711681,
             -0.06194339, -0.05839911, -0.05148776, -0.04428469,
             -0.0385576 ]],

           [[-1.138443  , -1.2385615 , -1.2977762 , -1.3242472 ,
             -1.3438656 , -1.3329542 , -1.3696793 , -1.4421939 ,
             -1.5427741 ],
            [-0.38612932, -0.3422098 , -0.31901935, -0.3092505 ,
             -0.30223465, -0.3061137 , -0.29328236, -0.26972237,
             -0.24052782]],

           [[-0.10609876, -0.11049125, -0.1171144 , -0.12517685,
             -0.12806591, -0.13136126, -0.13222024, -0.12815215,
             -0.12543252],
            [-2.2959652 , -2.257556  , -2.2025898 , -2.1399634 ,
             -2.1185598 , -2.094766  , -2.088668  , -2.117929  ,
             -2.1380482 ]],

           [[-1.1244197 , -1.0972657 , -1.0563753 , -0.9948161 ,
             -0.9575467 , -0.93834656, -0.91713923, -0.89833975,
             -0.88485533],
            [-0.39280695, -0.40613905, -0.42727202, -0.46170443,
             -0.48423788, -0.49638742, -0.5102604 , -0.5229745 ,
             -0.53234535]],

           [[-0.5045973 , -0.5002354 , -0.5060646 , -0.5130907 ,
             -0.5215145 , -0.5190072 , -0.5257054 , -0.5400987 ,
             -0.54778135],
            [-0.9257066 , -0.9323894 , -0.923475  , -0.9129027 ,
             -0.90046877, -0.90414256, -0.8943781 , -0.87392765,
             -0.86329824]],

           [[-0.34178233, -0.33534202, -0.32623887, -0.32522333,
             -0.32215995, -0.3289283 , -0.33284476, -0.31874022,
             -0.3124311 ],
            [-1.2396097 , -1.255594  , -1.2788141 , -1.2814516 ,
             -1.2894664 , -1.2718756 , -1.2618896 , -1.2985195 ,
             -1.3155229 ]],

           [[-0.23261799, -0.22267488, -0.21793474, -0.21242513,
             -0.20525931, -0.19639735, -0.19367167, -0.19197506,
             -0.18676509],
            [-1.5724131 , -1.6113148 , -1.6305487 , -1.6534988 ,
             -1.684356  , -1.7242074 , -1.7368644 , -1.7448423 ,
             -1.7698332 ]],

           [[-2.1018367 , -2.1001575 , -2.0677915 , -2.0604057 ,
             -2.042228  , -2.0142996 , -1.9580514 , -1.9239366 ,
             -1.8755223 ],
            [-0.13037261, -0.1306067 , -0.13520683, -0.13628063,
             -0.13896249, -0.1431937 , -0.15214138, -0.15786032,
             -0.1663792 ]],

           [[-0.16002372, -0.16722256, -0.17921798, -0.20381618,
             -0.2334462 , -0.2644392 , -0.2898845 , -0.30505395,
             -0.31124976],
            [-1.9113783 , -1.8708761 , -1.8074235 , -1.6907146 ,
             -1.5692571 , -1.4594516 , -1.379716  , -1.3359193 ,
             -1.3187512 ]],

           [[-0.3555823 , -0.3865395 , -0.42893016, -0.4568319 ,
             -0.46872675, -0.48129815, -0.49269453, -0.52650625,
             -0.5510542 ],
            [-1.206527  , -1.1375731 , -1.0532721 , -1.0031753 ,
             -0.98296094, -0.96228397, -0.9441191 , -0.8932213 ,
             -0.85882854]],

           [[-1.1553435 , -1.1419533 , -1.1702278 , -1.1852503 ,
             -1.2084211 , -1.2504616 , -1.2818835 , -1.3247192 ,
             -1.3159598 ],
            [-0.37826246, -0.3844792 , -0.37149313, -0.36480743,
             -0.35477456, -0.3373943 , -0.3250574 , -0.30907953,
             -0.31227094]],

           [[-2.8456206 , -2.8903666 , -2.9114897 , -2.9416246 ,
             -3.0196552 , -3.0490143 , -3.0574446 , -3.0536344 ,
             -3.0279877 ],
            [-0.05985425, -0.05715872, -0.05592996, -0.05422381,
             -0.0500499 , -0.0485661 , -0.04814842, -0.04833674,
             -0.04962413]],

           [[-0.70067805, -0.66038203, -0.6286415 , -0.62042665,
             -0.6057474 , -0.5956031 , -0.5972579 , -0.592754  ,
             -0.5767132 ],
            [-0.6856726 , -0.72702235, -0.7621025 , -0.77157366,
             -0.7889236 , -0.80124485, -0.799216  , -0.8047555 ,
             -0.82494676]],

           [[-0.16496575, -0.15534827, -0.14518614, -0.14609137,
             -0.15602282, -0.16036275, -0.15652646, -0.14813359,
             -0.14646262],
            [-1.8833667 , -1.9387546 , -2.0014536 , -1.9956795 ,
             -1.9347503 , -1.9094269 , -1.9317728 , -1.9827935 ,
             -1.9933226 ]]], dtype=float32)





|


.. code-block:: default


    # Authors: Lukas Gemein
    #          Robin Tibor Schirrmeister
    #          Alexandre Gramfort
    #          Maciej Sliwowski
    #
    # License: BSD-3

    import numpy as np

    import mne
    from mne.io import concatenate_raws

    import torch
    from torch import optim
    from torch.utils.data import Dataset

    from skorch.net import NeuralNet
    from skorch.callbacks.scoring import EpochScoring

    from braindecode.models import ShallowFBCSPNet
    from braindecode.util import set_random_seeds
    from braindecode.datautil import CropsDataLoader
    from braindecode.models.util import to_dense_prediction_model
    from braindecode.experiments.scoring import CroppedTrialEpochScoring

    subject_id = 22  # carefully cherry-picked to give nice results on such limited data :)
    event_codes = [5, 6, 9, 10, 13, 14]  # codes for executed and imagined hands/feet

    # This will download the files if you don't have them yet,
    # and then return the paths to the files.
    physionet_paths = mne.datasets.eegbci.load_data(
        subject_id, event_codes, update_path=False)

    # Load each of the files
    raws = [
        mne.io.read_raw_edf(
            path, preload=True, stim_channel="auto", verbose="WARNING"
        )
        for path in physionet_paths
    ]

    # Concatenate them
    raw = concatenate_raws(raws)
    del raws

    # Find the events in this dataset
    events, _ = mne.events_from_annotations(raw)

    # Use only EEG channels
    picks = mne.pick_types(raw.info, meg=False, eeg=True, exclude="bads")

    # Extract trials, only using EEG channels
    epochs = mne.Epochs(
        raw,
        events,
        event_id=dict(hands_or_left=2, feet_or_right=3),
        tmin=1,
        tmax=4.1,
        proj=False,
        picks=picks,
        baseline=None,
        preload=True,
    )

    X = (epochs.get_data() * 1e6).astype(np.float32)
    y = (epochs.events[:, 2] - 2).astype(np.int64)  # 2,3 -> 0,1
    del epochs

    # Set if you want to use GPU
    # You can also use torch.cuda.is_available() to determine if cuda is available on your machine.
    cuda = False
    set_random_seeds(seed=20170629, cuda=cuda)
    n_classes = 2
    in_chans = X.shape[1]


    class EEGDataSet(Dataset):
        def __init__(self, X, y):
            self.X = X
            if self.X.ndim == 3:
                self.X = self.X[:, :, :, None]
            self.y = y

        def __len__(self):
            return len(self.X)

        def __getitem__(self, idx):
            i_trial, start, stop = idx
            return self.X[i_trial, :, start:stop], self.y[i_trial]


    train_set = EEGDataSet(X[:70], y[:70])
    test_set = EEGDataSet(X[70:], y=y[70:])


    class TrainTestSplit(object):
        def __init__(self, train_size):
            assert isinstance(train_size, (int, float))
            self.train_size = train_size

        def __call__(self, dataset, y, **kwargs):
            # can we directly use this https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html
            # or stick to same API
            if isinstance(self.train_size, int):
                n_train_samples = self.train_size
            else:
                n_train_samples = int(self.train_size * len(dataset))

            X, y = dataset.X, dataset.y
            return (
                EEGDataSet(X[:n_train_samples], y[:n_train_samples]),
                EEGDataSet(X[n_train_samples:], y[n_train_samples:]),
            )


    set_random_seeds(20200114, True)

    # final_conv_length = auto ensures we only get a single output in the time dimension
    model = ShallowFBCSPNet(
        in_chans=in_chans,
        n_classes=n_classes,
        input_time_length=train_set.X.shape[2],
        final_conv_length="auto",
    ).create_network()
    to_dense_prediction_model(model)
    if cuda:
        model.cuda()

    input_time_length = X.shape[2]

    # Perform forward pass to determine how many outputs per input
    with torch.no_grad():
        dummy_input = torch.tensor(X[:1, :, :input_time_length, None], device="cpu")
        n_preds_per_input = model(dummy_input).shape[2]


    class CroppedNLLLoss:
        """Compute NLL Loss after averaging predictions across time.
        Assumes predictions are in shape:
        n_batch size x n_classes x n_predictions (in time)"""

        def __call__(self, preds, targets):
            return torch.nn.functional.nll_loss(torch.mean(preds, dim=2), targets)


    cropped_cb_train = CroppedTrialEpochScoring(
        "accuracy",
        on_train=True,
        name="train_trial_accuracy",
        lower_is_better=False,
    )

    cropped_cb_valid = CroppedTrialEpochScoring(
        "accuracy",
        on_train=False,
        name="valid_trial_accuracy",
        lower_is_better=False,
    )

    clf = NeuralNet(
        model,
        criterion=CroppedNLLLoss,
        optimizer=optim.AdamW,
        train_split=TrainTestSplit(train_size=40),
        optimizer__lr=0.0625 * 0.01,
        optimizer__weight_decay=0,
        batch_size=64,
        iterator_train=CropsDataLoader,
        iterator_valid=CropsDataLoader,
        iterator_train__input_time_length=input_time_length,
        iterator_train__n_preds_per_input=n_preds_per_input,
        iterator_valid__input_time_length=input_time_length,
        iterator_valid__n_preds_per_input=n_preds_per_input,
        callbacks=[
            ("train_trial_accuracy", cropped_cb_train),
            ("valid_trial_accuracy", cropped_cb_valid),
        ],
    )

    clf.fit(train_set, y=None, epochs=4)
    clf.predict(test_set)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.649 seconds)

**Estimated memory usage:**  574 MB


.. _sphx_glr_download_auto_examples_plot_skorch_crop_decoding.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_skorch_crop_decoding.py <plot_skorch_crop_decoding.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_skorch_crop_decoding.ipynb <plot_skorch_crop_decoding.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
