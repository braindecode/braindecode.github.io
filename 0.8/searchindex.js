Search.setIndex({"docnames": ["api", "auto_examples/advanced_training/index", "auto_examples/advanced_training/plot_bcic_iv_4_ecog_cropped", "auto_examples/advanced_training/plot_data_augmentation", "auto_examples/advanced_training/plot_data_augmentation_search", "auto_examples/advanced_training/plot_relative_positioning", "auto_examples/advanced_training/sg_execution_times", "auto_examples/applied_examples/index", "auto_examples/applied_examples/plot_bcic_iv_4_ecog_trial", "auto_examples/applied_examples/plot_sleep_staging_chambon2018", "auto_examples/applied_examples/plot_sleep_staging_eldele2021", "auto_examples/applied_examples/plot_sleep_staging_usleep", "auto_examples/applied_examples/plot_tuh_eeg_corpus", "auto_examples/applied_examples/sg_execution_times", "auto_examples/datasets_io/benchmark_lazy_eager_loading", "auto_examples/datasets_io/index", "auto_examples/datasets_io/plot_benchmark_preprocessing", "auto_examples/datasets_io/plot_custom_dataset_example", "auto_examples/datasets_io/plot_load_save_datasets", "auto_examples/datasets_io/plot_mne_dataset_example", "auto_examples/datasets_io/plot_moabb_dataset_example", "auto_examples/datasets_io/plot_split_dataset", "auto_examples/datasets_io/plot_tuh_discrete_multitarget", "auto_examples/datasets_io/sg_execution_times", "auto_examples/index", "auto_examples/model_building/index", "auto_examples/model_building/plot_basic_training_epochs", "auto_examples/model_building/plot_bcic_iv_2a_moabb_cropped", "auto_examples/model_building/plot_bcic_iv_2a_moabb_trial", "auto_examples/model_building/plot_how_train_test_and_tune", "auto_examples/model_building/plot_hyperparameter_tuning_with_scikit-learn", "auto_examples/model_building/plot_regression", "auto_examples/model_building/plot_train_in_pure_pytorch_and_pytorch_lightning", "auto_examples/model_building/sg_execution_times", "cite", "generated/braindecode.augmentation.AugmentedDataLoader", "generated/braindecode.augmentation.BandstopFilter", "generated/braindecode.augmentation.ChannelsDropout", "generated/braindecode.augmentation.ChannelsShuffle", "generated/braindecode.augmentation.ChannelsSymmetry", "generated/braindecode.augmentation.Compose", "generated/braindecode.augmentation.FTSurrogate", "generated/braindecode.augmentation.FrequencyShift", "generated/braindecode.augmentation.GaussianNoise", "generated/braindecode.augmentation.IdentityTransform", "generated/braindecode.augmentation.Mixup", "generated/braindecode.augmentation.SensorsRotation", "generated/braindecode.augmentation.SensorsXRotation", "generated/braindecode.augmentation.SensorsYRotation", "generated/braindecode.augmentation.SensorsZRotation", "generated/braindecode.augmentation.SignFlip", "generated/braindecode.augmentation.SmoothTimeMask", "generated/braindecode.augmentation.TimeReverse", "generated/braindecode.augmentation.Transform", "generated/braindecode.augmentation.functional.bandstop_filter", "generated/braindecode.augmentation.functional.channels_dropout", "generated/braindecode.augmentation.functional.channels_permute", "generated/braindecode.augmentation.functional.channels_shuffle", "generated/braindecode.augmentation.functional.frequency_shift", "generated/braindecode.augmentation.functional.ft_surrogate", "generated/braindecode.augmentation.functional.gaussian_noise", "generated/braindecode.augmentation.functional.identity", "generated/braindecode.augmentation.functional.mixup", "generated/braindecode.augmentation.functional.sensors_rotation", "generated/braindecode.augmentation.functional.sign_flip", "generated/braindecode.augmentation.functional.smooth_time_mask", "generated/braindecode.augmentation.functional.time_reverse", "generated/braindecode.classifier.EEGClassifier", "generated/braindecode.datasets.BCICompetitionIVDataset4", "generated/braindecode.datasets.BNCI2014001", "generated/braindecode.datasets.BaseConcatDataset", "generated/braindecode.datasets.BaseDataset", "generated/braindecode.datasets.HGD", "generated/braindecode.datasets.MOABBDataset", "generated/braindecode.datasets.SleepPhysionet", "generated/braindecode.datasets.TUH", "generated/braindecode.datasets.TUHAbnormal", "generated/braindecode.datasets.WindowsDataset", "generated/braindecode.datasets.create_from_X_y", "generated/braindecode.datasets.create_from_mne_epochs", "generated/braindecode.datasets.create_from_mne_raw", "generated/braindecode.datautil.load_concat_dataset", "generated/braindecode.datautil.save_concat_dataset", "generated/braindecode.models.ATCNet", "generated/braindecode.models.Deep4Net", "generated/braindecode.models.DeepSleepNet", "generated/braindecode.models.EEGConformer", "generated/braindecode.models.EEGITNet", "generated/braindecode.models.EEGInception", "generated/braindecode.models.EEGInceptionERP", "generated/braindecode.models.EEGInceptionMI", "generated/braindecode.models.EEGModuleMixin", "generated/braindecode.models.EEGNetv1", "generated/braindecode.models.EEGNetv4", "generated/braindecode.models.EEGResNet", "generated/braindecode.models.HybridNet", "generated/braindecode.models.ShallowFBCSPNet", "generated/braindecode.models.SleepStagerBlanco2020", "generated/braindecode.models.SleepStagerChambon2018", "generated/braindecode.models.SleepStagerEldele2021", "generated/braindecode.models.TCN", "generated/braindecode.models.TIDNet", "generated/braindecode.models.TimeDistributed", "generated/braindecode.models.USleep", "generated/braindecode.models.get_output_shape", "generated/braindecode.preprocessing.Crop", "generated/braindecode.preprocessing.DropChannels", "generated/braindecode.preprocessing.Filter", "generated/braindecode.preprocessing.Pick", "generated/braindecode.preprocessing.Preprocessor", "generated/braindecode.preprocessing.Resample", "generated/braindecode.preprocessing.SetEEGReference", "generated/braindecode.preprocessing.create_fixed_length_windows", "generated/braindecode.preprocessing.create_windows_from_events", "generated/braindecode.preprocessing.create_windows_from_target_channels", "generated/braindecode.preprocessing.exponential_moving_demean", "generated/braindecode.preprocessing.exponential_moving_standardize", "generated/braindecode.preprocessing.filterbank", "generated/braindecode.preprocessing.preprocess", "generated/braindecode.preprocessing.scale", "generated/braindecode.regressor.EEGRegressor", "generated/braindecode.samplers.BalancedSequenceSampler", "generated/braindecode.samplers.RecordingSampler", "generated/braindecode.samplers.RelativePositioningSampler", "generated/braindecode.samplers.SequenceSampler", "generated/braindecode.training.CroppedLoss", "generated/braindecode.training.CroppedTimeSeriesEpochScoring", "generated/braindecode.training.CroppedTrialEpochScoring", "generated/braindecode.training.PostEpochTrainScoring", "generated/braindecode.training.TimeSeriesLoss", "generated/braindecode.training.mixup_criterion", "generated/braindecode.training.predict_trials", "generated/braindecode.training.trial_preds_from_window_preds", "generated/braindecode.util.set_random_seeds", "generated/braindecode.visualization.compute_amplitude_gradients", "generated/braindecode.visualization.plot_confusion_matrix", "help", "index", "install/install", "install/install_pip", "install/install_source", "source/braindecode", "source/braindecode.augmentation", "source/braindecode.datasets", "source/braindecode.datautil", "source/braindecode.models", "source/braindecode.preprocessing", "source/braindecode.samplers", "source/braindecode.training", "source/braindecode.visualization", "source/modules", "whats_new"], "filenames": ["api.rst", "auto_examples/advanced_training/index.rst", "auto_examples/advanced_training/plot_bcic_iv_4_ecog_cropped.rst", "auto_examples/advanced_training/plot_data_augmentation.rst", "auto_examples/advanced_training/plot_data_augmentation_search.rst", "auto_examples/advanced_training/plot_relative_positioning.rst", "auto_examples/advanced_training/sg_execution_times.rst", "auto_examples/applied_examples/index.rst", "auto_examples/applied_examples/plot_bcic_iv_4_ecog_trial.rst", "auto_examples/applied_examples/plot_sleep_staging_chambon2018.rst", "auto_examples/applied_examples/plot_sleep_staging_eldele2021.rst", "auto_examples/applied_examples/plot_sleep_staging_usleep.rst", "auto_examples/applied_examples/plot_tuh_eeg_corpus.rst", "auto_examples/applied_examples/sg_execution_times.rst", "auto_examples/datasets_io/benchmark_lazy_eager_loading.rst", "auto_examples/datasets_io/index.rst", "auto_examples/datasets_io/plot_benchmark_preprocessing.rst", "auto_examples/datasets_io/plot_custom_dataset_example.rst", "auto_examples/datasets_io/plot_load_save_datasets.rst", "auto_examples/datasets_io/plot_mne_dataset_example.rst", "auto_examples/datasets_io/plot_moabb_dataset_example.rst", "auto_examples/datasets_io/plot_split_dataset.rst", "auto_examples/datasets_io/plot_tuh_discrete_multitarget.rst", "auto_examples/datasets_io/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/model_building/index.rst", "auto_examples/model_building/plot_basic_training_epochs.rst", "auto_examples/model_building/plot_bcic_iv_2a_moabb_cropped.rst", "auto_examples/model_building/plot_bcic_iv_2a_moabb_trial.rst", "auto_examples/model_building/plot_how_train_test_and_tune.rst", "auto_examples/model_building/plot_hyperparameter_tuning_with_scikit-learn.rst", "auto_examples/model_building/plot_regression.rst", "auto_examples/model_building/plot_train_in_pure_pytorch_and_pytorch_lightning.rst", "auto_examples/model_building/sg_execution_times.rst", "cite.rst", "generated/braindecode.augmentation.AugmentedDataLoader.rst", "generated/braindecode.augmentation.BandstopFilter.rst", "generated/braindecode.augmentation.ChannelsDropout.rst", "generated/braindecode.augmentation.ChannelsShuffle.rst", "generated/braindecode.augmentation.ChannelsSymmetry.rst", "generated/braindecode.augmentation.Compose.rst", "generated/braindecode.augmentation.FTSurrogate.rst", "generated/braindecode.augmentation.FrequencyShift.rst", "generated/braindecode.augmentation.GaussianNoise.rst", "generated/braindecode.augmentation.IdentityTransform.rst", "generated/braindecode.augmentation.Mixup.rst", "generated/braindecode.augmentation.SensorsRotation.rst", "generated/braindecode.augmentation.SensorsXRotation.rst", "generated/braindecode.augmentation.SensorsYRotation.rst", "generated/braindecode.augmentation.SensorsZRotation.rst", "generated/braindecode.augmentation.SignFlip.rst", "generated/braindecode.augmentation.SmoothTimeMask.rst", "generated/braindecode.augmentation.TimeReverse.rst", "generated/braindecode.augmentation.Transform.rst", "generated/braindecode.augmentation.functional.bandstop_filter.rst", "generated/braindecode.augmentation.functional.channels_dropout.rst", "generated/braindecode.augmentation.functional.channels_permute.rst", "generated/braindecode.augmentation.functional.channels_shuffle.rst", "generated/braindecode.augmentation.functional.frequency_shift.rst", "generated/braindecode.augmentation.functional.ft_surrogate.rst", "generated/braindecode.augmentation.functional.gaussian_noise.rst", "generated/braindecode.augmentation.functional.identity.rst", "generated/braindecode.augmentation.functional.mixup.rst", "generated/braindecode.augmentation.functional.sensors_rotation.rst", "generated/braindecode.augmentation.functional.sign_flip.rst", "generated/braindecode.augmentation.functional.smooth_time_mask.rst", "generated/braindecode.augmentation.functional.time_reverse.rst", "generated/braindecode.classifier.EEGClassifier.rst", "generated/braindecode.datasets.BCICompetitionIVDataset4.rst", "generated/braindecode.datasets.BNCI2014001.rst", "generated/braindecode.datasets.BaseConcatDataset.rst", "generated/braindecode.datasets.BaseDataset.rst", "generated/braindecode.datasets.HGD.rst", "generated/braindecode.datasets.MOABBDataset.rst", "generated/braindecode.datasets.SleepPhysionet.rst", "generated/braindecode.datasets.TUH.rst", "generated/braindecode.datasets.TUHAbnormal.rst", "generated/braindecode.datasets.WindowsDataset.rst", "generated/braindecode.datasets.create_from_X_y.rst", "generated/braindecode.datasets.create_from_mne_epochs.rst", "generated/braindecode.datasets.create_from_mne_raw.rst", "generated/braindecode.datautil.load_concat_dataset.rst", "generated/braindecode.datautil.save_concat_dataset.rst", "generated/braindecode.models.ATCNet.rst", "generated/braindecode.models.Deep4Net.rst", "generated/braindecode.models.DeepSleepNet.rst", "generated/braindecode.models.EEGConformer.rst", "generated/braindecode.models.EEGITNet.rst", "generated/braindecode.models.EEGInception.rst", "generated/braindecode.models.EEGInceptionERP.rst", "generated/braindecode.models.EEGInceptionMI.rst", "generated/braindecode.models.EEGModuleMixin.rst", "generated/braindecode.models.EEGNetv1.rst", "generated/braindecode.models.EEGNetv4.rst", "generated/braindecode.models.EEGResNet.rst", "generated/braindecode.models.HybridNet.rst", "generated/braindecode.models.ShallowFBCSPNet.rst", "generated/braindecode.models.SleepStagerBlanco2020.rst", "generated/braindecode.models.SleepStagerChambon2018.rst", "generated/braindecode.models.SleepStagerEldele2021.rst", "generated/braindecode.models.TCN.rst", "generated/braindecode.models.TIDNet.rst", "generated/braindecode.models.TimeDistributed.rst", "generated/braindecode.models.USleep.rst", "generated/braindecode.models.get_output_shape.rst", "generated/braindecode.preprocessing.Crop.rst", "generated/braindecode.preprocessing.DropChannels.rst", "generated/braindecode.preprocessing.Filter.rst", "generated/braindecode.preprocessing.Pick.rst", "generated/braindecode.preprocessing.Preprocessor.rst", "generated/braindecode.preprocessing.Resample.rst", "generated/braindecode.preprocessing.SetEEGReference.rst", "generated/braindecode.preprocessing.create_fixed_length_windows.rst", "generated/braindecode.preprocessing.create_windows_from_events.rst", "generated/braindecode.preprocessing.create_windows_from_target_channels.rst", "generated/braindecode.preprocessing.exponential_moving_demean.rst", "generated/braindecode.preprocessing.exponential_moving_standardize.rst", "generated/braindecode.preprocessing.filterbank.rst", "generated/braindecode.preprocessing.preprocess.rst", "generated/braindecode.preprocessing.scale.rst", "generated/braindecode.regressor.EEGRegressor.rst", "generated/braindecode.samplers.BalancedSequenceSampler.rst", "generated/braindecode.samplers.RecordingSampler.rst", "generated/braindecode.samplers.RelativePositioningSampler.rst", "generated/braindecode.samplers.SequenceSampler.rst", "generated/braindecode.training.CroppedLoss.rst", "generated/braindecode.training.CroppedTimeSeriesEpochScoring.rst", "generated/braindecode.training.CroppedTrialEpochScoring.rst", "generated/braindecode.training.PostEpochTrainScoring.rst", "generated/braindecode.training.TimeSeriesLoss.rst", "generated/braindecode.training.mixup_criterion.rst", "generated/braindecode.training.predict_trials.rst", "generated/braindecode.training.trial_preds_from_window_preds.rst", "generated/braindecode.util.set_random_seeds.rst", "generated/braindecode.visualization.compute_amplitude_gradients.rst", "generated/braindecode.visualization.plot_confusion_matrix.rst", "help.rst", "index.rst", "install/install.rst", "install/install_pip.rst", "install/install_source.rst", "source/braindecode.rst", "source/braindecode.augmentation.rst", "source/braindecode.datasets.rst", "source/braindecode.datautil.rst", "source/braindecode.models.rst", "source/braindecode.preprocessing.rst", "source/braindecode.samplers.rst", "source/braindecode.training.rst", "source/braindecode.visualization.rst", "source/modules.rst", "whats_new.rst"], "titles": ["API Reference", "Advanced neural network training strategies", "Fingers flexion cropped decoding on BCIC IV 4 ECoG Dataset", "Data Augmentation on BCIC IV 2a Dataset", "Searching the best data augmentation on BCIC IV 2a Dataset", "Self-supervised learning on EEG with relative positioning", "Computation times", "Applied examples on real-world datasets", "Fingers flexion decoding on BCIC IV 4 ECoG Dataset", "Sleep staging on the Sleep Physionet dataset using Chambon2018 network", "Sleep staging on the Sleep Physionet dataset using Eldele2021", "Sleep staging on the Sleep Physionet dataset using U-Sleep network", "Process a big data EEG resource (TUH EEG Corpus)", "Computation times", "Benchmarking eager and lazy loading", "Loading and organizing data", "Benchmarking preprocessing with parallelization and serialization", "Custom Dataset Example", "Load and save dataset example", "MNE Dataset Example", "MOABB Dataset Example", "Split Dataset Example", "Multiple discrete targets with the TUH EEG Corpus", "Computation times", "Examples", "Basic model building and training", "Simple training on MNE epochs", "Cropped Decoding on BCIC IV 2a Dataset", "Basic Brain Decoding on EEG Data", "How to train, test and tune your model?", "Hyperparameter tuning with scikit-learn", "Convolutional neural network regression model on fake data.", "Training a Braindecode model in PyTorch", "Computation times", "How to cite Braindecode", "braindecode.augmentation.AugmentedDataLoader", "braindecode.augmentation.BandstopFilter", "braindecode.augmentation.ChannelsDropout", "braindecode.augmentation.ChannelsShuffle", "braindecode.augmentation.ChannelsSymmetry", "braindecode.augmentation.Compose", "braindecode.augmentation.FTSurrogate", "braindecode.augmentation.FrequencyShift", "braindecode.augmentation.GaussianNoise", "braindecode.augmentation.IdentityTransform", "braindecode.augmentation.Mixup", "braindecode.augmentation.SensorsRotation", "braindecode.augmentation.SensorsXRotation", "braindecode.augmentation.SensorsYRotation", "braindecode.augmentation.SensorsZRotation", "braindecode.augmentation.SignFlip", "braindecode.augmentation.SmoothTimeMask", "braindecode.augmentation.TimeReverse", "braindecode.augmentation.Transform", "braindecode.augmentation.functional.bandstop_filter", "braindecode.augmentation.functional.channels_dropout", "braindecode.augmentation.functional.channels_permute", "braindecode.augmentation.functional.channels_shuffle", "braindecode.augmentation.functional.frequency_shift", "braindecode.augmentation.functional.ft_surrogate", "braindecode.augmentation.functional.gaussian_noise", "braindecode.augmentation.functional.identity", "braindecode.augmentation.functional.mixup", "braindecode.augmentation.functional.sensors_rotation", "braindecode.augmentation.functional.sign_flip", "braindecode.augmentation.functional.smooth_time_mask", "braindecode.augmentation.functional.time_reverse", "braindecode.classifier.EEGClassifier", "braindecode.datasets.BCICompetitionIVDataset4", "braindecode.datasets.BNCI2014001", "braindecode.datasets.BaseConcatDataset", "braindecode.datasets.BaseDataset", "braindecode.datasets.HGD", "braindecode.datasets.MOABBDataset", "braindecode.datasets.SleepPhysionet", "braindecode.datasets.TUH", "braindecode.datasets.TUHAbnormal", "braindecode.datasets.WindowsDataset", "braindecode.datasets.create_from_X_y", "braindecode.datasets.create_from_mne_epochs", "braindecode.datasets.create_from_mne_raw", "braindecode.datautil.load_concat_dataset", "braindecode.datautil.save_concat_dataset", "braindecode.models.ATCNet", "braindecode.models.Deep4Net", "braindecode.models.DeepSleepNet", "braindecode.models.EEGConformer", "braindecode.models.EEGITNet", "braindecode.models.EEGInception", "braindecode.models.EEGInceptionERP", "braindecode.models.EEGInceptionMI", "braindecode.models.EEGModuleMixin", "braindecode.models.EEGNetv1", "braindecode.models.EEGNetv4", "braindecode.models.EEGResNet", "braindecode.models.HybridNet", "braindecode.models.ShallowFBCSPNet", "braindecode.models.SleepStagerBlanco2020", "braindecode.models.SleepStagerChambon2018", "braindecode.models.SleepStagerEldele2021", "braindecode.models.TCN", "braindecode.models.TIDNet", "braindecode.models.TimeDistributed", "braindecode.models.USleep", "braindecode.models.get_output_shape", "braindecode.preprocessing.Crop", "braindecode.preprocessing.DropChannels", "braindecode.preprocessing.Filter", "braindecode.preprocessing.Pick", "braindecode.preprocessing.Preprocessor", "braindecode.preprocessing.Resample", "braindecode.preprocessing.SetEEGReference", "braindecode.preprocessing.create_fixed_length_windows", "braindecode.preprocessing.create_windows_from_events", "braindecode.preprocessing.create_windows_from_target_channels", "braindecode.preprocessing.exponential_moving_demean", "braindecode.preprocessing.exponential_moving_standardize", "braindecode.preprocessing.filterbank", "braindecode.preprocessing.preprocess", "braindecode.preprocessing.scale", "braindecode.regressor.EEGRegressor", "braindecode.samplers.BalancedSequenceSampler", "braindecode.samplers.RecordingSampler", "braindecode.samplers.RelativePositioningSampler", "braindecode.samplers.SequenceSampler", "braindecode.training.CroppedLoss", "braindecode.training.CroppedTimeSeriesEpochScoring", "braindecode.training.CroppedTrialEpochScoring", "braindecode.training.PostEpochTrainScoring", "braindecode.training.TimeSeriesLoss", "braindecode.training.mixup_criterion", "braindecode.training.predict_trials", "braindecode.training.trial_preds_from_window_preds", "braindecode.util.set_random_seeds", "braindecode.visualization.compute_amplitude_gradients", "braindecode.visualization.plot_confusion_matrix", "Frequently Asked Questions (FAQ)", "Braindecode", "Installation", "Installing from PyPI", "Installing from sources", "braindecode package", "braindecode.augmentation package", "braindecode.datasets package", "braindecode.datautil package", "braindecode.models package", "braindecode.preprocessing package", "braindecode.samplers package", "braindecode.training package", "braindecode.visualization package", "braindecode", "What\u2019s new"], "terms": {"thi": [0, 2, 8, 9, 10, 11, 14, 16, 17, 18, 19, 20, 22, 31, 47, 48, 49, 67, 68, 69, 70, 72, 74, 75, 76, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 107, 111, 113, 115, 116, 120, 122, 128, 133, 136, 140, 141, 142, 143, 145, 146, 147, 148, 151], "i": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 26, 27, 28, 30, 31, 34, 36, 40, 41, 42, 45, 46, 51, 53, 54, 58, 59, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 109, 110, 111, 112, 113, 118, 120, 123, 128, 132, 133, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 151], "class": [0, 3, 4, 5, 9, 10, 11, 12, 14, 21, 26, 27, 28, 29, 30, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 59, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 135, 141, 142, 143, 145, 146, 147, 148, 149, 151], "camelcas": 0, "name": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 21, 22, 26, 29, 30, 32, 39, 67, 69, 70, 71, 72, 73, 78, 81, 106, 107, 108, 109, 111, 120, 126, 127, 128, 141, 142, 143, 144, 145, 146, 148, 151], "function": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 20, 22, 26, 27, 28, 30, 31, 32, 34, 41, 53, 67, 70, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 105, 109, 111, 113, 120, 126, 127, 128, 133, 141, 143, 144, 146, 148, 149, 150, 151], "underscore_cas": 0, "braindecod": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 138, 139, 151], "base": [0, 2, 3, 4, 5, 8, 9, 10, 12, 16, 18, 20, 21, 26, 27, 28, 29, 30, 31, 32, 35, 43, 45, 60, 62, 67, 69, 70, 83, 85, 86, 87, 88, 89, 90, 92, 93, 99, 105, 107, 108, 112, 113, 120, 122, 130, 141, 146, 148, 150, 151], "datautil": [0, 5, 18, 77, 141, 143, 150, 151], "exampl": [1, 2, 8, 9, 10, 11, 14, 15, 16, 22, 23, 25, 31, 36, 38, 39, 43, 44, 45, 46, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 111, 136, 142, 143, 145, 146, 147, 151], "explain": [1, 4, 24, 27, 87, 145], "more": [1, 2, 3, 4, 5, 8, 9, 10, 11, 16, 21, 22, 24, 26, 27, 28, 29, 30, 67, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 105, 106, 107, 108, 110, 111, 118, 120, 133, 140, 141, 145, 146, 151], "topic": [1, 24, 34], "finger": [1, 6, 7, 13, 24, 68, 70, 72, 91, 96, 104, 109, 112, 114, 116, 118, 126, 127, 129, 133, 143, 151], "flexion": [1, 6, 7, 13, 24, 68, 70, 91, 96, 104, 109, 112, 114, 116, 118, 126, 127, 129, 133, 143, 151], "crop": [1, 6, 8, 10, 11, 12, 16, 20, 24, 25, 29, 30, 31, 32, 33, 67, 68, 70, 73, 74, 77, 91, 96, 104, 109, 112, 113, 116, 118, 120, 125, 126, 127, 129, 131, 133, 135, 141, 143, 146, 148, 150, 151], "decod": [1, 3, 4, 6, 7, 11, 13, 20, 22, 24, 25, 26, 29, 30, 31, 32, 33, 34, 67, 68, 70, 73, 78, 84, 86, 91, 95, 96, 103, 104, 109, 112, 113, 114, 116, 118, 120, 125, 126, 127, 129, 131, 133, 135, 137, 141, 143, 145, 148, 149, 151], "bcic": [1, 6, 7, 13, 20, 24, 25, 29, 32, 33, 35, 37, 40, 41, 42, 50, 51, 53, 68, 70, 73, 91, 96, 104, 109, 112, 113, 114, 116, 118, 125, 126, 127, 129, 133, 135, 151], "iv": [1, 6, 7, 13, 20, 21, 24, 25, 26, 28, 29, 30, 32, 33, 35, 37, 40, 41, 42, 50, 51, 53, 68, 70, 73, 83, 90, 91, 96, 104, 109, 112, 113, 114, 116, 118, 125, 126, 127, 129, 133, 135, 143, 145, 151], "4": [1, 3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 68, 69, 70, 72, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 101, 103, 104, 109, 112, 114, 116, 117, 118, 121, 122, 126, 127, 129, 133, 143, 145, 146, 147], "ecog": [1, 6, 7, 13, 24, 68, 70, 91, 96, 104, 109, 111, 112, 114, 116, 118, 126, 127, 129, 133, 137, 143, 146, 151], "dataset": [1, 6, 13, 14, 15, 16, 23, 25, 26, 33, 35, 37, 40, 41, 42, 50, 51, 53, 67, 81, 83, 90, 91, 96, 98, 99, 102, 103, 104, 109, 112, 113, 114, 116, 118, 120, 122, 124, 125, 126, 127, 129, 131, 133, 134, 135, 136, 137, 139, 140, 141, 142, 144, 145, 146, 148, 149, 150, 151], "data": [1, 2, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 21, 25, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 57, 60, 62, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 81, 86, 91, 96, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 118, 119, 120, 130, 133, 135, 136, 137, 141, 142, 143, 144, 145, 146, 148, 149, 151], "augment": [1, 6, 24, 70, 73, 86, 91, 96, 109, 113, 116, 118, 133, 137, 141, 145, 150, 151], "2a": [1, 6, 20, 21, 24, 25, 26, 28, 29, 30, 32, 33, 35, 37, 40, 41, 42, 50, 51, 53, 70, 73, 83, 90, 91, 96, 109, 113, 116, 118, 125, 133, 135, 145, 151], "search": [1, 6, 24, 29, 30, 35, 37, 41, 51, 53, 67, 70, 73, 91, 96, 109, 113, 116, 118, 120, 133, 136, 141, 151], "best": [1, 6, 24, 32, 35, 37, 41, 51, 53, 70, 73, 91, 96, 109, 113, 116, 118, 133], "self": [1, 4, 6, 11, 24, 32, 67, 70, 74, 83, 86, 91, 98, 109, 113, 118, 120, 122, 123, 124, 133, 136, 141, 143, 145, 147, 151], "supervis": [1, 4, 6, 24, 29, 32, 70, 74, 91, 98, 109, 113, 118, 122, 123, 133, 147, 151], "learn": [1, 2, 3, 4, 6, 8, 9, 10, 11, 24, 25, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 43, 45, 51, 54, 55, 56, 57, 60, 62, 65, 67, 70, 73, 74, 84, 88, 89, 91, 95, 96, 98, 99, 109, 113, 116, 118, 120, 122, 123, 133, 135, 137, 139, 141, 142, 143, 145, 147, 149, 151], "eeg": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 17, 20, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 72, 73, 74, 75, 76, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 107, 108, 109, 111, 112, 113, 116, 118, 119, 122, 123, 130, 133, 135, 137, 142, 143, 145, 146, 147, 148, 149, 151], "rel": [1, 6, 24, 29, 30, 70, 74, 91, 98, 109, 113, 118, 122, 123, 133, 147], "posit": [1, 6, 24, 27, 36, 46, 47, 48, 49, 51, 54, 63, 65, 70, 74, 91, 98, 109, 113, 118, 122, 123, 132, 133, 142, 143, 147, 148], "go": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 105, 146], "end": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 34, 67, 90, 105, 110, 112, 113, 120, 126, 127, 128, 141, 145, 146, 148, 151], "download": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 68, 75, 76, 139, 141, 143], "full": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 133, 141], "code": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 83, 86, 87, 88, 89, 99, 100, 101, 136, 138, 140, 143, 145, 151], "tutori": [2, 3, 4, 5, 8, 9, 10, 11, 22, 24, 26, 27, 28, 29, 30, 32, 140, 151], "show": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 21, 26, 28, 29, 30, 31, 32, 72, 91, 143, 145, 151], "you": [2, 3, 4, 5, 8, 9, 11, 12, 16, 17, 18, 19, 21, 22, 24, 27, 28, 29, 32, 34, 67, 120, 128, 136, 138, 139, 140, 141, 143, 145, 148], "how": [2, 3, 4, 5, 8, 9, 10, 11, 12, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 33, 67, 70, 73, 91, 96, 105, 109, 111, 113, 116, 118, 120, 133, 141, 145, 146, 151], "deep": [2, 3, 4, 5, 8, 9, 10, 11, 14, 26, 27, 28, 29, 30, 31, 32, 34, 43, 60, 84, 88, 89, 95, 96, 98, 99, 101, 135, 137, 139, 142, 143, 145, 149], "bci": [2, 4, 8, 21, 26, 27, 28, 29, 30, 41, 59, 68, 69, 83, 90, 101, 142, 143, 145], "competit": [2, 4, 8, 11, 14, 21, 26, 27, 28, 29, 30, 68, 69, 88, 89, 143, 145], "us": [2, 3, 4, 7, 8, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 34, 36, 38, 39, 43, 45, 46, 47, 48, 49, 52, 55, 57, 59, 60, 63, 67, 69, 72, 77, 83, 86, 87, 88, 89, 90, 92, 94, 95, 97, 100, 101, 105, 107, 108, 110, 111, 120, 128, 131, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151], "mode": [2, 24, 32, 67, 84, 107, 110, 120, 128, 140, 141, 145, 146, 148, 151], "For": [2, 4, 5, 8, 14, 26, 27, 28, 29, 32, 67, 103, 107, 111, 120, 122, 128, 130, 133, 137, 138, 139, 140, 141, 145, 146, 147, 148], "we": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 24, 26, 27, 28, 29, 30, 32, 34, 72, 86, 120, 133, 136, 139, 140, 141, 143, 145], "predict": [2, 4, 5, 8, 9, 10, 11, 27, 28, 31, 67, 71, 91, 102, 120, 125, 126, 127, 128, 129, 130, 131, 132, 141, 143, 145, 148, 150, 151], "5": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 67, 69, 83, 84, 85, 86, 88, 89, 90, 96, 97, 98, 99, 103, 120, 141, 143, 145], "regress": [2, 5, 8, 24, 25, 30, 33, 71, 120, 141, 151], "target": [2, 4, 5, 8, 9, 10, 15, 17, 18, 20, 23, 24, 27, 28, 29, 31, 45, 53, 62, 67, 68, 70, 71, 75, 77, 78, 80, 81, 112, 113, 120, 121, 122, 125, 126, 129, 130, 131, 135, 141, 142, 143, 144, 146, 147, 148, 149, 151], "correspond": [2, 5, 8, 12, 21, 29, 30, 31, 36, 39, 67, 68, 69, 70, 77, 78, 80, 111, 113, 118, 120, 121, 129, 141, 142, 143, 146, 147, 148], "each": [2, 4, 8, 9, 10, 11, 12, 14, 16, 17, 19, 21, 22, 26, 29, 30, 31, 35, 36, 37, 41, 46, 50, 52, 54, 55, 59, 63, 64, 66, 67, 68, 69, 70, 72, 74, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 107, 110, 112, 113, 120, 122, 124, 126, 127, 128, 132, 141, 142, 143, 145, 146, 147, 148], "The": [2, 3, 4, 5, 8, 10, 11, 12, 14, 16, 18, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 51, 58, 67, 69, 71, 72, 77, 83, 86, 88, 89, 90, 92, 93, 94, 95, 97, 99, 103, 105, 106, 107, 108, 110, 111, 117, 120, 130, 131, 135, 138, 140, 141, 142, 143, 145, 146, 148, 149], "were": [2, 8, 9, 11, 14, 19, 26, 30, 69, 70, 72, 86, 97, 107, 143, 145, 146, 151], "record": [2, 4, 8, 9, 10, 11, 14, 16, 21, 22, 26, 31, 68, 69, 72, 74, 75, 76, 80, 84, 85, 86, 87, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100, 111, 112, 113, 121, 122, 123, 143, 145, 146, 147, 151], "time": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 52, 66, 67, 68, 70, 74, 77, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 115, 116, 120, 121, 125, 126, 129, 132, 141, 142, 143, 145, 146, 147, 148, 151], "seri": [2, 4, 5, 8, 9, 10, 29, 30, 31, 67, 71, 77, 80, 97, 98, 120, 122, 126, 141, 143, 145, 147, 148, 151], "25": [2, 4, 5, 8, 9, 11, 12, 14, 29, 31, 32, 69, 83, 84, 85, 86, 88, 89, 92, 93, 96, 98, 107, 143, 145, 146], "hz": [2, 3, 4, 5, 8, 9, 11, 16, 27, 29, 30, 31, 36, 42, 54, 58, 69, 83, 86, 90, 103, 107, 142, 143, 145, 146], "so": [2, 5, 8, 9, 10, 11, 14, 16, 18, 26, 27, 28, 29, 30, 32, 36, 39, 67, 103, 112, 117, 120, 141, 142, 143, 145, 146, 151], "an": [2, 5, 8, 10, 12, 14, 18, 21, 22, 26, 27, 29, 30, 32, 40, 46, 47, 48, 49, 53, 67, 69, 71, 72, 77, 80, 83, 84, 85, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 102, 103, 106, 107, 109, 110, 111, 113, 120, 122, 128, 136, 137, 141, 142, 143, 145, 146, 147, 148, 151], "author": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 31, 34, 86, 87, 88, 89, 90, 92, 93, 145], "maciej": [2, 8, 151], "sliwowski": [2, 8], "maciek": [2, 8], "gmail": [2, 5, 8, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 31], "com": [2, 3, 5, 8, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 31, 75, 76, 140, 143, 145], "moham": [2, 8, 151], "fattouh": [2, 8, 151], "mo": [2, 8], "licens": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 31], "bsd": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 31], "3": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 30, 31, 32, 43, 45, 46, 60, 62, 63, 67, 68, 69, 72, 74, 83, 84, 88, 89, 90, 91, 94, 97, 101, 120, 121, 122, 131, 138, 141, 142, 143, 145, 147, 148, 151], "claus": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26], "first": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 26, 27, 28, 30, 39, 51, 65, 67, 70, 74, 75, 76, 83, 84, 86, 96, 99, 107, 110, 111, 113, 120, 136, 140, 141, 142, 143, 145, 146], "In": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 18, 20, 21, 26, 27, 28, 29, 30, 32, 36, 43, 45, 46, 47, 48, 49, 51, 54, 60, 62, 63, 65, 67, 69, 107, 108, 111, 120, 133, 141, 142, 143, 146], "avail": [2, 3, 4, 8, 9, 10, 11, 12, 14, 16, 18, 19, 22, 26, 27, 28, 29, 30, 32, 68, 74, 86, 88, 89, 99, 112, 113, 121, 122, 143, 145, 146, 147], "part": [2, 8, 16, 17, 19, 28, 29, 32, 37, 38, 51, 55, 57, 65, 86, 88, 89, 142, 143, 145], "librari": [2, 3, 4, 8, 24, 26, 28, 29, 30, 34, 68, 140, 143], "http": [2, 4, 5, 8, 12, 26, 27, 28, 29, 30, 34, 45, 62, 67, 68, 74, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 103, 120, 130, 133, 135, 140, 141, 142, 143, 145, 148, 149], "searchwork": [2, 8, 68, 143], "stanford": [2, 8, 68, 143], "edu": [2, 4, 8, 68, 143], "view": [2, 4, 8, 22, 68, 143], "zk881ps0522": [2, 8, 68, 143], "contain": [2, 5, 8, 12, 14, 16, 18, 21, 22, 26, 31, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 51, 54, 62, 63, 65, 67, 68, 70, 73, 74, 77, 111, 112, 113, 120, 121, 122, 123, 129, 130, 136, 141, 142, 143, 145, 146, 147, 148, 151], "signal": [2, 3, 4, 5, 8, 9, 10, 11, 12, 18, 20, 26, 28, 29, 30, 31, 35, 36, 37, 38, 41, 42, 46, 47, 48, 49, 51, 54, 55, 57, 58, 59, 63, 65, 69, 71, 74, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 107, 110, 111, 112, 113, 117, 120, 123, 141, 142, 143, 145, 146, 147, 151], "differ": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 18, 21, 26, 27, 28, 29, 30, 69, 88, 89, 90, 103, 123, 138, 141, 143, 145, 147], "than": [2, 5, 8, 9, 10, 11, 12, 14, 16, 27, 32, 36, 54, 67, 80, 107, 113, 120, 141, 142, 143, 146, 151], "standard": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 32, 35, 43, 46, 47, 48, 49, 60, 63, 111, 116, 142, 146, 151], "setup": [2, 4, 8, 27, 138], "multipl": [2, 3, 4, 8, 9, 10, 14, 15, 16, 21, 23, 24, 27, 29, 30, 67, 70, 75, 90, 102, 103, 107, 111, 112, 117, 120, 131, 141, 145, 146, 148, 151], "trial": [2, 3, 4, 8, 19, 21, 27, 28, 29, 30, 31, 32, 67, 69, 72, 78, 80, 113, 120, 126, 127, 131, 132, 141, 143, 146, 148, 151], "usual": [2, 3, 4, 8, 16, 29, 32, 67, 120, 141], "one": [2, 4, 8, 9, 10, 11, 14, 16, 20, 26, 27, 29, 30, 32, 40, 45, 51, 65, 67, 69, 70, 83, 86, 90, 91, 103, 111, 112, 113, 120, 121, 122, 123, 136, 141, 142, 143, 145, 146, 147], "per": [2, 4, 5, 8, 9, 10, 11, 27, 45, 51, 65, 69, 72, 74, 90, 101, 111, 142, 143, 145, 146, 151], "here": [2, 3, 4, 5, 8, 10, 11, 12, 21, 22, 24, 26, 27, 28, 29, 30, 32, 42, 58, 80, 90, 113, 142, 143, 145, 146], "chang": [2, 5, 8, 14, 18, 31, 44, 67, 111, 120, 128, 140, 141, 142, 146, 148], "ar": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 32, 34, 36, 45, 62, 67, 70, 77, 78, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 107, 108, 111, 112, 113, 117, 120, 123, 125, 129, 136, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 151], "sampl": [2, 3, 4, 5, 8, 9, 10, 14, 16, 17, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 41, 42, 45, 46, 47, 48, 49, 51, 54, 57, 58, 59, 65, 67, 69, 71, 72, 74, 78, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 107, 112, 113, 121, 122, 123, 124, 130, 136, 141, 142, 143, 144, 145, 146, 147, 148, 151], "frequenc": [2, 3, 4, 8, 11, 12, 16, 17, 26, 27, 28, 29, 30, 31, 32, 36, 42, 54, 58, 72, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 107, 110, 117, 121, 141, 142, 143, 145, 146, 147, 151], "equal": [2, 8, 32, 78, 79, 80, 91, 104, 112, 143, 145, 146], "If": [2, 8, 14, 18, 19, 22, 26, 29, 30, 32, 34, 36, 45, 67, 68, 69, 70, 72, 73, 74, 75, 76, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 121, 123, 124, 128, 129, 130, 131, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148], "pleas": [2, 3, 4, 5, 8, 11, 12, 22, 26, 27, 28, 29, 30, 32, 68, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 117, 140, 143, 145, 146, 151], "cite": [2, 8, 68, 143], "1": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 30, 31, 33, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 59, 60, 62, 63, 65, 67, 68, 69, 70, 72, 74, 75, 76, 81, 83, 84, 88, 89, 90, 91, 94, 96, 97, 99, 101, 103, 104, 107, 110, 111, 112, 113, 114, 115, 116, 120, 121, 122, 130, 131, 132, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149], "miller": [2, 8, 27, 28, 29, 30, 68, 143], "kai": [2, 8, 68, 143], "j": [2, 4, 5, 8, 26, 27, 28, 29, 30, 31, 36, 39, 41, 43, 51, 54, 56, 59, 60, 65, 68, 84, 87, 92, 93, 95, 96, 98, 100, 101, 135, 142, 143, 145, 149], "A": [2, 3, 4, 5, 8, 9, 10, 16, 27, 28, 29, 30, 31, 35, 37, 38, 41, 53, 55, 57, 59, 67, 68, 70, 73, 75, 76, 85, 88, 89, 90, 92, 93, 97, 98, 101, 107, 111, 112, 113, 118, 120, 123, 131, 135, 141, 142, 143, 145, 146, 147, 148, 149, 151], "human": [2, 8, 26, 31, 34, 39, 56, 68, 84, 95, 96, 107, 135, 142, 143, 145, 146, 149], "electrocorticograph": [2, 8, 68, 143], "analys": [2, 8, 29, 30, 68, 143], "natur": [2, 8, 14, 68, 143], "behaviour": [2, 8, 68, 143], "11": [2, 3, 4, 5, 8, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 28, 29, 31, 32, 68, 85, 143, 145], "2019": [2, 8, 31, 68, 143], "1225": [2, 8, 68, 143], "1235": [2, 8, 68, 143], "doi": [2, 8, 10, 26, 27, 28, 29, 30, 34, 68, 83, 84, 87, 88, 89, 95, 96, 97, 99, 101, 135, 143, 145, 149], "org": [2, 4, 5, 8, 26, 27, 28, 29, 30, 34, 45, 62, 67, 68, 74, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 103, 120, 130, 133, 135, 141, 142, 143, 145, 148, 149], "10": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 17, 18, 19, 20, 21, 23, 26, 27, 28, 29, 30, 31, 32, 34, 39, 46, 47, 48, 49, 63, 67, 68, 83, 84, 86, 87, 88, 89, 95, 96, 97, 99, 101, 107, 111, 120, 121, 135, 141, 142, 143, 145, 146, 147, 149], "1038": [2, 8, 68, 143], "s41562": [2, 8, 68, 143], "019": [2, 8, 68, 97, 143, 145], "0678": [2, 8, 68, 143], "import": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 41, 59, 136, 140, 142], "copi": [2, 11, 16, 41, 59, 68, 105, 136, 142, 143, 146], "numpi": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 17, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 63, 67, 107, 110, 120, 133, 135, 141, 142, 146, 149], "np": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 26, 29, 31, 32, 67, 115, 116, 120, 121, 122, 123, 124, 131, 141, 145, 146, 147, 148], "sklearn": [2, 4, 5, 8, 9, 10, 11, 16, 27, 28, 29, 30, 31, 67, 120, 128, 135, 141, 148, 149, 151], "from": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 37, 38, 41, 45, 46, 47, 48, 49, 55, 57, 59, 63, 67, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 111, 112, 113, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 138, 141, 142, 143, 144, 145, 146, 147, 148, 151], "mne": [2, 3, 4, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 25, 28, 30, 33, 46, 63, 68, 70, 71, 74, 77, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 120, 136, 141, 142, 145, 146, 150, 151], "set_log_level": [2, 8, 12, 14, 22], "bcicompetitionivdataset4": [2, 8, 141, 143, 150, 151], "subject_id": [2, 3, 4, 5, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 27, 28, 29, 30, 32, 68, 69, 72, 73, 74, 143, 151], "can": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 26, 27, 28, 29, 30, 32, 34, 42, 46, 63, 67, 70, 74, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 106, 107, 108, 110, 111, 120, 131, 138, 139, 141, 142, 143, 145, 146, 148, 151], "easili": [2, 8, 20, 26, 28, 29, 30, 32, 122, 147], "addit": [2, 8, 12, 17, 20, 21, 26, 28, 29, 30, 32, 43, 60, 67, 69, 70, 71, 77, 80, 113, 120, 135, 141, 142, 143, 145, 146, 149], "info": [2, 3, 4, 8, 12, 14, 16, 17, 19, 20, 21, 26, 27, 28, 29, 30, 32, 70, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 107, 108, 111, 122, 124, 136, 141, 143, 145, 146, 147, 151], "store": [2, 4, 8, 9, 10, 11, 12, 14, 18, 22, 28, 29, 30, 32, 68, 70, 81, 143, 144, 151], "descript": [2, 3, 5, 8, 12, 17, 18, 19, 20, 22, 27, 28, 29, 30, 32, 68, 69, 70, 71, 75, 76, 77, 80, 81, 83, 86, 88, 90, 92, 93, 94, 95, 97, 103, 112, 113, 141, 143, 144, 145, 146], "attribut": [2, 8, 26, 28, 29, 30, 32, 67, 71, 77, 109, 120, 141, 143, 146, 151], "case": [2, 8, 16, 21, 26, 27, 28, 29, 30, 32, 67, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 111, 120, 133, 139, 141, 145, 146, 151], "session": [2, 4, 8, 12, 18, 20, 21, 22, 27, 28, 29, 30, 31, 32, 69, 72, 122, 143, 147], "column": [2, 8, 16, 18, 19, 21, 22, 27, 28, 29, 30, 32, 70, 77, 81, 91, 121, 122, 135, 143, 144, 145, 147, 149], "select": [2, 4, 8, 9, 16, 20, 27, 28, 29, 30, 32, 36, 72, 111, 121, 142, 143, 146, 147], "valid": [2, 21, 26, 27, 31, 32, 67, 99, 111, 112, 113, 120, 128, 129, 141, 145, 146, 148, 151], "final": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 26, 27, 28, 29, 30, 32, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 116, 145, 146], "evalu": [2, 3, 4, 5, 8, 9, 10, 11, 14, 21, 27, 28, 30, 100, 145], "train_set": [2, 3, 4, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32], "test_set": [2, 8, 29, 31, 32], "now": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 22, 26, 27, 28, 30, 111, 140, 146, 151], "appli": [2, 3, 4, 5, 8, 9, 10, 12, 16, 18, 19, 20, 26, 27, 28, 29, 30, 32, 35, 36, 37, 38, 39, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 67, 71, 77, 97, 98, 102, 107, 109, 111, 117, 118, 120, 130, 141, 142, 143, 145, 146, 148, 151], "like": [2, 8, 16, 26, 28, 29, 30, 32, 36, 41, 46, 54, 59, 63, 67, 78, 79, 80, 99, 107, 108, 120, 122, 140, 141, 142, 143, 145, 146, 147, 151], "bandpass": [2, 3, 4, 8, 20, 27, 28, 29, 30, 32, 69, 107, 117, 143, 146], "filter": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 20, 26, 27, 28, 29, 30, 32, 36, 54, 69, 83, 84, 86, 88, 89, 90, 93, 96, 98, 100, 101, 103, 109, 110, 117, 141, 142, 143, 145, 146, 150, 151], "our": [2, 5, 8, 9, 10, 11, 12, 16, 20, 26, 27, 28, 30, 32, 72, 138, 143], "either": [2, 8, 26, 28, 29, 30, 67, 69, 70, 72, 91, 107, 111, 120, 131, 141, 143, 145, 146, 148], "provid": [2, 8, 9, 10, 11, 26, 28, 30, 32, 34, 67, 69, 70, 71, 75, 76, 102, 107, 108, 109, 118, 120, 136, 141, 143, 145, 146], "raw": [2, 3, 4, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 27, 28, 29, 30, 31, 70, 71, 74, 75, 76, 80, 85, 105, 106, 107, 108, 109, 111, 112, 113, 117, 137, 141, 143, 145, 146, 151], "epoch": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 17, 18, 19, 24, 25, 27, 28, 29, 30, 31, 32, 33, 67, 70, 77, 79, 80, 91, 96, 105, 106, 107, 108, 109, 111, 112, 113, 120, 123, 126, 127, 128, 141, 143, 146, 147, 148, 151], "your": [2, 3, 4, 8, 14, 16, 21, 24, 25, 27, 28, 30, 33, 34, 67, 70, 73, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 109, 113, 116, 118, 120, 133, 136, 138, 141, 145], "own": [2, 8, 27, 28, 29, 30, 32, 72, 136, 143, 145], "object": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 18, 19, 21, 27, 28, 29, 30, 31, 32, 40, 71, 74, 75, 76, 77, 80, 105, 109, 112, 113, 118, 135, 141, 142, 143, 145, 146, 149, 151], "underli": [2, 5, 8, 28, 30, 109, 146], "arrai": [2, 4, 8, 11, 17, 22, 26, 28, 29, 30, 36, 46, 53, 54, 63, 67, 78, 79, 80, 107, 108, 109, 110, 120, 124, 131, 135, 141, 142, 143, 145, 146, 147, 148, 149], "step": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 18, 22, 28, 29, 30, 32, 80, 113, 136, 143, 146], "taken": [2, 5, 8, 14], "process": [2, 4, 5, 7, 8, 13, 14, 15, 16, 22, 24, 29, 30, 70, 75, 109, 112, 118, 119, 143, 151], "pipelin": [2, 5, 8, 29, 32], "onli": [2, 4, 5, 8, 9, 10, 11, 12, 14, 18, 21, 26, 27, 29, 30, 32, 40, 53, 67, 72, 74, 80, 87, 88, 89, 90, 92, 93, 105, 107, 108, 110, 111, 113, 120, 129, 136, 140, 141, 142, 143, 145, 146, 148, 151], "cutoff": [2, 8, 16, 107, 146], "proper": [2, 8], "other": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 18, 26, 29, 30, 32, 53, 67, 72, 74, 83, 84, 85, 91, 94, 95, 96, 97, 98, 99, 100, 103, 120, 141, 142, 143, 145], "mai": [2, 3, 4, 5, 8, 9, 10, 11, 16, 18, 27, 28, 29, 32, 34, 67, 120, 128, 133, 136, 141, 148], "need": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 26, 27, 28, 29, 32, 67, 83, 86, 90, 120, 133, 138, 141, 145, 151], "These": [2, 5, 8, 26, 27, 28, 30], "prepocess": [2, 8, 28, 30], "directli": [2, 3, 5, 8, 12, 22, 26, 27, 28, 30, 31, 67, 77, 109, 111, 120, 140, 141, 143, 146], "fly": [2, 8, 28, 30, 71, 77, 143, 151], "transform": [2, 5, 8, 9, 10, 11, 20, 27, 28, 29, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 71, 77, 78, 79, 80, 86, 91, 120, 141, 143, 145, 150, 151], "pytorch": [2, 8, 14, 22, 24, 25, 26, 27, 28, 30, 33, 67, 70, 73, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 109, 113, 116, 118, 120, 131, 133, 139, 141, 145, 148, 151], "torchvis": [2, 8, 28, 30], "exponential_moving_standard": [2, 3, 4, 8, 27, 28, 29, 30, 32, 141, 146, 150], "preprocessor": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 18, 20, 27, 28, 29, 30, 32, 118, 141, 146, 150, 151], "low_cut_hz": [2, 3, 4, 8, 27, 28, 29, 30, 32], "low": [2, 3, 4, 5, 8, 9, 10, 11, 16, 27, 28, 29, 30, 32, 36, 54, 88, 89, 107, 142, 145, 146], "high_cut_hz": [2, 3, 4, 5, 8, 9, 10, 27, 28, 29, 30, 32], "200": [2, 8, 10, 11, 14, 84, 145], "high": [2, 3, 4, 8, 11, 27, 28, 29, 30, 32, 36, 54, 72, 88, 89, 103, 107, 121, 142, 143, 145, 146, 147], "higher": [2, 5, 8, 32, 99, 145], "paramet": [2, 3, 4, 5, 8, 10, 14, 16, 17, 18, 19, 26, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151], "exponenti": [2, 3, 4, 8, 27, 28, 29, 30, 32, 103, 115, 116, 145, 146], "move": [2, 3, 4, 8, 14, 16, 27, 28, 29, 30, 32, 68, 91, 115, 116, 143, 145, 146, 151], "factor_new": [2, 3, 4, 8, 27, 28, 29, 30, 32, 115, 116, 146], "1e": [2, 3, 4, 8, 9, 10, 11, 27, 28, 29, 30, 32, 145], "init_block_s": [2, 3, 4, 8, 27, 28, 29, 30, 32, 115, 116, 146], "1000": [2, 3, 4, 8, 12, 22, 26, 27, 28, 29, 30, 32, 72, 88, 89, 122, 143, 145, 147], "30": [2, 5, 8, 9, 10, 11, 16, 22, 27, 31, 32, 74, 96, 97, 98, 99, 103, 143, 145], "second": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 30, 31, 32, 39, 69, 72, 75, 76, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 105, 142, 143, 145, 146], "limit": [2, 5, 8, 11, 12, 16, 26, 105, 146], "memori": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 113, 146], "run": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 67, 69, 72, 80, 83, 86, 90, 97, 107, 109, 110, 113, 120, 122, 133, 136, 140, 141, 143, 145, 146, 147, 151], "6": [2, 3, 4, 5, 9, 10, 11, 12, 16, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 31, 32, 33, 69, 72, 86, 107, 143, 145, 146], "To": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 17, 22, 26, 27, 28, 29, 30, 31, 32, 107, 139, 140, 145, 146], "obtain": [2, 3, 4, 5, 8, 9, 11, 27, 28, 46, 63, 67, 71, 72, 77, 120, 122, 141, 142, 143, 145, 147], "whole": [2, 8, 9, 10], "should": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 20, 26, 27, 28, 30, 36, 39, 46, 51, 54, 63, 65, 67, 68, 70, 71, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 105, 107, 108, 110, 111, 120, 128, 136, 140, 141, 142, 143, 145, 146, 148], "valid_set": [2, 3, 8, 9, 10, 11, 27, 28, 31], "deepcopi": 2, "tmin": [2, 8, 12, 16, 19, 105, 146], "24": [2, 5, 10, 11, 12, 27, 32, 33, 97, 101, 108, 145, 146], "tmax": [2, 8, 12, 105, 146], "n_job": [2, 3, 4, 5, 12, 14, 16, 27, 28, 29, 30, 32, 75, 76, 81, 107, 110, 112, 113, 114, 118, 143, 144, 146, 151], "0": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 41, 43, 44, 45, 53, 55, 57, 59, 62, 67, 69, 70, 74, 75, 76, 80, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 120, 122, 131, 135, 141, 142, 143, 145, 146, 147, 148, 149], "variabl": [2, 4, 8, 29, 30, 68, 133, 141, 143, 145], "channel": [2, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 19, 26, 31, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 51, 55, 56, 57, 58, 59, 60, 62, 63, 65, 74, 77, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 106, 107, 108, 111, 112, 113, 117, 141, 142, 143, 145, 146, 151], "type": [2, 3, 4, 8, 11, 26, 27, 28, 29, 32, 36, 37, 38, 39, 41, 42, 43, 45, 46, 51, 62, 67, 70, 72, 78, 79, 80, 81, 90, 91, 102, 104, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 122, 124, 130, 132, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151], "misc": [2, 4, 8, 77, 143], "thu": [2, 4, 8, 105, 146], "those": [2, 4, 5, 8, 12, 67, 107, 108, 120, 141, 143, 146], "have": [2, 4, 5, 8, 11, 12, 14, 16, 17, 19, 21, 26, 27, 28, 29, 30, 32, 46, 51, 63, 65, 67, 78, 79, 80, 90, 109, 111, 112, 120, 128, 136, 139, 140, 141, 142, 143, 145, 146, 148, 151], "further": [2, 4, 5, 8, 9, 10, 11, 27, 29, 32, 67, 120, 141], "howev": [2, 3, 4, 5, 8, 11, 14, 16, 21, 26, 27, 28, 29, 113, 146], "mani": [2, 4, 5, 8, 16, 26, 27, 29, 32, 70, 143], "ignor": [2, 4, 8, 51, 67, 83, 86, 90, 106, 109, 112, 113, 120, 123, 141, 142, 145, 146, 147], "perform": [2, 4, 8, 9, 10, 11, 26, 27, 28, 29, 30, 32, 69, 70, 72, 83, 86, 90, 99, 115, 116, 143, 145, 146, 151], "oper": [2, 3, 4, 8, 16, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 61, 105, 110, 141, 142, 145, 146], "see": [2, 3, 4, 5, 8, 9, 10, 11, 16, 20, 21, 24, 26, 27, 28, 29, 30, 32, 45, 62, 67, 68, 69, 72, 74, 76, 77, 87, 91, 92, 93, 95, 100, 101, 105, 106, 107, 108, 110, 111, 112, 113, 118, 120, 121, 123, 124, 130, 133, 136, 139, 140, 141, 142, 143, 145, 146, 147, 148], "tool": [2, 4, 8, 74, 137, 140, 143], "stabl": [2, 4, 5, 8, 16, 26, 67, 74, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 120, 133, 135, 141, 143, 145, 149], "glossari": [2, 4, 8], "html": [2, 4, 5, 8, 12, 26, 67, 74, 75, 76, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 120, 133, 135, 141, 143, 145, 149], "term": [2, 4, 8, 85, 91, 141, 145], "todo": 2, "ensur": [2, 103, 133, 139, 141, 145], "remov": [2, 3, 4, 5, 8, 9, 11, 21, 26, 27, 28, 29, 30, 31, 32, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 106, 111, 132, 145, 146, 148, 151], "pick_typ": [2, 3, 4, 8, 20, 27, 28, 29, 30, 32, 106, 146], "true": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 26, 27, 28, 29, 30, 31, 32, 45, 46, 47, 48, 49, 67, 70, 71, 74, 75, 76, 77, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 109, 111, 112, 113, 114, 117, 120, 123, 124, 126, 127, 128, 131, 133, 141, 142, 143, 145, 146, 147, 148, 151], "lambda": [2, 3, 4, 5, 8, 9, 10, 12, 27, 28, 29, 30, 32, 67, 94, 120, 141, 145], "x": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 20, 22, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 79, 80, 83, 85, 86, 90, 95, 97, 98, 99, 100, 101, 102, 103, 110, 115, 116, 120, 125, 128, 129, 131, 141, 142, 143, 145, 146, 148, 149], "1e6": [2, 3, 4, 5, 8, 9, 10, 12, 27, 28, 29, 30, 32], "pick": [2, 8, 10, 12, 20, 107, 112, 113, 114, 141, 146, 150, 151], "convert": [2, 3, 4, 5, 8, 9, 10, 12, 17, 19, 27, 28, 29, 30, 31, 32, 107, 141, 146], "v": [2, 3, 4, 5, 8, 9, 10, 12, 16, 27, 28, 29, 30, 32, 88, 89, 92, 93, 100, 145], "uv": [2, 3, 4, 5, 8, 9, 10, 12, 27, 28, 29, 30, 32], "l_freq": [2, 3, 4, 5, 8, 9, 10, 16, 27, 28, 29, 30, 32, 107, 146], "h_freq": [2, 3, 4, 5, 8, 9, 10, 16, 27, 28, 29, 30, 32, 107, 146], "extract": [2, 8, 12, 14, 16, 17, 19, 22, 27, 32, 77, 88, 89, 90, 97, 99, 112, 113, 121, 123, 143, 145, 146, 147], "check": [2, 3, 4, 8, 9, 10, 11, 26, 27, 28, 29, 30, 32, 34, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 103, 136, 139, 143, 145, 151], "thei": [2, 3, 4, 8, 14, 16, 26, 27, 28, 29, 30, 32, 111, 146, 151], "same": [2, 3, 4, 5, 8, 9, 10, 11, 14, 18, 21, 27, 28, 29, 30, 32, 42, 51, 58, 65, 67, 72, 74, 99, 120, 123, 141, 142, 143, 145, 147], "all": [2, 3, 4, 8, 12, 14, 16, 24, 26, 27, 28, 29, 30, 32, 42, 43, 51, 58, 60, 65, 67, 68, 69, 72, 73, 74, 83, 86, 88, 89, 90, 91, 105, 107, 108, 110, 111, 112, 113, 120, 128, 141, 142, 143, 145, 146, 148, 151], "sfreq": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 26, 27, 28, 29, 30, 31, 32, 36, 42, 54, 58, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 107, 120, 141, 142, 143, 145, 146, 151], "assert": [2, 3, 4, 8, 12, 14, 27, 28, 29, 30, 32], "d": [2, 3, 4, 5, 8, 12, 14, 22, 26, 27, 28, 29, 30, 31, 32, 37, 38, 41, 55, 57, 59, 83, 84, 93, 95, 96, 97, 101, 123, 135, 142, 145, 147, 149, 151], "target_sfreq": [2, 8], "temp": [2, 8], "contrast": [2, 4, 5, 27, 36, 43, 51, 54, 60, 65, 142], "trialwis": [2, 4, 8, 20, 27, 28, 30, 67, 120, 131, 141, 148, 151], "befor": [2, 11, 16, 27, 28, 29, 30, 32, 67, 70, 71, 74, 77, 83, 84, 85, 86, 97, 98, 99, 115, 116, 120, 128, 133, 139, 141, 143, 145, 146, 148, 151], "becaus": [2, 16, 26, 27, 29, 30, 136], "know": [2, 3, 4, 26, 27], "recept": [2, 27, 67, 120, 131, 141, 148], "field": [2, 27, 67, 111, 120, 131, 141, 146, 148], "network": [2, 4, 5, 7, 8, 10, 13, 14, 25, 26, 27, 28, 29, 32, 33, 34, 43, 60, 67, 70, 71, 74, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 109, 113, 118, 120, 122, 124, 131, 133, 135, 141, 142, 143, 145, 148, 149, 151], "larg": [2, 5, 14, 16, 26, 27, 70, 113, 143, 146], "stride": [2, 9, 10, 11, 26, 27, 78, 79, 80, 84, 86, 91, 96, 101, 112, 113, 141, 143, 145, 146], "choos": [2, 3, 4, 8, 18, 27, 28, 29, 30, 32], "input": [2, 3, 4, 8, 10, 11, 14, 21, 26, 27, 28, 29, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 120, 141, 142, 145, 151], "size": [2, 3, 4, 5, 11, 14, 16, 26, 27, 28, 29, 30, 31, 32, 36, 51, 54, 65, 67, 78, 79, 80, 83, 86, 88, 89, 90, 91, 97, 98, 100, 101, 103, 104, 107, 110, 112, 113, 120, 123, 125, 129, 131, 135, 141, 142, 143, 145, 146, 147, 148, 149], "fed": [2, 27, 47, 48, 49, 142], "dure": [2, 4, 5, 8, 9, 10, 11, 12, 14, 27, 28, 29, 30, 32, 67, 68, 107, 111, 120, 141, 143, 145, 146, 151], "ha": [2, 3, 4, 5, 8, 10, 12, 20, 21, 22, 27, 28, 29, 30, 31, 32, 47, 48, 49, 67, 70, 71, 74, 77, 80, 87, 88, 89, 90, 92, 93, 103, 107, 113, 120, 130, 136, 141, 142, 143, 145, 146, 148, 151], "larger": [2, 5, 27, 88, 89, 145], "otherwis": [2, 14, 27, 29, 31, 80, 113, 143, 146], "chosen": [2, 16, 18, 27, 32, 51, 67, 107, 120, 131, 141, 142, 146, 148], "effici": [2, 3, 16, 27], "explan": [2, 27, 117, 118, 146], "begin": [2, 27, 29, 30, 69, 97, 107, 112, 143, 145, 146], "which": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 20, 21, 24, 26, 27, 29, 30, 32, 34, 35, 38, 41, 46, 57, 59, 63, 67, 70, 71, 72, 77, 91, 99, 102, 107, 110, 111, 120, 122, 123, 124, 136, 141, 142, 143, 145, 146, 147], "rate": [2, 5, 14, 27, 28, 29, 30, 31, 32, 67, 72, 86, 88, 89, 97, 98, 99, 103, 120, 141, 143, 144, 145, 151], "input_window_sampl": [2, 3, 4, 8, 14, 26, 27, 28, 29, 30, 31, 32, 84, 86, 87, 88, 89, 92, 93, 94, 95, 96, 101, 104, 145], "come": [2, 8, 14, 28, 30, 32, 124, 133, 141, 147], "some": [2, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 22, 26, 27, 28, 30, 34, 67, 70, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 111, 120, 133, 141, 143, 145, 146], "predefin": [2, 8, 28, 30, 145], "convolut": [2, 5, 8, 9, 11, 24, 25, 26, 27, 28, 29, 30, 33, 34, 41, 43, 59, 60, 71, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 103, 135, 142, 143, 145, 149, 151], "neural": [2, 4, 5, 8, 9, 10, 11, 14, 25, 26, 27, 28, 29, 33, 34, 43, 60, 71, 84, 85, 86, 88, 89, 90, 91, 95, 96, 97, 98, 99, 101, 104, 135, 142, 143, 145, 149, 151], "architectur": [2, 5, 8, 9, 10, 11, 26, 27, 28, 30, 67, 85, 86, 97, 98, 99, 103, 120, 137, 141, 145], "domain": [2, 4, 8, 16, 28, 30, 42, 58, 103, 107, 110, 142, 145, 146], "shallow": [2, 8, 14, 26, 27, 28, 31, 96, 145], "convnet": [2, 8, 26, 27, 28, 84, 95, 96, 145, 149], "visual": [2, 8, 9, 10, 11, 12, 26, 27, 28, 30, 31, 34, 72, 84, 86, 95, 96, 137, 141, 143, 145, 150, 151], "pure": [2, 5, 8, 28, 30, 151], "therefor": [2, 8, 12, 16, 27, 28, 29, 30, 32, 128, 148], "just": [2, 4, 8, 22, 26, 28, 29, 30, 67, 84, 96, 120, 141, 145], "normal": [2, 5, 8, 9, 10, 28, 30, 97, 98, 122, 135, 145, 147, 149, 151], "nn": [2, 3, 4, 5, 8, 9, 10, 11, 14, 26, 27, 28, 29, 30, 31, 32, 67, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 120, 131, 141, 145, 148], "modul": [2, 4, 5, 8, 9, 10, 11, 14, 26, 28, 30, 32, 67, 83, 86, 88, 89, 90, 99, 102, 120, 131, 133, 135, 139, 150, 151], "torch": [2, 3, 4, 5, 8, 9, 10, 11, 14, 22, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 120, 125, 129, 130, 131, 133, 141, 142, 145, 148, 151], "util": [2, 3, 4, 5, 8, 9, 10, 11, 14, 18, 22, 26, 27, 28, 30, 31, 32, 67, 120, 142, 150, 151], "set_random_se": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32, 141, 150, 151], "shallowfbcspnet": [2, 3, 4, 8, 14, 26, 27, 28, 29, 30, 31, 32, 141, 145], "cuda": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32, 67, 107, 110, 120, 133, 139, 141, 146], "is_avail": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32], "gpu": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 32, 67, 120, 139, 141, 151], "devic": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32, 35, 67, 120, 141, 142, 151], "els": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 27, 28, 29, 30, 31, 32, 67, 120, 141], "cpu": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 32, 67, 120, 141], "backend": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32, 133, 141, 151], "cudnn": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32, 133, 141, 151], "benchmark": [2, 3, 4, 5, 8, 9, 10, 11, 15, 23, 24, 27, 28, 29, 30, 31, 32, 76, 84, 96, 112, 133, 141, 151], "set": [2, 4, 8, 9, 10, 11, 12, 14, 16, 17, 19, 22, 26, 27, 29, 30, 31, 32, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 62, 67, 69, 70, 72, 84, 88, 89, 90, 96, 97, 98, 101, 103, 105, 108, 111, 112, 113, 120, 133, 139, 141, 142, 143, 145, 146, 151], "random": [2, 3, 4, 5, 8, 9, 10, 11, 26, 27, 28, 30, 31, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 72, 121, 122, 123, 124, 128, 133, 141, 142, 143, 147, 148, 151], "seed": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 60, 133, 141, 142], "abl": [2, 3, 4, 5, 8, 9, 10, 11, 12, 27, 28, 30, 67, 120, 136, 141], "roughli": [2, 3, 4, 5, 8, 9, 11, 27, 28, 72, 143], "reproduc": [2, 3, 4, 5, 8, 9, 10, 11, 24, 27, 28, 30, 133, 141, 151], "note": [2, 3, 4, 5, 8, 9, 11, 17, 20, 26, 27, 28, 42, 58, 67, 68, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 108, 111, 120, 128, 133, 141, 142, 143, 145, 146, 148], "indetermin": [2, 3, 4, 5, 8, 9, 11, 27, 28], "still": [2, 3, 4, 5, 8, 9, 11, 27, 28, 29, 72, 143], "make": [2, 3, 4, 5, 8, 9, 11, 12, 27, 28, 29, 30, 32, 99, 107, 136, 143, 145, 146, 151], "substanti": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28], "between": [2, 3, 4, 5, 8, 9, 11, 26, 27, 28, 29, 36, 37, 38, 41, 42, 45, 46, 47, 48, 49, 53, 54, 55, 57, 59, 62, 69, 78, 79, 80, 84, 86, 96, 97, 105, 112, 113, 124, 129, 141, 142, 143, 145, 146, 147, 148], "consist": [2, 3, 4, 5, 8, 9, 11, 27, 28, 47, 48, 49, 69, 72, 142, 143], "cost": [2, 3, 4, 5, 8, 9, 11, 27, 28], "increas": [2, 3, 4, 5, 8, 9, 10, 11, 16, 27, 28, 29, 32, 90, 99, 145], "cudnn_benchmark": [2, 3, 4, 5, 8, 9, 11, 27, 28, 133, 141], "fals": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 26, 27, 28, 29, 30, 31, 32, 41, 45, 46, 47, 48, 49, 59, 63, 67, 68, 70, 71, 74, 75, 76, 77, 80, 82, 83, 84, 85, 86, 91, 96, 97, 98, 99, 100, 103, 105, 109, 111, 112, 113, 114, 117, 118, 120, 123, 124, 126, 127, 133, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151], "20200220": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "n_class": [2, 3, 4, 9, 10, 11, 14, 26, 27, 28, 29, 30, 31, 32, 67, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 120, 125, 129, 131, 141, 145, 148], "number": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 22, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 60, 63, 65, 67, 70, 74, 75, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 107, 110, 112, 113, 117, 118, 120, 121, 122, 123, 124, 131, 132, 141, 142, 143, 144, 145, 146, 147, 148], "chan": [2, 3, 4, 8, 27, 28, 29, 30, 32, 72, 143], "n_chan": [2, 8, 11, 26, 27, 28, 30, 31, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 120, 141, 145], "shape": [2, 3, 4, 5, 8, 9, 10, 11, 17, 20, 22, 26, 27, 28, 29, 30, 32, 46, 63, 67, 85, 86, 91, 95, 97, 98, 99, 100, 101, 102, 103, 104, 124, 125, 129, 141, 142, 145, 147, 148], "final_conv_length": [2, 3, 4, 8, 14, 26, 27, 28, 29, 30, 31, 32, 84, 92, 93, 96, 145, 151], "2": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 31, 36, 37, 38, 41, 42, 43, 45, 51, 54, 59, 60, 62, 65, 67, 69, 72, 74, 83, 84, 88, 89, 91, 92, 93, 94, 97, 99, 101, 103, 107, 111, 116, 120, 121, 122, 130, 131, 141, 142, 143, 145, 146, 147, 148], "softmax": [26, 27, 31, 67, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 120, 141, 145], "layer": [3, 4, 5, 9, 10, 11, 26, 27, 28, 29, 30, 31, 32, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 145, 151], "new_model": [], "sequenti": [3, 4, 5, 9, 10, 11, 16, 26, 27, 28, 29, 30, 32, 72, 91, 143, 145], "module_": [3, 9, 10, 11, 26, 67, 120, 141, 150], "named_children": [], "continu": [14, 16, 20, 71, 72, 78, 79, 80, 112, 113, 139, 143, 146, 151], "add_modul": [], "send": [2, 3, 4, 8, 9, 10, 11, 16, 27, 28, 29, 30, 32], "to_dense_prediction_model": [2, 27, 31, 91, 141, 145, 151], "get_output_shap": [2, 27, 31, 91, 141, 145, 151], "calcul": [2, 3, 4, 27, 28, 29, 30, 32, 101, 145], "output": [2, 3, 4, 5, 11, 12, 14, 21, 26, 27, 28, 29, 30, 31, 32, 67, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 111, 112, 113, 120, 141, 145, 146], "dummi": [2, 27], "n_preds_per_input": [2, 27, 31], "create_fixed_length_window": [2, 5, 12, 14, 16, 22, 31, 141, 146, 150, 151], "It": [2, 3, 4, 8, 9, 10, 11, 18, 27, 28, 29, 30, 32, 41, 59, 67, 70, 77, 80, 99, 113, 120, 137, 141, 142, 143, 145, 146], "defin": [2, 5, 9, 10, 11, 12, 14, 20, 21, 27, 28, 30, 39, 53, 56, 67, 77, 83, 86, 90, 101, 113, 120, 123, 141, 142, 143, 145, 146, 147], "start_offset_sampl": [2, 14, 22, 31, 112, 146], "stop_offset_sampl": [2, 14, 22, 31, 112, 146, 151], "none": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 18, 19, 20, 22, 26, 27, 28, 29, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 120, 121, 122, 123, 124, 126, 127, 128, 133, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151], "window_size_sampl": [2, 5, 8, 9, 10, 11, 12, 14, 17, 19, 22, 27, 31, 78, 79, 80, 112, 113, 114, 143, 146], "window_stride_sampl": [2, 5, 9, 10, 11, 12, 14, 17, 19, 22, 27, 31, 78, 79, 80, 112, 113, 143, 146], "drop_last_window": [2, 12, 14, 17, 19, 22, 27, 31, 78, 79, 80, 112, 113, 143, 146], "targets_from": [2, 77, 112, 120, 141, 143, 146], "last_target_onli": [2, 8, 77, 112, 114, 143, 146], "preload": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 22, 27, 28, 29, 30, 31, 32, 74, 75, 76, 80, 81, 111, 112, 113, 114, 118, 143, 144, 146, 151], "thumb": [2, 8, 27], "": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 21, 22, 26, 28, 30, 31, 32, 39, 41, 43, 46, 47, 48, 49, 56, 59, 60, 63, 67, 68, 69, 71, 72, 73, 74, 75, 76, 83, 89, 90, 92, 93, 98, 100, 103, 106, 107, 109, 111, 120, 121, 125, 128, 129, 141, 142, 143, 145, 146, 147, 148], "method": [2, 4, 5, 8, 12, 16, 21, 26, 29, 31, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 67, 68, 70, 71, 77, 83, 85, 86, 90, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 111, 120, 121, 122, 123, 125, 126, 127, 128, 129, 141, 145, 146, 148, 151], "consid": [2, 4, 29, 32, 47, 48, 49, 67, 120, 128, 141, 142, 148], "well": [2, 5, 8, 12, 26, 27, 28, 29, 32, 80, 113, 137, 143, 146, 151], "encourag": [2, 8, 24, 27, 28], "find": [2, 4, 8, 30], "wai": [2, 5, 8, 16, 21, 24, 26, 29, 99, 138, 140, 145], "target_transform": [2, 8, 9, 10, 70, 141, 143, 151], "suppli": [2, 3, 5, 8, 9, 10, 11, 27, 28, 29, 141], "eegclassifi": [2, 5, 9, 10, 11, 26, 27, 28, 29, 30, 141, 150, 151], "croppedloss": [2, 27, 31, 141, 148, 150], "criterion": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 67, 120, 141], "criterion__loss_funct": [2, 27, 31], "loss": [2, 3, 4, 5, 8, 9, 10, 11, 14, 26, 27, 28, 29, 30, 31, 32, 67, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 120, 125, 129, 130, 141, 145, 150], "mean": [2, 3, 4, 8, 10, 12, 14, 16, 26, 27, 29, 30, 31, 32, 72, 84, 93, 96, 111, 115, 116, 120, 136, 141, 143, 145, 146], "default": [2, 8, 11, 12, 27, 28, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 67, 68, 74, 75, 76, 77, 80, 83, 84, 86, 88, 89, 90, 91, 105, 106, 107, 108, 110, 111, 113, 120, 128, 133, 141, 142, 143, 145, 146, 148, 151], "found": [2, 8, 10, 12, 16, 18, 19, 20, 26, 27, 28, 29, 32, 68, 111, 112, 113, 141, 143, 146], "work": [2, 8, 12, 16, 20, 22, 24, 27, 28, 67, 91, 103, 105, 120, 128, 137, 139, 141, 145, 146, 148, 151], "motor": [2, 4, 8, 27, 28, 69, 72, 83, 87, 90, 143, 145, 151], "strongli": [2, 8, 27, 28, 88, 89, 90, 145], "hyperparamet": [2, 5, 8, 9, 10, 11, 14, 24, 25, 27, 28, 32, 33, 45, 67, 70, 73, 91, 96, 109, 113, 116, 118, 120, 133, 141, 142, 151], "optim": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32, 67, 72, 120, 141, 143], "cross": [2, 8, 16, 27, 28, 69, 143], "skorch": [2, 3, 4, 5, 8, 9, 10, 11, 17, 26, 27, 28, 29, 30, 31, 67, 78, 79, 80, 120, 141, 143, 148, 151], "callback": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32, 67, 120, 128, 141, 150], "lrschedul": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "helper": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31], "predefined_split": [2, 3, 5, 8, 9, 10, 11, 27, 28, 29, 31], "timeseriesloss": [2, 141, 148, 150], "eegregressor": [2, 8, 26, 31, 141, 150, 151], "croppedtimeseriesepochscor": [2, 141, 148, 150], "valu": [2, 4, 5, 8, 9, 10, 11, 12, 26, 27, 28, 30, 31, 32, 42, 45, 62, 67, 70, 71, 77, 80, 90, 101, 107, 108, 110, 111, 112, 113, 120, 129, 130, 131, 141, 142, 143, 145, 146, 148, 151], "good": [2, 8, 26, 27, 28], "mi": [2, 8], "lr": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32, 67, 120, 141], "0625": [2, 3, 4, 8, 27, 28, 29, 32], "01": [2, 3, 4, 8, 12, 13, 26, 27, 28, 29, 32, 33, 67, 88, 89, 120, 141, 145], "weight_decai": [2, 3, 4, 8, 27, 28, 29, 32], "batch_siz": [2, 3, 4, 5, 8, 9, 10, 11, 14, 22, 27, 28, 29, 30, 31, 32, 36, 45, 46, 54, 62, 63, 67, 85, 86, 91, 95, 97, 98, 99, 100, 101, 102, 104, 120, 125, 129, 131, 134, 141, 142, 145, 148, 149], "27": [2, 4, 9, 11, 29, 72, 143], "64": [2, 3, 4, 8, 10, 11, 14, 17, 19, 27, 28, 29, 30, 32, 83, 93, 98, 145], "n_epoch": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32], "8": [2, 3, 4, 5, 8, 9, 10, 11, 14, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 31, 32, 83, 86, 88, 89, 92, 93, 98, 117, 138, 145, 146], "regressor": [2, 8, 26, 31, 150, 151], "aggregate_predict": [2, 67, 120, 141], "mse_loss": [2, 31], "adamw": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "train_split": [2, 3, 4, 5, 8, 9, 10, 11, 26, 27, 28, 29, 30, 31, 67, 120, 141], "optimizer__lr": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 67, 120, 141], "optimizer__weight_decai": [2, 3, 4, 8, 27, 28, 29, 31], "iterator_train__shuffl": [2, 5, 9, 10, 11, 27, 31, 67, 120, 141], "lr_schedul": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "cosineannealinglr": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "t_max": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "r2_train": 2, "metric": [2, 5, 9, 10, 11, 27, 28, 32, 135, 149], "r2_score": 2, "lower_is_bett": [2, 5, 8, 9, 10, 11, 126, 127, 128, 148], "on_train": [2, 5, 8, 9, 10, 11, 126, 127, 148], "r2_valid": 2, "verbos": [2, 3, 4, 8, 29, 30, 67, 68, 105, 107, 108, 110, 111, 112, 113, 114, 120, 141, 143, 146, 151], "warn": [2, 3, 4, 5, 8, 9, 10, 12, 14, 16, 18, 26, 27, 28, 29, 30, 31, 32, 69, 99, 106, 112, 113, 133, 141, 143, 145, 146, 151], "specifi": [2, 3, 5, 8, 9, 10, 11, 12, 18, 21, 22, 26, 27, 28, 29, 67, 68, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 107, 111, 118, 120, 141, 143, 145, 146], "y": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 20, 22, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 79, 80, 85, 86, 90, 110, 120, 128, 141, 142, 143, 145, 146, 148], "alreadi": [2, 3, 5, 8, 9, 10, 11, 14, 19, 27, 28, 29, 70, 71, 77, 118, 120, 136, 138, 141, 143, 146], "fit": [2, 3, 5, 8, 9, 10, 11, 14, 24, 26, 27, 28, 29, 30, 31, 32, 67, 113, 120, 141, 146, 150], "def": [2, 3, 5, 8, 9, 10, 11, 12, 14, 16, 29, 31, 32], "pad_and_select_predict": 2, "pred": [2, 8, 32, 125, 129, 130, 132, 148], "pad": [2, 9, 10, 11, 27, 98, 107, 110, 141, 145, 146, 151], "constant": 2, "constant_valu": 2, "mask": [2, 5, 51, 65, 129, 142, 148], "isnan": 2, "squeez": [2, 3, 4, 26, 27, 28, 29, 30, 32, 145], "return": [2, 5, 8, 9, 10, 11, 12, 14, 17, 19, 21, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 75, 76, 77, 78, 79, 80, 81, 85, 86, 91, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122, 128, 130, 131, 132, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151], "t": [2, 4, 5, 11, 16, 17, 18, 19, 26, 27, 28, 29, 30, 31, 32, 41, 59, 67, 68, 69, 84, 95, 96, 103, 105, 115, 116, 120, 133, 135, 141, 142, 143, 145, 146, 149], "preds_train": [2, 8], "y_train": [2, 8, 9, 10, 11, 29], "predict_tri": [2, 67, 120, 141, 148, 150, 151], "return_target": [2, 67, 120, 131, 141, 148], "preds_valid": [2, 8], "y_valid": [2, 8], "preds_test": [2, 8], "y_test": [2, 8, 29], "adn": [], "decreas": [2, 8, 11], "nede": [], "doe": [2, 8, 14, 16, 18, 27, 29, 32, 44, 67, 83, 91, 113, 120, 136, 141, 142, 145, 146], "divers": [2, 4, 8], "caus": [2, 8], "overfit": [2, 8, 9, 10, 11, 29], "better": [2, 5, 8, 10, 14, 16, 27, 28, 29, 32, 86, 128, 145, 148, 151], "improv": [2, 3, 5, 8, 9, 10, 11, 32, 107, 136, 146, 151], "matplotlib": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 30, 31, 135, 149], "pyplot": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 30, 31], "plt": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 30, 31], "line": [2, 8, 14, 27, 28, 31, 69, 136, 143, 145], "line2d": [2, 8, 27, 28], "panda": [2, 4, 5, 8, 9, 10, 11, 14, 16, 20, 21, 27, 28, 29, 30, 31, 67, 70, 71, 77, 80, 120, 141, 143], "pd": [2, 4, 5, 8, 9, 10, 11, 14, 16, 27, 28, 29, 30, 31, 70, 71, 77, 121, 122, 123, 124, 143, 147], "style": [2, 5, 8, 27, 28, 47, 48, 49, 101, 142, 145], "seaborn": [14, 29, 30], "fig": [2, 4, 5, 8, 9, 10, 11, 16, 27, 28, 29, 30, 31, 135, 149], "ax": [2, 3, 4, 5, 8, 9, 10, 11, 16, 27, 28, 29, 30, 31, 91, 145], "subplot": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 30, 31], "figsiz": [2, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 31, 135, 149], "9": [2, 3, 4, 5, 8, 9, 10, 11, 13, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 69, 72, 88, 90, 103, 111, 143, 145, 146], "set_titl": [2, 8, 16, 31], "arang": [2, 8], "label": [2, 3, 5, 8, 9, 10, 11, 12, 16, 22, 26, 27, 28, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 102, 120, 123, 125, 129, 131, 135, 141, 142, 145, 147, 148, 149], "set_ylabel": [2, 5, 8, 9, 10, 11, 16, 27, 28, 31], "legend": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 31], "set_xlabel": [2, 4, 5, 8, 9, 10, 11, 16, 27, 28, 31], "tight_layout": [2, 4, 5, 8, 9, 10, 11, 27, 28, 30], "correl": [2, 8, 27, 29, 141], "coeffici": [2, 8, 45, 62, 130, 142, 148], "corr_coeff": [2, 8], "dim": [2, 8], "rang": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 26, 27, 28, 29, 31, 32, 41, 59, 68, 117, 135, 142, 143, 146, 149], "append": [2, 8, 12, 14, 16, 27, 28, 31, 67, 107, 120, 141, 146], "corrcoef": [2, 8], "print": [2, 4, 5, 8, 9, 10, 11, 14, 17, 20, 21, 22, 26, 27, 28, 29, 30, 32, 67, 120, 136, 141, 145], "dimens": [2, 5, 8, 51, 65, 83, 86, 99, 103, 110, 142, 145, 146, 151], "round": [2, 8], "histori": [2, 5, 8, 9, 10, 11, 27, 28, 31, 67, 120, 141], "throughout": [2, 8, 9, 10, 11, 28, 29, 32], "accuraci": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 32, 128, 148, 151], "curv": [2, 8, 28], "results_column": [2, 8, 27, 28], "train_loss": [2, 3, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32, 67, 120, 141], "valid_loss": [2, 3, 5, 8, 9, 10, 11, 26, 27, 28, 29, 30, 31], "df": [2, 5, 8, 9, 10, 11, 12, 16, 27, 28], "datafram": [2, 4, 5, 8, 9, 10, 11, 14, 16, 20, 21, 22, 27, 28, 29, 30, 67, 70, 120, 121, 122, 123, 124, 141, 143, 147], "index": [2, 5, 8, 9, 10, 11, 17, 27, 28, 30, 31, 71, 105, 115, 116, 121, 122, 132, 138, 143, 146, 147, 148], "ax1": [2, 5, 8, 9, 10, 11, 27, 28], "loc": [2, 8, 12, 26, 27, 28, 29], "marker": [2, 5, 8, 16, 27, 28], "o": [2, 4, 5, 8, 16, 27, 28, 36, 37, 38, 39, 43, 51, 54, 55, 56, 57, 60, 65, 123, 142, 145, 147], "color": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 135, 149], "tab": [2, 5, 8, 16, 27, 28], "blue": [2, 5, 8, 16, 27, 28], "fontsiz": [2, 8, 12, 27, 28], "14": [2, 5, 8, 9, 11, 13, 16, 17, 19, 22, 27, 28, 32, 72, 107, 133, 141, 143, 146], "tick_param": [2, 5, 8, 12, 27, 28], "axi": [2, 3, 5, 8, 27, 28, 31, 46, 47, 48, 49, 50, 52, 63, 64, 66, 91, 110, 132, 141, 142, 145, 146, 148], "labelcolor": [2, 5, 8, 27, 28], "labels": [2, 8, 12, 27, 28], "ax2": [2, 5, 8, 9, 10, 11, 27, 28], "twinx": [2, 5, 8, 27, 28], "instanti": [2, 3, 4, 8, 14, 26, 27, 28, 32, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 60, 67, 73, 120, 141, 142, 143, 151], "share": [2, 8, 14, 27, 28], "red": [2, 8, 27, 28], "r2": [2, 8], "score": [2, 4, 5, 9, 10, 11, 29, 30, 67, 85, 97, 120, 126, 127, 128, 141, 145, 150, 151], "where": [2, 4, 8, 9, 10, 22, 27, 28, 29, 36, 45, 46, 51, 54, 62, 63, 65, 67, 68, 70, 78, 120, 131, 133, 141, 142, 143, 148, 151], "been": [2, 3, 4, 8, 10, 14, 16, 21, 27, 28, 29, 30, 32, 87, 88, 89, 90, 91, 92, 93, 130, 136, 140, 145, 148, 151], "handl": [2, 3, 4, 8, 27, 28, 30, 111, 146], "black": [2, 8, 12, 27, 28, 69, 72, 135, 143, 149], "linewidth": [2, 8, 27, 28], "linestyl": [2, 8, 12, 27, 28], "h": [2, 4, 5, 8, 27, 28, 36, 39, 43, 51, 54, 56, 60, 65, 83, 85, 87, 123, 142, 145, 147], "get_label": [2, 8, 27, 28], "center": [2, 8, 9, 10, 29, 36, 54, 142], "right": [2, 4, 8, 12, 27, 28, 29, 32, 39, 69, 72, 140, 142, 143], "total": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 69, 143], "script": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 133, 141], "minut": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 74, 143], "000": [5, 6, 14, 16, 17, 18, 19, 22, 23, 31, 33], "estim": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32], "usag": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 136, 151], "mb": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33], "python": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 34, 105, 133, 137, 138, 140, 141, 143, 145, 146, 151], "sourc": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149], "plot_bcic_iv_4_ecog_crop": [2, 6], "py": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33], "jupyt": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32], "notebook": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32], "ipynb": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32], "galleri": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32], "gener": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 67, 91, 97, 100, 107, 120, 128, 135, 141, 142, 145, 146, 148, 149, 151], "sphinx": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32], "follow": [3, 4, 5, 9, 10, 11, 14, 26, 29, 32, 88, 89, 107, 110, 113, 120, 138, 139, 140, 141, 145, 146, 151], "wise": [3, 4, 5, 9, 10, 11, 145], "also": [3, 4, 5, 9, 10, 11, 12, 14, 18, 21, 26, 28, 34, 67, 77, 86, 88, 89, 99, 107, 108, 110, 120, 131, 136, 139, 140, 141, 143, 145, 146, 148], "illustr": [3, 29], "effect": 3, "simon": [3, 20, 151], "brandt": [3, 20, 151], "simonbrandt": [3, 20], "protonmail": [3, 20], "c\u00e9dric": [3, 4], "rommel": [3, 4, 151], "cedric": [3, 4, 151], "inria": [3, 4, 11], "fr": [3, 4, 11], "moabbdataset": [3, 4, 18, 20, 21, 27, 28, 29, 30, 32, 141, 143, 150, 151], "dataset_nam": [3, 4, 18, 20, 21, 27, 28, 29, 30, 32, 73, 143], "bnci2014001": [3, 4, 18, 20, 21, 29, 30, 141, 143, 150], "multipli": [3, 4, 5, 9, 10, 12, 27, 28, 29, 30, 32, 83, 88, 89, 145], "cut": [3, 4, 19, 28, 29, 30, 36, 54, 78, 107, 142, 143, 146], "38": [3, 4, 11, 27, 28, 29, 30, 31, 32, 143], "factor": [3, 4, 5, 9, 10, 12, 27, 28, 29, 30, 32, 99, 101, 103, 110, 145, 146], "meg": [3, 4, 20, 27, 28, 29, 30, 32, 34, 107, 108, 137, 146], "stim": [3, 4, 20, 27, 28, 29, 30, 32], "keep": [3, 4, 10, 11, 16, 27, 28, 29, 30, 32, 72, 74, 143, 151], "sensor": [3, 4, 27, 28, 29, 30, 32, 39, 46, 47, 48, 49, 63, 72, 142, 143], "create_windows_from_ev": [3, 4, 5, 9, 10, 11, 18, 21, 27, 28, 29, 30, 32, 141, 146, 150, 151], "trial_start_offset_second": [3, 4, 27, 28, 29, 30, 32], "start": [3, 4, 12, 14, 16, 22, 27, 28, 29, 30, 32, 51, 65, 67, 80, 105, 110, 112, 113, 120, 138, 141, 142, 143, 146], "offset": [3, 4, 16, 18, 27, 28, 29, 30, 32, 70, 80, 112, 113, 143, 146], "trial_start_offset_sampl": [3, 4, 5, 9, 10, 11, 18, 19, 21, 27, 28, 29, 30, 32, 80, 113, 143, 146], "int": [3, 4, 5, 9, 10, 14, 16, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 131, 133, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149], "windows_dataset": [3, 4, 5, 8, 9, 10, 11, 17, 18, 19, 27, 28, 29, 30, 31, 32, 78, 79, 80, 112, 113, 143, 146], "trial_stop_offset_sampl": [3, 4, 5, 9, 10, 11, 18, 19, 21, 27, 28, 29, 30, 31, 32, 80, 113, 143, 146, 151], "session_t": [18, 20, 122, 147], "session_": 20, "callabl": [3, 26, 40, 53, 67, 70, 71, 77, 84, 96, 109, 120, 128, 141, 142, 143, 145, 146, 148], "custom": [3, 4, 15, 23, 24, 35, 78, 142, 145], "loader": [3, 4, 5, 14, 32, 141, 143], "call": [3, 16, 26, 27, 29, 32, 67, 70, 77, 80, 83, 86, 90, 105, 109, 112, 113, 120, 126, 127, 128, 141, 143, 145, 146, 148], "demonstr": [3, 4, 7, 22, 24, 26, 32], "below": [3, 5, 34, 36, 136, 139, 142, 151], "illutr": 3, "purpos": [3, 14, 16, 32], "chose": 3, "frequencyshift": [3, 141, 142, 150], "randomli": [3, 5, 27, 36, 37, 38, 43, 51, 55, 57, 60, 124, 142, 147], "translat": [3, 143], "within": [3, 4, 72, 83, 86, 90, 101, 123, 141, 143, 145, 147, 151], "given": [3, 4, 5, 21, 32, 37, 38, 39, 41, 50, 52, 53, 67, 68, 81, 107, 108, 111, 120, 131, 141, 142, 143, 144, 145, 146, 148, 151], "probabl": [3, 4, 26, 30, 32, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 67, 83, 84, 87, 96, 100, 101, 120, 141, 142, 145], "actual": [3, 5, 12, 14, 22], "modifi": [3, 5, 10, 12, 41, 59, 67, 91, 105, 106, 108, 109, 117, 120, 133, 141, 142, 145, 146], "max_delta_freq": [3, 42, 142], "shift": [3, 29, 42, 58, 142], "next": [3, 4, 5, 9, 10, 11, 12, 14, 16, 18, 22, 141], "let": [3, 4, 22, 26], "u": [3, 5, 7, 13, 24, 30, 70, 74, 91, 103, 109, 113, 118, 121, 122, 124, 133, 135, 140, 145, 147, 151], "result": [3, 12, 14, 16, 29, 32, 67, 80, 110, 113, 120, 128, 133, 136, 141, 143, 146, 148], "origin": [3, 11, 16, 17, 18, 19, 26, 29, 45, 46, 47, 48, 49, 51, 62, 63, 65, 70, 80, 86, 87, 88, 89, 90, 92, 93, 113, 117, 142, 143, 145, 146], "get_data": 17, "allow": [3, 5, 14, 26, 29, 30, 32, 40, 67, 80, 88, 89, 113, 120, 141, 142, 143, 145, 146, 151], "fix": [3, 39, 56, 136, 142, 151], "instead": [3, 4, 5, 8, 22, 27, 28, 29, 30, 31, 32, 67, 83, 86, 88, 90, 91, 111, 120, 141, 145, 146, 151], "x_tr": 3, "_": [3, 5, 14, 16, 17, 26, 27, 28, 31, 32, 143, 145, 151], "as_tensor": 3, "float": [3, 5, 26, 31, 32, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 63, 67, 74, 78, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 105, 107, 110, 113, 115, 116, 120, 130, 135, 141, 142, 143, 145, 146, 148, 149], "psd": 3, "plot": [3, 5, 12, 14, 16, 29, 31, 151], "plot_psd": 3, "freq": 3, "time_frequ": 3, "psd_array_multitap": 3, "fmin": 3, "fmax": 3, "100": [3, 4, 5, 8, 9, 10, 11, 12, 14, 20, 26, 27, 28, 29, 30, 31, 32, 36, 51, 69, 84, 103, 110, 142, 143, 145, 146], "log10": 3, "psds_mean": 3, "k": [3, 5, 9, 10, 11, 26, 27, 28, 30, 31, 32, 36, 43, 46, 47, 48, 49, 51, 54, 60, 63, 65, 84, 90, 95, 96, 135, 142, 143, 145, 149], "r": [3, 5, 9, 10, 11, 26, 27, 28, 29, 30, 31, 36, 43, 51, 54, 60, 65, 84, 88, 89, 92, 93, 95, 96, 135, 142, 143, 145, 149], "titl": [3, 12, 29, 30, 34], "multitap": 3, "gradiomet": 3, "xlabel": [3, 12, 29, 30], "ylabel": [3, 12, 30], "power": [3, 5, 30, 107, 110, 146], "spectral": 3, "densiti": 3, "db": [3, 16, 111, 146], "them": [3, 4, 5, 12, 14, 16, 17, 19, 26, 27, 29, 32, 67, 70, 83, 84, 85, 86, 90, 91, 94, 95, 96, 97, 98, 99, 100, 103, 120, 140, 141, 143, 145], "try": [3, 4, 12, 18, 22, 24, 30, 32, 136, 140], "its": [3, 4, 9, 10, 16, 20, 21, 26, 29, 30, 31, 67, 70, 109, 120, 141, 143, 145, 146], "comput": [3, 4, 5, 9, 10, 11, 18, 22, 34, 47, 48, 49, 67, 69, 80, 83, 86, 88, 89, 90, 92, 93, 97, 111, 113, 115, 116, 120, 125, 126, 127, 129, 133, 136, 140, 141, 142, 143, 144, 145, 146, 148, 151], "list": [3, 5, 11, 14, 16, 21, 22, 26, 27, 28, 29, 31, 32, 34, 35, 39, 40, 47, 48, 49, 56, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 106, 107, 108, 111, 112, 113, 117, 118, 120, 130, 132, 135, 141, 142, 143, 144, 145, 146, 148, 149, 151], "n_channel": [3, 4, 5, 9, 10, 14, 17, 19, 22, 29, 31, 32, 45, 46, 62, 63, 78, 83, 85, 86, 95, 97, 98, 99, 100, 101, 102, 115, 116, 141, 142, 143, 145, 146], "auto": [3, 4, 8, 14, 17, 19, 26, 28, 29, 30, 32, 67, 84, 92, 93, 96, 107, 110, 111, 120, 141, 145, 146, 151], "order": [3, 4, 12, 21, 26, 39, 47, 48, 49, 56, 67, 72, 75, 76, 107, 111, 117, 120, 124, 141, 142, 143, 146, 147, 151], "pass": [3, 4, 9, 10, 11, 16, 22, 26, 27, 28, 29, 30, 32, 35, 40, 53, 67, 73, 83, 85, 86, 90, 95, 97, 98, 99, 100, 101, 105, 107, 108, 110, 111, 120, 125, 128, 129, 141, 142, 143, 145, 146, 148, 151], "batch": [3, 4, 5, 26, 30, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 84, 85, 91, 95, 96, 97, 98, 99, 100, 101, 104, 120, 127, 131, 141, 142, 145, 148, 151], "augmenteddataload": [3, 4, 141, 142, 150, 151], "signflip": [3, 141, 142, 150], "freq_shift": 3, "sign_flip": [3, 141, 142], "iter": [3, 4, 5, 20, 22, 45, 67, 91, 106, 120, 131, 141, 142, 145, 146, 148], "argument": [3, 4, 16, 26, 29, 32, 35, 37, 38, 39, 41, 50, 52, 53, 67, 73, 105, 107, 108, 109, 110, 111, 117, 120, 128, 141, 142, 143, 145, 146, 148, 151], "clf": [3, 4, 5, 9, 10, 11, 27, 28, 29, 30], "iterator_train": [3, 4, 67, 120, 141], "tell": [3, 4, 136], "dataload": [3, 4, 5, 14, 32, 35, 67, 120, 131, 141, 142, 148], "iterator_train__transform": [3, 4], "nllloss": [3, 4, 14, 28, 29, 30, 32, 67, 141], "would": [3, 26, 27, 29, 32, 67, 84, 96, 120, 141, 145], "equival": [3, 145], "although": [3, 67, 83, 86, 90, 120, 141, 145], "composit": [3, 40, 142], "composed_transform": 3, "possibl": [3, 4, 11, 12, 16, 18, 26, 67, 69, 112, 120, 133, 136, 141, 143, 146, 151], "most": [3, 9, 10, 11, 14, 123, 136, 139, 147], "windowsdataset": [3, 18, 26, 70, 78, 79, 80, 81, 112, 113, 118, 120, 141, 143, 144, 146, 150, 151], "through": [3, 4, 11, 12, 14, 16, 20, 22, 27, 46, 63, 71, 77, 85, 97, 98, 99, 142, 143, 145, 151], "commonli": 3, "done": [3, 11, 16, 18, 26, 27, 83, 112, 113, 145, 146], "advis": [3, 30, 41, 59, 120, 141, 142, 145], "abov": [3, 14, 16, 22, 27, 29, 136, 138], "compat": [3, 14, 17, 19, 30, 67, 78, 79, 80, 120, 141, 143, 151], "plot_data_augment": [3, 6], "inde": 4, "known": [4, 67, 141, 143], "often": [4, 9, 10, 11, 28, 30], "depend": [4, 5, 9, 10, 11, 12, 14, 16, 26, 29, 30, 32, 34, 67, 72, 99, 120, 131, 138, 140, 141, 143, 145, 148, 151], "task": [4, 9, 10, 11, 26, 30, 41, 59, 69, 71, 123, 142, 143, 147], "phenomenon": 4, "studi": [4, 5, 7, 24], "methodologi": 4, "propos": [4, 37, 38, 41, 51, 55, 57, 59, 65, 90, 142, 145, 151], "openli": [4, 5, 9, 10, 11], "could": [4, 5, 14, 29, 32, 91, 140, 145], "brain": [4, 24, 25, 26, 27, 29, 30, 31, 33, 34, 70, 73, 84, 88, 89, 91, 92, 93, 95, 96, 109, 113, 116, 118, 133, 135, 137, 143, 145, 149], "recent": [4, 26, 136], "shown": [4, 5, 9, 11, 16, 29, 32, 69, 72, 143], "artifici": 4, "cast": [4, 40, 142], "paradigm": [4, 5, 67, 69, 120, 131, 141, 143, 148], "present": [4, 12, 29, 32, 69, 72, 106, 143, 146], "both": [4, 5, 16, 22, 30, 69, 72, 97, 98, 103, 141, 143, 145], "pretext": 4, "approach": [4, 5, 9, 10, 11, 16, 24, 30, 99, 121, 145, 147], "demand": 4, "intens": 4, "comparison": [4, 14, 27, 28], "strength": 4, "context": [4, 5, 29, 34, 99, 123, 145, 147], "bruno": [4, 151], "aristimunha": [4, 151], "ufabc": 4, "br": 4, "bnci": [4, 69, 143], "websit": 4, "There": [4, 24, 26, 84, 96, 138, 140, 145], "subject": [4, 5, 9, 10, 11, 12, 14, 18, 19, 20, 21, 22, 29, 36, 43, 51, 54, 60, 65, 68, 69, 71, 72, 73, 74, 122, 142, 143, 147], "22": [3, 4, 5, 11, 17, 19, 27, 28, 29, 32], "electrod": [4, 20, 69, 72, 111, 143, 146], "while": [4, 5, 14, 29, 32, 72, 83, 86, 90, 97, 132, 143, 145, 148], "do": [4, 12, 14, 26, 27, 29, 32, 67, 78, 79, 80, 103, 112, 113, 120, 124, 133, 140, 141, 143, 145, 146, 147, 151], "imageri": [4, 69, 83, 87, 90, 143, 145, 151], "144": [4, 18], "moabb": [3, 4, 15, 18, 21, 23, 24, 27, 28, 29, 30, 32, 69, 72, 73, 139, 140, 141, 150, 151], "librairi": [], "focu": 4, "relat": [4, 5, 26, 27, 34, 72, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 120, 141, 143, 145, 151], "activ": [4, 16, 18, 19, 26, 67, 72, 83, 84, 88, 89, 90, 141, 143, 145], "out": [4, 8, 9, 10, 26, 36, 51, 54, 65, 67, 69, 120, 121, 129, 136, 141, 142, 143, 147, 148], "provind": 4, "slicedataset": [4, 29, 30], "eval_set": [4, 30], "three": [4, 16, 29, 32, 67, 68, 86, 88, 89, 120, 136, 141, 143, 145], "categori": [2, 4, 31], "categor": [4, 121, 147], "aggreg": [4, 86, 145], "sever": [4, 12, 18, 24, 112, 113, 137, 146], "being": [4, 10, 14, 67, 72, 120, 141, 143], "spatial": [4, 26, 41, 59, 84, 96, 103, 142, 145, 151], "paper": [4, 11, 34, 46, 47, 48, 49, 63, 83, 86, 87, 88, 89, 90, 92, 93, 99, 142, 145, 151], "ftsurrog": [4, 141, 142, 150], "smoothtimemask": [4, 141, 142, 150], "channelsdropout": [4, 141, 142, 150], "respect": [4, 5, 30], "adjust": [3, 4, 26, 27, 28, 29, 30, 32, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 145], "two": [4, 5, 9, 10, 11, 12, 14, 16, 18, 27, 29, 32, 45, 51, 62, 69, 72, 74, 90, 97, 107, 110, 111, 123, 124, 130, 141, 142, 143, 145, 146, 147, 148], "insid": [4, 29, 30, 88, 89, 140, 143, 145], "rememb": [4, 29, 32], "\u03c6max": 4, "2\u03c0": 4, "p_drop": [4, 37, 55, 142], "linspac": [4, 12], "transforms_freq": 4, "phase_noise_magnitud": [4, 41, 59, 142], "phase_freq": 4, "random_st": [4, 5, 8, 30, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 121, 122, 123, 124, 141, 142, 147], "transforms_tim": 4, "mask_len_sampl": [4, 51, 65, 142], "transforms_spati": 4, "prob": 4, "gridsearchcv": [4, 29, 30, 128, 148, 151], "control": [4, 5, 10, 29, 67, 97, 105, 107, 108, 110, 111, 112, 113, 118, 120, 141, 145, 146, 151], "over": [4, 10, 16, 29, 31, 32, 41, 46, 47, 48, 49, 59, 63, 67, 120, 141, 142, 151], "framework": [4, 145], "necessari": [4, 67, 111, 120, 141, 146], "slicedata": 4, "mandatori": 4, "eval": [4, 30, 32, 151], "train_x": [4, 30], "idx": [3, 4, 9, 10, 11, 26, 27, 28, 29, 30, 32], "train_i": [4, 30], "kfold": [4, 29, 30], "model_select": [4, 5, 8, 29, 30], "cv": [4, 29, 30], "n_split": [4, 29, 30], "shuffl": [4, 8, 14, 29, 30, 32, 38, 45, 57, 67, 120, 141, 142, 151], "fit_param": [4, 30, 120, 141], "param_grid": [4, 29, 30], "return_train_scor": [4, 29, 30], "refit": [4, 29, 30], "error_scor": [4, 29, 30], "rais": [4, 14, 26, 29, 30, 31, 67, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 106, 113, 118, 141, 143, 145, 146, 151], "analysi": [4, 5, 9, 10, 11, 26, 34, 137], "wa": [4, 5, 9, 10, 11, 27, 28, 29, 32, 67, 69, 72, 86, 99, 120, 121, 141, 143, 145, 147, 151], "search_result": [4, 29, 30], "cv_results_": [4, 29, 30], "best_run": [4, 29, 30], "rank_test_scor": [4, 29, 30], "best_aug": 4, "param": [3, 4, 5, 11, 26, 27, 28, 29, 30, 32, 36, 37, 38, 39, 41, 42, 43, 45, 46, 51, 142], "validation_scor": 4, "around": [4, 10, 32, 46, 47, 48, 49, 63, 113, 121, 142, 146, 147], "mean_test_scor": [4, 30], "training_scor": 4, "mean_train_scor": [4, 30], "report_messag": 4, "save": [2, 3, 4, 5, 8, 9, 10, 12, 14, 15, 16, 23, 24, 27, 28, 29, 30, 32, 70, 81, 118, 141, 143, 144, 146, 151], "gave": [4, 30], "format": [4, 14, 17, 19, 26, 78, 79, 80, 141, 143], "eval_x": [4, 30], "eval_i": [4, 30], "f": [4, 5, 10, 11, 12, 14, 16, 17, 18, 22, 26, 27, 28, 29, 30, 31, 32, 43, 60, 84, 88, 89, 95, 96, 101, 135, 142, 144, 145, 149], "2f": [4, 29, 30, 32], "bar": 4, "param_iterator_train__transform": 4, "yerr": 4, "std_train_scor": 4, "rot": 4, "45": [4, 11, 16, 29], "c0": 4, "c1": 4, "c2": 4, "strategi": [4, 25, 29, 30], "set_ylim": [4, 27, 28], "32": [4, 9, 10, 11, 26, 27, 30, 83, 92, 101, 145], "c": [4, 5, 9, 10, 11, 20, 27, 28, 29, 30, 41, 59, 85, 90, 92, 93, 103, 121, 136, 142, 143, 145, 147], "paillard": 4, "moreau": [4, 151], "gramfort": [4, 5, 9, 10, 34, 98, 123, 145, 147, 151], "2022": [4, 30, 83, 86, 87, 88, 89, 145], "systemat": 4, "arxiv": [4, 5, 31, 36, 37, 38, 39, 41, 43, 45, 51, 54, 55, 56, 57, 59, 60, 62, 65, 92, 93, 100, 123, 130, 142, 145, 147, 148], "ab": [4, 5, 45, 62, 130, 142, 148], "2206": 4, "14483": 4, "banvil": [4, 5, 9, 14, 16, 20, 123, 147, 151], "chehab": [4, 5, 11, 123, 147, 151], "hyv\u00e4rinen": [4, 5, 123, 147], "engemann": [4, 5, 34, 123, 147, 151], "2021": [4, 10, 11, 88, 89, 90, 99, 103, 121, 145, 147], "uncov": [4, 5, 123, 147], "structur": [4, 5, 16, 17, 19, 122, 123, 147, 151], "clinic": [4, 5, 7, 24, 123, 147], "journal": [4, 28, 29, 30, 34, 90, 145], "engin": [4, 5, 9, 10, 28, 29, 30, 46, 47, 48, 49, 63, 85, 86, 88, 89, 90, 98, 99, 142, 145], "18": [2, 4, 5, 11, 12, 90, 145], "046020": 4, "plot_data_augmentation_search": [4, 6], "access": [5, 9, 10, 11, 12, 14, 26, 87, 122, 138, 145, 147], "physionet": [5, 7, 13, 16, 24, 70, 74, 91, 98, 99, 102, 103, 109, 113, 118, 122, 124, 133, 135, 143, 151], "ssl": [5, 141, 150], "leverag": [5, 99, 145], "unlabel": 5, "design": [5, 16, 99, 107, 145, 146], "prior": [5, 91, 145], "understand": [5, 24, 29], "under": [5, 14, 68, 118, 140, 141, 143, 146, 151], "e": [3, 4, 5, 9, 10, 11, 14, 16, 26, 27, 28, 29, 30, 32, 36, 39, 43, 51, 53, 54, 56, 60, 65, 67, 71, 74, 75, 76, 77, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 113, 117, 120, 124, 128, 135, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151], "g": [3, 4, 5, 9, 10, 11, 14, 16, 26, 27, 28, 29, 30, 32, 36, 39, 41, 43, 51, 53, 54, 56, 59, 60, 67, 71, 74, 75, 76, 77, 80, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 113, 117, 120, 124, 128, 135, 141, 142, 143, 145, 146, 147, 148, 149, 151], "autocorrel": 5, "strutur": [], "requir": [5, 11, 12, 14, 16, 17, 22, 53, 67, 72, 77, 120, 141, 142, 143, 151], "anoth": [5, 21, 29, 32, 123, 147], "interest": [5, 12, 16, 18, 22, 26], "onc": [5, 16, 29, 107, 112, 123, 140, 146, 147], "reus": [5, 9, 11], "featur": [5, 9, 10, 26, 29, 85, 86, 88, 89, 90, 91, 97, 98, 99, 103, 136, 140, 141, 145, 151], "extractor": [5, 9, 10, 85, 97, 98, 99, 103, 145], "weight": [5, 9, 10, 11, 29, 30, 32, 83, 135, 141, 145, 149], "initi": [3, 5, 9, 10, 11, 26, 29, 30, 32, 67, 86, 88, 89, 103, 120, 141, 145], "downstream": 5, "help": [5, 9, 10, 21, 111, 143, 146], "reduc": [5, 10, 14, 16, 74, 113, 143, 146], "quantiti": 5, "compar": [5, 14, 16, 22, 27, 29, 32], "strictli": 5, "rp": 5, "simpl": [5, 12, 16, 24, 25, 32, 33, 91, 96], "whether": [5, 14, 26, 37, 38, 39, 41, 46, 47, 48, 49, 50, 52, 53, 59, 63, 67, 70, 77, 78, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 112, 117, 118, 120, 123, 128, 133, 136, 141, 142, 143, 144, 145, 146, 147, 148], "close": [5, 16, 18, 123, 136, 147], "far": [5, 123, 147], "apart": 5, "yield": [5, 14, 20, 69, 101, 136, 143, 145], "physiolog": [5, 9, 10, 11], "relev": [5, 29, 34, 67, 120, 141], "boost": 5, "classif": [5, 9, 10, 11, 26, 27, 30, 36, 41, 43, 51, 54, 59, 60, 65, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 142, 145], "regim": 5, "hubert": [5, 9, 14, 16, 20, 151], "jbanvil": [5, 9, 14, 16, 20], "87": 5, "few": [5, 9, 10, 11, 14, 16, 26, 151], "sleep_physionet": [5, 9, 10, 11, 141, 150], "sleepphysionet": [5, 9, 10, 11, 16, 141, 143, 150, 151], "recording_id": [5, 9, 10, 11, 12, 14, 16, 22, 74, 75, 76, 143], "crop_wake_min": [5, 9, 10, 11, 16, 74, 143], "microvolt": [5, 9, 10], "lowpass": [5, 9, 10, 16], "sinc": [5, 9, 10, 11, 12, 22, 26, 30, 67, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 120, 136, 141, 145], "don": [5, 11, 17, 19, 67, 120, 141], "resampl": [5, 12, 14, 18, 20, 74, 107, 141, 143, 146, 150, 151], "As": [5, 16, 26, 27, 29, 67, 120, 141], "conveni": [5, 111, 141, 144, 146], "later": [5, 12, 22, 71, 72, 75, 76, 84, 143, 145], "window_size_": [5, 9, 10, 11], "map": [5, 9, 10, 11, 12, 22, 26, 27, 28, 29, 30, 31, 34, 67, 80, 83, 84, 95, 96, 102, 112, 113, 120, 135, 141, 143, 145, 146, 149], "merg": [5, 9, 10, 11, 145, 151], "aasm": [5, 9, 10, 11], "w": [5, 9, 10, 11, 12, 27, 28, 29, 30], "z": [5, 9, 10, 31, 46, 49, 63, 100, 142, 145], "scale": [5, 9, 10, 11, 12, 16, 86, 88, 89, 90, 145, 151], "standard_scal": [5, 9, 10], "channel_wis": [5, 9, 10, 11, 16], "new": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 18, 20, 26, 27, 28, 29, 30, 31, 32, 39, 56, 67, 86, 105, 106, 107, 108, 110, 111, 120, 136, 140, 141, 142, 145, 146], "receiv": [5, 86, 145], "pair": [5, 123, 147], "indic": [5, 9, 10, 21, 31, 45, 62, 70, 107, 108, 111, 122, 123, 124, 141, 142, 143, 146, 147, 151], "when": [5, 9, 10, 11, 14, 16, 22, 27, 29, 30, 32, 34, 40, 41, 46, 47, 48, 49, 53, 59, 63, 67, 68, 73, 78, 79, 80, 83, 86, 103, 106, 107, 108, 111, 112, 113, 118, 120, 133, 136, 141, 142, 143, 145, 146, 151], "train_test_split": [5, 8, 29], "baseconcatdataset": [2, 5, 9, 10, 12, 14, 16, 21, 31, 67, 78, 79, 80, 81, 112, 113, 118, 120, 122, 131, 141, 143, 144, 146, 147, 148, 150, 151], "uniqu": [5, 9, 10, 11, 21, 67, 71, 120, 141, 143], "subj_train": 5, "subj_test": 5, "test_siz": [5, 8, 29], "subj_valid": 5, "relativepositioningdataset": 5, "__getitem__": [5, 67, 120, 141], "expect": [5, 14, 26, 32, 67, 120, 141], "__init__": [5, 32], "list_of_d": [5, 70, 143], "super": [5, 32, 126, 127, 148], "return_pair": 5, "ind1": 5, "ind2": 5, "properti": [5, 70, 142, 143, 145, 147, 151], "_return_pair": 5, "setter": 5, "split_id": [5, 9, 10, 11, 12, 70, 143, 151], "dict": [5, 9, 10, 11, 21, 26, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 51, 70, 71, 73, 77, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 107, 112, 113, 117, 120, 141, 142, 143, 145, 146, 151], "item": [5, 14, 16, 18, 19, 20, 26, 27, 28, 32], "main": [5, 88, 89, 90, 145], "tau_po": [5, 123, 147], "tau_neg": [5, 123, 147], "neg": [5, 27, 31, 67, 123, 141, 147], "separ": [5, 29, 32, 69, 107, 113, 123, 143, 145, 146, 147], "less": [5, 27, 29, 32], "min": [5, 12, 29, 74, 107, 143, 146], "15": [2, 3, 5, 9, 10, 11, 12, 14, 22, 26, 27, 28, 29, 30, 32, 46, 47, 48, 49, 86, 96, 101, 107, 110, 142, 145, 146], "n_exampl": [5, 123, 147], "regular": [5, 115, 116, 146], "instanc": [5, 32, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 60, 67, 83, 86, 90, 105, 106, 107, 108, 111, 120, 122, 141, 142, 145, 146, 147, 151], "lower": [5, 9, 12, 29, 32, 36, 54, 107, 128, 142, 146, 148], "250": [5, 20, 27, 69, 83, 86, 90, 143, 145], "relativepositioningsampl": [5, 141, 147, 150], "60": [5, 10, 12, 19, 32], "n_examples_train": 5, "len": [5, 8, 9, 10, 11, 12, 14, 17, 20, 22, 29, 32, 72, 117, 143, 146], "n_examples_valid": 5, "n_examples_test": 5, "train_sampl": [5, 9, 10, 11], "get_metadata": [5, 9, 10, 11, 27, 28, 29, 31, 70, 122, 141, 143, 147], "same_rec_neg": [5, 123, 147], "valid_sampl": [5, 9, 10, 11], "presampl": [5, 123, 141, 147], "test_sampl": 5, "version": [2, 3, 4, 5, 9, 10, 18, 21, 22, 29, 30, 31, 67, 86, 91, 105, 106, 107, 108, 110, 111, 120, 136, 138, 139, 140, 143, 145, 146, 150], "introduc": [5, 9, 10, 11, 14, 15, 24, 25, 27, 31], "four": [5, 9, 46, 69, 72, 142, 143], "embedd": 5, "dimension": [5, 67, 86, 120, 131, 141, 145, 148], "last": [5, 22, 27, 31, 32, 51, 65, 72, 74, 78, 79, 80, 83, 86, 107, 110, 112, 113, 142, 143, 145, 146, 151], "embed": [5, 9, 10, 83, 86, 145], "16": [2, 5, 9, 11, 30, 32, 83, 93, 98, 107, 145, 146], "add": [3, 4, 5, 11, 26, 27, 28, 29, 32, 42, 43, 58, 60, 67, 70, 71, 77, 107, 120, 128, 141, 142, 143, 146, 148, 151], "after": [5, 12, 16, 21, 26, 28, 29, 32, 69, 74, 84, 96, 97, 98, 125, 128, 143, 145, 148, 151], "tempor": [5, 9, 10, 14, 26, 83, 84, 86, 87, 89, 96, 97, 98, 99, 100, 101, 103, 145, 151], "wrap": [5, 26, 32, 70, 143, 145], "siames": 5, "contrastivenet": 5, "sleepstagerchambon2018": [5, 9, 26, 141, 145], "input_size_sampl": [5, 9, 10, 11], "emb_siz": 5, "emb": 5, "n_output": [5, 9, 10, 11, 26, 31, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 120, 141, 145], "n_conv_ch": [5, 98, 145], "n_time": [3, 4, 5, 8, 9, 10, 11, 12, 14, 17, 19, 26, 27, 28, 29, 30, 31, 32, 45, 62, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 115, 116, 120, 125, 129, 141, 142, 143, 145, 146, 148], "dropout": [3, 4, 5, 9, 10, 26, 27, 28, 29, 30, 32, 83, 84, 86, 87, 88, 89, 96, 97, 98, 99, 100, 101, 145], "apply_batch_norm": [5, 97, 98, 145], "linear": [5, 9, 10, 26, 30, 45, 62, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 107, 142, 145, 146], "top": [5, 9, 10, 11, 34], "forward": [3, 4, 5, 11, 26, 27, 28, 29, 32, 40, 53, 67, 83, 85, 86, 90, 95, 97, 98, 99, 100, 101, 102, 103, 107, 109, 111, 120, 125, 129, 131, 141, 142, 145, 146, 148], "x1": [5, 123, 147], "x2": [5, 123, 147], "z1": 5, "z2": 5, "flatten": [5, 9, 10, 11], "similar": [5, 27, 105, 146], "account": [5, 70, 112, 143, 146], "smaller": [5, 27, 32, 80, 88, 89, 113, 143, 145, 146], "checkpoint": [5, 32], "earlystop": [5, 29, 32], "epochscor": [5, 8, 9, 10, 11, 148], "5e": 5, "128": [5, 10, 11, 67, 72, 88, 89, 98, 103, 120, 141, 143, 145], "512": [5, 11], "enough": [5, 72, 143], "num_work": [5, 14, 32, 131, 141, 142, 148], "cp": 5, "dirnam": 5, "f_criterion": 5, "f_optim": 5, "f_histori": 5, "early_stop": 5, "patienc": 5, "train_acc": 5, "valid_acc": [3, 5, 9, 10, 11, 26, 28, 29, 30], "bcewithlogitsloss": [5, 67, 120, 141], "adam": [5, 9, 10, 11, 14, 31], "max_epoch": [5, 29, 32, 67, 120, 141], "iterator_train__sampl": [5, 9, 10, 11], "iterator_valid__sampl": [5, 9, 10, 11], "iterator_train__num_work": 5, "iterator_valid__num_work": 5, "load_param": 5, "lowest": 5, "pt": [5, 83, 145], "delet": [5, 22, 70, 118, 143, 146], "file": [5, 6, 12, 13, 14, 16, 17, 18, 19, 23, 26, 33, 70, 74, 75, 81, 105, 124, 136, 141, 143, 144, 146, 147, 151], "balanc": [5, 9, 10, 11, 121, 141, 147, 151], "to_list": [5, 9, 10, 11], "ys1": 5, "ys2": 5, "talk": [], "y1": 5, "y2": 5, "zip": [5, 12, 16, 24], "l": [5, 9, 10, 11, 12, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 83, 84, 95, 96, 103, 121, 135, 145, 147, 149], "m": [3, 4, 5, 9, 10, 11, 12, 16, 18, 22, 26, 27, 28, 29, 30, 31, 32, 36, 39, 43, 46, 47, 48, 49, 51, 54, 56, 60, 63, 65, 83, 84, 92, 93, 95, 96, 98, 103, 107, 121, 135, 140, 142, 143, 144, 145, 146, 147, 149], "7": [2, 3, 4, 5, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 32, 34, 72, 83, 90, 91, 97, 143, 145], "orang": [5, 12, 16], "lines1": 5, "labels1": 5, "get_legend_handles_label": 5, "lines2": 5, "labels2": 5, "displai": [5, 9, 10, 11, 27, 28, 29, 32, 72, 133, 141, 143], "confus": [5, 9, 10, 11, 135, 149, 151], "matrix": [5, 9, 10, 11, 38, 39, 46, 56, 57, 63, 86, 135, 142, 145, 149, 151], "report": [5, 9, 10, 11, 14, 29, 32, 75, 76, 83, 136, 143, 145], "confusion_matrix": [5, 9, 10, 11, 27, 28, 135, 149], "classification_report": [5, 9, 10, 11], "switch": [5, 32, 151], "y_pred": [5, 9, 10, 11, 27, 28, 67, 103, 127, 141, 145, 148], "y_true": [5, 9, 10, 11, 27, 28, 67, 141], "logist": 5, "classifi": [3, 4, 5, 9, 10, 11, 26, 29, 31, 150, 151], "balanced_accuracy_scor": [5, 11], "linear_model": 5, "logisticregress": 5, "standardscal": 5, "make_pipelin": 5, "singl": [5, 9, 10, 27, 30, 40, 41, 42, 58, 59, 67, 85, 99, 111, 120, 131, 141, 142, 145, 146, 148, 151], "no_grad": [5, 32], "feat": 5, "batch_x": [5, 22], "concaten": [5, 9, 10, 70, 83, 102, 107, 112, 113, 143, 145, 146], "log_reg": 5, "penalti": 5, "l2": [5, 83, 145], "class_weight": [5, 9, 10, 11], "solver": 5, "lbfg": 5, "multi_class": 5, "multinomi": 5, "clf_pipe": 5, "train_y_pr": 5, "valid_y_pr": 5, "test_y_pr": 5, "train_bal_acc": [5, 9, 10, 11], "valid_bal_acc": [5, 9, 10, 11], "test_bal_acc": 5, "bal": 5, "acc": [5, 29, 32], "4f": 5, "much": [5, 27, 67, 110, 120, 141, 146], "chanc": [5, 9, 10], "level": [5, 9, 10, 22, 68, 105, 107, 108, 110, 111, 143, 146, 151], "20": [2, 5, 8, 9, 10, 11, 12, 13, 26, 29, 31, 32, 39, 46, 47, 48, 49, 63, 97, 111, 142, 145, 146], "problem": [5, 26, 41, 59, 136, 139, 142], "quick": [5, 122, 147], "2d": [5, 135, 141, 149], "space": [5, 16], "pca": 5, "decomposit": 5, "cm": [5, 69, 135, 143, 149], "n_compon": 5, "tsne": 5, "compon": [5, 9, 10, 11, 72, 88, 89, 143, 145], "fit_transform": 5, "get_cmap": 5, "viridi": 5, "enumer": [5, 12, 29, 32], "n1": [5, 9, 10, 11], "n2": [5, 9, 10, 11], "n3": [5, 9, 10, 11], "scatter": [5, 16, 31], "alpha": [5, 9, 10, 11, 12, 45, 83, 88, 89, 142, 145], "nonlinear": [5, 29, 67, 83, 94, 120, 141, 145], "project": [5, 12, 14, 16, 18, 19, 26, 75, 76, 111, 143, 146], "umap": 5, "might": [5, 14, 16, 26, 29, 30, 32, 113, 122, 146, 147], "insight": 5, "explor": [5, 29], "ag": [5, 12, 18, 22, 69, 72, 75, 76, 143], "sex": 5, "specif": [5, 9, 10, 11, 16, 18, 30, 67, 81, 97, 105, 120, 122, 138, 141, 143, 144, 145, 146, 147], "subset": [5, 8, 20, 29, 31, 70, 107, 108, 143, 146, 151], "achiev": [5, 9, 10, 11], "reason": [5, 10, 29, 32, 67, 120, 128, 141, 148], "avenu": 5, "entir": [5, 14, 20, 29, 32, 143, 151], "describ": [5, 11, 26, 27, 28, 29, 32, 72, 84, 85, 88, 89, 90, 91, 96, 97, 98, 99, 103, 143, 145], "discov": 5, "2020": [5, 36, 37, 38, 43, 51, 54, 55, 57, 60, 65, 88, 89, 97, 101, 123, 142, 145, 147], "preprint": [5, 31, 36, 37, 38, 39, 41, 43, 51, 54, 55, 56, 57, 59, 60, 65, 92, 93, 100, 123, 142, 145, 147], "2007": [5, 36, 43, 51, 54, 60, 65, 123, 142, 147], "16104": [5, 123, 147], "kemp": [5, 9, 10, 11], "b": [5, 9, 10, 11, 39, 56, 86, 92, 93, 103, 141, 142, 145], "zwinderman": [5, 9, 10, 11], "tuk": [5, 9, 10, 11], "kamphuisen": [5, 9, 10, 11], "obery": 5, "2000": [5, 9, 10, 11, 22, 30, 122, 147], "neuron": [5, 9, 10, 11], "feedback": [5, 9, 10, 11, 69, 143], "loop": [5, 9, 10, 11, 14, 67, 120, 141], "slow": [5, 9, 10, 11, 16, 133, 141, 151], "wave": [5, 9, 10, 11], "microcontinu": [5, 9, 10, 11], "ieee": [5, 9, 10, 11, 46, 47, 48, 49, 63, 83, 85, 86, 87, 88, 89, 98, 99, 142, 145], "transact": [5, 10, 83, 85, 86, 88, 89, 98, 99, 145], "biomed": [5, 145], "47": [3, 4, 5, 9, 10, 11, 28, 29, 32], "1185": [5, 9, 10, 11, 22], "1194": [5, 9, 10, 11], "goldberg": [5, 9, 10, 11], "amar": [5, 9, 10, 11], "glass": [5, 9, 10, 11], "hausdorff": [5, 9, 10, 11], "ivanov": [5, 9, 10, 11], "p": [5, 9, 10, 27, 28, 29, 30, 31, 36, 43, 51, 54, 60, 65, 92, 93, 98, 142, 143, 145], "mark": [5, 9, 10, 11], "stanlei": [5, 9, 10, 11], "physiobank": [5, 9, 10, 11], "physiotoolkit": [5, 9, 10, 11], "research": [5, 9, 10, 11, 30, 34, 137], "resourc": [5, 7, 9, 10, 11, 13, 16, 24, 70, 75, 109, 112, 118, 119, 151], "complex": [5, 9, 10, 11, 29, 32, 72, 97, 143, 145], "circul": [5, 9, 10, 11], "101": [5, 9, 10, 11, 12], "23": [3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32, 106, 146], "e215": [5, 9, 10, 11], "e220": [5, 9, 10, 11], "chambon": [5, 9, 10, 98, 145], "galtier": [5, 9, 10, 98, 145], "arnal": [5, 9, 10, 98, 145], "wainrib": [5, 9, 10, 98, 145], "2018": [5, 9, 10, 28, 29, 30, 39, 41, 43, 45, 56, 59, 60, 62, 93, 98, 100, 142, 145], "multivari": [5, 9, 10, 98, 145], "multimod": [5, 9, 10, 98, 145], "tran": [5, 9, 10], "system": [5, 9, 10, 46, 63, 85, 86, 88, 89, 98, 99, 139, 142, 145], "rehabilit": [5, 9, 10, 85, 86, 88, 89, 98, 99, 145], "26": [5, 9, 10, 11, 20, 98, 145], "758": [5, 9, 10, 98, 145], "769": [5, 9, 10, 98, 145], "plot_relative_posit": [5, 6], "analaysi": [7, 24], "sleep": [7, 13, 16, 24, 30, 41, 59, 70, 74, 85, 91, 97, 98, 99, 102, 103, 109, 113, 118, 121, 122, 124, 133, 135, 142, 143, 145, 147, 151], "cognit": [7, 24], "experi": [7, 14, 24, 29, 32, 68, 72, 143], "stage": [7, 13, 24, 29, 30, 32, 70, 74, 85, 91, 97, 98, 99, 102, 103, 109, 113, 118, 121, 122, 124, 133, 135, 145, 147, 151], "chambon2018": [7, 13, 24, 70, 74, 91, 98, 102, 109, 113, 118, 122, 124, 133, 135, 145], "eldele2021": [7, 13, 24, 70, 74, 91, 99, 102, 109, 113, 118, 122, 124, 133, 135, 145], "big": [7, 13, 24, 70, 75, 109, 112, 118, 119, 151], "tuh": [7, 13, 14, 15, 23, 24, 70, 76, 109, 112, 118, 119, 141, 150, 151], "corpu": [7, 13, 14, 15, 23, 24, 70, 75, 76, 109, 112, 118, 119, 143, 151], "decid": [8, 28, 37, 38, 39, 41, 50, 52, 53, 142], "about": [8, 9, 10, 12, 26, 30, 71, 77, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 133, 136, 141, 143, 145], "length": [8, 9, 11, 12, 14, 16, 26, 27, 30, 45, 62, 70, 80, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 107, 112, 113, 142, 143, 145, 146, 151], "preced": 8, "create_windows_from_target_channel": [8, 141, 146, 150, 151], "cnosid": 8, "finer": [8, 151], "fexion": 8, "idx_train": 8, "idx_valid": 8, "n_out_chan": 8, "long": [8, 14, 29, 30, 72, 85, 143, 145], "respons": [8, 9, 10, 11, 28, 30], "manag": [8, 9, 10, 11, 28, 30, 31], "inherit": [8, 9, 10, 11, 26, 28, 30, 67, 120, 141], "neuralnetregressor": [8, 141], "logic": [8, 9, 10, 11, 28, 30, 32], "pearson": 8, "pearson_r_scor": 8, "net": [8, 26, 67, 99, 103, 120, 126, 127, 128, 141, 145, 148], "mseloss": [8, 120, 141], "valid_pearson_r": 8, "train_pearson_r": 8, "stack": [3, 8], "plot_bcic_iv_4_ecog_tri": [8, 13], "test": [9, 10, 11, 16, 21, 24, 25, 27, 28, 30, 33, 67, 70, 72, 73, 91, 96, 109, 113, 116, 118, 120, 133, 141, 143, 151], "adapt": [9, 11, 16, 87, 88, 89, 99, 100, 101, 145], "distribut": [9, 10, 29, 45, 138, 142], "individu": [9, 10, 11, 12, 26, 27, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 145, 151], "integr": [9, 10, 32], "omit": [9, 36, 142], "downsampl": [9, 10, 110, 146], "apply_on_arrai": [9, 10, 12, 109, 146], "take": [9, 10, 11, 16, 17, 29, 31, 53, 81, 83, 86, 90, 99, 142, 144, 145], "everi": [9, 10, 11, 12, 14, 18, 22, 29, 32, 72, 83, 86, 90, 143, 145], "consecut": [9, 10, 11, 51, 65, 102, 113, 121, 124, 142, 145, 146, 147], "simplifi": [9, 10, 122, 147, 151], "rather": [9, 10, 141], "freez": [9, 10, 151], "sequencesampl": [9, 10, 11, 141, 147, 150, 151], "n_window": [9, 10, 11, 22, 83, 121, 124, 145, 147], "n_windows_strid": [9, 10, 11, 124, 145, 147], "maxim": [9, 10, 30, 36, 142, 145], "overlap": [9, 10, 11, 78, 79, 80, 107, 112, 113, 143, 145, 146], "implement": [9, 10, 14, 16, 26, 29, 45, 53, 62, 67, 83, 87, 88, 89, 90, 92, 93, 120, 130, 131, 137, 141, 142, 145, 148, 151], "get_center_label": [9, 10], "isinst": [9, 10], "ceil": [9, 10, 101, 145], "astyp": [9, 10], "appear": [9, 10, 11, 69, 143], "lot": [9, 10, 11, 67, 120, 141], "night": [9, 10, 11], "spent": [9, 10, 11], "imbalanc": [9, 10, 11], "avoid": [9, 10, 11, 12, 14, 16, 22, 27, 29, 74, 143, 151], "frequent": [9, 10, 11], "compute_class_weight": [9, 10, 11], "vector": [9, 10, 107, 110, 146], "timedistribut": [9, 10, 141, 145, 151], "31": [5, 9, 10, 11, 26, 27, 29, 86, 145], "feat_extractor": [9, 10], "return_feat": [9, 10, 85, 97, 98, 99, 141, 145], "start_dim": [9, 10], "len_last_lay": [9, 10], "neuralnetclassifi": [9, 10, 11, 28, 30, 141], "mass": 9, "ss3": 9, "speak": [9, 11, 14], "recommend": [9, 11, 16, 29, 30, 34, 86, 139, 140, 145], "balanced_accuraci": [9, 10], "crossentropyloss": [3, 4, 9, 10, 11, 26, 27, 28, 29, 30, 32, 67, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 120, 141, 145], "criterion__weight": [9, 10, 11], "tensor": [9, 10, 11, 22, 26, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 85, 86, 90, 95, 97, 98, 99, 100, 101, 102, 120, 125, 129, 130, 141, 142, 145, 148], "sharex": [9, 10, 11], "plot_confusion_matrix": [9, 10, 11, 27, 28, 141, 149, 150, 151], "confusion_mat": [9, 10, 11, 27, 28, 135, 149], "class_nam": [9, 10, 11, 27, 28, 135, 149], "wake": [9, 10, 11, 74, 143], "rem": [9, 10, 11], "hypnogram": [9, 10, 11], "overlaid": [9, 10, 11], "cannot": [2, 3, 4, 5, 8, 9, 10, 11, 12, 27, 28, 29, 30, 32, 67, 105, 120, 141, 146], "correctli": [9, 10, 11, 91, 140, 145, 151], "identifi": [9, 10, 11, 80, 113, 143, 146], "amount": [9, 10, 11, 16, 110, 146], "expert": [9, 10, 11], "annot": [3, 9, 10, 11, 18, 19, 21, 27, 28, 29, 30, 32, 107, 141, 146], "despit": [9, 10, 11], "reach": [5, 9, 10, 32], "36": [3, 4, 5, 9, 11, 27, 28, 29, 32], "held": [9, 10], "includ": [9, 11, 12, 14, 28, 29, 30, 32, 38, 57, 73, 105, 107, 108, 112, 113, 136, 137, 142, 143, 146], "accordingli": [3, 4, 9, 26, 27, 28, 29, 30, 32, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 105, 145, 146], "especi": [9, 30, 32, 149], "ah": [9, 10, 11], "hac": [9, 10, 11], "jjl": [9, 10, 11], "obery\u00e9": [9, 10, 11], "bme": [9, 10, 11], "al": [9, 10, 11, 26, 72, 84, 85, 87, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 128, 143, 145, 148], "lan": [9, 10, 11], "jm": [9, 10, 11], "pch": [9, 10, 11], "rg": [9, 10, 11], "mietu": [9, 10, 11], "je": [9, 10, 11], "moodi": [9, 10, 11], "gb": [9, 10, 11], "peng": [9, 10, 11, 43, 60, 142], "he": [9, 10, 11], "plot_sleep_staging_chambon2018": [9, 13], "attent": [10, 83, 86, 99, 145], "divyesh": [10, 151], "narayanan": [10, 151], "400": [10, 11, 151], "speed": [10, 11, 16, 143, 151], "fpz": 10, "cz": [10, 12, 26, 111, 117, 146], "give": [10, 12, 22, 26, 46, 63, 107, 136, 142, 146], "pz": [10, 12], "oz": 10, "option": [5, 10, 18, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 67, 70, 73, 80, 83, 89, 90, 91, 107, 110, 113, 120, 131, 135, 140, 141, 142, 143, 145, 146, 148, 149, 151], "sleepstagereldele2021": [10, 26, 141, 145, 151], "n4": 10, "43": [10, 11, 29, 33], "faster": [10, 16, 27, 67, 110, 120, 141, 145, 146], "document": [5, 10, 12, 34, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 105, 107, 108, 110, 111, 136, 140, 145, 146, 151], "89": 10, "eldel": [10, 99, 145], "et": [10, 26, 72, 84, 85, 87, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 128, 143, 145, 148], "With": [10, 99, 145], "vol": [10, 99, 145], "29": [9, 10, 11, 31, 99, 145], "pp": [10, 36, 43, 46, 47, 48, 49, 51, 54, 60, 63, 65, 86, 99, 142, 145], "809": [10, 99, 145], "818": [10, 99, 145], "1109": [10, 83, 87, 88, 89, 99, 145], "tnsre": [10, 88, 89, 99, 145], "3076234": [10, 99, 145], "plot_sleep_staging_eldele2021": [10, 13], "look": [11, 12, 17, 22, 26, 29, 68, 122, 143, 147], "simpler": 11, "current": [11, 67, 111, 120, 136, 141, 146], "seq2seq": 11, "written": [11, 118, 138, 146], "veri": [11, 29, 32, 70, 113, 143, 146], "short": [11, 12, 29, 32, 69, 85, 143, 145], "excecut": [], "too": 11, "small": [11, 12, 27, 29, 136], "theo": [11, 151], "gnassoun": [11, 151], "omar": [11, 151], "emir": 11, "zero": [11, 16, 51, 65, 107, 110, 113, 116, 142, 146], "median": 11, "unit": [11, 26, 107, 140, 146], "interquartil": 11, "upsampl": [11, 103, 110, 145, 146], "light": [11, 135, 149], "No": [11, 16, 18, 19, 26, 29, 32, 69, 143], "robust_scal": 11, "non": [3, 4, 11, 16, 22, 26, 27, 28, 29, 30, 32, 67, 72, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 107, 120, 141, 143, 145, 146], "35": [3, 4, 5, 6, 11, 28, 29, 31, 32, 33], "shorter": [11, 151], "fulli": [11, 29, 30, 83, 86, 88, 89, 90, 145], "usleep": [11, 26, 141, 150, 151], "in_chan": [11, 26, 31, 84, 92, 93, 94, 95, 96, 101, 103, 104, 145], "depth": [3, 4, 11, 26, 27, 28, 29, 30, 32, 83, 88, 89, 91, 103, 145], "12": [2, 4, 5, 9, 11, 12, 13, 17, 18, 19, 22, 28, 29, 30, 32, 33, 69, 103, 135, 143, 145, 149], "with_skip_connect": [11, 103, 145], "apply_softmax": [], "balanced_accuracy_multi": 11, "perslev": [11, 103, 121, 145, 147], "darkner": [11, 103, 121, 145, 147], "kempfner": [11, 103, 121, 145, 147], "nikol": [11, 103, 121, 145, 147], "jennum": [11, 103, 121, 145, 147], "pj": [11, 103, 121, 145, 147], "igel": [11, 103, 121, 145, 147], "resili": [11, 103, 121, 145, 147], "npj": [11, 103, 121, 145, 147], "digit": [11, 22, 103, 121, 145, 147], "med": [11, 103, 121, 145, 147], "72": [11, 30, 103, 121, 145, 147], "plot_sleep_staging_usleep": [11, 13], "showcas": [12, 29, 32], "templ": [12, 75, 76, 143, 151], "univers": [12, 72, 75, 76, 143, 151], "hospit": [12, 75, 76, 143, 151], "www": [12, 14, 34, 68, 75, 76, 143, 145], "isip": [12, 14, 75, 76, 143], "piconepress": [12, 14, 75, 76, 143], "tuh_eeg": [12, 14, 22, 75, 76, 143], "shtml": [12, 75, 76, 143], "c_tueg": [12, 75, 143], "luka": [12, 17, 18, 19, 20, 21, 22, 31, 34, 151], "gemein": [12, 17, 18, 19, 20, 21, 22, 31, 151], "tempfil": [12, 16, 18], "error": [12, 22, 27, 30, 31, 80, 106, 112, 113, 114, 120, 136, 141, 143, 146, 151], "messag": [12, 14, 22, 136], "everytim": [], "creation": [12, 22], "mock": [12, 22], "want": [12, 14, 18, 21, 22, 24, 28, 29, 30, 32, 67, 120, 137, 140, 141, 143, 145], "disconsid": 12, "section": [12, 22, 72, 139, 143], "_tuhmock": [12, 22], "noqa": [12, 22], "f811": [12, 22], "firstli": [12, 21], "complet": [12, 14, 27, 67, 120, 141], "read": [12, 14, 16, 17, 18, 19, 75, 76, 81, 113, 141, 143, 144, 146], "tuh_path": [12, 14, 22], "pars": 12, "inform": [3, 4, 12, 14, 17, 26, 29, 30, 41, 59, 67, 70, 77, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 107, 120, 122, 140, 141, 142, 143, 145, 146, 147], "path": [12, 14, 16, 17, 18, 19, 22, 32, 68, 70, 75, 76, 81, 82, 141, 143, 144], "patient": [12, 68, 143], "id": [12, 18, 20, 29, 70, 75, 76, 81, 112, 113, 143, 144, 146, 151], "sort": [12, 27, 28, 141, 151], "chronolog": [12, 75, 76, 143], "year": [12, 22, 34], "month": [12, 22, 34], "dai": [12, 22, 69, 143], "segment": [12, 16, 22, 29, 32, 86, 107, 145, 146], "regard": 12, "gender": [12, 18, 22, 75, 76, 143], "insert": [12, 22, 91, 145], "job": [12, 75, 81, 107, 110, 112, 113, 118, 143, 144, 146], "load": [12, 16, 17, 19, 22, 23, 68, 74, 76, 81, 84, 96, 112, 141, 143, 144, 151], "target_nam": [12, 14, 18, 22, 31, 70, 71, 75, 76, 81, 143, 144, 151], "add_physician_report": [12, 22, 75, 76, 143], "__name__": 12, "statist": 12, "plt_histogram": 12, "df_of_ages_gend": 12, "ylim": 12, "show_titl": 12, "dafaram": 12, "male_df": 12, "female_df": 12, "figur": [12, 27, 28, 29, 69, 83, 135, 143, 145, 149], "suptitl": 12, "95": [12, 67, 120, 141], "male": 12, "121": [5, 12], "hist": 12, "bin": 12, "green": 12, "orient": 12, "horizont": 12, "axhlin": 12, "1f": [12, 32], "std": [12, 29, 43, 60, 72, 142, 143], "barh": [12, 29], "height": [12, 29], "width": [12, 30, 101, 107, 145, 146], "xlim": 12, "upper": [12, 16, 107, 146], "left": [12, 27, 28, 29, 39, 67, 69, 72, 120, 141, 142, 143], "05": [6, 10, 11, 12, 101, 145], "ytick": 12, "gca": 12, "invert_xaxi": 12, "femal": [12, 72, 143], "122": [12, 22, 23], "subplots_adjust": 12, "wspace": 12, "hspace": 12, "count": [12, 67, 120, 141], "labelpad": 12, "durat": [12, 29, 30, 31, 105, 107, 113, 146], "least": [12, 107, 122, 123, 132, 146, 147, 148], "five": [12, 68, 143], "select_by_dur": 12, "inf": 12, "determin": [12, 30, 89, 145], "d_i": 12, "ones": [12, 26, 121, 147, 151], "split": [12, 15, 20, 23, 24, 26, 31, 67, 70, 73, 84, 96, 113, 120, 141, 143, 145, 151], "discard": [12, 74, 143], "incomplet": 12, "configur": [12, 16, 27, 29, 32], "subdivis": 12, "le": 12, "repres": [12, 21, 47, 48, 49, 86, 142, 145], "re": [12, 21, 67, 111, 120, 136, 141, 145, 146], "referenc": [12, 111, 146], "short_ch_nam": 12, "a1": 12, "a2": 12, "fp1": 12, "fp2": 12, "f3": 12, "f4": 12, "c3": [12, 26], "c4": [12, 26], "p3": 12, "p4": 12, "o1": [12, 117, 146], "o2": 12, "f7": 12, "f8": 12, "t3": 12, "t4": 12, "t5": 12, "t6": 12, "fz": 12, "subdivid": 12, "refer": [12, 34, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 49, 51, 54, 55, 56, 57, 59, 60, 62, 63, 65, 68, 69, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 111, 117, 121, 123, 130, 135, 142, 143, 145, 146, 147, 148, 149], "ar_ch_nam": 12, "ref": 12, "le_ch_nam": 12, "ar_ch_map": 12, "ch_name": [12, 14, 17, 26, 78, 106, 117, 143, 146], "le_ch_map": 12, "ch_map": 12, "select_by_channel": 12, "endswith": 12, "seta": 12, "kei": [12, 21, 26, 27, 28, 70, 71, 77, 112, 113, 141, 143, 146], "recod": 12, "setb": 12, "issubset": 12, "execut": [6, 11, 12, 13, 14, 16, 17, 19, 23, 33, 72, 118, 143, 146], "region": [12, 107, 145, 146], "renam": [3, 4, 12, 21, 29, 30, 151], "micro": 12, "volt": 12, "clip": 12, "outlier": 12, "800": [12, 18], "common": [12, 14, 111, 139, 146, 151], "custom_rename_channel": 12, "fail": [5, 12], "unexpect": [12, 136], "rename_channel": 12, "custom_crop": 12, "include_tmax": [12, 105, 146], "bigger": 12, "set_eeg_refer": [12, 111, 146], "ref_channel": [12, 111, 146], "averag": [10, 12, 27, 29, 31, 32, 67, 83, 91, 111, 120, 125, 141, 145, 146, 148], "ch_type": [12, 26, 111, 146], "pick_channel": [12, 106, 109, 146], "a_min": 12, "a_max": 12, "parallel": [12, 14, 15, 23, 24, 75, 81, 88, 89, 90, 107, 110, 112, 113, 118, 143, 144, 145, 146, 151], "addition": [12, 18, 26, 34, 67, 120, 131, 141, 148], "serial": [12, 15, 18, 23, 24, 141, 150, 151], "must": [3, 4, 12, 14, 16, 21, 26, 29, 30, 77, 84, 96, 97, 102, 105, 109, 111, 112, 121, 139, 143, 145, 146, 147, 151], "lazi": [12, 15, 16, 23, 24, 76, 84, 96, 112, 151], "capabl": [12, 16, 29, 32, 67, 120, 141], "automat": [12, 14, 26, 68, 85, 101, 111, 143, 145, 146, 151], "reload": [12, 16, 118, 146], "machin": [12, 14, 16, 29, 32, 34, 36, 39, 43, 51, 54, 56, 60, 65, 67, 120, 141, 142], "build": [12, 27, 32, 138, 140], "core": [12, 16, 32], "out_path": 12, "mkdtemp": [12, 18], "directori": [12, 16, 18, 68, 70, 75, 76, 81, 118, 140, 141, 143, 144, 146], "tuh_preproc": 12, "concat_d": [12, 16, 18, 112, 113, 114, 118, 146], "save_dir": [12, 16, 118, 146], "readi": [12, 16, 17, 18, 19, 31], "model": [12, 14, 21, 33, 34, 43, 60, 67, 70, 71, 73, 109, 113, 116, 118, 120, 125, 126, 127, 128, 129, 130, 131, 133, 134, 137, 141, 142, 148, 149, 150, 151], "train": [12, 14, 20, 21, 33, 67, 70, 72, 73, 77, 91, 96, 109, 113, 116, 118, 120, 133, 141, 142, 143, 145, 146, 150, 151], "disk": [12, 14, 16, 75, 76, 113, 143, 146], "tuh_window": [12, 22], "plot_tuh_eeg_corpu": [12, 13], "sake": 14, "etc": [14, 28, 30, 109, 146], "preprocess": [14, 15, 18, 20, 21, 22, 23, 24, 26, 31, 70, 137, 141, 143, 150, 151], "fast": [14, 16, 32, 133, 141], "expens": 14, "ultim": 14, "becom": [14, 16, 29], "imposs": 14, "tb": 14, "potenti": [14, 16, 32, 139, 145], "issu": [14, 16, 136, 151], "overhead": [14, 113, 146], "accomod": [], "window": [14, 16, 18, 21, 26, 67, 70, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 110, 112, 113, 120, 121, 122, 123, 124, 131, 132, 141, 143, 145, 147, 148, 150, 151], "overal": 14, "though": [14, 16, 29, 32], "impact": [14, 27, 30], "dispatch": 14, "enabl": [14, 16, 27, 32, 67, 69, 101, 120, 141, 143, 145, 151], "fif": [14, 16, 18, 70, 81, 141, 143, 144, 151], "edf": [14, 16, 17, 19, 22, 141], "itertool": [14, 16], "product": [14, 16], "sn": [14, 29, 30], "tuhabnorm": [14, 18, 141, 143, 150, 151], "deep4net": [14, 26, 31, 141, 145, 151], "intern": [11, 14, 16, 20, 21, 43, 45, 46, 47, 48, 49, 60, 62, 63, 109, 142, 146], "affect": [14, 27, 128, 148], "57": [14, 26], "62": [14, 26], "algorithm": [14, 26, 28, 29, 30, 32], "set_num_thread": 14, "thread": 14, "autom": [14, 29], "abnorm": [14, 76, 143], "slide": [14, 31, 83, 112, 145, 146], "bundl": 14, "prepar": [14, 16, 20, 32], "load_example_data": 14, "window_len_": 14, "n_record": [14, 122, 141, 147], "creat": [14, 16, 17, 18, 19, 20, 21, 31, 67, 70, 77, 78, 79, 80, 111, 112, 113, 120, 131, 141, 143, 146, 148, 151], "bool": [14, 26, 41, 45, 46, 47, 48, 49, 59, 63, 67, 68, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 123, 124, 128, 131, 133, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149], "windows_d": [14, 16], "assum": [14, 26, 67, 105, 120, 125, 129, 141, 143, 146, 148, 151], "patholog": [14, 18, 76, 143], "window_len_sampl": 14, "drop_bad_window": [80, 113, 143, 146], "drop": [3, 4, 10, 14, 16, 17, 18, 19, 26, 27, 28, 29, 32, 37, 55, 80, 106, 113, 117, 142, 143, 146], "bad": [10, 14, 16, 17, 18, 19, 107, 108, 111, 136, 146], "xxx": [14, 94, 145], "itself": [14, 29, 30, 136], "drop_bad": [14, 80, 113, 143, 146], "create_example_model": 14, "kind": [14, 26, 143], "str": [14, 22, 26, 27, 28, 29, 35, 67, 68, 70, 71, 73, 75, 76, 77, 80, 81, 84, 86, 91, 96, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 120, 128, 135, 141, 142, 143, 144, 145, 146, 148, 149], "n_filters_tim": [14, 26, 31, 84, 86, 96, 145], "40": [3, 4, 6, 9, 11, 13, 14, 17, 18, 26, 27, 28, 29, 31, 32, 86, 96, 145], "filter_time_length": [14, 26, 84, 86, 96, 145], "n_filters_spat": [14, 26, 31, 84, 96, 145], "pool_time_length": [14, 26, 84, 86, 96, 145], "75": [3, 4, 5, 9, 14, 16, 26, 27, 28, 29, 32, 86, 96, 101, 145], "pool_time_strid": [14, 26, 84, 86, 96, 145], "split_first_lay": [14, 26, 84, 94, 96, 145], "batch_norm": [14, 26, 84, 96, 145], "batch_norm_alpha": [14, 26, 84, 88, 89, 94, 96, 145], "drop_prob": [14, 26, 30, 84, 86, 87, 88, 89, 92, 93, 96, 100, 101, 145], "elif": [14, 31], "n_filters_2": [14, 31, 84, 145], "50": [3, 4, 5, 9, 10, 11, 14, 16, 19, 28, 29, 30, 32, 69, 84, 143, 145], "filter_length_2": [14, 84, 145], "n_filters_3": [14, 31, 84, 145], "filter_length_3": [14, 84, 145], "n_filters_4": [14, 31, 84, 145], "filter_length_4": [14, 84, 145], "first_pool_mod": [14, 84, 145], "max": [14, 16, 26, 29, 84, 92, 96, 98, 101, 103, 107, 116, 145, 146], "later_pool_mod": [14, 84, 145], "double_time_conv": 14, "stride_before_pool": [14, 31, 84, 145], "valueerror": [14, 26, 31, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 145], "run_train": 14, "serv": [14, 69, 71, 77, 143], "loss_val": 14, "zero_grad": [14, 32], "backward": [3, 4, 11, 14, 26, 27, 28, 29, 32, 91, 107, 145, 146, 151], "256": [14, 26, 151], "minibatch": 14, "pin_memori": [14, 141, 142], "pin": 14, "n_repetit": 14, "repeat": [14, 136], "get": [14, 16, 17, 22, 27, 28, 29, 32, 67, 120, 141, 143, 146], "local": [14, 68, 111, 136, 140, 143, 146], "folder": [14, 68, 143], "storag": 14, "tuh_eeg_abnorm": 14, "v2": 14, "cycl": 14, "combin": [14, 16, 70, 143], "all_result": 14, "win_len_": 14, "model_kind": 14, "repetit": [14, 16, 72, 143], "nrepetit": 14, "n": [14, 16, 22, 26, 27, 28, 29, 30, 32, 36, 37, 38, 43, 45, 51, 54, 55, 57, 60, 62, 65, 83, 92, 93, 98, 130, 141, 142, 143, 145, 148], "data_loading_start": 14, "data_loading_end": 14, "training_setup_start": 14, "worker_init_fn": 14, "training_setup_end": 14, "model_training_start": 14, "trained_model": 14, "model_training_end": 14, "del": 14, "data_prepar": 14, "training_setup": 14, "model_train": 14, "csv": 14, "results_df": 14, "fname": 14, "lazy_vs_eager_loading_result": 14, "to_csv": 14, "summar": 14, "catplot": 14, "row": [14, 22, 39, 70, 91, 135, 142, 143, 145, 149], "hue": 14, "col": 14, "strip": 14, "hardwar": [14, 16], "slower": [10, 14], "pretti": [14, 136], "worker": [14, 32, 131, 148, 151], "speedup": 14, "benchmark_lazy_eager_load": [14, 23], "basic": [15, 27, 29, 32, 33, 53, 70, 73, 90, 91, 96, 109, 113, 116, 118, 133, 135, 142, 145, 151], "eager": [15, 23, 24, 76, 84, 96, 112], "discret": [15, 23, 24, 70, 75, 112, 151], "simplest": 16, "scenario": [16, 113, 146], "act": [16, 111, 146], "inplac": [9, 10, 16], "stai": [16, 27, 69, 143], "aris": 16, "bottleneck": [16, 32, 88, 89, 101, 145], "consider": 16, "solut": [16, 111, 146], "clear": 16, "downsid": 16, "write": [16, 18], "cours": [16, 68, 143], "whenev": 16, "up": [16, 17, 69, 103, 110, 143, 145, 146, 151], "significantli": 16, "joblib": [16, 118, 146], "made": [16, 90, 145, 151], "remain": [16, 29, 32], "tradeoff": 16, "memory_profil": 16, "memory_usag": 16, "goe": 16, "prepare_data": 16, "n_rec": 16, "tmp_dir": 16, "temporarydirectori": 16, "overwrit": [16, 18, 67, 70, 71, 75, 76, 77, 82, 118, 120, 141, 143, 144, 146], "measur": 16, "peak": [16, 112, 113, 146], "character": 16, "n_repet": 16, "all_n_rec": 16, "all_n_job": 16, "mem": 16, "proc": 16, "time_taken": 16, "max_mem": 16, "sub_df": 16, "groupbi": 16, "mib": 16, "without": [16, 26, 27, 29, 30, 32, 67, 120, 130, 141, 148, 151], "circl": 16, "advantag": [16, 29, 88, 89, 145], "togeth": [16, 27, 151], "plot_benchmark_preprocess": [16, 23], "create_from_x_i": [17, 141, 143, 150], "fetch": [17, 19, 20, 21, 69, 72, 73, 143], "13": [2, 5, 6, 9, 11, 17, 19, 22, 26, 72, 74, 107, 117, 143, 146], "imagin": [17, 19], "hand": [17, 19, 24, 28, 30, 69, 72, 143], "feet": [3, 17, 18, 19, 21, 27, 28, 29, 30, 32, 69, 72, 143], "event_cod": [17, 19], "yet": [17, 19, 91, 140, 145], "physionet_path": [17, 19], "eegbci": [17, 19], "load_data": [17, 19], "update_path": [17, 19, 143], "io": [17, 19, 71, 105, 107, 117, 141, 143, 145, 146], "read_raw_edf": [17, 19], "stim_channel": [17, 19], "ani": [17, 18, 26, 27, 29, 32, 67, 99, 107, 111, 120, 140, 141, 145, 146], "500": [17, 19, 28, 122, 147, 151], "manipul": [17, 144], "x_i": 17, "y_i": 17, "window_ind": 17, "start_ind": 17, "stop_ind": 17, "plot_custom_dataset_exampl": [17, 23], "load_concat_dataset": [18, 141, 144, 151], "skip": [18, 22, 29, 32, 90, 103, 145], "fn": [18, 109, 141, 146], "exist": [16, 18, 22, 29, 31, 68, 70, 71, 77, 111, 118, 141, 143, 146], "concat": [18, 70, 83, 112, 113, 118, 143, 145, 146], "json": [18, 70, 81, 143, 144, 151], "hold": [18, 70, 71, 77, 112, 113, 143, 146], "due": [18, 32, 151], "tmpdir": 18, "temporari": [18, 151], "complianc": 18, "support": [5, 9, 10, 11, 18, 27, 32, 67, 107, 110, 111, 117, 120, 141, 146, 151], "upon": [18, 26], "dataset_load": 18, "ids_to_load": [18, 81, 144], "again": [18, 22, 29], "epo": [16, 18, 70, 81, 143, 144], "windows_dataset_load": 18, "plot_load_save_dataset": [18, 23], "create_from_mne_raw": [19, 141, 143, 150], "create_from_mne_epoch": [19, 141, 143, 150], "beforehand": 19, "list_of_epoch": [19, 79, 143], "baselin": [16, 18, 19, 26], "plot_mne_dataset_exampl": [19, 23], "daniel": [20, 34, 151], "wilson": [20, 151], "dan": [20, 151], "wil": 20, "point": [16, 17, 18, 19, 20, 26, 69, 111, 115, 116, 143, 146], "break": [20, 69, 143], "place": [20, 31, 91, 105, 117, 145, 146], "criteria": [20, 67, 120, 141], "subset_nam": 20, "plot_moabb_dataset_exampl": [20, 23], "aim": [21, 22], "dictionari": [21, 26, 67, 70, 73, 107, 120, 141, 143, 146], "string": [21, 22, 26, 34, 39, 47, 48, 49, 67, 70, 107, 108, 109, 118, 120, 128, 141, 142, 143, 145, 146, 148], "entri": [21, 106, 146], "run_4": 20, "integ": [21, 22, 27, 28, 39, 51, 56, 65, 70, 107, 108, 142, 143, 146], "similarli": [21, 32], "plot_split_dataset": [21, 23], "welcom": 22, "ll": 22, "guid": [22, 29, 139], "log": [22, 26, 27, 32, 67, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 105, 107, 108, 110, 111, 112, 113, 120, 141, 145, 146, 151], "excess": 22, "ndarrai": [22, 46, 63, 67, 110, 115, 116, 120, 124, 131, 132, 141, 142, 145, 146, 147, 148], "set_descript": [22, 32, 70, 71, 77, 141, 143], "ind": 22, "dl": 22, "batch_i": 22, "batch_ind": 22, "simpli": [22, 26], "plot_tuh_discrete_multitarget": [22, 23], "fundament": [24, 25], "tune": [24, 25, 32, 33, 70, 73, 86, 91, 96, 109, 113, 116, 118, 133, 145, 151], "scikit": [5, 24, 25, 33, 67, 70, 73, 91, 96, 109, 113, 116, 118, 120, 133, 135, 141, 149, 151], "fake": [24, 25, 26, 33, 71, 141, 151], "auto_examples_python": 24, "auto_examples_jupyt": 24, "On": [4, 27, 30, 31, 71, 77, 143], "push": [27, 67, 120, 141], "produc": [27, 29, 32, 99, 145], "neighbour": 27, "simultan": [27, 88, 89, 145], "why": [], "windowwis": [], "fact": [], "somehow": [], "bit": [], "constitut": [], "implicitli": [27, 29, 32], "timestep": 27, "user": [27, 67, 120, 136, 138, 139, 141, 143, 151], "mostli": 27, "runtim": 27, "rule": [27, 67, 120, 141], "forumula": [], "mathemat": 27, "ident": [9, 11, 32, 44, 67, 84, 120, 141, 142, 145], "At": [27, 69, 143], "redund": 27, "dilat": [9, 10, 11, 27, 91, 141, 145], "lead": [27, 29, 67, 111, 120, 141, 146], "gradient": [27, 141, 150, 151], "likelihood": [27, 67, 141], "typic": [27, 67, 105, 120, 141, 146], "think": [], "neighbourhood": 27, "manual": [26, 27, 29, 139], "definit": [27, 67, 120, 141], "suggest": [36, 39, 43, 46, 47, 48, 49, 51, 54, 56, 60, 63, 80, 113, 142, 143, 146], "accord": [39, 56, 111, 142, 146], "torchinfo": [27, 28, 29, 32, 91, 145, 151], "tabl": [27, 28, 29, 30, 32, 83, 91, 145, 151], "And": [26, 27], "dens": [27, 91, 97, 98, 145], "never": [29, 32, 145], "explicit": [27, 128, 148], "deep4": [27, 28, 141, 150, 151], "001": [3, 4, 21, 27, 28, 29, 30, 31, 69, 115, 116, 143, 146], "nll_loss": 27, "train_accuraci": [3, 27, 28, 29, 30, 32], "valid_accuraci": [3, 27, 28, 29, 30], "percent": [27, 28], "misclass": [27, 28], "assign": [27, 28, 132, 148], "train_misclass": [27, 28], "valid_misclass": [27, 28], "misclassif": [27, 28], "get_ylim": [27, 28], "85": [5, 27, 28], "room": [27, 28], "matric": [16, 18, 27, 28, 47, 48, 49, 67, 120, 141, 142], "label_dict": [27, 28], "i_class": [27, 28], "event_id": [], "kv": [27, 28], "conf": [27, 28], "tangermann": [26, 27, 28, 29, 30, 31, 34, 84, 95, 96, 135, 143, 145, 149], "m\u00fcller": [27, 28, 29, 30, 143], "aertsen": [27, 28, 29, 30, 143], "birbaum": [27, 28, 29, 30, 143], "braun": [27, 28, 29, 30, 143], "brunner": [27, 28, 29, 30, 143], "leeb": [27, 28, 29, 30, 143], "mehr": [27, 28, 29, 30, 143], "mueller": [27, 28, 29, 30, 143], "putz": [27, 28, 29, 30, 143], "nolt": [27, 28, 29, 30, 143], "2012": [27, 28, 29, 30, 143], "review": [27, 28, 29, 30, 143], "frontier": [27, 28, 29, 30, 34, 143], "neurosci": [27, 28, 29, 30, 34, 143], "55": [2, 4, 5, 8, 9, 10, 11, 12, 27, 28, 29, 30, 32, 33, 143], "schirrmeist": [26, 27, 28, 29, 30, 31, 34, 72, 84, 95, 96, 135, 143, 145, 149, 151], "springenberg": [26, 27, 28, 29, 30, 31, 34, 84, 95, 96, 135, 145, 149], "fieder": [26, 27, 28, 29, 30, 31, 34, 84, 95, 96, 135, 145, 149], "glasstett": [26, 27, 28, 29, 30, 31, 34, 84, 95, 96, 135, 145, 149], "eggensperg": [26, 27, 28, 29, 30, 31, 34, 84, 95, 96, 135, 145, 149], "hutter": [26, 27, 28, 29, 30, 34, 84, 95, 96, 135, 145, 149], "burgard": [27, 28, 29, 30, 34], "ball": [26, 27, 28, 29, 30, 31, 34, 72, 84, 95, 96, 135, 143, 145, 149], "2017": [26, 27, 28, 29, 30, 31, 34, 46, 47, 48, 49, 63, 72, 84, 85, 95, 96, 135, 142, 143, 145, 149], "hum": [27, 28, 29, 30], "mapp": [], "5391": [5, 27, 28, 29, 30, 31, 143], "5420": [27, 28, 29, 30, 31, 143], "1002": [26, 27, 28, 29, 30, 34, 84, 95, 96, 135, 145, 149], "hbm": [26, 27, 28, 29, 30, 34, 84, 95, 96, 135, 145, 149], "23730": [26, 27, 28, 29, 30, 34, 84, 95, 96, 135, 145, 149], "plot_bcic_iv_2a_moabb_crop": [27, 33], "classic": 28, "wrapper": [26, 28, 29], "via": [26, 28, 29, 30, 103, 107, 138, 139, 145, 146, 151], "benefici": 28, "jayaram": [28, 29, 30], "vinai": [28, 29, 30], "alexandr": [28, 29, 30, 34], "barach": [28, 29, 30], "trustworthi": [28, 29, 30], "066011": [28, 29, 30], "plot_bcic_iv_2a_moabb_tri": [28, 33], "properli": [29, 107, 110, 111, 146], "detail": [26, 29, 32, 45, 62, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 107, 108, 110, 111, 117, 118, 133, 140, 141, 142, 145, 146], "exclus": [29, 32], "page": [4, 29, 32, 34, 136, 151], "elabor": [29, 32], "feel": [29, 32], "free": [29, 32], "distinguish": 29, "scheme": [29, 32, 111, 146, 151], "divid": [72, 78, 79, 80, 112, 143, 146], "side": [39, 107, 142, 146], "answer": [29, 32], "reliabl": [29, 32], "sound": [29, 32], "divis": [29, 32, 97, 99, 116, 145, 146], "But": [29, 32], "stori": [29, 32], "what": [26, 29, 67, 83, 112, 113, 120, 141, 145, 146], "learnabl": 29, "infer": [26, 29, 30, 67, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 113, 120, 128, 141, 145, 146, 148], "connect": [29, 30, 83, 86, 90, 97, 103, 145], "kernel": [3, 4, 11, 26, 27, 28, 29, 30, 32, 46, 47, 48, 49, 63, 83, 89, 90, 97, 98, 100, 103, 142, 145], "bias": 29, "capac": [29, 30], "choic": [2, 3, 4, 5, 8, 9, 10, 12, 27, 28, 29, 30, 32, 86, 145, 151], "develop": [26, 29, 32, 136, 140], "ml": [29, 32], "degre": [29, 32, 46, 47, 48, 49, 63, 142], "freedom": [29, 32], "kept": [29, 32], "leakag": [29, 32], "memor": [29, 32], "longer": [29, 32, 67, 120, 141], "independ": [29, 32, 41, 59, 107, 142, 146, 151], "even": [11, 26, 29, 32, 67, 68, 103, 120, 141, 143, 145], "explicitli": [29, 32, 107, 108, 111, 146], "recogn": [29, 32], "behind": [29, 32], "alwai": [29, 32, 34, 53, 67, 120, 141, 142], "paramt": [], "readabl": [29, 32, 107, 146], "reiniti": [29, 32], "rescal": [29, 30], "off": [26, 29, 30, 107, 146], "varianc": [29, 30, 116, 146], "event": [16, 17, 18, 19, 20, 26, 29, 30, 74, 80, 112, 113, 143, 146], "margin": [], "extend": [], "Not": [19, 26], "realli": 29, "matter": [29, 32, 75, 76, 143], "easiest": [26, 29], "distinct": [29, 32], "previous": [29, 32], "credibl": [29, 32], "test_acc": [29, 32], "compact": [29, 92, 93, 145], "plot_simple_train_test": 29, "patch": 29, "all_dataset": 29, "bd_cmap": 29, "3a6190": 29, "683e00": 29, "ddf2ff": 29, "2196f3": 29, "ndataset": 29, "nsplit": 29, "invert_yaxi": 29, "02": [10, 11, 26, 27, 33], "set_xlim": 29, "risk": [29, 45, 62, 130, 142, 148], "tweak": 29, "until": [29, 69, 143], "visit": [26, 29], "quit": [26, 29], "unreli": 29, "ratio": 29, "leav": [29, 151], "empti": [29, 67, 107, 111, 141, 145, 146], "80": [3, 4, 10, 11, 19, 26, 27, 28, 29, 32, 72, 99, 143, 145], "x_train": 29, "train_indic": 29, "val_indic": 29, "indices_": 29, "train_subset": 29, "val_subset": 29, "meaning": 29, "plot_train_valid_test": 29, "n_train": 29, "n_val": 29, "n_test": 29, "mention": [26, 29], "suffici": 29, "compens": [16, 18, 29, 107, 146], "afterward": [27, 29, 83, 86, 90, 111, 145, 146], "unseen": 29, "holdout": 29, "highli": 29, "cross_val_scor": 29, "splitter": 29, "mayb": [], "easier": [], "train_val_split": 29, "By": [29, 30, 31, 45, 67, 120, 141, 142], "processor": [29, 30], "cv_result": 29, "plot_k_fold": 29, "fraction": [29, 31], "ii": 29, "tr_idx": 29, "val_idx": 29, "n_train2": 29, "text": [9, 10, 11, 29, 135, 149], "07": [6, 13, 29], "rotat": [29, 46, 47, 48, 49, 63, 135, 142, 149], "90": [5, 29, 32, 135, 149], "verticalalign": 29, "horizontalalign": 29, "transax": 29, "One": [29, 30, 69, 88, 89, 143, 145], "earli": 29, "rough": 29, "converg": [5, 29, 31], "quickli": 29, "messi": 29, "jointli": 29, "sould": [], "analog": [29, 128, 148], "grid": [29, 30], "tupl": [29, 30, 45, 53, 62, 67, 71, 74, 91, 104, 110, 117, 120, 123, 135, 141, 142, 143, 145, 146, 147, 149], "00625": [29, 30], "000625": 29, "best_paramet": 29, "replac": [29, 51, 65, 142, 151], "plot_how_train_test_and_tun": [29, 33], "sensit": [30, 69, 135, 143, 149], "hyeperparamet": 30, "signific": 30, "discrimin": 30, "pathologi": 30, "detect": [16, 17, 19, 30, 72, 143], "playbook": 30, "googl": 30, "_to": [], "functool": 30, "partial": 30, "analyz": 30, "initialis": [30, 120, 141], "validsplit": [26, 30, 67, 120, 141], "slice": [30, 107, 108, 112, 113, 146], "fine": 30, "42": [11, 27, 30], "learning_r": 30, "0000625": 30, "module__drop_prob": 30, "pivot": 30, "heatmap": 30, "pivot_t": 30, "param_optimizer__lr": 30, "param_module__drop_prob": 30, "fmt": 30, "3f": 30, "cmap": 30, "ylgnbu": 30, "cbar": 30, "varun": 30, "godbol": 30, "georg": 30, "dahl": 30, "justin": 30, "gilmer": 30, "christoph": 30, "shallu": 30, "zachari": 30, "nado": 30, "github": [4, 30, 136, 138, 145, 151], "tuning_playbook": 30, "plot_hyperparameter_tuning_with_scikit": [30, 33], "sara": [31, 151], "sedlar": [31, 151], "n_fake_rec": 31, "sinusoid": 31, "gaussian": [31, 43, 60, 142], "nois": [31, 43, 60, 69, 142, 143], "n_fake_ch": 31, "fake_dur": 31, "fake_sfreq": 31, "create_mne_dummy_raw": [31, 141, 150], "basedataset": [31, 35, 70, 77, 81, 118, 141, 142, 143, 144, 146, 150, 151], "fake_regression_dataset": 31, "n_fake_target": 31, "fake_data_split": 31, "target_subset": 31, "randint": [26, 31], "sin": 31, "pi": [31, 41, 59, 142], "_data": 31, "expand_dim": 31, "fake_descript": 31, "n_fake_chan": 31, "21": [5, 9, 11, 13, 31, 111, 146], "model_nam": 31, "shallowconvnet": [26, 31], "model_clf": [], "deepconvnet": 31, "unknown": [31, 128, 148], "convers": [], "model_reg": [], "minim": [31, 45, 62, 130, 136, 142, 148], "mse": 31, "ground": [31, 69, 72, 143], "truth": 31, "period": 31, "schedul": [31, 32], "optimizer_lr": 31, "optimizer_weight_decai": 31, "neg_root_mean_squared_error": 31, "root": [31, 140], "squar": [31, 96, 120, 141, 145], "train_neg_root_mean_squared_error": 31, "valid_neg_root_mean_squared_error": 31, "rmse": 31, "versu": 31, "trend": 31, "y_estim": 31, "ravel": 31, "y_gt": 31, "to_numpi": [31, 126, 127, 128, 148], "polyfit": 31, "poly1d": 31, "kingma": 31, "diederik": 31, "jimmi": 31, "ba": 31, "stochast": 31, "1412": 31, "6980": 31, "2014": [22, 31, 69, 143], "reddi": 31, "sashank": 31, "satyen": 31, "kale": 31, "sanjiv": 31, "kumar": 31, "beyond": [31, 45, 62, 130, 142, 148], "1904": 31, "09237": 31, "plot_regress": [31, 33], "scientif": 34, "softwar": [34, 136], "canon": 34, "articl": [26, 34], "hbm23730": 34, "robin": [34, 143, 151], "tibor": [34, 143, 151], "jost": 34, "tobia": 34, "dominiqu": 34, "josef": 34, "martin": [34, 151], "katharina": 34, "michael": 34, "frank": 34, "wolfram": 34, "tonio": 34, "issn": 34, "1097": 34, "0193": 34, "url": 34, "dx": [26, 34, 84, 88, 89, 95, 96, 135, 145, 149], "aug": [26, 34, 84, 95, 96, 135, 145, 149], "keyword": [34, 35, 73, 105, 107, 108, 109, 110, 111, 117, 142, 143, 145, 146], "electroencephalographi": 34, "interfac": [32, 34, 88, 89, 92, 93, 145], "interpret": [34, 39, 56, 107, 108, 120, 141, 142, 146], "built": [34, 136], "zenodo": 34, "ask": [34, 69, 143], "packag": [2, 5, 10, 11, 31, 32, 34, 138, 139, 150], "3389": 34, "fnin": 34, "2013": 34, "00267": 34, "luessi": 34, "larson": 34, "eric": 34, "deni": [34, 151], "strohmeier": 34, "brodbeck": 34, "christian": 34, "goj": 34, "roman": 34, "ja": 34, "mainak": 34, "brook": 34, "teon": 34, "parkkonen": 34, "lauri": 34, "h\u00e4m\u00e4l\u00e4inen": 34, "matti": 34, "volum": 34, "267": 34, "frontiersin": 34, "1662": 34, "453x": 34, "appropri": [34, 139], "kwarg": [35, 67, 91, 109, 120, 126, 127, 128, 141, 142, 143, 145, 146, 148], "sequenc": [30, 35, 40, 67, 100, 102, 120, 121, 124, 131, 139, 141, 142, 145, 147, 148, 151], "bandwidth": [16, 36, 54, 142], "max_freq": [36, 142], "band": [36, 54, 107, 117, 142, 146, 151], "stop": [5, 32, 36, 54, 80, 107, 112, 113, 132, 142, 143, 146, 148, 151], "desir": [36, 46, 54, 63, 69, 105, 111, 142, 143, 146], "distanc": [36, 54, 69, 142, 143], "admiss": [36, 142], "transit": [16, 36, 54, 107, 142, 146], "1hz": [36, 142], "nyquist": [36, 142], "cheng": [36, 43, 51, 54, 60, 65, 142], "goh": [36, 43, 51, 54, 60, 65, 142], "dogrusoz": [36, 43, 51, 54, 60, 65, 142], "tuzel": [36, 43, 51, 54, 60, 65, 142], "azemi": [36, 43, 51, 54, 60, 65, 142], "awar": [36, 43, 51, 54, 60, 65, 142], "biosign": [36, 43, 51, 54, 60, 65, 142], "04871": [36, 43, 51, 54, 60, 65, 142], "mohsenvand": [36, 43, 51, 54, 60, 65, 142], "izadi": [36, 43, 51, 54, 60, 65, 142], "mae": [36, 43, 51, 54, 60, 65, 142], "represent": [4, 36, 43, 45, 51, 54, 60, 62, 65, 142, 145, 151], "electroencephalogram": [36, 43, 51, 54, 60, 65, 142], "health": [36, 43, 51, 54, 60, 65, 142], "238": [36, 43, 51, 54, 60, 65, 142], "253": [36, 43, 51, 54, 60, 65, 142], "pmlr": [36, 43, 51, 54, 60, 65, 142], "get_augmentation_param": [36, 37, 38, 39, 41, 42, 43, 45, 46, 51, 53, 141, 142, 151], "freqs_to_notch": [36, 54, 142], "greater": [36, 54, 142], "static": [36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 50, 51, 52, 68, 142, 143], "flat": [10, 37, 55, 112, 113, 114, 142, 146], "cmsaugment": [37, 38, 55, 57, 142], "polici": [37, 38, 55, 57, 142], "proba_drop": [37, 142], "eras": [37, 142], "saeed": [37, 38, 55, 57, 142], "grangier": [37, 38, 55, 57, 142], "pietquin": [37, 38, 55, 57, 142], "zeghidour": [37, 38, 55, 57, 142], "heterogen": [37, 38, 55, 57, 142], "differenti": [37, 38, 55, 57, 142], "reorder": [37, 38, 55, 57, 142], "2010": [37, 38, 55, 57, 72, 142, 143], "13694": [37, 38, 55, 57, 142], "p_shuffl": [38, 57, 142], "permut": [38, 39, 45, 56, 57, 62, 142], "carri": [38, 57, 69, 142, 143], "ordered_ch_nam": [39, 47, 48, 49, 142], "invert": [39, 142], "nomenclatur": [39, 142], "deiss": [39, 56, 142], "biswal": [39, 56, 142], "jin": [39, 56, 142], "sun": [39, 56, 142], "westov": [39, 56, 142], "hamlet": [39, 56, 142], "co": [39, 56, 142], "techniqu": [39, 56, 107, 111, 142, 146], "1803": [39, 56, 100, 142, 145], "09702": [39, 56, 142], "channel_indep": [41, 59, 142], "ft": [41, 59, 83, 142, 145], "surrog": [41, 59, 142], "phase": [16, 41, 59, 107, 142, 146], "pertub": [], "uniformli": [41, 45, 46, 47, 48, 49, 59, 121, 142, 147], "perturb": [41, 59, 142], "schwabed": [41, 59, 142], "snyder": [41, 59, 142], "cakmak": [41, 59, 142], "nemati": [41, 59, 142], "clifford": [41, 59, 142], "address": [41, 59, 142], "imbal": [41, 59, 74, 142, 143], "noisi": [41, 59, 142], "fourier": [41, 59, 142], "1806": [41, 59, 142], "08675": [41, 59, 142], "magnitud": [41, 51, 142], "cliffordlab": [41, 59, 142], "tf": [41, 59, 142, 145], "draw": [41, 59, 142], "maximum": [42, 46, 47, 48, 49, 83, 112, 141, 142, 145, 146], "absolut": [42, 142], "delta_freq": [42, 58, 142], "amplitud": [42, 58, 112, 113, 142, 146, 151], "white": [43, 60, 142], "deviat": [43, 60, 142], "wang": [43, 60, 142], "zhong": [43, 60, 142], "jiang": [43, 60, 142], "liu": [43, 60, 86, 142, 145], "emot": [43, 60, 142], "recognit": [43, 60, 142], "confer": [43, 45, 46, 47, 48, 49, 60, 62, 63, 142], "multimedia": [43, 60, 142], "82": [43, 60, 142], "93": [11, 43, 60, 142], "beta_per_sampl": [45, 142], "mix": [16, 18, 45, 62, 130, 142, 148], "drawn": [45, 142], "beta": [45, 142], "hongyi": [45, 62, 130, 142, 148], "zhang": [45, 62, 90, 130, 142, 145, 148], "moustapha": [45, 62, 130, 142, 148], "ciss": [45, 62, 130, 142, 148], "yann": [45, 62, 130, 142, 148], "dauphin": [45, 62, 130, 142, 148], "david": [45, 62, 130, 142, 148], "lopez": [45, 62, 130, 142, 148], "paz": [45, 62, 130, 142, 148], "empir": [45, 62, 100, 130, 142, 145, 148], "iclr": [45, 62, 142], "onlin": [45, 62, 84, 88, 89, 95, 96, 130, 135, 142, 145, 148, 149], "1710": [45, 62, 130, 142, 148], "09412": [45, 62, 130, 142, 148], "facebookresearch": [45, 62, 130, 142, 148], "cifar10": [45, 62, 130, 142, 148], "interpol": [45, 46, 47, 48, 49, 62, 63, 142], "lam": [45, 62, 142], "idx_perm": [45, 62, 142], "form": [26, 45, 62, 69, 70, 71, 77, 142, 143], "sensors_positions_matrix": [46, 63, 142], "max_degre": [46, 47, 48, 49, 142], "spherical_splin": [46, 47, 48, 49, 63, 142], "angl": [46, 47, 48, 49, 63, 135, 142, 149], "3d": [46, 63, 142, 151], "cartesian": [46, 63, 142], "coordin": [46, 63, 142], "ten_twenty_montag": [46, 63, 142], "make_standard_montag": [46, 63, 142], "standard_1020": [46, 63, 142], "get_posit": [46, 63, 142], "ch_po": [46, 63, 142], "spheric": [46, 47, 48, 49, 63, 142], "spline": [46, 47, 48, 49, 63, 142], "scipi": [46, 47, 48, 49, 63, 67, 107, 110, 120, 141, 142, 146], "rbf": [46, 47, 48, 49, 63, 142], "quadrat": [46, 47, 48, 49, 63, 142], "krell": [46, 47, 48, 49, 63, 142], "kim": [46, 47, 48, 49, 63, 90, 142, 145], "electroencephalograph": [46, 47, 48, 49, 63, 142], "39th": [46, 47, 48, 49, 63, 142], "annual": [46, 47, 48, 49, 63, 142], "medicin": [46, 47, 48, 49, 63, 142], "biologi": [46, 47, 48, 49, 63, 142], "societi": [46, 47, 48, 49, 63, 142], "embc": [46, 47, 48, 49, 63, 142], "471": [46, 47, 48, 49, 63, 142], "474": [46, 47, 48, 49, 63, 142], "element": [46, 51, 63, 141, 142, 145], "montag": [47, 48, 49, 69, 142, 143], "approxim": [10, 47, 48, 49, 142], "flip": [50, 52, 64, 66, 142], "sign": [50, 64, 142], "smoothli": [51, 65, 142], "contigu": [16, 51, 65, 142], "Will": [51, 142], "mask_start_per_sampl": [51, 65, 142], "resp": [53, 142], "uniform": [53, 142], "instati": [], "arg": [67, 91, 120, 141, 143, 145, 148], "iterator_train__drop_last": [67, 120, 141, 151], "anyth": [67, 141], "uninstanti": [67, 120, 141], "get_loss": [67, 141, 150], "classes_": [67, 141, 150], "behavior": [10, 30, 32, 67, 141, 151], "restor": [32, 67, 141], "attributeerror": [67, 141], "sgd": [67, 120, 141], "uniniti": [4, 67, 120, 141], "updat": [32, 67, 68, 70, 71, 77, 80, 113, 117, 120, 139, 141, 143, 146, 151], "outcom": [67, 120, 141], "keyboard": [67, 120, 141], "interrupt": [67, 120, 141], "mini": [67, 120, 141], "iterator_train__batch_s": [67, 120, 141], "iterator_test__batch_s": [67, 120, 141], "iterator_valid": [67, 120, 141], "incom": [67, 120, 141], "__len__": [67, 120, 141], "deal": [67, 120, 141], "box": [67, 120, 141], "prefix": [26, 67, 120, 141], "dataset__": [67, 120, 141], "initialz": [67, 120, 141], "dataset_train": [67, 120, 126, 127, 128, 141, 148], "dataset_valid": [67, 120, 126, 127, 128, 141, 148], "get_default_callback": [67, 120, 141], "disabl": [32, 67, 107, 120, 141, 146], "conflict": [32, 67, 120, 141], "resolv": [67, 120, 141], "suffix": [67, 120, 141], "epochscoring_1": [67, 120, 141], "altern": [5, 26, 32, 67, 120, 141], "print_log": [67, 120, 141], "set_param": [11, 67, 120, 141], "callbacks__print_log__keys_ignor": [67, 120, 141], "predict_nonlinear": [67, 120, 141], "correct": [16, 18, 19, 26, 32, 67, 87, 88, 89, 90, 92, 93, 120, 141, 145, 151], "sigmoid": [10, 67, 120, 141], "pickleabl": [67, 120, 141], "accept": [67, 80, 102, 113, 120, 141, 143, 145, 146], "predict_proba": [67, 120, 141, 150, 151], "whatev": [67, 120, 141], "anywher": [67, 120, 141], "notabl": [67, 120, 141], "unaffect": [67, 120, 141], "warm_start": [67, 120, 141], "cold": [67, 120, 141], "warm": [67, 120, 141], "summari": [67, 91, 101, 120, 141, 145], "regardless": [67, 120, 141], "acceler": [67, 120, 141], "sent": [67, 120, 141], "unmodifi": [67, 120, 141], "compil": [67, 120, 141], "instal": [32, 67, 107, 110, 120, 141, 146, 151], "volta": [67, 120, 141], "amper": [67, 120, 141], "dunder": [67, 120, 141], "notat": [67, 120, 141], "compile__dynam": [67, 120, 141], "dynam": [67, 120, 141], "model_evalu": [67, 120, 141], "prefixes_": [67, 120, 141, 150], "special": [67, 120, 141], "neuralnet": [67, 120, 141], "optimizer__momentum": [67, 120, 141], "popul": [67, 120, 141, 151], "cuda_dependent_attributes_": [67, 120, 141, 150], "whose": [67, 80, 113, 120, 141, 143, 146], "unpickl": [67, 120, 141], "expand": [67, 103, 120, 141, 145], "initialized_": [67, 120, 141, 150], "criterion_": [67, 120, 141, 150], "callbacks_": [67, 120, 141, 150], "_modul": [67, 120, 141, 150], "collect": [26, 67, 72, 120, 141, 143], "_criteria": [67, 120, 141, 150], "_optim": [67, 120, 141, 150], "get_iter": [67, 120, 141, 150], "drop_index": [67, 120, 141], "iterator_test": [67, 120, 141], "spars": [67, 120, 141], "csr": [67, 120, 141], "former": [26, 67, 83, 86, 90, 120, 141, 145], "doesn": [32, 67, 68, 120, 141, 143], "y_proba": [67, 120, 141], "trial_predict": [67, 120, 131, 141, 148], "n_trial": [67, 78, 120, 131, 141, 143, 148], "n_predict": [67, 120, 125, 129, 131, 141, 148], "trial_label": [67, 120, 131, 141, 148], "n_target": [67, 120, 131, 141, 148], "bbci": [68, 141, 150], "de": [68, 143, 145], "desc_4": [68, 143], "pdf": [68, 143], "force_upd": [68, 143], "locat": [68, 143], "environ": [4, 68, 133, 141, 143], "config": [68, 143], "mne_datasets_": [68, 143], "_path": [68, 143], "mne_data": [16, 17, 19, 68, 143], "forc": [68, 143], "overrid": [68, 143], "subj": [72, 143], "250hz": [], "iia": [69, 143], "r382d436f3223": [69, 143], "cue": [69, 72, 143], "imag": [69, 88, 89, 143, 145], "inat": [69, 143], "movement": [69, 72, 143], "tongu": [3, 18, 21, 27, 28, 29, 30, 32, 69, 143], "compris": [69, 143], "48": [5, 10, 11, 18, 20, 69, 90, 143, 145], "288": [69, 143, 151], "sit": [69, 143], "comfort": [69, 143], "armchair": [69, 143], "front": [69, 143], "screen": [69, 143], "fixat": [69, 143], "acoust": [69, 143], "tone": [69, 143], "arrow": [69, 72, 143], "down": [69, 97, 103, 110, 133, 141, 143, 145, 146], "foot": [69, 143], "prompt": [69, 136, 143], "disappear": [69, 143], "twenti": [69, 143], "agcl": [69, 143], "inter": [69, 72, 143], "monopolarli": [69, 143], "mastoid": [69, 111, 143, 146], "amplifi": [69, 143], "\u03bcv": [69, 143], "notch": [69, 143], "suppress": [69, 107, 143, 146], "metadata": [16, 18, 19, 26, 70, 77, 112, 120, 121, 122, 123, 124, 141, 143, 146, 147], "subdirectori": [16, 18, 70, 118, 143, 146], "raw_preproc_kwarg": [70, 143], "window_kwarg": [27, 28, 70, 143], "window_preproc_kwarg": [70, 143], "old": [70, 118, 143, 146, 151], "ad": [16, 18, 19, 70, 75, 76, 101, 103, 111, 143, 145, 146, 151], "match": [16, 18, 19, 26, 30, 70, 83, 143, 145], "datapoint": [70, 143], "along": [26, 71, 77, 110, 139, 143, 146, 151], "gamma": [72, 143], "discrib": [], "schirrmeister2017": [26, 72, 84, 95, 96, 141, 143, 145], "120": [10, 72, 99, 143, 145], "500hz": [72, 143], "r5e478952091a": [72, 143], "44": [11, 26, 32, 72, 143], "cover": [72, 135, 143, 149], "cortex": [72, 143], "healthi": [72, 74, 143], "963": [72, 143], "150": [9, 10, 11, 72, 143], "rest": [72, 111, 143, 146], "approx": [72, 143], "880": [72, 143], "except": [72, 74, 143, 145], "160": [11, 72, 143], "acquir": [72, 143], "lab": [72, 143], "invas": [72, 143], "2008": [72, 85, 143, 145], "darva": [72, 143], "direct": [72, 136, 143], "grai": [72, 143], "back": [72, 141, 143], "had": [72, 88, 89, 91, 143, 145], "clench": [72, 143], "toe": [72, 143], "downward": [72, 143], "tap": [72, 143], "leftward": [72, 143], "rightward": [72, 143], "relax": [72, 143], "upward": [72, 143], "littl": [72, 143], "proxim": [72, 143], "muscular": [72, 143], "volv": [72, 143], "pace": [72, 143], "maintain": [72, 143], "interv": [32, 72, 113, 143, 146], "pseudo": [72, 143], "ideal": [72, 143], "260": [72, 143], "stimuli": [72, 143], "bci2000": [72, 143], "schalk": [72, 143], "2004": [72, 143], "approv": [72, 143], "ethic": [72, 143], "committe": [72, 143], "freiburg": [72, 143], "dataset_kwarg": [73, 143], "load_eeg_onli": [74, 143], "content": [74, 143], "edfx": [74, 143], "overnight": [74, 143], "78": [4, 5, 31, 74, 143], "auto_tutori": [74, 143], "plot_sleep": [74, 143], "eog": [74, 103, 143, 145], "emg": [74, 143], "temperatur": [74, 143], "respir": [74, 143], "3h": [74, 143], "3600": [22, 74, 143], "parent": [75, 76, 141, 143], "ascend": [75, 76, 143], "preserv": [75, 76, 143], "physician": [75, 76, 143], "c_tuab": [76, 143], "i_window_in_tri": [77, 122, 132, 143, 147, 148], "i_start_in_tri": [77, 122, 143, 147], "i_stop_in_tri": [77, 122, 132, 143, 147, 148], "applic": [77, 107, 143, 146], "pre": [26, 78, 111, 143, 146, 151], "compativl": [], "accepted_bads_ratio": [80, 113, 143, 146], "rawarrai": [17, 19, 31, 80, 141, 143], "onset": [80, 113, 143, 146], "fall": [80, 113, 143, 146], "outsid": [80, 113, 143, 146], "proport": [80, 88, 89, 113, 143, 145, 146], "withinconsist": [80, 143], "exceed": [80, 113, 143, 146], "concat_dataset": [81, 82, 144], "input_window_second": [26, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 120, 141, 145], "conv_block_n_filt": [83, 145], "conv_block_kernel_length_1": [83, 145], "conv_block_kernel_length_2": [83, 145], "conv_block_pool_size_1": [83, 145], "conv_block_pool_size_2": [83, 145], "conv_block_depth_mult": [83, 145], "conv_block_dropout": [83, 145], "att_head_dim": [83, 145], "att_num_head": [83, 145], "att_dropout": [83, 145], "tcn_depth": [83, 145], "tcn_kernel_s": [83, 145], "tcn_n_filter": [83, 145], "tcn_dropout": [83, 145], "tcn_activ": [83, 145], "elu": [11, 83, 84, 88, 89, 94, 145], "max_norm_const": [83, 145], "chs_info": [26, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 120, 141, 145], "input_size_": [83, 97, 98, 99, 103, 145], "offici": [83, 139, 145], "tensorflow": [83, 145], "secod": [], "block": [83, 88, 89, 90, 100, 103, 145], "denot": [83, 145], "f1": [5, 9, 10, 11, 83, 93, 128, 145, 148], "kc": [83, 145], "pool": [3, 4, 26, 27, 28, 29, 32, 83, 84, 86, 88, 89, 91, 96, 98, 101, 103, 145], "p2": [83, 145], "depthwis": [83, 88, 89, 145], "pc": [83, 145], "head": [83, 86, 99, 122, 145, 147], "dh": [83, 145], "1_": [83, 145], "pa": [83, 145], "tcn": [26, 83, 141, 150, 151], "residu": [83, 94, 145], "kt": [83, 145], "slid": [83, 145], "feed": [83, 99, 145], "logit": [83, 145], "contrari": [83, 145], "norm": [10, 83, 145], "constraint": [83, 145], "impos": [83, 145], "fill": [26, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 145], "ch": [26, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 145], "alia": [26, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 145], "attempt": [26, 83, 84, 85, 91, 94, 95, 96, 97, 98, 99, 100, 103, 111, 145, 146], "altaheri": [83, 145], "muhammad": [83, 145], "alsulaiman": [83, 145], "physic": [83, 145], "industri": [83, 145], "informat": [83, 145], "tii": [83, 145], "3197419": [83, 145], "overridden": [83, 86, 90, 145], "subclass": [83, 86, 90, 145], "recip": [83, 86, 90, 145], "care": [83, 86, 90, 145], "regist": [83, 86, 90, 145], "hook": [83, 86, 90, 145, 151], "latter": [83, 86, 90, 145], "silent": [83, 86, 90, 145], "miss": [26, 83, 86, 88, 90, 92, 93, 94, 95, 97, 103, 145, 151], "first_conv_nonlin": [84, 145], "first_pool_nonlin": [84, 145], "later_conv_nonlin": [84, 145], "later_pool_nonlin": [84, 145], "normalis": [26, 84, 96, 145], "momentum": [10, 26, 84, 88, 89, 96, 145], "batchnorm2d": [3, 4, 26, 27, 28, 29, 32, 84, 88, 89, 96, 145], "load_state_dict": [91, 141, 145], "state_dict": [91, 145], "combinedconv": [3, 4, 26, 27, 28, 29, 32, 141, 145], "supratak": [85, 145], "bidirect": [85, 145], "supratak2017": [85, 145], "dong": [85, 145], "wu": [85, 145], "guo": [85, 145], "1998": [85, 145], "att_depth": [86, 145], "att_head": [86, 145], "att_drop_prob": [86, 145], "final_fc_length": [86, 145], "2440": [86, 145], "return_featur": [86, 145], "conform": [86, 145], "methodolog": [86, 145], "song2022": [86, 145], "conformercod": [86, 145], "reciev": [], "tradit": [86, 145], "n_timestep": [86, 145], "compos": [86, 141, 142, 145, 150], "patchembed": [86, 145], "transformerencod": [86, 145], "classificationhead": [86, 145], "sement": [], "recombin": [86, 145], "song": [86, 145, 151], "zheng": [86, 145], "q": [86, 145], "gao": [86, 145], "710": [86, 145], "719": [86, 145], "ieeexplor": [86, 145], "9991178": [86, 145], "eeyhsong": [86, 145], "get_fc_siz": [86, 141, 145], "in_channel": [87, 88, 89, 90, 141, 145], "itnet": [87, 145, 151], "incept": [87, 88, 89, 90, 145, 151], "salami": [87, 145], "salami2022": [87, 145], "abbassalami": [87, 145], "guarante": [87, 88, 89, 90, 92, 93, 145], "reimplement": [87, 88, 89, 90, 92, 93, 145], "andreu": [87, 145], "perez": [87, 145], "gillmeist": [87, 145], "3161489": [87, 145], "scales_samples_": [88, 89, 145], "125": [20, 88, 89, 98, 145], "n_filter": [88, 89, 90, 100, 145], "depth_multipli": [88, 89, 145], "pooling_s": [88, 89, 145], "erp": [88, 89, 145], "deperec": [], "deprec": [2, 5, 10, 31, 88, 143, 145, 151], "AND": [88, 145], "WILL": [88, 145], "BE": [88, 145], "IN": [88, 145], "THE": [88, 145], "releas": [5, 88, 136, 140, 145], "OF": [88, 145], "eeginceptionerp": [26, 88, 141, 145, 151], "futur": [10, 26, 30, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 145], "santamaria2020": [88, 89, 145], "inceptionnet": [88, 89, 90, 145], "goal": [32, 88, 89, 90, 145], "largest": [88, 89, 141, 145], "associ": [88, 89, 145], "winner": [88, 89, 145], "beetl": [88, 89, 145], "neurip": [88, 89, 145], "r15fdf33b022f": 88, "santamaria": [88, 89, 145], "vazquez": [88, 89, 145], "martinez": [88, 89, 145], "cagig": [88, 89, 145], "vaquerizo": [88, 89, 145], "villar": [88, 89, 145], "hornero": [88, 89, 145], "novel": [26, 88, 89, 145], "assist": [88, 89, 145], "28": [4, 5, 11, 30, 33, 88, 89, 145], "3048106": [88, 89, 145], "grifcc": [88, 89, 145], "r37c4761d4e92": 89, "sampel": [], "eegincept": [26, 89, 141, 150, 151], "n_conv": [90, 145], "kernel_unit_": [90, 145], "relu": [9, 10, 90, 145], "input_window_": [90, 145], "vision": [90, 145], "wide": [90, 145], "branch": [90, 145], "1d": [90, 145], "odd": [11, 90, 103, 145], "bose": [90, 145], "eskandarian": [90, 145], "accur": [90, 145], "robust": [90, 145], "046014": [90, 145], "mixin": [91, 145], "get_torchinfo_statist": [91, 141, 145], "col_nam": [91, 145], "input_s": [91, 145], "output_s": [10, 91, 102, 145], "num_param": [91, 145], "kernel_s": [9, 10, 91, 100, 141, 145, 151], "row_set": [91, 145], "var_nam": [3, 4, 11, 26, 27, 28, 29, 32, 91, 145], "modelstatist": [91, 145], "pool_mod": [26, 92, 93, 96, 145], "second_kernel_s": [92, 145], "third_kernel_s": [92, 93, 145], "eegnet": [92, 93, 141, 150], "lawhern": [92, 93, 145], "2016": [22, 92, 145], "solon": [92, 93, 145], "waytowich": [92, 93, 145], "gordon": [92, 93, 145], "hung": [92, 93, 145], "lanc": [92, 93, 145], "1611": [92, 93, 145], "08024": [92, 93, 145], "f2": [93, 145], "kernel_length": [93, 145], "v4": [93, 145], "eegnet4": [93, 145], "final_pool_length": [94, 145, 151], "n_first_filt": [94, 145], "n_layers_per_block": [94, 145], "first_filter_length": [94, 145], "batch_norm_epsilon": [94, 145], "0001": [2, 30, 94, 116, 145, 146], "conv_weight_init_fn": [94, 145], "hybrid": [95, 141, 150], "conv_nonlin": [26, 96, 145], "pool_nonlin": [26, 96, 145], "safe_log": [96, 141, 145], "n_conv_chan": [97, 145], "n_group": [97, 145], "max_pool_s": [97, 145], "blanco": [97, 145], "blanco2020": [97, 145], "seven": [97, 145], "group": [97, 141, 145], "fernandez": [97, 145], "rivero": [97, 145], "pazo": [97, 145], "soft": [97, 145], "4067": [97, 145], "4079": [97, 145], "1007": [97, 145], "s00500": [97, 145], "04174": [97, 145], "time_conv_size_": [98, 103, 145], "max_pool_size_": [98, 145], "pad_size_": [98, 145], "half": [98, 107, 145, 146], "n_tce": [99, 145], "d_model": [99, 145], "d_ff": [99, 145], "n_attn_head": [99, 145], "after_reduced_cnn_s": [99, 145], "multi": [99, 145], "resolut": [99, 145], "mrcnn": [99, 145], "recalibr": [99, 145], "afr": [10, 99, 145], "encod": [11, 99, 103, 145], "tce": [99, 145], "mechan": [99, 145, 151], "captur": [99, 145], "among": [99, 145], "100hz": [99, 145], "125hz": [99, 145], "shh": [99, 145], "unintend": [99, 145], "clone": [99, 145, 151], "fc": [10, 99, 145], "positionwisefeedforward": [99, 145], "emadeldeen24": [99, 145], "attnsleep": [99, 145], "sleepdata": [99, 145], "n_block": [100, 145], "add_log_softmax": [2, 8, 26, 31, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 141, 145], "n_in_chan": [100, 145], "bai": [100, 145], "bai2018": [100, 145], "locuslab": [100, 145], "kolter": [100, 145], "koltun": [100, 145], "recurr": [100, 145], "01271": [100, 145], "s_growth": [101, 145], "t_filter": [101, 145], "temp_lay": [101, 145], "spat_lay": [101, 145], "temp_span": [101, 145], "thinker": [101, 145, 151], "invari": [101, 145, 151], "densenet": [101, 145], "kosta": [101, 145], "growth": [101, 145], "densefilt": [101, 145], "percentag": [101, 145], "temp_len": [101, 145], "1500": [11, 101, 122, 145, 147], "adaptiveavgpool1d": [10, 101, 145], "spoclab": [101, 145], "ca": [101, 145], "thinkerinvari": [101, 145], "rudzicz": [101, 145], "across": [101, 111, 121, 125, 145, 146, 147, 148], "peopl": [101, 145], "eng": [101, 145], "17": [2, 5, 11, 32, 101, 145], "056008": [101, 145], "1088": [5, 9, 101, 145], "1741": [101, 145], "2552": [101, 145], "abb7a7": [101, 145], "stager": [102, 145], "middl": [102, 145], "seq_len": [102, 145], "n_time_filt": [103, 145], "complexity_factor": [103, 145], "67": [32, 103, 145], "0703125": [103, 145], "ensure_odd_conv_s": [103, 145], "autoencod": [103, 145], "shrink": [103, 145], "maxpool": [11, 103, 145], "conv1d": [10, 11, 103, 145], "fewer": [103, 107, 145, 146], "conv": [10, 11, 103, 145], "2x2": [103, 145], "halv": [103, 145], "ne": [103, 145], "output_shap": [91, 104, 145], "apply_funct": [109, 146], "raw_or_epoch": [109, 146], "reject": [10, 112, 113, 114, 146], "on_miss": [106, 112, 113, 146], "concatdataset": [112, 143, 146], "ie": [112, 146], "winddow_size_sampl": [112, 146], "exactli": [113, 146], "numer": [30, 113, 145, 146], "inconsist": [113, 146], "demeanin": [115, 146], "exponent": [115, 116, 146], "m_t": [115, 116, 146], "mathrm": [115, 116, 146], "factornew": [115, 116, 146], "cdot": [115, 116, 146], "x_t": [115, 116, 146], "m_": [115, 116, 146], "deman": [115, 146], "_t": [115, 116, 146], "demean": [115, 146], "ep": [10, 116, 145, 146], "Then": [116, 146], "v_t": [116, 146], "v_": [116, 146], "sqrt": [116, 146], "stabil": [116, 146], "frequency_band": [117, 146], "drop_original_sign": [117, 146], "order_by_frequency_band": [117, 146], "mne_filter_kwarg": [117, 146], "unfilt": [117, 146], "oder": [], "cz_4": [117, 146], "o1_4": [117, 146], "cz_8": [117, 146], "o1_8": [117, 146], "fileexistserror": [118, 146], "suppos": 26, "mistakenli": [], "forget": [], "deriv": [], "n_sequenc": [121, 124, 145, 147], "inspir": [121, 147], "perslev2021": [121, 147], "recordingsampl": [121, 123, 124, 141, 147, 150], "randomst": [121, 122, 123, 124, 141, 147], "state": [32, 121, 122, 123, 124, 141, 147], "sample_class": [121, 141, 147], "rec_ind": [121, 122, 147], "run_0": [20, 122, 147], "2500": [3, 22, 28, 29, 122, 147], "multiindex": [122, 147], "sample_record": [122, 141, 147], "sample_window": [122, 141, 147], "tau_max": [123, 147], "banville2020": [123, 147], "file_id": [124, 141, 147], "ensembl": [124, 145, 147, 151], "loss_funct": [125, 129, 148], "n_batch": [32, 125, 129, 141, 148], "target_extractor": [126, 127, 128, 148], "use_cach": [126, 127, 148], "on_epoch_end": [126, 127, 128, 141, 148], "on_batch_end": [127, 141, 148], "recomput": [128, 148], "global": [128, 148], "slightli": [128, 148], "scorer": [128, 148], "signatur": [128, 148], "scalar": [128, 148], "wors": [128, 148], "tri": [128, 143, 148], "timeseri": [129, 148], "window_len": [129, 148], "nan": [26, 129, 148], "mixup": [130, 141, 142, 148, 150, 151], "duplic": [132, 148, 151], "atleast": [], "2darrai": [132, 141, 148], "preds_per_tri": [132, 148], "doc": [26, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 133, 140, 141, 143, 145, 150, 151], "lack": [133, 141], "pythonhashse": [133, 141], "forum": [133, 141], "ai": [133, 141], "solv": [133, 141, 151], "31628": [133, 141], "use_deterministic_algorithm": [133, 141], "colormap": [5, 135, 149], "linearsegmentedcolormap": [135, 149], "textcolor": [135, 149], "vmin": [135, 149], "vmax": [135, 149], "fontweight": [135, 149], "rotate_row_label": [135, 149], "rotate_col_label": [135, 149], "with_f1_scor": [135, 149], "norm_ax": [135, 149], "rotate_precis": [135, 149], "class_names_fonts": [135, 149], "precis": [5, 9, 10, 11, 135, 149], "font": [135, 149], "bold": [135, 149], "heavi": [135, 149], "ultrabold": [135, 149], "ultralight": [135, 149], "encount": [16, 18, 136], "hard": 136, "happen": [136, 151], "mistak": 136, "corrupt": 136, "irregular": 136, "chat": 136, "bear": 136, "tracker": 136, "request": [111, 136, 146], "open": [16, 18, 136, 137, 139], "sure": [136, 143], "ve": 136, "shell": 136, "__version__": [136, 140], "latest": [136, 139, 140], "replic": 136, "link": [136, 151], "anonym": 136, "portion": 136, "persist": 136, "smallest": 136, "past": 136, "backtick": 136, "contributor": [136, 140], "snippet": 136, "toolbox": 137, "electrophysiolog": 137, "fetcher": 137, "neuroscientist": 137, "who": 137, "neurophysiolog": 137, "pypi": 138, "repositori": 138, "pip": [32, 138, 139, 140, 151], "beginn": 138, "advanc": 138, "familiar": 138, "instruct": 138, "contribut": [138, 140], "braincod": 139, "command": [139, 140], "nvidia": 139, "driver": 139, "cuda_path": 139, "troubleshoot": 139, "thing": 140, "enter": 140, "git": 140, "cd": 140, "api": [26, 140, 145], "repo": 140, "zipbal": 140, "master": 140, "egg": 140, "edit": 140, "verifi": 140, "guidelin": 140, "whats_new": 151, "incompat": 151, "einop": 151, "466": 151, "extra": [32, 145, 151], "467": 151, "marco": 151, "zamboni": 151, "rearrang": [3, 4, 26, 27, 28, 29, 32, 151], "468": 151, "conda": 151, "yml": 151, "ci": 151, "479": 151, "refactor": 151, "sub": [27, 141, 151], "470": 151, "action": 151, "472": [5, 151], "489": 151, "485": 151, "pierr": [26, 151], "guetschel": [26, 151], "490": 151, "487": 151, "473": 151, "eegmodulemixin": [2, 31, 141, 145, 151], "488": 151, "495": 151, "sylvain": 151, "chevalli": 151, "494": 151, "bruna": 151, "lope": 151, "491": 151, "enforc": 151, "fuction": [], "497": 151, "env": 151, "505": 151, "friendli": 151, "\u015bliwowski": 151, "shallowfbcsp": [145, 151], "503": 151, "sampler": [141, 142, 150, 151], "504": 151, "th\u00e9o": 151, "eegresnet": [26, 141, 150, 151], "451": 151, "465": 151, "397": 151, "eeginceptionmi": [26, 141, 145, 151], "428": [11, 151], "atcnet": [26, 141, 150, 151], "429": [11, 13, 151], "431": 151, "mohammad": 151, "javad": 151, "oskar": 151, "st\u00f8rmer": 151, "deepsleepnet": [26, 141, 150, 151], "417": 151, "eegconform": [26, 141, 150, 151], "454": 151, "yonghao": 151, "461": 151, "e231": 151, "whitespac": 151, "untrac": 151, "flake8": 151, "460": [5, 151], "transposit": 151, "_frequency_shift": 151, "446": 151, "matthieu": 151, "terri": 151, "390": 151, "eegitnet": [26, 141, 150, 151], "ghaith": 151, "bouallegu": 151, "371": 151, "389": 151, "exemplifi": 151, "349": 151, "unifi": 151, "sheme": [], "378": 151, "wimpff": 151, "391": 151, "406": 151, "recoding_id": 151, "402": 151, "ft_surrog": [141, 142, 151], "409": 151, "get_param": 151, "388": 151, "alex": 151, "delai": [107, 146, 151], "413": 151, "zscore": 151, "mnepreproc": 151, "numpypreproc": 151, "415": 151, "411": 151, "263": 151, "tidnet": [26, 141, 150, 151], "170": [5, 151], "ann": 151, "kathrin": 151, "kiessner": 151, "henrik": 151, "bonsmann": 151, "vytauta": 151, "jankauska": 151, "274": 151, "254": 151, "thoma": 151, "facilit": [26, 151], "287": 151, "aggregate_proba": [141, 145, 151], "294": 151, "312": 151, "balancedsequencesampl": [141, 147, 150, 151], "295": 151, "277": 151, "318": 151, "261": 151, "cloneabl": 151, "347": 151, "353": 151, "docstr": [26, 141, 151], "333": 151, "365": 151, "367": 151, "304": [11, 151], "mismatch": 151, "327": 151, "propag": 151, "269": 151, "favour": 151, "292": 151, "199": 151, "198": 151, "197": [11, 151], "178": 151, "161": [11, 151], "152": [11, 23, 151], "138": 151, "142": [5, 151], "147": [13, 151], "realiz": 151, "filterbank": [141, 146, 150, 151], "158": 151, "159": 151, "timecrop": 151, "164": [30, 33, 151], "185": 151, "282": 151, "sleepstagerblanco2020": [26, 141, 145, 151], "341": 151, "accident": 151, "sum": [32, 151], "previou": [32, 151], "167": 151, "compute_amplitude_gradi": [141, 149, 150, 151], "4d": 151, "166": 151, "incorrect": 151, "146": 151, "169": 151, "window_s": 151, "148": 151, "171": 151, "155": 151, "223": 151, "favor": 151, "__": [], "adjustmenty": 32, "braindecode_cmap": [], "lw": [], "yticklabel": [], "encode_color": [], "br_cmap": [], "mosaic": [], "aa": [], "bc": [], "constrained_layout": [], "subplot_mosa": [], "gridspec_kw": [], "height_ratio": [], "width_ratio": [], "tr": [], "tt": [], "color_indic": [], "ndata": [], "yaxi": [], "set_fonts": [], "300": [], "075": [], "subsequ": [105, 146], "time_as_index": [105, 146], "first_samp": [105, 146], "last_samp": [105, 146], "exce": [105, 146], "exclud": [105, 107, 108, 111, 146], "19": [5, 9, 10, 11, 32, 105, 111, 146], "emit": [106, 146], "inst": [20, 106, 107, 108, 111, 146], "evok": [106, 107, 108, 111, 146], "reorder_channel": [106, 146], "drop_channel": [106, 146], "filter_length": [107, 146], "l_trans_bandwidth": [107, 146], "h_trans_bandwidth": [107, 146], "fir": [16, 107, 146], "iir_param": [107, 146], "fir_window": [107, 146], "ham": [16, 107, 146], "fir_design": [107, 146], "firwin": [16, 107, 146], "skip_by_annot": [107, 146], "edg": [16, 107, 146], "bad_acq_skip": [107, 146], "reflect_limit": [107, 110, 146], "iir": [107, 146], "meg0111": [107, 108, 146], "meg2623": [107, 108, 146], "reciproc": [107, 146], "shortest": [107, 146], "firwin2": [107, 146], "5500m": [107, 146], "doubl": [107, 146], "cupi": [107, 110, 146], "filtfilt": [107, 146], "4th": [107, 146], "butterworth": [107, 146], "construct_iir_filt": [107, 146], "symmetr": [107, 146], "construct": [107, 111, 146], "causal": [16, 107, 145, 146], "twice": [107, 146], "minimum": [107, 146], "weaker": [107, 146], "lfilter": [107, 146], "hann": [107, 146], "blackman": [107, 146], "attenu": [16, 107, 146], "concatenate_raw": [107, 146], "acquisit": [107, 146], "reflect": [107, 110, 146], "mirror": [107, 110, 146], "create_filt": [107, 146], "savgol_filt": [107, 146], "notch_filt": [107, 146], "filter_data": [107, 146], "npad": [110, 146], "boxcar": [110, 146], "joint": [111, 145, 146], "virtual": [111, 146], "infin": [111, 146], "footcit": [111, 146], "yao2001": [111, 146], "apply_proj": [111, 146], "seeg": [111, 146], "projector": [111, 146], "set_bipolar_refer": [111, 146], "bipolar": [111, 146], "m1": [111, 146], "m2": [111, 146], "dropchannel": [141, 146, 150, 151], "seteegrefer": [141, 146, 150, 151], "0x7fe863dd3520": [], "home": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19, 26, 27, 28, 29, 30, 31, 32], "bru": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19, 26, 27, 28, 29, 30, 31, 32], "pycharmproject": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 18, 26, 27, 28, 29, 30, 31, 32], "userwarn": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 18, 26, 27, 28, 29, 30, 31, 32], "dur": [2, 3, 5, 8, 9, 10, 11, 26, 27, 28, 29, 30, 31], "9036": 2, "3098": 2, "5378": 2, "7346": 2, "0006": [2, 3, 8, 27, 28, 29], "4600": [], "7531": 2, "1260": 2, "9596": 2, "0748": 2, "4068": [], "7764": 2, "7415": 2, "6787": 2, "1893": 2, "0005": [2, 3, 22, 28, 31], "4028": [], "7969": 2, "3918": 2, "5638": 2, "4423": 2, "0004": 2, "4040": [], "2712": [2, 10], "1846": 2, "4237": 2, "0104": 2, "0002": [2, 3, 28], "4030": [], "5736": 2, "9208": 2, "3549": 2, "4441": 2, "4004": [], "8229": 2, "6185": 2, "3132": 2, "7803": 2, "0000": [2, 3, 8, 27, 28, 29, 30, 31], "4014": [], "0644": 2, "3050": 2, "3316": 2, "0887": 2, "4009": [], "advanced_train": 5, "matplotlibdeprecationwarn": 5, "ship": [], "v0_8": [], "568": [], "1025": [], "0x7fe865cd1310": [], "depreci": [3, 4, 8, 27, 28, 29, 30, 31, 32], "2535": [27, 28], "6458": [], "1251": [8, 22], "3744": [], "2639": 2, "3297": [], "7606": [], "2486": [], "1539": [], "1230": [], "3873": [], "2708": 28, "1567": [], "2554": [], "3523": [], "1125": [3, 4, 28, 29, 32], "ensure4d": [3, 4, 26, 27, 28, 29, 32, 141, 145], "ensuredim": [3, 4, 26, 27, 28, 29, 32], "dimshuffl": [3, 4, 26, 27, 28, 29, 32], "conv_time_spat": [3, 4, 26, 27, 28, 29, 32], "1101": [3, 4, 28, 29, 32], "240": [3, 4, 17, 26, 27, 28, 29, 32], "bnorm": [3, 4, 26, 27, 28, 29, 32], "express": [3, 4, 26, 27, 28, 29, 32, 141, 145], "conv_nonlin_exp": [3, 4, 26, 27, 28, 29, 32], "avgpool2d": [3, 4, 26, 27, 28, 29, 32], "69": [3, 4, 5, 28, 29, 30, 32], "pool_nonlin_exp": [3, 4, 26, 27, 28, 29, 32], "conv2d": [3, 4, 9, 26, 27, 28, 29, 32, 145], "conv_classifi": [3, 4, 26, 27, 28, 29, 32], "044": [3, 4, 28, 29, 32], "logsoftmax": [3, 4, 26, 27, 28, 29, 30, 32, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 145, 151], "364": [3, 4, 28, 29, 32], "trainabl": [3, 4, 11, 26, 27, 28, 29, 32], "mult": [3, 4, 11, 26, 27, 28, 29, 32], "04": [3, 4, 11, 23, 26, 28, 29, 32], "480": [], "278": [], "0x7fe86526fc70": [], "fold": [4, 30, 32], "candid": [4, 29, 30], "x27": 4, "lt": 4, "gt": 4, "ou": 4, "rerun": 4, "cell": 4, "trust": 4, "unabl": 4, "render": 4, "nbviewer": 4, "gridsearchcvgridsearchcv": 4, "accuracyof": 4, "08": [], "39": [11, 22], "0x7fe8660d8280": [], "0x7fe8652ecbe0": [], "5547": [], "7113": [], "6000": [], "6843": [], "4289": [], "6328": [], "6624": [], "5600": [], "6505": [], "3303": [], "4922": 5, "8274": [], "5560": [], "6834": [], "5078": [], "7217": [], "5360": [], "7066": [], "3361": [], "5859": [], "6870": [], "6240": [], "6800": 5, "3068": [], "6016": [], "6796": [], "6640": [], "6374": [], "3051": [], "6560": [], "6086": [], "3399": [], "5312": [], "6652": 22, "5995": [], "3007": [], "6250": [], "6281": [], "6480": 5, "5983": [], "3024": [], "6172": 5, "6372": 9, "6520": [], "5871": [], "3054": [], "6536": [], "6720": [], "5716": [], "3063": [], "6641": 5, "6467": [], "7000": 5, "5585": [], "3109": [], "6780": [], "7080": 5, "5460": [], "3161": [], "6079": [], "7240": 5, "5354": [], "3017": [], "6875": [], "6046": 30, "7200": 10, "5281": 9, "3152": [], "7031": 5, "5850": [], "7320": [], "5257": [], "3060": [], "6562": 5, "6134": [], "7440": [], "5324": [], "3143": [], "5765": [], "7400": [], "5327": [], "3327": [], "7344": 5, "5445": [], "5264": [], "3087": [], "6294": [], "5214": 9, "3092": [], "5487": [], "5244": [], "3108": [], "7188": [], "5476": [], "7280": 5, "5270": [], "5974": [], "5273": [], "3165": [], "6453": [], "7360": [], "5231": [], "3155": [], "6797": [], "5698": [], "5217": [], "3095": [], "375": 11, "34": [11, 30], "recal": [5, 9, 10, 11], "65": [5, 11], "53": [5, 16, 22], "58": [5, 11, 22], "74": 5, "68": 5, "129": [5, 11], "macro": [5, 9, 10, 11], "avg": [5, 9, 10, 11], "63": 5, "2023": [2, 5, 10, 11, 31, 32], "venv": [2, 5, 10, 11, 31, 32], "lib": [2, 5, 10, 11, 31, 32], "python3": [2, 5, 10, 11, 31, 32], "site": [2, 5, 10, 11, 31, 32], "_logist": 5, "convergencewarn": 5, "statu": 5, "NO": 5, "max_it": 5, "n_iter_i": 5, "_check_optimize_result": 5, "9030": [], "5768": 9, "5662": [], "56": [2, 3, 6, 11], "41": [5, 11, 27], "71": 5, "33": [9, 11, 16], "114": [], "77": [5, 11], "37": [9, 11, 22, 26], "51": [5, 11], "109": 5, "562": 5, "46": [11, 26], "105": [5, 6], "61": [9, 26, 27], "477": [], "minor": 5, "obj": [5, 141, 145], "0x7fe85e27f760": [], "735": [], "422": [], "115": [11, 16], "auto_examples_advanced_train": 6, "00": [4, 6, 10, 13, 16, 18, 23, 26, 32, 33], "119": [], "1024": [26, 30], "bcicomp": [8, 141, 150], "0x7fe85c0b2490": [], "train_r2": 8, "valid_r2": 8, "5083": 8, "5570": 8, "7022": [], "1483": 22, "6080": [], "1650": [], "7986": 8, "3712": 8, "3153": 8, "2268": [], "3906": [], "0576": [], "applied_exampl": [], "329": [], "09": 27, "756": [], "374": [], "86": [2, 11, 31], "futurewarn": [2, 26, 30, 31, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 145], "msg": [2, 31], "0x7fe85f4dacd0": [], "0x7fe85df92d00": [], "372": 9, "383": 9, "2107": [], "6178": [], "2066": [], "6041": [], "1504": [], "2280": [], "5977": [], "6133": [], "0145": [], "2202": [], "5796": [], "2128": [], "6148": [], "1200": [], "3580": [], "4961": [], "3294": [], "5803": [], "0091": [], "4434": [], "3254": [], "2195": [], "7620": [], "0087": 29, "5245": [], "0844": [], "3614": [], "6405": 9, "0238": [], "5773": [], "9417": [], "4130": [], "4591": [], "0198": [], "6745": [], "8267": [], "3793": 30, "8723": [], "0302": [], "6893": [], "7722": [], "3957": 29, "8520": [], "7365": [], "6550": [], "5511": [], "2726": [], "0263": [], "spatial_conv": 9, "feature_extractor": [9, 10], "maxpool2d": 9, "ceil_mod": [9, 10], "end_dim": [9, 10], "in_featur": [9, 10, 141, 145], "816": 9, "out_featur": [9, 10, 141, 145], "bia": [9, 10, 11, 141, 145], "194": 9, "22222222222223": [9, 10, 11], "236": [], "279": [], "0x7fe84fec88b0": [], "0x7fe84fec8df0": [], "133": [10, 11], "1471": 10, "1814": 10, "1827": 10, "4743": 10, "5819": [], "8800": 10, "2186": 10, "1542": 10, "3353": [], "4550": 10, "4935": 10, "2200": 10, "2234": 10, "3090": 27, "_mrcnn": 10, "gelu": 10, "features1": 10, "batchnorm1d": [10, 11], "affin": 10, "track_running_stat": 10, "maxpool1d": [10, 11], "features2": 10, "_sebasicblock": 10, "conv1": 10, "bn1": 10, "conv2": 10, "bn2": 10, "se": 10, "_selay": 10, "avg_pool": 10, "_tce": 10, "modulelist": 10, "_encoderlay": 10, "self_attn": 10, "_multiheadedattent": 10, "_causalconv1d": 10, "feed_forward": 10, "_positionwisefeedforward": 10, "w_1": 10, "w_2": 10, "sublayer_output": 10, "_sublayeroutput": 10, "layernorm": 10, "06": [10, 11, 23, 145], "elementwise_affin": 10, "_classif": 10, "1469": 10, "undefinedmetricwarn": 10, "ill": 10, "zero_divis": 10, "_warn_prf": 10, "msg_start": 10, "03": [9, 10, 11], "654": [], "0x7fe864b3aeb0": [], "309": 11, "trigger": 11, "aten": 11, "src": 11, "nativ": 11, "cpp": 11, "1003": 11, "2040": 11, "6129": 11, "1707": 11, "5807": 11, "1951": [], "2224": 11, "5430": 11, "1594": 11, "5866": 11, "7939": [], "3464": 11, "4928": 11, "1853": 11, "6026": 11, "8172": [], "52": [5, 11, 26], "84": [5, 11], "399": [11, 20], "272": [], "203": 16, "112": [], "auto_examples_applied_exampl": 13, "sc4001e0": 16, "psg": 16, "sc4011e0": 16, "2507000": 16, "25070": 16, "sec": [16, 17, 18, 19, 31], "0194": 16, "passband": 16, "rippl": 16, "stopband": 16, "450": 16, "tmp": [16, 18], "tmpwm3jj9yv": 16, "3260000": 16, "32600": 16, "574": [16, 18], "isotrak": 16, "2884000": 16, "5391000": 16, "28840": 16, "53910": 16, "1975000": 16, "5235000": 16, "19750": 16, "52350": 16, "835": 16, "3000": [11, 16, 22, 26, 31], "1086": 16, "566": [16, 18], "i_d": [16, 18], "29990": 16, "ctf": [16, 18], "tmps0okxq7l": 16, "tmpw6ld5zmx": 16, "tmp7ty3c7sx": 16, "eegmmidb": [17, 19], "s022": [17, 19], "s022r05": [17, 19], "19999": [17, 19], "124": [17, 19, 27], "994": [17, 19], "s022r06": [17, 19], "s022r09": [17, 19], "s022r10": [17, 19], "s022r13": [17, 19], "s022r14": [17, 19], "float64": [17, 19, 31], "20000": 17, "589": 17, "0x7fe8652c0f10": 18, "tmp6jixnyvl": 18, "3868": 18, "386": 18, "left_hand": [3, 18, 21, 27, 28, 29, 30, 32], "right_hand": [3, 18, 21, 27, 28, 29, 30, 32], "run_1": [18, 20], "run_3": [18, 20], "3900": 18, "455": 18, "t0": 19, "t1": 19, "t2": 19, "81": 19, "745": 19, "run_2": 20, "run_5": 20, "legaci": 20, "232164": 20, "0x7fe8669cdb80": [], "0x7fe85e295b80": [], "0x7fe85f46f2b0": [], "0x7fe85f33c7f0": [], "0x7fe85f33c070": [], "0x7fe85e23fdc0": [], "0x7fe85e23f430": [], "0x7fe85e23fb80": [], "0x7fe85e23f2b0": [], "0x7fe85e23f880": [], "0x7fe85f3d4220": [], "0x7fe85f3d4100": [], "0x7fe85e3dc190": [], "0x7fe8669cdd00": [], "0x7fe85d30da00": [], "0x7fe85f33c820": [], "0x7fe85f33c460": [], "0x7fe864976e80": [], "0x7fe85f33cfd0": [], "0x7fe85d30db20": [], "v1": [22, 32], "02_tcp_le": 22, "00000058": 22, "s001": 22, "2003": 22, "01_tcp_ar": 22, "099": 22, "00009932": 22, "s004": 22, "9932": 22, "03_tcp_ar_a": 22, "123": 22, "00012331": 22, "s0": 22, "12331": 22, "00000000": 22, "2015": 22, "149": [22, 32], "00014928": 22, "14928": 22, "83": [11, 22], "92922518": 22, "22477157": 22, "12493701": 22, "28417889": 22, "13578887": 22, "56835277": 22, "25153176": 22, "7638324": 22, "14345092": 22, "30167542": 22, "68056549": 22, "70380673": 22, "70052629": 22, "21543634": 22, "96330007": 22, "02736802": 22, "65902848": 22, "15756383": 22, "38658058": 22, "04194231": 22, "15447331": 22, "16017832": 22, "11754766": 22, "6515615": 22, "50407195": 22, "7429778": 22, "9292252": 22, "86039335": 22, "5169721": 22, "0308012": 22, "1209397": 22, "5210943": 22, "2247716": 22, "373041": 22, "14827406": 22, "25829056": 22, "1486133": 22, "15352039": 22, "30362263": 22, "939559": 22, "5686462": 22, "5503989": 22, "3299779": 22, "3865806": 22, "7443461": 22, "1792846": 22, "25878426": 22, "5670986": 22, "2997373": 22, "0537782": 22, "4429058": 22, "05458383": 22, "000525": 22, "66521484": 22, "15447332": 22, "dtype": [22, 30, 141, 151], "float32": 22, "2600": 22, "8024": 22, "4564": 22, "4433": 22, "7404": 22, "2522": 22, "0508": 22, "4418": 22, "5201": 22, "2037": 22, "0273": 22, "0506": 22, "1677": 22, "1145": 22, "7075": 22, "1768": 22, "0260": 22, "7216": 22, "2742": 22, "3986": 22, "3912": 22, "8000": 22, "0593": 22, "8097": 22, "1729": 22, "6267": 22, "8419": 22, "3996": 22, "6685": 22, "9266": 22, "1319": 22, "1409": 22, "6246": 22, "6229": 22, "5953": [9, 22], "3169": 22, "4604": 22, "2885": 22, "0168": 22, "6279": 22, "6533": 22, "7673": 22, "6671": 22, "0448": 22, "1422": 22, "5395": 22, "4664": 22, "1882": [9, 22], "2031": 22, "6282": 22, "4535": 22, "8585": 22, "2657": 22, "9942": 22, "3878": 22, "1360": 22, "9132": 22, "9481": 22, "5033": 22, "3406": 22, "6089": 22, "9883": 22, "2919": 22, "3796": 22, "8036": 22, "7666": 22, "8174": 22, "3829": 22, "1508": 22, "8516": 22, "0426": 22, "1322": 22, "4122": 22, "2526": 22, "9711": 22, "6890": 22, "4660": 22, "5510": 22, "3613": 22, "0280": 22, "1350": 22, "2249": 22, "9406": 22, "7754": 22, "7664": 22, "1807": 22, "8206": 22, "1281": 22, "1607": 22, "9353": 22, "0165": 22, "6509": 22, "7276": 22, "2137": 22, "5619": 22, "0408": 22, "9825": 22, "3648": 22, "6978": 22, "8943": [5, 22], "2374": 22, "4398": 22, "8218": 22, "5172": 22, "2975": [22, 28], "0311": 22, "1602": 22, "1175": [9, 22], "6516": 22, "5041": 22, "7430": 22, "9292": 22, "8604": 22, "5170": 22, "0308": 22, "1209": 22, "5211": 22, "2248": 22, "3730": 22, "2583": 22, "1486": 22, "1535": 22, "1249": 22, "3036": 22, "9396": 22, "5686": 22, "5504": 22, "3300": 22, "3866": 22, "7443": 22, "1793": [22, 30], "2588": [8, 22], "5671": [5, 22], "2997": 22, "0419": 22, "0538": 22, "4429": 22, "0546": 22, "1545": 22, "722": [], "auto_examples_datasets_io": 23, "0x7fe85f3d3190": [], "976": [26, 27], "804": 27, "4632": [], "9343": [], "5383": [], "2539": [], "4890": [], "902": [], "model_build": [30, 32], "330": [], "800x550": [], "49": 11, "1039": [], "0x7fe85e23f310": [], "6001": [], "6724": [], "1826": [], "2570": [], "9811": [], "0698": [], "2569": 3, "1473": 30, "0234": [], "0741": [], "0680": [], "2431": [], "9948": [], "0706": [], "273": [], "0x7fe864aeec40": [], "5568": 30, "2351": [], "5006": [], "famili": [], "rc": [], "findfont": [], "3348": [], "2877": [], "3448": 30, "0762": [], "4594": [], "3522": [], "0681": [], "3621": [], "5753": [], "2398": [], "2565": [], "2217": [], "1796": [], "2609": 30, "1211": [], "2171": [], "1218": 29, "2652": [], "0127": [], "1170": [], "2870": 29, "1441": [], "1188": [], "0173": [], "1186": [], "2641": 29, "1313": [], "2727": 29, "0366": [], "3853": [], "0511": [], "9833": [], "1196": [], "3565": 30, "4721": [], "0063": [29, 30], "2054": [], "3913": [], "1627": [], "1451": [], "4000": 29, "1149": [], "1570": [], "9486": [], "1411": [], "5181": [], "2847": [], "0208": [], "5348": [], "221": [], "0x7fe865650250": [], "3130": [], "8104": [], "1233": 29, "8088": [], "7925": [], "5862": [], "7020": [], "7634": [], "1558": [], "7503": [], "4522": [], "0370": [], "4483": 30, "7040": 5, "7530": [], "2348": 30, "6052": [], "2759": [29, 30], "2582": 28, "7624": 5, "5276": [], "7536": [], "5301": [], "3103": 30, "4240": [], "7826": [], "4076": [], "2916": [], "7514": [], "6926": [], "6729": [], "7553": [], "4957": [], "1572": [], "4138": 30, "7131": [], "7558": [], "9938": [], "1886": [], "7532": [], "3739": [], "4401": [], "4828": [], "8592": [], "2174": [], "6406": 5, "0672": [], "7548": [], "6373": [], "8733": [], "7566": [], "2783": 30, "6966": [], "2069": 30, "8291": [], "7559": [], "5263": [], "3642": [], "9762": [], "4261": [], "3976": [], "8925": [], "7730": [], "5304": 30, "6155": [], "8003": [], "7567": [], "2435": 30, "2416": [], "7556": [], "7626": [], "6460": [], "2760": [], "7598": [], "9100": [], "9077": [], "7573": [], "3657": [], "7579": [], "0078": 26, "5285": [], "7622": [], "7658": [], "0842": [], "7545": [], "2957": [], "2414": [], "4195": [], "5000": [], "9042": [], "3966": [], "0484": [], "5182": [], "319": [], "constructor": [30, 141], "382": [], "2999": 31, "990": 31, "602": [], "2505": [], "1764": [], "9734": [], "9868": [], "0010": 31, "9287": [], "9601": [], "1660": [], "3032": [], "5433": [], "8923": [], "3129": [], "0411": [], "2603": [], "4995": [], "8796": [], "0x7fe865ad5100": [], "832": [], "281": 32, "auto_examples_model_build": 33, "220": [], "0x7efd77fa8e20": [], "5630": [], "5113": [], "traceback": [], "301": [], "1050": [], "rcparam": [], "__setitem__": [], "768": [], "1329": [], "1328": [], "0x7f0240333130": [], "4949": [], "6179": [], "3100": [], "2377": [], "2656": [], "1341": [], "1525": [], "1291": [], "1327": [], "1467": [], "1571": [], "1227": [], "1772": [], "1268": [], "1210": [], "1318": [], "5009": [], "5026": [], "053": [], "795": [], "794": [], "0x7f98c4c6e100": [], "1668": [], "1066": [], "font_scal": 29, "9392": [], "9178": [], "8623": [], "8454": [], "8424": [], "8390": [], "8400": [], "8434": [], "8363": [], "8399": [], "8404": [], "8320": [], "8617": [], "8406": [], "8396": [], "8541": [], "1192": [], "070": [], "776": [], "0x7f4e4888f580": [], "7933": [], "4554": [], "1940": [], "9054": [], "1552": [], "0906": [], "0368": [], "0550": [], "9194": [], "0800": [], "0720": [], "0696": [], "4615": [], "7260": [], "4999": [], "9407": [], "8582": [], "0326": [], "8818": [], "827": [], "826": [], "0x7fb1e9f165b0": [], "5275": [], "2485": [], "0357": [], "0224": [], "1654": [], "0571": [], "9494": [], "0775": [], "0513": [], "9090": [], "9237": [], "8826": [], "9872": [], "9463": [], "9164": [], "3305": [], "3434": [], "3864": [], "1994": [], "2593": [], "981": [], "814": [], "0x7f9f888139a0": [], "1900": [], "9366": [], "8993": [], "8704": [], "8266": [], "8243": [], "8249": [], "8263": [], "8277": [], "9799": [], "0708": [], "1977": [], "8270": [], "8273": [], "8311": 29, "1067": [], "797": [], "796": [], "0x7f4b5beae4c0": [], "6271": [], "3750": 31, "3008": [], "0465": [], "9863": [], "9478": [], "8305": [], "0081": 26, "0439": [], "8247": [], "0101": [], "0833": [], "0525": 5, "8863": [], "8420": [], "0963": [], "1259": [], "0705": [], "1122": [], "648": [], "790": 27, "789": 33, "0x7fad30172850": [], "0028": [], "9633": [], "ncol": 29, "7927": [], "7991": [], "7575": [], "7312": [], "7326": [], "7652": [], "7364": [], "7358": [], "7421": [], "7428": 29, "7313": [], "7485": [], "9933": [], "9908": [], "458": [], "817": [], "0x7f1ec03ab130": [], "3438": 28, "1892": [], "bbox_to_anchor": 29, "8161": [], "7955": [], "7807": [], "7492": [], "7540": [], "7685": [], "7647": [], "7629": [], "7739": [], "7788": [], "7708": [], "7660": [], "7812": [], "7527": [], "7515": [], "7533": [], "0402": [], "0515": [], "527": [], "0x7fa6fde04d90": [], "1468": [], "1078": [], "9842": [], "9461": [], "8829": [], "8302": [], "8964": [], "0902": [], "0039": 5, "8848": [], "8990": [], "9250": [], "8358": [], "0047": [], "0175": [], "8486": [], "8695": [], "7993": [], "7230": [], "0784": [], "803": [], "0x7f75ed5dc0a0": [], "2095": [], "0732": [], "311": [], "_ax": [], "legend_": [], "mlegend": [], "_api": [], "func": [], "533": [], "1342": [], "0x7f294e9b3d00": [], "9843": [], "9530": [], "971": [], "1282": [], "0x7f1fd7b699a0": [], "1946": [], "6447": [], "9062": [], "7827": [], "9269": [], "7473": [], "7296": [], "7284": [], "7615": [], "7397": [], "7331": [], "7316": [], "8180": [], "8009": [], "0384": [], "7897": [], "7920": [], "0292": [], "0747": [], "955": [], "805": [], "0x7f16d52bd1c0": [], "1434": [], "0592": [], "8935": [], "9704": [], "0669": [], "8707": [], "7619": [], "8021": [], "7563": [], "7610": [], "7537": [], "7544": [], "7506": [], "7547": [], "7623": [], "7616": [], "7488": [], "7456": [], "0109": [], "0024": [], "439": [], "0x7f85eacf86a0": [], "0619": [], "2401": [], "9378": [], "7642": [], "7321": [], "7370": [], "7366": [], "7436": [], "7445": [], "7398": [], "7742": [], "7942": [], "7944": [], "8996": [], "8382": [], "0862": [], "0914": [], "939": [], "demarc": [29, 30], "stimulu": [29, 30], "trial_stop_offset_second": [29, 30], "perpect": [], "third": 32, "real": 32, "world": 32, "tqdm": 32, "train_one_epoch": 32, "loss_fn": 32, "print_batch_stat": 32, "progress_bar": 32, "batch_idx": 32, "argmax": 32, "6f": 32, "accumul": 32, "test_model": 32, "test_loss": 32, "batch_loss": 32, "nnloss": 32, "seamlessli": 32, "train_load": 32, "test_load": 32, "test_accuraci": 32, "nice": 32, "torchmetr": 32, "litmodul": 32, "lightningmodul": 32, "training_step": 32, "y_hat": 32, "test_step": 32, "multiclass": 32, "num_class": 32, "log_dict": 32, "configure_optim": 32, "trainer": 32, "lit_model": 32, "plot_train_in_pure_pytorch_and_pytorch_lightn": [32, 33], "pathlib": [81, 144], "514": 151, "523": 151, "remi": 151, "delboui": 151, "0x7f210f225dc0": [], "7402": [], "3379": [], "092": [], "1131": [], "0x7f210dfd3280": [], "5533": [], "0875": [], "6188": 31, "276": [], "996": [], "507": [], "0x7f210dd53130": [], "2422": [], "1509": [], "9911": [], "1394": [], "2272": [], "8762": [], "8192": [], "7709": [], "8043": [], "7795": [], "7612": [], "8160": [], "8190": [], "1388": [], "9471": [], "2861": [], "3394": [], "009": [], "0x7f210d0b56d0": [], "6410": 5, "5724": [], "5365": [], "5756": [], "5164": [], "5253": [], "6061": [], "5358": [], "5621": [], "5190": [], "5798": [], "5929": [], "5411": [], "5523": [], "6883": [], "6184": [], "6140": [], "5970": [], "5908": [], "5943": [], "5774": [], "1857": [], "0606": [], "332": 30, "173": [], "116": [], "typeerror": [], "got": 30, "298": [], "1962": [], "0x7f9286c40d00": [], "590727": [], "61it": [], "602779": [], "95it": [], "717662": [], "07it": 32, "489191": [], "06it": [], "812099": [], "96it": 32, "46it": [], "819970": [], "713805": [], "64it": 32, "059214": [], "284286": [], "20it": 32, "808599": [], "76it": [], "337175": [], "642491": [], "217304": [], "10it": [], "259046": [], "04it": [], "252112": [], "289975": [], "05it": [], "948479": [], "85it": [], "608224": [], "350631": [], "812278": [], "045660": [], "60it": [], "459460": [], "16it": 32, "055251": [], "193383": [], "tpu": 32, "ipu": 32, "hpu": 32, "connector": 32, "logger_connector": 32, "tensorboardx": 32, "ecosystem": 32, "logger": 32, "csvlogger": 32, "unless": [32, 120, 141], "tensorboard": 32, "warning_cach": 32, "189": 32, "data_connector": 32, "442": 32, "possibleuserwarn": 32, "train_dataload": 32, "init": 32, "rank_zero_warn": 32, "fit_loop": 32, "log_every_n_step": 32, "0it": 32, "12it": [], "11it": [], "v_num": 32, "50it": [], "67it": [], "21it": 32, "03it": [], "68it": 32, "53it": [], "91it": [], "89it": [], "checkpoint_connector": 32, "ckpt_path": 32, "silenc": 32, "lightning_log": 32, "version_0": [], "ckpt": 32, "test_dataload": 32, "97it": 32, "80it": [], "84it": [], "87it": [], "18it": [], "2534722089767456": [], "993540048599243": [], "885": [], "400000": [], "399999": [], "999": [], "200000": [], "199999": [], "usr": [], "multiprocess": [], "resource_track": [], "96": [], "di": [], "unexpectedli": [], "relaunch": [], "leak": [], "0x7f8b78eda850": [], "2e": [], "225": 11, "3301": [], "elaps": [], "4772": [], "4369": [], "4648": 30, "4624": [], "4442": [], "3528": [], "3560": [], "bnci2014_001": [3, 4, 21, 27, 28, 29, 30, 32, 143], "abbrevi": [3, 4, 21, 29, 30], "bnci2014": [3, 4, 21, 29, 30], "is_abbrev": [3, 4, 21, 29, 30], "0x7f8b7a3672e0": [], "92": 5, "keyerror": [], "1537": 30, "0x7f8b7ba3bd30": [], "0x7f8b78e69190": [], "5234": 5, "7013": 5, "6680": 5, "6320": 5, "3607": [], "5938": 5, "7149": 5, "4880": 5, "8357": 5, "2741": [], "6440": 5, "1551": [], "6120": 5, "5988": 5, "8435": [], "6751": 5, "5920": 5, "6210": 5, "8360": [], "6719": 5, "6235": 5, "5880": 5, "6256": 5, "8324": [], "6316": 5, "6200": 5, "6111": 5, "8487": [], "6259": 5, "5937": 5, "6484": 5, "6236": 5, "6760": 5, "5781": 5, "8236": [], "6161": 5, "6880": 5, "5743": 5, "8349": [], "6321": 5, "5791": 5, "8262": [], "6263": 5, "5778": 5, "6840": 5, "5792": 5, "8410": [], "5919": 5, "5759": [5, 30], "6165": 5, "5720": 5, "8212": [], "5656": 5, "8230": [], "5917": 5, "5611": 5, "8468": [], "7578": 5, "5435": 5, "7120": 5, "5515": 5, "7734": 5, "5269": 5, "5421": 5, "5663": 5, "7160": 5, "5361": 5, "8209": [], "7109": 5, "5336": 5, "5309": 5, "8702": [], "7266": 5, "5471": 5, "8331": [], "6325": 5, "5237": 5, "8296": [], "6953": 5, "5642": 5, "5200": 5, "8359": [], "5010": 5, "5185": [5, 30], "8316": [], "88": 5, "5254": 5, "6476": 5, "110": [5, 11], "76": 5, "410": 5, "70": 5, "73": 5, "54": 5, "66": [5, 145], "0x7f8b7b602fd0": [], "457": [2, 6], "241": [], "456": [], "0x7f8b7af5aee0": [], "7352": 8, "1514": 8, "6146": 8, "0958": 9, "1513": 8, "3974": 8, "4350": [], "492": [], "0x7f8b78e67400": [], "deactiv": 11, "callbacks__valid_acc": 11, "8693": 5, "1413": [], "1653": [], "_encoderblock": 11, "block_prepool": 11, "102": 11, "750": 11, "405": 11, "726": 11, "188": 11, "constantpad1d": 11, "377": 11, "94": [11, 29], "004": 11, "960": 11, "565": 11, "876": 11, "108": 11, "536": [4, 6, 11, 29, 33], "368": 11, "214": [5, 11], "228": 11, "338": 11, "bottom": 11, "302": 11, "452": 11, "698": 11, "604": 11, "_decoderblock": 11, "block_preskip": 11, "898": 11, "block_postskip": 11, "641": 11, "786": 11, "323": 11, "912": 11, "156": 11, "216": 11, "163": 11, "620": 11, "863": 11, "154": 11, "237": 11, "635": 11, "515": [11, 151], "520": [11, 151], "324": 11, "060": 11, "180": [3, 4, 11, 26, 27, 28, 29, 30, 32], "660": 11, "376": 11, "645": 11, "195": 11, "363": 11, "727": 11, "126": 11, "522": 11, "tanh": 11, "avgpool1d": 11, "final_lay": [3, 4, 11, 26, 27, 28, 29, 32], "482": 11, "011": 11, "91": 11, "576": [], "483": [], "478": [], "particular": 26, "stumbl": 26, "fortun": 26, "publish": 26, "exact": 26, "models_dict": [26, 67, 120, 141, 151], "eegnetv1": [26, 141, 145], "eegnetv4": [26, 141, 145], "hybridnet": [26, 141, 145], "investig": 26, "__doc__": 26, "__str__": 26, "882": 26, "202": 26, "popular": 26, "simul": 26, "create_info": 26, "randn": 26, "256hz": 26, "epochsarrai": 26, "99609": 26, "wrapp": [], "module__": 26, "module__final_conv_length": 26, "3500": [], "9324": [], "0118": [], "0105": [], "0099": [], "0096": [], "0102": [], "0098": [], "840": 26, "924": 26, "844": 26, "unit_mul": 26, "fiff_unitm_non": 26, "cal": 26, "fiffv_eeg_ch": 26, "coil_typ": 26, "fiffv_coil_eeg": 26, "107": 26, "fiff_unit_v": 26, "coord_fram": 26, "fiffv_coord_head": 26, "scanno": 26, "logno": 26, "target_from": 26, "264": [], "plot_basic_training_epoch": [26, 33], "0x7f8b7b5f2730": [], "239": [], "412": [27, 33], "1364": [], "0x7f8b7a665ca0": [], "379": [], "1511": [], "610": 31, "3442": 31, "3962": 31, "6291": 31, "8232": 31, "3336": 31, "9205": 31, "8489": 31, "9209": 31, "9232": 31, "9584": 31, "6824": 31, "6087": 31, "8321": 31, "0x7f8b79736940": 31, "678": 31, "0x7f8b7b8c7310": [], "1559": [], "535": 151, "1363": [], "prefer": [67, 120, 141], "intermedi": [91, 145], "bug": [91, 145], "517": 151, "524": 151, "529": 151, "528": 151, "539": 151, "541": 151, "hint": 151, "551": 151, "valentin": 151, "ioven": 151, "pyproject": 151, "toml": 151, "553": 151, "wrong": 151, "538": [4, 6, 151], "546": [32, 151], "flag": 151, "513": 151, "0x7fcd458c6940": [], "670": [], "1540": [], "0x7fcd45518160": [], "175": [], "1288": [], "0x7fcd45734640": [], "749": [], "1481": [], "0x7fcd456234f0": [], "877": [], "801": [], "1480": [], "0x7f0c98bcd610": [], "1532": [], "1531": [], "0x7f0c98954f70": [], "0t": [], "0e": [], "1301": [], "0x7f0c98b6d6a0": [], "705": [], "1453": [], "0x7f0c98aaee20": [], "118": [], "1454": [], "063": [], "1300": [], "0x7fe4c9c0d520": [], "1530": [], "0x7fe4e9b98d60": [], "1287": [], "0x7fe4e9ef5a90": [], "aaaaaaa": [], "140": [], "0x7fe4e9c69c10": [], "611": [], "0x7f6024f71460": [], "0train": [3, 4, 21, 27, 28, 29, 30, 32], "1test": [3, 4, 21, 27, 28, 29, 30, 32], "spectrum": 3, "dpss": 3, "6077": 3, "0178": 3, "6008": [], "3809": 3, "1896": 3, "4714": [], "3021": 3, "2767": 3, "7959": 3, "4986": [], "3229": 3, "1763": 3, "2674": [3, 28], "6416": 3, "5084": [], "168": [], "508": [], "0x7f6024def970": [], "2778": [27, 28], "5658": 27, "5302": 27, "2154": [], "4417": 27, "2604": 27, "4977": 27, "0877": [], "640x480": [27, 28], "899": [], "0x7f6025253520": [], "5950": [28, 29], "6092": 28, "2504": [], "4426": 28, "2434": [], "3333": 28, "2141": 28, "7940": 28, "2352": [], "1842": 28, "4347": 28, "2474": [], "0x7f600f5f72e0": [], "nameerror": [], "547": [], "1649": [], "1648": [], "0x7fbf8cfaf040": [], "784639": 32, "77it": [], "497504": 32, "17it": 32, "544960": 32, "37it": [], "552846": 32, "39it": [], "648800": 32, "81it": [], "067235": 32, "475664": 32, "15it": [], "224986": 32, "333445": 32, "27it": [], "520739": 32, "08it": 32, "324413": 32, "605750": 32, "460681": 32, "178580": 32, "36it": [], "232657": 32, "41it": 32, "294503": 32, "144602": 32, "43it": [], "90it": [], "412786": 32, "751324": 32, "49it": [], "565480": 32, "667802": 32, "86it": 32, "836635": 32, "646806": 32, "262205": 32, "23it": [], "42it": [], "47it": [], "94it": [], "93it": [], "version_1": [], "63it": 32, "40it": [], "30it": [], "34375": 32, "510026454925537": 32, "857": [], "752": [], "0x7f1b9d8ca700": 3, "4285": 3, "3198": 3, "5167": 3, "2974": 3, "127": 3, "177": 3, "0x7f1bb680fd00": [], "1054": [], "0093": [], "868": [], "0x7f1bb426a0d0": [], "2880": [], "3043": [], "8555": [], "6518": [], "0x7f1bb5330610": [], "3661": 29, "1783": [], "3435": 29, "3505": 29, "2664": 29, "8386": [], "3478": 29, "1789": 29, "0683": 29, "8452": [], "3870": 29, "2082": 29, "0472": [], "1560": 29, "8483": [], "7568": [], "2266": 29, "3003": 29, "4087": [29, 30], "1477": 29, "7552": [], "2076": 29, "7980": [], "2900": 29, "7416": [], "4242": 29, "1577": 29, "7748": [], "4286": 29, "0504": 29, "7015": [], "59": 29, "2826": 29, "5258": 29, "8418": [], "4053": 29, "7413": [], "4826": 29, "2205": 29, "7191": [], "5130": [29, 30], "7258": [], "4375": 29, "2991": 29, "1113": [], "4688": 29, "1161": 29, "1573": [], "655": [], "0x7f1bb84281c0": [], "62it": 32, "66it": 32, "65it": 32, "99it": [], "83it": [], "26it": [], "32it": [], "58it": [], "57it": 32, "52it": [], "55it": [], "28it": [], "71it": [], "69it": [], "version_2": [], "48it": [], "901": [], "543": [], "419": [], "867": [], "542": [], "0x7f42172f31f0": 2, "4214": 2, "3756": 2, "3371": 2, "2548": 2, "2306": 2, "2344": 2, "2321": 2, "966": [2, 6], "0x7f4215eafd60": 4, "0x7f41ed644dc0": [5, 21], "0x7f41ed60ed30": 5, "1046": 5, "0989": 5, "0352": 5, "9886": 5, "0089": 5, "9016": 5, "0954": 5, "9830": 5, "9600": 5, "8570": 5, "7662": 5, "8368": 5, "9937": 5, "8047": 5, "9073": 5, "8611": 5, "9327": 5, "9674": 5, "7252": 5, "8019": 5, "7766": 5, "8029": 5, "0x7f4215f9b790": 5, "603": [5, 6], "213": [6, 26, 33], "0x7f4217525f40": 8, "6909": 8, "7828": [8, 30], "608": [8, 13], "317": [8, 13], "0x7f41f4f8fdf0": 9, "0x7f4217631580": 9, "2136": 9, "0888": 9, "2452": 9, "2036": 9, "4788": 9, "6674": 9, "1995": 9, "2199": 9, "4032": 9, "0966": 9, "2102": 9, "6340": 9, "2571": 9, "2923": 9, "3400": 9, "2512": 9, "6769": 9, "4723": 9, "4023": 9, "2092": 9, "4700": 9, "4077": 9, "6190": 9, "6105": 9, "2689": 9, "4086": 9, "6232": 9, "2061": 9, "5726": 9, "9687": 9, "5680": 9, "3616": 9, "1775": 9, "8909": 9, "7050": 9, "5777": 9, "2944": 9, "1070": 9, "6877": 9, "8175": 9, "7102": 9, "5808": 9, "3463": 9, "6977": 9, "7450": 9, "5039": 9, "6099": 9, "296": [9, 13], "0x7f41f6172ca0": 10, "130": 10, "0x7f42173f84f0": 10, "3534": 10, "6137": 10, "1955": 10, "4520": 10, "2256": 10, "4485": 10, "212": [10, 13], "0x7f41eda76310": 11, "2238": 11, "8603": 11, "7761": 11, "601": [12, 13], "accommod": 14, "0x7f4215eef7c0": 21, "0x7f41edd9b7c0": 21, "0x7f41ed644760": 21, "0x7f4218ff5670": 21, "0x7f4216e7fb50": 21, "0x7f41f52db2e0": 21, "0x7f41eda85670": 21, "0x7f41f52db4f0": 21, "0x7f41f52db0a0": 21, "0x7f4216e7ff70": 21, "0x7f4218f23a60": 21, "0x7f42175d8970": 21, "0x7f42175d8b80": 21, "0x7f42175d8d90": 21, "0x7f4217525250": 21, "0x7f4217525670": 21, "0x7f42174c5af0": 21, "0x7f421d2921f0": [21, 27], "031": [21, 23], "5428": 26, "0574": 26, "0077": 26, "0086": 26, "0103": 26, "0088": 26, "0083": 26, "2915": 27, "2254": 27, "0x7f4215f85d30": 28, "2589": 28, "2030": 28, "1932": 28, "360": [28, 33], "502": [28, 33], "0x7f4217628ee0": 29, "0test": 29, "2795": 29, "3909": 29, "8395": 29, "8834": 29, "0309": 29, "9693": 29, "8010": 29, "7499": 29, "8126": 29, "7725": 29, "7434": 29, "6764": 29, "8067": 29, "7418": 29, "7235": 29, "1401": 29, "9319": 29, "248": [29, 33], "0x7f42175a56a0": 30, "0774": 30, "1724": 30, "4879": 30, "6174": 30, "8703": 30, "5034": 30, "5936": 30, "3156": 30, "5707": 30, "1784": 30, "8568": 30, "0333": 30, "4766": 30, "4272": 30, "3804": 30, "4738": 30, "8912": 30, "4870": 30, "3911": 30, "7741": 30, "4852": 30, "9772": 30, "4706": 30, "5826": 30, "1250": 30, "5764": 30, "5664": 30, "1107": 30, "4900": 30, "4696": 30, "4854": 30, "7441": 30, "4785": 30, "2261": 30, "7070": 30, "4818": 30, "6492": 30, "5188": 30, "5837": 30, "4035": 30, "4722": 30, "2696": 30, "5464": 30, "1272": 30, "4948": 30, "1099": 30, "2230": 30, "5018": 30, "4783": 30, "8860": 30, "9010": 30, "5334": 30, "1420": 30, "5107": 30, "5210": 30, "3905": 30, "5912": 30, "8493": 30, "5489": 30, "9960": 30, "3377": 30, "5186": 30, "2516": 30, "5049": 30, "4750": 30, "1913": 30, "1263": 30, "0233": 30, "5064": 30, "2739": 30, "2403": 30, "2586": 30, "1633": 30, "0886": 30, "7535": 30, "9387": 30, "9936": 30, "782": [30, 33], "percept": 32, "0x7f42181b4160": 32, "78it": 32, "51it": 32, "09it": 32, "38it": 32, "92it": 32, "13it": 32, "73it": 32, "34it": 32, "54it": 32, "35it": 32, "24it": 32, "72it": 32, "70it": 32, "version_3": 32, "29it": 32, "88it": 32, "874": [32, 33], "889": 33, "545": 33, "_eegneuralnet": 141, "drop_last": [141, 142], "pin_memory_devic": [141, 142], "prefetch_factor": [141, 142], "timeout": [141, 142], "bandstopfilt": [141, 142, 150], "channelsshuffl": [141, 142, 150], "channelssymmetri": [141, 142, 150], "gaussiannois": [141, 142, 150], "identitytransform": [141, 142, 150], "sensorsrot": [141, 142, 150], "sensorsxrot": [141, 142, 150], "sensorsyrot": [141, 142, 150], "sensorszrot": [141, 142, 150], "timerevers": [141, 142, 150], "bandstop_filt": [141, 142], "channels_dropout": [141, 142], "channels_permut": [141, 142], "channels_shuffl": [141, 142], "frequency_shift": [141, 142], "gaussian_nois": [141, 142], "sensors_rot": [141, 142], "smooth_time_mask": [141, 142], "time_revers": [141, 142], "cumulative_s": [141, 143], "possible_subject": [141, 143], "hgd": [141, 143, 150], "data_path": [141, 143], "eegwindowsdataset": [141, 143], "bbcidataset": [141, 143], "get_all_sensor": [141, 143], "load_bbci_sets_from_fold": [141, 143], "fetch_data_with_moabb": [141, 143], "xy": [141, 150], "save_concat_dataset": [141, 144], "ms_to_sampl": [141, 144], "samples_to_m": [141, 144], "input_shap": [141, 145], "deprecated_arg": [141, 145], "eeginception_erp": [141, 150], "eeginception_mi": [141, 150], "conv2dwithconstraint": [141, 145], "out_channel": [141, 145], "output_pad": [141, 145], "padding_mod": [141, 145], "transpos": [141, 145], "squeeze_final_output": [141, 145], "transpose_time_to_spat": [141, 145], "avgpool2dwithconv": [141, 145], "causalconv1d": [141, 145], "intermediateoutputwrapp": [141, 145], "maxnormlinear": [141, 145], "shallow_fbcsp": [141, 150], "sleep_stager_blanco_2020": [141, 150], "sleep_stager_chambon_2018": [141, 150], "sleep_stager_eldele_2021": [141, 150], "chomp1d": [141, 145], "extra_repr": [141, 145], "temporalblock": [141, 145], "num_featur": [141, 145], "exponential_moving_demean": [141, 146, 150], "mne_preprocess": [141, 150], "croppedtrialepochscor": [141, 148, 150], "postepochtrainscor": [141, 148, 150], "mixup_criterion": [141, 148, 150], "trial_preds_from_window_pr": [141, 148, 150], "maxnormconstraintcallback": [141, 148], "confusion_matric": [141, 150], "compute_amplitude_gradients_for_x": [141, 149], "throwawayindexload": [141, 150], "is_regress": 141, "corr": [141, 150], "cov": [141, 150], "covari": 141, "include_ann": 141, "savedir": 141, "save_format": 141, "hdf5": 141, "save_fnam": 141, "get_balanced_batch": [141, 150], "rng": 141, "np_to_th": [141, 150], "requires_grad": 141, "tensor_kwarg": 141, "asarrai": 141, "var_kwarg": 141, "var": 141, "np_to_var": [141, 150], "read_all_file_nam": [141, 150], "extens": 141, "txt": 141, "file_path": 141, "th_to_np": [141, 150], "update_estimator_docstr": [141, 150], "base_class": 141, "var_to_np": [141, 150], "wrap_reshape_apply_fn": [141, 150], "stat_fn": 141, "axis_a": 141, "axis_b": 141, "reshap": 141, "nd": 141, "remaining_dims_a": 141, "remaining_dims_b": 141, "t_co": [142, 143], "outdat": 143, "filenam": 143, "load_sensor_nam": 143, "check_class_nam": 143, "matlab": 143, "v7": 143, "mathwork": 143, "import_export": 143, "mat": 143, "buk6i87": 143, "neurotechnologi": 143, "germani": 143, "pattern": 143, "sensor_nam": 143, "s001r02": 143, "regex": 143, "public": 143, "ra334fadbbad": 143, "ra4397400a5b": 143, "millisecond": 144, "n_sampl": 144, "old_new_arg": 145, "reb937fb413bc": 145, "r6ac5fd57fa8": 145, "max_norm": 145, "prevent": 145, "swap": 145, "discuss": 145, "3456": 145, "gist": 145, "paultsw": 145, "7a9d6e3ce7b70e9e2c61bc9287addefc": 145, "bias_tim": 145, "bias_spat": 145, "expression_fn": 145, "autograd": 145, "to_select": 145, "select_modul": 145, "conv_spat": 145, "conv_2": 145, "conv_3": 145, "conv_4": 145, "model_pert": 145, "max_norm_v": 145, "maxnorm": 145, "constrain": 145, "kera": 145, "kernel_constraint": 145, "core_lay": 145, "api_doc": 145, "96769": 145, "anymor": 145, "chomp_siz": 145, "n_input": 145, "vote": 145, "phan2018": 145, "unnorm": 145, "n_row": 145, "phan": 145, "andreotti": 145, "coorai": 145, "ch\u00e9n": 145, "vo": 145, "cnn": 145, "1285": 145, "1296": 145, "visualis": 149, "subpackag": 150, "submodul": 150, "eegneuralnet": 150, "commit": 151, "556": 151}, "objects": {"": [[141, 0, 0, "-", "braindecode"]], "braindecode": [[141, 1, 1, "", "EEGClassifier"], [141, 1, 1, "", "EEGRegressor"], [142, 0, 0, "-", "augmentation"], [141, 0, 0, "-", "classifier"], [143, 0, 0, "-", "datasets"], [144, 0, 0, "-", "datautil"], [141, 0, 0, "-", "eegneuralnet"], [145, 0, 0, "-", "models"], [146, 0, 0, "-", "preprocessing"], [141, 0, 0, "-", "regressor"], [147, 0, 0, "-", "samplers"], [148, 0, 0, "-", "training"], [141, 0, 0, "-", "util"], [141, 0, 0, "-", "version"], [149, 0, 0, "-", "visualization"]], "braindecode.EEGClassifier": [[141, 2, 1, "", "_criteria"], [141, 2, 1, "", "_modules"], [141, 2, 1, "", "_optimizers"], [141, 2, 1, "", "callbacks_"], [141, 2, 1, "", "classes_"], [141, 2, 1, "", "criterion_"], [141, 2, 1, "", "cuda_dependent_attributes_"], [141, 2, 1, "", "doc"], [141, 3, 1, "", "get_iterator"], [141, 3, 1, "", "get_loss"], [141, 2, 1, "", "initialized_"], [141, 2, 1, "", "module_"], [141, 3, 1, "", "predict"], [141, 3, 1, "", "predict_proba"], [141, 3, 1, "", "predict_trials"], [141, 2, 1, "", "prefixes_"]], "braindecode.EEGRegressor": [[141, 2, 1, "", "_criteria"], [141, 2, 1, "", "_modules"], [141, 2, 1, "", "_optimizers"], [141, 2, 1, "", "callbacks_"], [141, 2, 1, "", "criterion_"], [141, 2, 1, "", "cuda_dependent_attributes_"], [141, 2, 1, "", "doc"], [141, 3, 1, "", "fit"], [141, 3, 1, "", "get_iterator"], [141, 2, 1, "", "initialized_"], [141, 2, 1, "", "module_"], [141, 3, 1, "", "predict_proba"], [141, 3, 1, "", "predict_trials"], [141, 2, 1, "", "prefixes_"]], "braindecode.augmentation": [[142, 1, 1, "", "AugmentedDataLoader"], [142, 1, 1, "", "BandstopFilter"], [142, 1, 1, "", "ChannelsDropout"], [142, 1, 1, "", "ChannelsShuffle"], [142, 1, 1, "", "ChannelsSymmetry"], [142, 1, 1, "", "Compose"], [142, 1, 1, "", "FTSurrogate"], [142, 1, 1, "", "FrequencyShift"], [142, 1, 1, "", "GaussianNoise"], [142, 1, 1, "", "IdentityTransform"], [142, 1, 1, "", "Mixup"], [142, 1, 1, "", "SensorsRotation"], [142, 1, 1, "", "SensorsXRotation"], [142, 1, 1, "", "SensorsYRotation"], [142, 1, 1, "", "SensorsZRotation"], [142, 1, 1, "", "SignFlip"], [142, 1, 1, "", "SmoothTimeMask"], [142, 1, 1, "", "TimeReverse"], [142, 1, 1, "", "Transform"], [142, 0, 0, "-", "base"], [142, 0, 0, "-", "functional"], [142, 0, 0, "-", "transforms"]], "braindecode.augmentation.AugmentedDataLoader": [[142, 2, 1, "", "batch_size"], [142, 2, 1, "", "dataset"], [142, 2, 1, "", "drop_last"], [142, 2, 1, "", "num_workers"], [142, 2, 1, "", "pin_memory"], [142, 2, 1, "", "pin_memory_device"], [142, 2, 1, "", "prefetch_factor"], [142, 2, 1, "", "sampler"], [142, 2, 1, "", "timeout"]], "braindecode.augmentation.BandstopFilter": [[142, 3, 1, "", "get_augmentation_params"], [142, 3, 1, "", "operation"]], "braindecode.augmentation.ChannelsDropout": [[142, 3, 1, "", "get_augmentation_params"], [142, 3, 1, "", "operation"]], "braindecode.augmentation.ChannelsShuffle": [[142, 3, 1, "", "get_augmentation_params"], [142, 3, 1, "", "operation"]], "braindecode.augmentation.ChannelsSymmetry": [[142, 3, 1, "", "get_augmentation_params"], [142, 3, 1, "", "operation"]], "braindecode.augmentation.Compose": [[142, 3, 1, "", "forward"], [142, 2, 1, "", "operation"]], "braindecode.augmentation.FTSurrogate": [[142, 3, 1, "", "get_augmentation_params"], [142, 3, 1, "", "operation"]], "braindecode.augmentation.FrequencyShift": [[142, 3, 1, "", "get_augmentation_params"], [142, 3, 1, "", "operation"]], "braindecode.augmentation.GaussianNoise": [[142, 3, 1, "", "get_augmentation_params"], [142, 3, 1, "", "operation"]], "braindecode.augmentation.IdentityTransform": [[142, 3, 1, "", "operation"]], "braindecode.augmentation.Mixup": [[142, 3, 1, "", "get_augmentation_params"], [142, 3, 1, "", "operation"]], "braindecode.augmentation.SensorsRotation": [[142, 3, 1, "", "get_augmentation_params"], [142, 3, 1, "", "operation"]], "braindecode.augmentation.SignFlip": [[142, 3, 1, "", "operation"]], "braindecode.augmentation.SmoothTimeMask": [[142, 3, 1, "", "get_augmentation_params"], [142, 3, 1, "", "operation"]], "braindecode.augmentation.TimeReverse": [[142, 3, 1, "", "operation"]], "braindecode.augmentation.Transform": [[142, 3, 1, "", "forward"], [142, 3, 1, "", "get_augmentation_params"], [142, 2, 1, "", "operation"], [142, 4, 1, "", "probability"]], "braindecode.augmentation.base": [[142, 1, 1, "", "AugmentedDataLoader"], [142, 1, 1, "", "Compose"], [142, 1, 1, "", "IdentityTransform"], [142, 1, 1, "", "Transform"]], "braindecode.augmentation.base.AugmentedDataLoader": [[142, 2, 1, "", "batch_size"], [142, 2, 1, "", "dataset"], [142, 2, 1, "", "drop_last"], [142, 2, 1, "", "num_workers"], [142, 2, 1, "", "pin_memory"], [142, 2, 1, "", "pin_memory_device"], [142, 2, 1, "", "prefetch_factor"], [142, 2, 1, "", "sampler"], [142, 2, 1, "", "timeout"]], "braindecode.augmentation.base.Compose": [[142, 3, 1, "", "forward"], [142, 2, 1, "", "operation"], [142, 2, 1, "", "training"]], "braindecode.augmentation.base.IdentityTransform": [[142, 3, 1, "", "operation"], [142, 2, 1, "", "training"]], "braindecode.augmentation.base.Transform": [[142, 3, 1, "", "forward"], [142, 3, 1, "", "get_augmentation_params"], [142, 2, 1, "", "operation"], [142, 4, 1, "", "probability"], [142, 2, 1, "", "training"]], "braindecode.augmentation.functional": [[142, 5, 1, "", "bandstop_filter"], [142, 5, 1, "", "channels_dropout"], [142, 5, 1, "", "channels_permute"], [142, 5, 1, "", "channels_shuffle"], [142, 5, 1, "", "frequency_shift"], [142, 5, 1, "", "ft_surrogate"], [142, 5, 1, "", "gaussian_noise"], [142, 5, 1, "", "identity"], [142, 5, 1, "", "mixup"], [142, 5, 1, "", "sensors_rotation"], [142, 5, 1, "", "sign_flip"], [142, 5, 1, "", "smooth_time_mask"], [142, 5, 1, "", "time_reverse"]], "braindecode.augmentation.transforms": [[142, 1, 1, "", "BandstopFilter"], [142, 1, 1, "", "ChannelsDropout"], [142, 1, 1, "", "ChannelsShuffle"], [142, 1, 1, "", "ChannelsSymmetry"], [142, 1, 1, "", "FTSurrogate"], [142, 1, 1, "", "FrequencyShift"], [142, 1, 1, "", "GaussianNoise"], [142, 1, 1, "", "Mixup"], [142, 1, 1, "", "SensorsRotation"], [142, 1, 1, "", "SensorsXRotation"], [142, 1, 1, "", "SensorsYRotation"], [142, 1, 1, "", "SensorsZRotation"], [142, 1, 1, "", "SignFlip"], [142, 1, 1, "", "SmoothTimeMask"], [142, 1, 1, "", "TimeReverse"]], "braindecode.augmentation.transforms.BandstopFilter": [[142, 3, 1, "", "get_augmentation_params"], [142, 3, 1, "", "operation"], [142, 2, 1, "", "training"]], "braindecode.augmentation.transforms.ChannelsDropout": [[142, 3, 1, "", "get_augmentation_params"], [142, 3, 1, "", "operation"], [142, 2, 1, "", "training"]], "braindecode.augmentation.transforms.ChannelsShuffle": [[142, 3, 1, "", "get_augmentation_params"], [142, 3, 1, "", "operation"], [142, 2, 1, "", "training"]], "braindecode.augmentation.transforms.ChannelsSymmetry": [[142, 3, 1, "", "get_augmentation_params"], [142, 3, 1, "", "operation"], [142, 2, 1, "", "training"]], "braindecode.augmentation.transforms.FTSurrogate": [[142, 3, 1, "", "get_augmentation_params"], [142, 3, 1, "", "operation"], [142, 2, 1, "", "training"]], "braindecode.augmentation.transforms.FrequencyShift": [[142, 3, 1, "", "get_augmentation_params"], [142, 3, 1, "", "operation"], [142, 2, 1, "", "training"]], "braindecode.augmentation.transforms.GaussianNoise": [[142, 3, 1, "", "get_augmentation_params"], [142, 3, 1, "", "operation"], [142, 2, 1, "", "training"]], "braindecode.augmentation.transforms.Mixup": [[142, 3, 1, "", "get_augmentation_params"], [142, 3, 1, "", "operation"], [142, 2, 1, "", "training"]], "braindecode.augmentation.transforms.SensorsRotation": [[142, 3, 1, "", "get_augmentation_params"], [142, 3, 1, "", "operation"], [142, 2, 1, "", "training"]], "braindecode.augmentation.transforms.SensorsXRotation": [[142, 2, 1, "", "training"]], "braindecode.augmentation.transforms.SensorsYRotation": [[142, 2, 1, "", "training"]], "braindecode.augmentation.transforms.SensorsZRotation": [[142, 2, 1, "", "training"]], "braindecode.augmentation.transforms.SignFlip": [[142, 3, 1, "", "operation"], [142, 2, 1, "", "training"]], "braindecode.augmentation.transforms.SmoothTimeMask": [[142, 3, 1, "", "get_augmentation_params"], [142, 3, 1, "", "operation"], [142, 2, 1, "", "training"]], "braindecode.augmentation.transforms.TimeReverse": [[142, 3, 1, "", "operation"], [142, 2, 1, "", "training"]], "braindecode.classifier": [[141, 1, 1, "", "EEGClassifier"]], "braindecode.classifier.EEGClassifier": [[141, 2, 1, "", "_criteria"], [141, 2, 1, "", "_modules"], [141, 2, 1, "", "_optimizers"], [141, 2, 1, "", "callbacks_"], [141, 2, 1, "", "classes_"], [141, 2, 1, "", "criterion_"], [141, 2, 1, "", "cuda_dependent_attributes_"], [141, 2, 1, "", "doc"], [141, 3, 1, "", "get_iterator"], [141, 3, 1, "", "get_loss"], [141, 2, 1, "", "initialized_"], [141, 2, 1, "", "module_"], [141, 3, 1, "", "predict"], [141, 3, 1, "", "predict_proba"], [141, 3, 1, "", "predict_trials"], [141, 2, 1, "", "prefixes_"]], "braindecode.datasets": [[143, 1, 1, "", "BCICompetitionIVDataset4"], [143, 1, 1, "", "BNCI2014001"], [143, 1, 1, "", "BaseConcatDataset"], [143, 1, 1, "", "BaseDataset"], [143, 1, 1, "", "HGD"], [143, 1, 1, "", "MOABBDataset"], [143, 1, 1, "", "SleepPhysionet"], [143, 1, 1, "", "TUH"], [143, 1, 1, "", "TUHAbnormal"], [143, 1, 1, "", "WindowsDataset"], [143, 0, 0, "-", "base"], [143, 0, 0, "-", "bbci"], [143, 0, 0, "-", "bcicomp"], [143, 5, 1, "", "create_from_X_y"], [143, 5, 1, "", "create_from_mne_epochs"], [143, 5, 1, "", "create_from_mne_raw"], [143, 0, 0, "-", "mne"], [143, 0, 0, "-", "moabb"], [143, 0, 0, "-", "sleep_physionet"], [143, 0, 0, "-", "tuh"], [143, 0, 0, "-", "xy"]], "braindecode.datasets.BCICompetitionIVDataset4": [[143, 2, 1, "", "cumulative_sizes"], [143, 2, 1, "", "datasets"], [143, 3, 1, "", "download"], [143, 2, 1, "", "possible_subjects"]], "braindecode.datasets.BNCI2014001": [[143, 1, 1, "", "BNCI2014001"], [143, 2, 1, "", "cumulative_sizes"], [143, 2, 1, "", "datasets"], [143, 2, 1, "", "doc"]], "braindecode.datasets.BaseConcatDataset": [[143, 2, 1, "", "cumulative_sizes"], [143, 2, 1, "", "datasets"], [143, 4, 1, "", "description"], [143, 3, 1, "", "get_metadata"], [143, 3, 1, "", "save"], [143, 3, 1, "", "set_description"], [143, 3, 1, "", "split"], [143, 4, 1, "", "target_transform"], [143, 4, 1, "", "transform"]], "braindecode.datasets.BaseDataset": [[143, 4, 1, "", "description"], [143, 3, 1, "", "set_description"], [143, 4, 1, "", "transform"]], "braindecode.datasets.HGD": [[143, 1, 1, "", "Schirrmeister2017"], [143, 2, 1, "", "cumulative_sizes"], [143, 2, 1, "", "datasets"], [143, 2, 1, "", "doc"]], "braindecode.datasets.HGD.Schirrmeister2017": [[143, 3, 1, "", "data_path"]], "braindecode.datasets.MOABBDataset": [[143, 2, 1, "", "cumulative_sizes"], [143, 2, 1, "", "datasets"]], "braindecode.datasets.SleepPhysionet": [[143, 2, 1, "", "cumulative_sizes"], [143, 2, 1, "", "datasets"]], "braindecode.datasets.TUH": [[143, 2, 1, "", "cumulative_sizes"], [143, 2, 1, "", "datasets"]], "braindecode.datasets.TUHAbnormal": [[143, 2, 1, "", "cumulative_sizes"], [143, 2, 1, "", "datasets"]], "braindecode.datasets.WindowsDataset": [[143, 4, 1, "", "description"], [143, 3, 1, "", "set_description"], [143, 4, 1, "", "transform"]], "braindecode.datasets.base": [[143, 1, 1, "", "BaseConcatDataset"], [143, 1, 1, "", "BaseDataset"], [143, 1, 1, "", "EEGWindowsDataset"], [143, 1, 1, "", "WindowsDataset"]], "braindecode.datasets.base.BaseConcatDataset": [[143, 2, 1, "", "cumulative_sizes"], [143, 2, 1, "", "datasets"], [143, 4, 1, "", "description"], [143, 3, 1, "", "get_metadata"], [143, 3, 1, "", "save"], [143, 3, 1, "", "set_description"], [143, 3, 1, "", "split"], [143, 4, 1, "", "target_transform"], [143, 4, 1, "", "transform"]], "braindecode.datasets.base.BaseDataset": [[143, 4, 1, "", "description"], [143, 3, 1, "", "set_description"], [143, 4, 1, "", "transform"]], "braindecode.datasets.base.EEGWindowsDataset": [[143, 4, 1, "", "description"], [143, 3, 1, "", "set_description"], [143, 4, 1, "", "transform"]], "braindecode.datasets.base.WindowsDataset": [[143, 4, 1, "", "description"], [143, 3, 1, "", "set_description"], [143, 4, 1, "", "transform"]], "braindecode.datasets.bbci": [[143, 1, 1, "", "BBCIDataset"], [143, 5, 1, "", "load_bbci_sets_from_folder"]], "braindecode.datasets.bbci.BBCIDataset": [[143, 3, 1, "", "get_all_sensors"], [143, 3, 1, "", "load"]], "braindecode.datasets.bcicomp": [[143, 1, 1, "", "BCICompetitionIVDataset4"]], "braindecode.datasets.bcicomp.BCICompetitionIVDataset4": [[143, 2, 1, "", "cumulative_sizes"], [143, 2, 1, "", "datasets"], [143, 3, 1, "", "download"], [143, 2, 1, "", "possible_subjects"]], "braindecode.datasets.mne": [[143, 5, 1, "", "create_from_mne_epochs"], [143, 5, 1, "", "create_from_mne_raw"]], "braindecode.datasets.moabb": [[143, 1, 1, "", "BNCI2014001"], [143, 1, 1, "", "HGD"], [143, 1, 1, "", "MOABBDataset"], [143, 5, 1, "", "fetch_data_with_moabb"]], "braindecode.datasets.moabb.BNCI2014001": [[143, 1, 1, "", "BNCI2014001"], [143, 2, 1, "", "cumulative_sizes"], [143, 2, 1, "", "datasets"], [143, 2, 1, "", "doc"]], "braindecode.datasets.moabb.HGD": [[143, 1, 1, "", "Schirrmeister2017"], [143, 2, 1, "", "cumulative_sizes"], [143, 2, 1, "", "datasets"], [143, 2, 1, "", "doc"]], "braindecode.datasets.moabb.HGD.Schirrmeister2017": [[143, 3, 1, "", "data_path"]], "braindecode.datasets.moabb.MOABBDataset": [[143, 2, 1, "", "cumulative_sizes"], [143, 2, 1, "", "datasets"]], "braindecode.datasets.sleep_physionet": [[143, 1, 1, "", "SleepPhysionet"]], "braindecode.datasets.sleep_physionet.SleepPhysionet": [[143, 2, 1, "", "cumulative_sizes"], [143, 2, 1, "", "datasets"]], "braindecode.datasets.tuh": [[143, 1, 1, "", "TUH"], [143, 1, 1, "", "TUHAbnormal"]], "braindecode.datasets.tuh.TUH": [[143, 2, 1, "", "cumulative_sizes"], [143, 2, 1, "", "datasets"]], "braindecode.datasets.tuh.TUHAbnormal": [[143, 2, 1, "", "cumulative_sizes"], [143, 2, 1, "", "datasets"]], "braindecode.datasets.xy": [[143, 5, 1, "", "create_from_X_y"]], "braindecode.datautil": [[81, 5, 1, "", "load_concat_dataset"], [144, 0, 0, "-", "mne"], [144, 0, 0, "-", "preprocess"], [82, 5, 1, "", "save_concat_dataset"], [144, 0, 0, "-", "serialization"], [144, 0, 0, "-", "util"], [144, 0, 0, "-", "windowers"], [144, 0, 0, "-", "xy"]], "braindecode.datautil.serialization": [[144, 5, 1, "", "load_concat_dataset"], [144, 5, 1, "", "save_concat_dataset"]], "braindecode.datautil.util": [[144, 5, 1, "", "ms_to_samples"], [144, 5, 1, "", "samples_to_ms"]], "braindecode.models": [[83, 1, 1, "", "ATCNet"], [84, 1, 1, "", "Deep4Net"], [85, 1, 1, "", "DeepSleepNet"], [86, 1, 1, "", "EEGConformer"], [87, 1, 1, "", "EEGITNet"], [88, 1, 1, "", "EEGInception"], [89, 1, 1, "", "EEGInceptionERP"], [90, 1, 1, "", "EEGInceptionMI"], [91, 1, 1, "", "EEGModuleMixin"], [92, 1, 1, "", "EEGNetv1"], [93, 1, 1, "", "EEGNetv4"], [94, 1, 1, "", "EEGResNet"], [95, 1, 1, "", "HybridNet"], [96, 1, 1, "", "ShallowFBCSPNet"], [97, 1, 1, "", "SleepStagerBlanco2020"], [98, 1, 1, "", "SleepStagerChambon2018"], [99, 1, 1, "", "SleepStagerEldele2021"], [100, 1, 1, "", "TCN"], [101, 1, 1, "", "TIDNet"], [102, 1, 1, "", "TimeDistributed"], [103, 1, 1, "", "USleep"], [145, 0, 0, "-", "atcnet"], [145, 0, 0, "-", "base"], [145, 0, 0, "-", "deep4"], [145, 0, 0, "-", "deepsleepnet"], [145, 0, 0, "-", "eegconformer"], [145, 0, 0, "-", "eeginception"], [145, 0, 0, "-", "eeginception_erp"], [145, 0, 0, "-", "eeginception_mi"], [145, 0, 0, "-", "eegitnet"], [145, 0, 0, "-", "eegnet"], [145, 0, 0, "-", "eegresnet"], [145, 0, 0, "-", "functions"], [104, 5, 1, "", "get_output_shape"], [145, 0, 0, "-", "hybrid"], [145, 0, 0, "-", "modules"], [145, 0, 0, "-", "shallow_fbcsp"], [145, 0, 0, "-", "sleep_stager_blanco_2020"], [145, 0, 0, "-", "sleep_stager_chambon_2018"], [145, 0, 0, "-", "sleep_stager_eldele_2021"], [145, 0, 0, "-", "tcn"], [145, 0, 0, "-", "tidnet"], [145, 0, 0, "-", "usleep"], [145, 0, 0, "-", "util"]], "braindecode.models.ATCNet": [[83, 3, 1, "", "forward"]], "braindecode.models.DeepSleepNet": [[85, 3, 1, "", "forward"]], "braindecode.models.EEGConformer": [[86, 3, 1, "", "forward"], [86, 3, 1, "", "get_fc_size"]], "braindecode.models.EEGInceptionMI": [[90, 3, 1, "", "forward"]], "braindecode.models.EEGModuleMixin": [[91, 3, 1, "", "get_output_shape"], [91, 3, 1, "", "get_torchinfo_statistics"], [91, 3, 1, "", "load_state_dict"], [91, 3, 1, "", "to_dense_prediction_model"]], "braindecode.models.HybridNet": [[95, 3, 1, "", "forward"]], "braindecode.models.SleepStagerBlanco2020": [[97, 3, 1, "", "forward"]], "braindecode.models.SleepStagerChambon2018": [[98, 3, 1, "", "forward"]], "braindecode.models.SleepStagerEldele2021": [[99, 3, 1, "", "forward"]], "braindecode.models.TCN": [[100, 3, 1, "", "forward"]], "braindecode.models.TIDNet": [[101, 3, 1, "", "forward"]], "braindecode.models.TimeDistributed": [[102, 3, 1, "", "forward"]], "braindecode.models.USleep": [[103, 3, 1, "", "forward"]], "braindecode.models.atcnet": [[145, 1, 1, "", "ATCNet"]], "braindecode.models.atcnet.ATCNet": [[145, 3, 1, "", "forward"], [145, 2, 1, "", "training"]], "braindecode.models.base": [[145, 1, 1, "", "EEGModuleMixin"], [145, 5, 1, "", "deprecated_args"]], "braindecode.models.base.EEGModuleMixin": [[145, 4, 1, "", "add_log_softmax"], [145, 4, 1, "", "chs_info"], [145, 3, 1, "", "get_output_shape"], [145, 3, 1, "", "get_torchinfo_statistics"], [145, 4, 1, "", "input_shape"], [145, 4, 1, "", "input_window_seconds"], [145, 3, 1, "", "load_state_dict"], [145, 2, 1, "", "mapping"], [145, 4, 1, "", "n_chans"], [145, 4, 1, "", "n_outputs"], [145, 4, 1, "", "n_times"], [145, 4, 1, "", "sfreq"], [145, 3, 1, "", "to_dense_prediction_model"]], "braindecode.models.deep4": [[145, 1, 1, "", "Deep4Net"]], "braindecode.models.deepsleepnet": [[145, 1, 1, "", "DeepSleepNet"]], "braindecode.models.deepsleepnet.DeepSleepNet": [[145, 3, 1, "", "forward"]], "braindecode.models.eegconformer": [[145, 1, 1, "", "EEGConformer"]], "braindecode.models.eegconformer.EEGConformer": [[145, 3, 1, "", "forward"], [145, 3, 1, "", "get_fc_size"]], "braindecode.models.eeginception": [[145, 1, 1, "", "EEGInception"]], "braindecode.models.eeginception_erp": [[145, 1, 1, "", "EEGInceptionERP"]], "braindecode.models.eeginception_mi": [[145, 1, 1, "", "EEGInceptionMI"]], "braindecode.models.eeginception_mi.EEGInceptionMI": [[145, 3, 1, "", "forward"]], "braindecode.models.eegitnet": [[145, 1, 1, "", "EEGITNet"]], "braindecode.models.eegnet": [[145, 1, 1, "", "Conv2dWithConstraint"], [145, 1, 1, "", "EEGNetv1"], [145, 1, 1, "", "EEGNetv4"]], "braindecode.models.eegnet.Conv2dWithConstraint": [[145, 2, 1, "", "bias"], [145, 2, 1, "", "dilation"], [145, 3, 1, "", "forward"], [145, 2, 1, "", "groups"], [145, 2, 1, "", "in_channels"], [145, 2, 1, "", "kernel_size"], [145, 2, 1, "", "out_channels"], [145, 2, 1, "", "output_padding"], [145, 2, 1, "", "padding"], [145, 2, 1, "", "padding_mode"], [145, 2, 1, "", "stride"], [145, 2, 1, "", "transposed"], [145, 2, 1, "", "weight"]], "braindecode.models.eegresnet": [[145, 1, 1, "", "EEGResNet"]], "braindecode.models.functions": [[145, 5, 1, "", "identity"], [145, 5, 1, "", "safe_log"], [145, 5, 1, "", "square"], [145, 5, 1, "", "squeeze_final_output"], [145, 5, 1, "", "transpose_time_to_spat"]], "braindecode.models.hybrid": [[145, 1, 1, "", "HybridNet"]], "braindecode.models.hybrid.HybridNet": [[145, 3, 1, "", "forward"]], "braindecode.models.modules": [[145, 1, 1, "", "AvgPool2dWithConv"], [145, 1, 1, "", "CausalConv1d"], [145, 1, 1, "", "CombinedConv"], [145, 1, 1, "", "Ensure4d"], [145, 1, 1, "", "Expression"], [145, 1, 1, "", "IntermediateOutputWrapper"], [145, 1, 1, "", "MaxNormLinear"], [145, 1, 1, "", "TimeDistributed"]], "braindecode.models.modules.AvgPool2dWithConv": [[145, 3, 1, "", "forward"], [145, 2, 1, "", "training"]], "braindecode.models.modules.CausalConv1d": [[145, 2, 1, "", "bias"], [145, 2, 1, "", "dilation"], [145, 3, 1, "", "forward"], [145, 2, 1, "", "groups"], [145, 2, 1, "", "in_channels"], [145, 2, 1, "", "kernel_size"], [145, 2, 1, "", "out_channels"], [145, 2, 1, "", "output_padding"], [145, 2, 1, "", "padding"], [145, 2, 1, "", "padding_mode"], [145, 2, 1, "", "stride"], [145, 2, 1, "", "transposed"], [145, 2, 1, "", "weight"]], "braindecode.models.modules.CombinedConv": [[145, 3, 1, "", "forward"], [145, 2, 1, "", "training"]], "braindecode.models.modules.Ensure4d": [[145, 3, 1, "", "forward"], [145, 2, 1, "", "training"]], "braindecode.models.modules.Expression": [[145, 3, 1, "", "forward"], [145, 2, 1, "", "training"]], "braindecode.models.modules.IntermediateOutputWrapper": [[145, 3, 1, "", "forward"], [145, 2, 1, "", "training"]], "braindecode.models.modules.MaxNormLinear": [[145, 3, 1, "", "forward"], [145, 2, 1, "", "in_features"], [145, 2, 1, "", "out_features"], [145, 2, 1, "", "weight"]], "braindecode.models.modules.TimeDistributed": [[145, 3, 1, "", "forward"], [145, 2, 1, "", "training"]], "braindecode.models.shallow_fbcsp": [[145, 1, 1, "", "ShallowFBCSPNet"]], "braindecode.models.sleep_stager_blanco_2020": [[145, 1, 1, "", "SleepStagerBlanco2020"]], "braindecode.models.sleep_stager_blanco_2020.SleepStagerBlanco2020": [[145, 3, 1, "", "forward"]], "braindecode.models.sleep_stager_chambon_2018": [[145, 1, 1, "", "SleepStagerChambon2018"]], "braindecode.models.sleep_stager_chambon_2018.SleepStagerChambon2018": [[145, 3, 1, "", "forward"]], "braindecode.models.sleep_stager_eldele_2021": [[145, 1, 1, "", "SleepStagerEldele2021"]], "braindecode.models.sleep_stager_eldele_2021.SleepStagerEldele2021": [[145, 3, 1, "", "forward"], [145, 2, 1, "", "return_feats"]], "braindecode.models.tcn": [[145, 1, 1, "", "Chomp1d"], [145, 1, 1, "", "TCN"], [145, 1, 1, "", "TemporalBlock"]], "braindecode.models.tcn.Chomp1d": [[145, 3, 1, "", "extra_repr"], [145, 3, 1, "", "forward"], [145, 2, 1, "", "training"]], "braindecode.models.tcn.TCN": [[145, 3, 1, "", "forward"]], "braindecode.models.tcn.TemporalBlock": [[145, 3, 1, "", "forward"], [145, 2, 1, "", "training"]], "braindecode.models.tidnet": [[145, 1, 1, "", "TIDNet"]], "braindecode.models.tidnet.TIDNet": [[145, 3, 1, "", "forward"], [145, 4, 1, "", "num_features"]], "braindecode.models.usleep": [[145, 1, 1, "", "USleep"]], "braindecode.models.usleep.USleep": [[145, 3, 1, "", "forward"]], "braindecode.models.util": [[145, 5, 1, "", "aggregate_probas"], [145, 5, 1, "", "get_output_shape"], [145, 5, 1, "", "to_dense_prediction_model"]], "braindecode.preprocessing": [[146, 1, 1, "", "Crop"], [146, 1, 1, "", "DropChannels"], [146, 1, 1, "", "Filter"], [146, 1, 1, "", "Pick"], [146, 1, 1, "", "Preprocessor"], [146, 1, 1, "", "Resample"], [146, 1, 1, "", "SetEEGReference"], [146, 5, 1, "", "create_fixed_length_windows"], [146, 5, 1, "", "create_windows_from_events"], [146, 5, 1, "", "create_windows_from_target_channels"], [146, 5, 1, "", "exponential_moving_demean"], [146, 5, 1, "", "exponential_moving_standardize"], [146, 5, 1, "", "filterbank"], [146, 0, 0, "-", "mne_preprocess"], [146, 0, 0, "-", "preprocess"], [146, 0, 0, "-", "windowers"]], "braindecode.preprocessing.Crop": [[146, 2, 1, "", "fn"]], "braindecode.preprocessing.DropChannels": [[146, 2, 1, "", "fn"]], "braindecode.preprocessing.Filter": [[146, 2, 1, "", "fn"]], "braindecode.preprocessing.Pick": [[146, 2, 1, "", "fn"]], "braindecode.preprocessing.Preprocessor": [[146, 3, 1, "", "apply"]], "braindecode.preprocessing.Resample": [[146, 2, 1, "", "fn"]], "braindecode.preprocessing.SetEEGReference": [[146, 2, 1, "", "fn"]], "braindecode.preprocessing.mne_preprocess": [[146, 1, 1, "", "Crop"], [146, 1, 1, "", "DropChannels"], [146, 1, 1, "", "Filter"], [146, 1, 1, "", "Pick"], [146, 1, 1, "", "Preprocessor"], [146, 1, 1, "", "Resample"], [146, 1, 1, "", "SetEEGReference"]], "braindecode.preprocessing.mne_preprocess.Crop": [[146, 2, 1, "", "fn"]], "braindecode.preprocessing.mne_preprocess.DropChannels": [[146, 2, 1, "", "fn"]], "braindecode.preprocessing.mne_preprocess.Filter": [[146, 2, 1, "", "fn"]], "braindecode.preprocessing.mne_preprocess.Pick": [[146, 2, 1, "", "fn"]], "braindecode.preprocessing.mne_preprocess.Preprocessor": [[146, 3, 1, "", "apply"]], "braindecode.preprocessing.mne_preprocess.Resample": [[146, 2, 1, "", "fn"]], "braindecode.preprocessing.mne_preprocess.SetEEGReference": [[146, 2, 1, "", "fn"]], "braindecode.preprocessing.preprocess": [[146, 1, 1, "", "Preprocessor"], [146, 5, 1, "", "exponential_moving_demean"], [146, 5, 1, "", "exponential_moving_standardize"], [146, 5, 1, "", "filterbank"], [146, 5, 1, "", "preprocess"]], "braindecode.preprocessing.preprocess.Preprocessor": [[146, 3, 1, "", "apply"]], "braindecode.preprocessing.windowers": [[146, 5, 1, "", "create_fixed_length_windows"], [146, 5, 1, "", "create_windows_from_events"], [146, 5, 1, "", "create_windows_from_target_channels"]], "braindecode.regressor": [[141, 1, 1, "", "EEGRegressor"]], "braindecode.regressor.EEGRegressor": [[141, 2, 1, "", "_criteria"], [141, 2, 1, "", "_modules"], [141, 2, 1, "", "_optimizers"], [141, 2, 1, "", "callbacks_"], [141, 2, 1, "", "criterion_"], [141, 2, 1, "", "cuda_dependent_attributes_"], [141, 2, 1, "", "doc"], [141, 3, 1, "", "fit"], [141, 3, 1, "", "get_iterator"], [141, 2, 1, "", "initialized_"], [141, 2, 1, "", "module_"], [141, 3, 1, "", "predict_proba"], [141, 3, 1, "", "predict_trials"], [141, 2, 1, "", "prefixes_"]], "braindecode.samplers": [[147, 1, 1, "", "BalancedSequenceSampler"], [147, 1, 1, "", "RecordingSampler"], [147, 1, 1, "", "RelativePositioningSampler"], [147, 1, 1, "", "SequenceSampler"], [147, 0, 0, "-", "base"], [147, 0, 0, "-", "ssl"]], "braindecode.samplers.BalancedSequenceSampler": [[147, 3, 1, "", "sample_class"]], "braindecode.samplers.RecordingSampler": [[147, 2, 1, "", "info"], [147, 4, 1, "id0", "n_recordings"], [147, 3, 1, "", "sample_recording"], [147, 3, 1, "", "sample_window"]], "braindecode.samplers.RelativePositioningSampler": [[147, 3, 1, "", "presample"]], "braindecode.samplers.SequenceSampler": [[147, 2, 1, "", "file_ids"], [147, 2, 1, "", "info"]], "braindecode.samplers.base": [[147, 1, 1, "", "BalancedSequenceSampler"], [147, 1, 1, "", "RecordingSampler"], [147, 1, 1, "", "SequenceSampler"]], "braindecode.samplers.base.BalancedSequenceSampler": [[147, 3, 1, "", "sample_class"]], "braindecode.samplers.base.RecordingSampler": [[147, 2, 1, "", "info"], [147, 4, 1, "id4", "n_recordings"], [147, 3, 1, "", "sample_recording"], [147, 3, 1, "", "sample_window"]], "braindecode.samplers.base.SequenceSampler": [[147, 2, 1, "", "file_ids"], [147, 2, 1, "", "info"]], "braindecode.samplers.ssl": [[147, 1, 1, "", "RelativePositioningSampler"]], "braindecode.samplers.ssl.RelativePositioningSampler": [[147, 3, 1, "", "presample"]], "braindecode.training": [[148, 1, 1, "", "CroppedLoss"], [148, 1, 1, "", "CroppedTimeSeriesEpochScoring"], [148, 1, 1, "", "CroppedTrialEpochScoring"], [148, 1, 1, "", "PostEpochTrainScoring"], [148, 1, 1, "", "TimeSeriesLoss"], [148, 0, 0, "-", "callbacks"], [148, 0, 0, "-", "losses"], [148, 5, 1, "", "mixup_criterion"], [148, 5, 1, "", "predict_trials"], [148, 0, 0, "-", "scoring"], [148, 5, 1, "", "trial_preds_from_window_preds"]], "braindecode.training.CroppedLoss": [[148, 3, 1, "", "forward"], [148, 2, 1, "", "training"]], "braindecode.training.CroppedTimeSeriesEpochScoring": [[148, 3, 1, "", "on_epoch_end"]], "braindecode.training.CroppedTrialEpochScoring": [[148, 3, 1, "", "on_batch_end"], [148, 3, 1, "", "on_epoch_end"]], "braindecode.training.PostEpochTrainScoring": [[148, 3, 1, "", "on_epoch_end"]], "braindecode.training.TimeSeriesLoss": [[148, 3, 1, "", "forward"], [148, 2, 1, "", "training"]], "braindecode.training.callbacks": [[148, 1, 1, "", "MaxNormConstraintCallback"]], "braindecode.training.callbacks.MaxNormConstraintCallback": [[148, 3, 1, "", "on_batch_end"]], "braindecode.training.losses": [[148, 1, 1, "", "CroppedLoss"], [148, 1, 1, "", "TimeSeriesLoss"], [148, 5, 1, "", "mixup_criterion"]], "braindecode.training.losses.CroppedLoss": [[148, 3, 1, "", "forward"], [148, 2, 1, "", "training"]], "braindecode.training.losses.TimeSeriesLoss": [[148, 3, 1, "", "forward"], [148, 2, 1, "", "training"]], "braindecode.training.scoring": [[148, 1, 1, "", "CroppedTimeSeriesEpochScoring"], [148, 1, 1, "", "CroppedTrialEpochScoring"], [148, 1, 1, "", "PostEpochTrainScoring"], [148, 5, 1, "", "predict_trials"], [148, 5, 1, "", "trial_preds_from_window_preds"]], "braindecode.training.scoring.CroppedTimeSeriesEpochScoring": [[148, 3, 1, "", "on_epoch_end"]], "braindecode.training.scoring.CroppedTrialEpochScoring": [[148, 3, 1, "", "on_batch_end"], [148, 3, 1, "", "on_epoch_end"]], "braindecode.training.scoring.PostEpochTrainScoring": [[148, 3, 1, "", "on_epoch_end"]], "braindecode.util": [[141, 1, 1, "", "ThrowAwayIndexLoader"], [141, 5, 1, "", "corr"], [141, 5, 1, "", "cov"], [141, 5, 1, "", "create_mne_dummy_raw"], [141, 5, 1, "", "get_balanced_batches"], [141, 5, 1, "", "np_to_th"], [141, 5, 1, "", "np_to_var"], [141, 5, 1, "", "read_all_file_names"], [141, 5, 1, "", "set_random_seeds"], [141, 5, 1, "", "th_to_np"], [141, 5, 1, "", "update_estimator_docstring"], [141, 5, 1, "", "var_to_np"], [141, 5, 1, "", "wrap_reshape_apply_fn"]], "braindecode.visualization": [[149, 5, 1, "", "compute_amplitude_gradients"], [149, 0, 0, "-", "confusion_matrices"], [149, 0, 0, "-", "gradients"], [149, 5, 1, "", "plot_confusion_matrix"]], "braindecode.visualization.confusion_matrices": [[149, 5, 1, "", "plot_confusion_matrix"]], "braindecode.visualization.gradients": [[149, 5, 1, "", "compute_amplitude_gradients"], [149, 5, 1, "", "compute_amplitude_gradients_for_X"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:property", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "titleterms": {"api": [0, 151], "refer": [0, 4, 5, 9, 10, 11, 26, 27, 28, 29, 30, 31, 136], "classifi": [0, 67, 141], "regressor": [0, 120, 141], "model": [0, 2, 3, 4, 5, 8, 9, 10, 11, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 145], "train": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 125, 126, 127, 128, 129, 130, 131, 132, 148], "dataset": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 143], "preprocess": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 30, 32, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 144, 146], "data": [0, 3, 4, 12, 15, 22, 24, 26, 27, 28, 29, 31], "util": [0, 29, 133, 141, 144, 145], "sampler": [0, 5, 9, 10, 11, 121, 122, 123, 124, 147], "augment": [0, 3, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 142], "visual": [0, 3, 5, 29, 134, 135, 149], "advanc": [1, 24], "neural": [1, 24, 30, 31], "network": [1, 9, 11, 24, 30, 31], "strategi": [1, 24], "finger": [2, 8], "flexion": [2, 8], "crop": [2, 27, 105], "decod": [2, 8, 27, 28], "bcic": [2, 3, 4, 8, 27], "iv": [2, 3, 4, 8, 27], "4": [2, 8], "ecog": [2, 8], "load": [2, 3, 4, 5, 8, 9, 10, 11, 14, 15, 18, 21, 24, 26, 27, 28, 29, 30, 32], "prepar": [2, 8, 28], "split": [2, 3, 4, 5, 8, 9, 10, 11, 21, 27, 28, 29, 30, 32], "test": [2, 5, 8, 29, 31, 32, 140], "creat": [2, 3, 4, 5, 8, 9, 10, 11, 12, 22, 27, 28, 29, 30, 32], "cut": [2, 8, 12, 27, 32], "comput": [2, 6, 8, 12, 13, 23, 27, 28, 30, 32, 33], "window": [2, 3, 4, 5, 8, 9, 10, 11, 12, 22, 27, 28, 29, 30, 31, 32, 144, 146], "plot": [2, 4, 8, 9, 10, 11, 27, 28, 30], "result": [2, 4, 5, 8, 9, 10, 11, 27, 28, 30], "2a": [3, 4, 27], "thi": [3, 4, 5, 12, 21, 26, 27, 28, 29, 30, 32], "exampl": [3, 4, 5, 7, 12, 17, 18, 19, 20, 21, 24, 26, 27, 28, 29, 30, 32, 35, 37, 40, 41, 42, 50, 51, 53, 68, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 84, 91, 96, 98, 99, 102, 103, 104, 109, 112, 113, 114, 116, 118, 119, 122, 123, 124, 125, 126, 127, 129, 133, 135], "cover": [3, 4, 5, 12, 21, 26, 27, 28, 29, 30, 32], "extract": [3, 4, 5, 9, 10, 11, 28, 29, 30], "valid": [3, 4, 5, 8, 9, 10, 11, 28, 29, 30], "defin": [3, 4, 29, 31, 32], "transform": [3, 4, 32, 53, 142], "manipul": 3, "one": 3, "session": 3, "an": [3, 4], "eegclassifi": [3, 4, 67], "desir": [3, 4], "manual": 3, "compos": [3, 40], "set": [3, 5, 28], "level": 3, "search": 4, "best": [4, 30], "list": 4, "analys": 4, "fit": 4, "self": 5, "supervis": 5, "learn": [5, 26, 30], "eeg": [5, 12, 22, 28], "rel": 5, "posit": 5, "raw": [5, 32], "record": [5, 12], "inspect": 5, "pretext": 5, "task": 5, "perform": 5, "us": [5, 9, 10, 11, 12, 35, 37, 40, 41, 42, 50, 51, 53, 68, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 84, 91, 96, 98, 99, 102, 103, 104, 109, 112, 113, 114, 116, 118, 119, 122, 123, 124, 125, 126, 127, 129, 133, 135], "represent": 5, "sleep": [5, 9, 10, 11], "stage": [5, 9, 10, 11], "conclus": 5, "appli": [7, 24], "real": [7, 24], "world": [7, 24], "physionet": [9, 10, 11], "chambon2018": 9, "sequenc": [9, 10, 11], "eldele2021": 10, "u": 11, "process": 12, "big": 12, "resourc": 12, "tuh": [12, 22, 75, 143], "corpu": [12, 22], "tuhmock": 12, "select": 12, "combin": 12, "step": 12, "benchmark": [14, 16], "eager": 14, "lazi": 14, "organ": [15, 24], "parallel": 16, "serial": [16, 144], "custom": 17, "save": 18, "mne": [19, 26, 34, 143, 144], "moabb": [20, 143], "By": 21, "descript": 21, "inform": 21, "row": 21, "index": 21, "observ": 21, "multipl": 22, "discret": 22, "target": 22, "templ": 22, "univers": 22, "hospit": 22, "explor": [22, 26], "dataload": 22, "basic": [24, 25, 28], "build": [24, 25], "paramet": 27, "i": [29, 32, 136, 140], "again": [], "same": [], "code": [], "trialwis": [], "confus": [27, 28], "matrix": [27, 28], "brain": 28, "how": [29, 32, 34, 136], "tune": [29, 30], "your": [26, 29, 32, 140], "why": [29, 30, 32], "should": [29, 32], "care": [29, 32], "about": [29, 32], "evalu": [29, 31, 32], "etc": [29, 32], "option": [29, 32], "1": [29, 32, 151], "simpl": [26, 29], "let": 29, "": [29, 151], "first": 29, "function": [29, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 142, 145], "2": [29, 32], "val": 29, "second": 29, "3": 29, "k": 29, "fold": 29, "cross": 29, "third": 29, "hyperparamet": [29, 30], "scikit": [26, 30], "do": [30, 136], "you": [26, 30], "need": 30, "get": [30, 136], "convolut": 31, "regress": 31, "fake": 31, "gener": 31, "cnn": 31, "convert": [], "braindecod": [26, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150], "choos": 31, "between": 31, "gpu": 31, "cpu": 31, "processor": 31, "cite": [34, 136], "other": 34, "algorithm": 34, "augmenteddataload": 35, "bandstopfilt": 36, "channelsdropout": 37, "channelsshuffl": 38, "channelssymmetri": 39, "ftsurrog": 41, "frequencyshift": 42, "gaussiannois": 43, "identitytransform": 44, "mixup": [45, 62], "sensorsrot": 46, "sensorsxrot": 47, "sensorsyrot": 48, "sensorszrot": 49, "signflip": 50, "smoothtimemask": 51, "timerevers": 52, "bandstop_filt": 54, "channels_dropout": 55, "channels_permut": 56, "channels_shuffl": 57, "frequency_shift": 58, "ft_surrog": 59, "gaussian_nois": 60, "ident": 61, "sensors_rot": 63, "sign_flip": 64, "smooth_time_mask": 65, "time_revers": 66, "bcicompetitionivdataset4": 68, "bnci2014001": 69, "summari": [69, 72, 143], "baseconcatdataset": 70, "basedataset": 71, "hgd": 72, "moabbdataset": 73, "sleepphysionet": 74, "tuhabnorm": 76, "windowsdataset": 77, "create_from_x_i": 78, "create_from_mne_epoch": 79, "create_from_mne_raw": 80, "datautil": [81, 82, 144], "load_concat_dataset": 81, "save_concat_dataset": 82, "atcnet": [83, 145], "deep4net": 84, "deepsleepnet": [85, 145], "eegconform": [86, 145], "eegitnet": [87, 145], "eegincept": [88, 145], "eeginceptionerp": 89, "eeginceptionmi": 90, "eegmodulemixin": 91, "eegnetv1": 92, "eegnetv4": 93, "eegresnet": [94, 145], "hybridnet": 95, "shallowfbcspnet": 96, "sleepstagerblanco2020": 97, "sleepstagerchambon2018": 98, "sleepstagereldele2021": 99, "tcn": [100, 145], "tidnet": [101, 145], "timedistribut": 102, "usleep": [103, 145], "get_output_shap": 104, "preprocessor": 109, "create_fixed_length_window": 112, "create_windows_from_ev": 113, "create_windows_from_target_channel": 114, "exponential_moving_demean": 115, "exponential_moving_standard": 116, "filterbank": 117, "scale": 119, "eegregressor": 120, "balancedsequencesampl": 121, "recordingsampl": 122, "relativepositioningsampl": 123, "sequencesampl": 124, "croppedloss": 125, "croppedtimeseriesepochscor": 126, "croppedtrialepochscor": 127, "postepochtrainscor": 128, "timeseriesloss": 129, "mixup_criterion": 130, "predict_tri": 131, "trial_preds_from_window_pr": 132, "set_random_se": 133, "compute_amplitude_gradi": 134, "plot_confusion_matrix": 135, "frequent": 136, "ask": 136, "question": 136, "faq": 136, "help": 136, "can": 136, "t": 136, "python": 136, "work": [136, 140], "still": 136, "think": 136, "found": 136, "bug": [136, 151], "what": [136, 151], "homepag": 137, "instal": [138, 139, 140], "from": [139, 140], "pypi": 139, "sourc": 140, "clone": 140, "repositori": 140, "github": 140, "new": 151, "current": 151, "0": 151, "8": 151, "dev0": 151, "enhanc": 151, "chang": 151, "7": 151, "10": 151, "2022": 151, "version": [141, 151], "6": 151, "2021": 151, "12": 151, "06": 151, "5": 151, "07": 151, "14": 151, "author": 151, "dropchannel": 106, "filter": 107, "pick": 108, "resampl": 110, "seteegrefer": 111, "time": [6, 13, 23, 33], "pytorch": 32, "structur": 32, "offlin": 32, "pure": 32, "loop": 32, "lightn": 32, "epoch": 26, "find": 26, "want": 26, "onlin": 26, "document": 26, "examin": 26, "own": 26, "compat": 26, "packag": [141, 142, 143, 144, 145, 146, 147, 148, 149], "subpackag": 141, "submodul": [141, 142, 143, 144, 145, 146, 147, 148, 149], "modul": [141, 142, 143, 144, 145, 146, 147, 148, 149], "eegneuralnet": 141, "base": [142, 143, 145, 147], "bbci": 143, "bcicomp": 143, "sleep_physionet": 143, "xy": [143, 144], "deep4": 145, "eeginception_erp": 145, "eeginception_mi": 145, "eegnet": 145, "hybrid": 145, "shallow_fbcsp": 145, "sleep_stager_blanco_2020": 145, "sleep_stager_chambon_2018": 145, "sleep_stager_eldele_2021": 145, "mne_preprocess": 146, "ssl": 147, "callback": 148, "loss": 148, "score": 148, "confusion_matric": 149, "gradient": 149, "9": 151, "11": 151}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"API Reference": [[0, "api-reference"]], "Classifier": [[0, "classifier"]], "Regressor": [[0, "regressor"]], "Models": [[0, "models"]], "Training": [[0, "training"], [2, "training"], [5, "training"], [8, "training"], [9, "training"], [10, "training"], [11, "training"], [27, "training"], [30, "training"]], "Datasets": [[0, "datasets"]], "Preprocessing": [[0, "preprocessing"], [2, "preprocessing"], [3, "preprocessing"], [4, "preprocessing"], [5, "preprocessing"], [8, "preprocessing"], [9, "preprocessing"], [10, "preprocessing"], [11, "preprocessing"], [12, "preprocessing"], [28, "preprocessing"], [30, "preprocessing"]], "Data Utils": [[0, "data-utils"]], "Samplers": [[0, "samplers"]], "Augmentation": [[0, "augmentation"]], "Utils": [[0, "utils"]], "Visualization": [[0, "visualization"]], "Advanced neural network training strategies": [[1, "advanced-neural-network-training-strategies"], [24, "advanced-neural-network-training-strategies"]], "Fingers flexion cropped decoding on BCIC IV 4 ECoG Dataset": [[2, "fingers-flexion-cropped-decoding-on-bcic-iv-4-ecog-dataset"]], "Loading and preparing the dataset": [[2, "loading-and-preparing-the-dataset"], [8, "loading-and-preparing-the-dataset"]], "Loading": [[2, "loading"], [3, "loading"], [4, "loading"], [8, "loading"], [9, "loading"], [10, "loading"], [11, "loading"], [30, "loading"]], "Split dataset into train and test": [[2, "split-dataset-into-train-and-test"], [29, "split-dataset-into-train-and-test"], [32, "split-dataset-into-train-and-test"]], "Create model": [[2, "create-model"], [3, "create-model"], [4, "create-model"], [8, "create-model"], [9, "create-model"], [10, "create-model"], [11, "create-model"], [29, "create-model"], [30, "create-model"]], "Cut Compute Windows": [[2, "cut-compute-windows"], [8, "cut-compute-windows"], [12, "cut-compute-windows"], [32, "cut-compute-windows"]], "Plot Results": [[2, "plot-results"], [8, "plot-results"], [27, "plot-results"]], "Data Augmentation on BCIC IV 2a Dataset": [[3, "data-augmentation-on-bcic-iv-2a-dataset"]], "This example covers:": [[3, "this-example-covers"], [4, "this-example-covers"], [5, "this-example-covers"], [12, "this-example-covers"], [21, "this-example-covers"], [26, "this-example-covers"], [27, "this-example-covers"], [28, "this-example-covers"], [29, "this-example-covers"], [30, "this-example-covers"], [32, "this-example-covers"]], "Loading and preprocessing the dataset": [[3, "loading-and-preprocessing-the-dataset"], [4, "loading-and-preprocessing-the-dataset"], [5, "loading-and-preprocessing-the-dataset"], [9, "loading-and-preprocessing-the-dataset"], [10, "loading-and-preprocessing-the-dataset"], [11, "loading-and-preprocessing-the-dataset"], [27, "loading-and-preprocessing-the-dataset"], [30, "loading-and-preprocessing-the-dataset"]], "Extracting windows": [[3, "extracting-windows"], [4, "extracting-windows"], [5, "extracting-windows"]], "Split dataset into train and valid": [[3, "split-dataset-into-train-and-valid"], [4, "split-dataset-into-train-and-valid"], [9, "split-dataset-into-train-and-valid"], [10, "split-dataset-into-train-and-valid"], [11, "split-dataset-into-train-and-valid"], [30, "split-dataset-into-train-and-valid"]], "Defining a Transform": [[3, "defining-a-transform"]], "Manipulating one session and visualizing the transformed data": [[3, "manipulating-one-session-and-visualizing-the-transformed-data"]], "Training a model with data augmentation": [[3, "training-a-model-with-data-augmentation"], [4, "training-a-model-with-data-augmentation"]], "Create an EEGClassifier with the desired augmentation": [[3, "create-an-eegclassifier-with-the-desired-augmentation"], [4, "create-an-eegclassifier-with-the-desired-augmentation"]], "Manually composing Transforms": [[3, "manually-composing-transforms"]], "Setting the data augmentation at the Dataset level": [[3, "setting-the-data-augmentation-at-the-dataset-level"]], "Searching the best data augmentation on BCIC IV 2a Dataset": [[4, "searching-the-best-data-augmentation-on-bcic-iv-2a-dataset"]], "Data Augmentation": [[4, null]], "Defining a list of transforms": [[4, "defining-a-list-of-transforms"]], "Analysing the best fit": [[4, "analysing-the-best-fit"]], "Plot results": [[4, "plot-results"], [9, "plot-results"], [10, "plot-results"], [11, "plot-results"]], "References": [[4, "references"], [5, "references"], [9, "references"], [10, "references"], [11, "references"], [26, "references"], [27, "references"], [28, "references"], [29, "references"], [30, "references"], [31, "references"], [136, "references"]], "Self-supervised learning on EEG with relative positioning": [[5, "self-supervised-learning-on-eeg-with-relative-positioning"]], "Self-supervised learning": [[5, null]], "Loading the raw recordings": [[5, "loading-the-raw-recordings"]], "Preprocessing windows": [[5, "preprocessing-windows"]], "Splitting dataset into train, valid and test sets": [[5, "splitting-dataset-into-train-valid-and-test-sets"]], "Creating samplers": [[5, "creating-samplers"]], "Creating the model": [[5, "creating-the-model"]], "Visualizing the results": [[5, "visualizing-the-results"]], "Inspecting pretext task performance": [[5, "inspecting-pretext-task-performance"]], "Using the learned representation for sleep staging": [[5, "using-the-learned-representation-for-sleep-staging"]], "Conclusion": [[5, "conclusion"]], "Computation times": [[6, "computation-times"], [13, "computation-times"], [23, "computation-times"], [33, "computation-times"]], "Applied examples on real-world datasets": [[7, "applied-examples-on-real-world-datasets"], [24, "applied-examples-on-real-world-datasets"]], "Fingers flexion decoding on BCIC IV 4 ECoG Dataset": [[8, "fingers-flexion-decoding-on-bcic-iv-4-ecog-dataset"]], "Split dataset into train, valid, and test": [[8, "split-dataset-into-train-valid-and-test"]], "Sleep staging on the Sleep Physionet dataset using Chambon2018 network": [[9, "sleep-staging-on-the-sleep-physionet-dataset-using-chambon2018-network"]], "Extract windows": [[9, "extract-windows"], [10, "extract-windows"], [11, "extract-windows"]], "Window preprocessing": [[9, "window-preprocessing"], [10, "window-preprocessing"]], "Create sequence samplers": [[9, "create-sequence-samplers"], [10, "create-sequence-samplers"], [11, "create-sequence-samplers"]], "Sleep staging on the Sleep Physionet dataset using Eldele2021": [[10, "sleep-staging-on-the-sleep-physionet-dataset-using-eldele2021"]], "Sleep staging on the Sleep Physionet dataset using U-Sleep network": [[11, "sleep-staging-on-the-sleep-physionet-dataset-using-u-sleep-network"]], "Process a big data EEG resource (TUH EEG Corpus)": [[12, "process-a-big-data-eeg-resource-tuh-eeg-corpus"]], "Creating the dataset using TUHMock": [[12, "creating-the-dataset-using-tuhmock"]], "Selecting recordings": [[12, "selecting-recordings"]], "Combining preprocessing steps": [[12, "combining-preprocessing-steps"]], "Benchmarking eager and lazy loading": [[14, "benchmarking-eager-and-lazy-loading"]], "Loading and organizing data": [[15, "loading-and-organizing-data"], [24, "loading-and-organizing-data"]], "Benchmarking preprocessing with parallelization and serialization": [[16, "benchmarking-preprocessing-with-parallelization-and-serialization"]], "Custom Dataset Example": [[17, "custom-dataset-example"]], "Load and save dataset example": [[18, "load-and-save-dataset-example"]], "MNE Dataset Example": [[19, "mne-dataset-example"]], "MOABB Dataset Example": [[20, "moabb-dataset-example"]], "Split Dataset Example": [[21, "split-dataset-example"]], "Loading the dataset": [[21, "loading-the-dataset"], [28, "loading-the-dataset"]], "Splitting": [[21, "splitting"]], "By description information": [[21, "by-description-information"]], "By row index": [[21, "by-row-index"]], "Observation": [[21, "observation"]], "Multiple discrete targets with the TUH EEG Corpus": [[22, "multiple-discrete-targets-with-the-tuh-eeg-corpus"]], "Creating Temple University Hospital (TUH) EEG Corpus Dataset": [[22, "creating-temple-university-hospital-tuh-eeg-corpus-dataset"]], "Exploring Data": [[22, "exploring-data"]], "Creating Windows": [[22, "creating-windows"]], "Exploring Windows": [[22, "exploring-windows"]], "DataLoader for Model Training": [[22, "dataloader-for-model-training"]], "Exploring DataLoader": [[22, "exploring-dataloader"]], "Examples": [[24, "examples"]], "Basic model building and training": [[24, "basic-model-building-and-training"], [25, "basic-model-building-and-training"]], "Simple training on MNE epochs": [[26, "simple-training-on-mne-epochs"]], "Finding the model you want": [[26, "finding-the-model-you-want"]], "Exploring the braindecode online documentation": [[26, "exploring-the-braindecode-online-documentation"]], "Examining the model": [[26, "examining-the-model"]], "Loading your own data with MNE": [[26, "loading-your-own-data-with-mne"]], "Training your model (scikit-learn compatible)": [[26, "training-your-model-scikit-learn-compatible"]], "Cropped Decoding on BCIC IV 2a Dataset": [[27, "cropped-decoding-on-bcic-iv-2a-dataset"]], "Create model and compute windowing parameters": [[27, "create-model-and-compute-windowing-parameters"]], "Cut the data into windows": [[27, "cut-the-data-into-windows"]], "Split the dataset": [[27, "split-the-dataset"]], "Plot Confusion Matrix": [[27, "plot-confusion-matrix"]], "Basic Brain Decoding on EEG Data": [[28, "basic-brain-decoding-on-eeg-data"]], "Loading and preparing the data": [[28, "loading-and-preparing-the-data"]], "Extracting Compute Windows": [[28, "extracting-compute-windows"]], "Splitting the dataset into training and validation sets": [[28, "splitting-the-dataset-into-training-and-validation-sets"]], "Creating a model": [[28, "creating-a-model"]], "Model Training": [[28, "model-training"]], "Plotting Results": [[28, "plotting-results"]], "Plotting a  Confusion Matrix": [[28, "plotting-a-confusion-matrix"]], "How to train, test and tune your model?": [[29, "how-to-train-test-and-tune-your-model"]], "Why should I care about model evaluation?": [[29, "why-should-i-care-about-model-evaluation"], [32, "why-should-i-care-about-model-evaluation"]], "Loading and preprocessing of data, defining a model, etc.": [[29, "loading-and-preprocessing-of-data-defining-a-model-etc"]], "Loading data": [[29, "loading-data"]], "Preprocessing data": [[29, "preprocessing-data"]], "Extraction of the Windows": [[29, "extraction-of-the-windows"], [30, "extraction-of-the-windows"]], "How to train and evaluate your model": [[29, "how-to-train-and-evaluate-your-model"], [32, "how-to-train-and-evaluate-your-model"]], "Option 1: Simple Train-Test Split": [[29, "option-1-simple-train-test-split"]], "Let\u2019s visualize the first option with a util function.": [[29, "let-s-visualize-the-first-option-with-a-util-function"]], "Option 2: Train-Val-Test Split": [[29, "option-2-train-val-test-split"]], "Let\u2019s visualize the second option with a util function.": [[29, "let-s-visualize-the-second-option-with-a-util-function"]], "Option 3: k-Fold Cross Validation": [[29, "option-3-k-fold-cross-validation"]], "Let\u2019s visualize the third option with a util function.": [[29, "let-s-visualize-the-third-option-with-a-util-function"]], "How to tune your hyperparameters": [[29, "how-to-tune-your-hyperparameters"]], "Option 1: Train-Val-Test Split": [[29, "option-1-train-val-test-split"]], "Option 2: k-Fold Cross Validation": [[29, "option-2-k-fold-cross-validation"]], "Hyperparameter tuning with scikit-learn": [[30, "hyperparameter-tuning-with-scikit-learn"]], "Why do you need to tune the neural networks model?": [[30, null]], "Extraction of the Compute Windows": [[30, "extraction-of-the-compute-windows"]], "Plotting the results": [[30, "plotting-the-results"]], "Get the best hyperparameters": [[30, "get-the-best-hyperparameters"]], "Convolutional neural network regression model on fake data.": [[31, "convolutional-neural-network-regression-model-on-fake-data"]], "Fake regression data": [[31, "fake-regression-data"]], "Generating fake regression dataset": [[31, "generating-fake-regression-dataset"]], "Defining a CNN regression model": [[31, "defining-a-cnn-regression-model"]], "Choosing between GPU and CPU processors": [[31, "choosing-between-gpu-and-cpu-processors"]], "Data windowing": [[31, "data-windowing"]], "Model training": [[31, "model-training"]], "Model evaluation": [[31, "model-evaluation"]], "Model testing": [[31, "model-testing"]], "Training a Braindecode model in PyTorch": [[32, "training-a-braindecode-model-in-pytorch"]], "Loading, preprocessing, defining a model, etc.": [[32, "loading-preprocessing-defining-a-model-etc"]], "Loading the Dataset Structure": [[32, "loading-the-dataset-structure"]], "Preprocessing, the offline transformation of the raw dataset": [[32, "preprocessing-the-offline-transformation-of-the-raw-dataset"]], "Create Pytorch model": [[32, "create-pytorch-model"]], "Option 1: Pure PyTorch training loop": [[32, "option-1-pure-pytorch-training-loop"]], "Option 2: Train it with PyTorch Lightning": [[32, "option-2-train-it-with-pytorch-lightning"]], "How to cite Braindecode": [[34, "how-to-cite-braindecode"]], "Citing the Braindecode": [[34, "citing-the-braindecode"]], "Citing the MNE": [[34, "citing-the-mne"]], "Citing other algorithms": [[34, "citing-other-algorithms"]], "braindecode.augmentation.AugmentedDataLoader": [[35, "braindecode-augmentation-augmenteddataloader"]], "Examples using braindecode.augmentation.AugmentedDataLoader": [[35, "examples-using-braindecode-augmentation-augmenteddataloader"]], "braindecode.augmentation.BandstopFilter": [[36, "braindecode-augmentation-bandstopfilter"]], "braindecode.augmentation.ChannelsDropout": [[37, "braindecode-augmentation-channelsdropout"]], "Examples using braindecode.augmentation.ChannelsDropout": [[37, "examples-using-braindecode-augmentation-channelsdropout"]], "braindecode.augmentation.ChannelsShuffle": [[38, "braindecode-augmentation-channelsshuffle"]], "braindecode.augmentation.ChannelsSymmetry": [[39, "braindecode-augmentation-channelssymmetry"]], "braindecode.augmentation.Compose": [[40, "braindecode-augmentation-compose"]], "Examples using braindecode.augmentation.Compose": [[40, "examples-using-braindecode-augmentation-compose"]], "braindecode.augmentation.FTSurrogate": [[41, "braindecode-augmentation-ftsurrogate"]], "Examples using braindecode.augmentation.FTSurrogate": [[41, "examples-using-braindecode-augmentation-ftsurrogate"]], "braindecode.augmentation.FrequencyShift": [[42, "braindecode-augmentation-frequencyshift"]], "Examples using braindecode.augmentation.FrequencyShift": [[42, "examples-using-braindecode-augmentation-frequencyshift"]], "braindecode.augmentation.GaussianNoise": [[43, "braindecode-augmentation-gaussiannoise"]], "braindecode.augmentation.IdentityTransform": [[44, "braindecode-augmentation-identitytransform"]], "braindecode.augmentation.Mixup": [[45, "braindecode-augmentation-mixup"]], "braindecode.augmentation.SensorsRotation": [[46, "braindecode-augmentation-sensorsrotation"]], "braindecode.augmentation.SensorsXRotation": [[47, "braindecode-augmentation-sensorsxrotation"]], "braindecode.augmentation.SensorsYRotation": [[48, "braindecode-augmentation-sensorsyrotation"]], "braindecode.augmentation.SensorsZRotation": [[49, "braindecode-augmentation-sensorszrotation"]], "braindecode.augmentation.SignFlip": [[50, "braindecode-augmentation-signflip"]], "Examples using braindecode.augmentation.SignFlip": [[50, "examples-using-braindecode-augmentation-signflip"]], "braindecode.augmentation.SmoothTimeMask": [[51, "braindecode-augmentation-smoothtimemask"]], "Examples using braindecode.augmentation.SmoothTimeMask": [[51, "examples-using-braindecode-augmentation-smoothtimemask"]], "braindecode.augmentation.TimeReverse": [[52, "braindecode-augmentation-timereverse"]], "braindecode.augmentation.Transform": [[53, "braindecode-augmentation-transform"]], "Examples using braindecode.augmentation.Transform": [[53, "examples-using-braindecode-augmentation-transform"]], "braindecode.augmentation.functional.bandstop_filter": [[54, "braindecode-augmentation-functional-bandstop-filter"]], "braindecode.augmentation.functional.channels_dropout": [[55, "braindecode-augmentation-functional-channels-dropout"]], "braindecode.augmentation.functional.channels_permute": [[56, "braindecode-augmentation-functional-channels-permute"]], "braindecode.augmentation.functional.channels_shuffle": [[57, "braindecode-augmentation-functional-channels-shuffle"]], "braindecode.augmentation.functional.frequency_shift": [[58, "braindecode-augmentation-functional-frequency-shift"]], "braindecode.augmentation.functional.ft_surrogate": [[59, "braindecode-augmentation-functional-ft-surrogate"]], "braindecode.augmentation.functional.gaussian_noise": [[60, "braindecode-augmentation-functional-gaussian-noise"]], "braindecode.augmentation.functional.identity": [[61, "braindecode-augmentation-functional-identity"]], "braindecode.augmentation.functional.mixup": [[62, "braindecode-augmentation-functional-mixup"]], "braindecode.augmentation.functional.sensors_rotation": [[63, "braindecode-augmentation-functional-sensors-rotation"]], "braindecode.augmentation.functional.sign_flip": [[64, "braindecode-augmentation-functional-sign-flip"]], "braindecode.augmentation.functional.smooth_time_mask": [[65, "braindecode-augmentation-functional-smooth-time-mask"]], "braindecode.augmentation.functional.time_reverse": [[66, "braindecode-augmentation-functional-time-reverse"]], "braindecode.classifier.EEGClassifier": [[67, "braindecode-classifier-eegclassifier"]], "braindecode.datasets.BCICompetitionIVDataset4": [[68, "braindecode-datasets-bcicompetitionivdataset4"]], "Examples using braindecode.datasets.BCICompetitionIVDataset4": [[68, "examples-using-braindecode-datasets-bcicompetitionivdataset4"]], "braindecode.datasets.BNCI2014001": [[69, "braindecode-datasets-bnci2014001"]], "Dataset summary": [[69, null], [72, null], [143, null], [143, null], [143, null], [143, null], [143, null], [143, null], [143, null], [143, null]], "braindecode.datasets.BaseConcatDataset": [[70, "braindecode-datasets-baseconcatdataset"]], "Examples using braindecode.datasets.BaseConcatDataset": [[70, "examples-using-braindecode-datasets-baseconcatdataset"]], "braindecode.datasets.BaseDataset": [[71, "braindecode-datasets-basedataset"]], "Examples using braindecode.datasets.BaseDataset": [[71, "examples-using-braindecode-datasets-basedataset"]], "braindecode.datasets.HGD": [[72, "braindecode-datasets-hgd"]], "braindecode.datasets.MOABBDataset": [[73, "braindecode-datasets-moabbdataset"]], "Examples using braindecode.datasets.MOABBDataset": [[73, "examples-using-braindecode-datasets-moabbdataset"]], "braindecode.datasets.SleepPhysionet": [[74, "braindecode-datasets-sleepphysionet"]], "Examples using braindecode.datasets.SleepPhysionet": [[74, "examples-using-braindecode-datasets-sleepphysionet"]], "braindecode.datasets.TUH": [[75, "braindecode-datasets-tuh"]], "Examples using braindecode.datasets.TUH": [[75, "examples-using-braindecode-datasets-tuh"]], "braindecode.datasets.TUHAbnormal": [[76, "braindecode-datasets-tuhabnormal"]], "Examples using braindecode.datasets.TUHAbnormal": [[76, "examples-using-braindecode-datasets-tuhabnormal"]], "braindecode.datasets.WindowsDataset": [[77, "braindecode-datasets-windowsdataset"]], "braindecode.datasets.create_from_X_y": [[78, "braindecode-datasets-create-from-x-y"]], "Examples using braindecode.datasets.create_from_X_y": [[78, "examples-using-braindecode-datasets-create-from-x-y"]], "braindecode.datasets.create_from_mne_epochs": [[79, "braindecode-datasets-create-from-mne-epochs"]], "Examples using braindecode.datasets.create_from_mne_epochs": [[79, "examples-using-braindecode-datasets-create-from-mne-epochs"]], "braindecode.datasets.create_from_mne_raw": [[80, "braindecode-datasets-create-from-mne-raw"]], "Examples using braindecode.datasets.create_from_mne_raw": [[80, "examples-using-braindecode-datasets-create-from-mne-raw"]], "braindecode.datautil.load_concat_dataset": [[81, "braindecode-datautil-load-concat-dataset"]], "Examples using braindecode.datautil.load_concat_dataset": [[81, "examples-using-braindecode-datautil-load-concat-dataset"]], "braindecode.datautil.save_concat_dataset": [[82, "braindecode-datautil-save-concat-dataset"]], "braindecode.models.ATCNet": [[83, "braindecode-models-atcnet"]], "braindecode.models.Deep4Net": [[84, "braindecode-models-deep4net"]], "Examples using braindecode.models.Deep4Net": [[84, "examples-using-braindecode-models-deep4net"]], "braindecode.models.DeepSleepNet": [[85, "braindecode-models-deepsleepnet"]], "braindecode.models.EEGConformer": [[86, "braindecode-models-eegconformer"]], "braindecode.models.EEGITNet": [[87, "braindecode-models-eegitnet"]], "braindecode.models.EEGInception": [[88, "braindecode-models-eeginception"]], "braindecode.models.EEGInceptionERP": [[89, "braindecode-models-eeginceptionerp"]], "braindecode.models.EEGInceptionMI": [[90, "braindecode-models-eeginceptionmi"]], "braindecode.models.EEGModuleMixin": [[91, "braindecode-models-eegmodulemixin"]], "Examples using braindecode.models.EEGModuleMixin": [[91, "examples-using-braindecode-models-eegmodulemixin"]], "braindecode.models.EEGNetv1": [[92, "braindecode-models-eegnetv1"]], "braindecode.models.EEGNetv4": [[93, "braindecode-models-eegnetv4"]], "braindecode.models.EEGResNet": [[94, "braindecode-models-eegresnet"]], "braindecode.models.HybridNet": [[95, "braindecode-models-hybridnet"]], "braindecode.models.ShallowFBCSPNet": [[96, "braindecode-models-shallowfbcspnet"]], "Examples using braindecode.models.ShallowFBCSPNet": [[96, "examples-using-braindecode-models-shallowfbcspnet"]], "braindecode.models.SleepStagerBlanco2020": [[97, "braindecode-models-sleepstagerblanco2020"]], "braindecode.models.SleepStagerChambon2018": [[98, "braindecode-models-sleepstagerchambon2018"]], "Examples using braindecode.models.SleepStagerChambon2018": [[98, "examples-using-braindecode-models-sleepstagerchambon2018"]], "braindecode.models.SleepStagerEldele2021": [[99, "braindecode-models-sleepstagereldele2021"]], "Examples using braindecode.models.SleepStagerEldele2021": [[99, "examples-using-braindecode-models-sleepstagereldele2021"]], "braindecode.models.TCN": [[100, "braindecode-models-tcn"]], "braindecode.models.TIDNet": [[101, "braindecode-models-tidnet"]], "braindecode.models.TimeDistributed": [[102, "braindecode-models-timedistributed"]], "Examples using braindecode.models.TimeDistributed": [[102, "examples-using-braindecode-models-timedistributed"]], "braindecode.models.USleep": [[103, "braindecode-models-usleep"]], "Examples using braindecode.models.USleep": [[103, "examples-using-braindecode-models-usleep"]], "braindecode.models.get_output_shape": [[104, "braindecode-models-get-output-shape"]], "Examples using braindecode.models.get_output_shape": [[104, "examples-using-braindecode-models-get-output-shape"]], "braindecode.preprocessing.Crop": [[105, "braindecode-preprocessing-crop"]], "braindecode.preprocessing.DropChannels": [[106, "braindecode-preprocessing-dropchannels"]], "braindecode.preprocessing.Filter": [[107, "braindecode-preprocessing-filter"]], "braindecode.preprocessing.Pick": [[108, "braindecode-preprocessing-pick"]], "braindecode.preprocessing.Preprocessor": [[109, "braindecode-preprocessing-preprocessor"]], "Examples using braindecode.preprocessing.Preprocessor": [[109, "examples-using-braindecode-preprocessing-preprocessor"]], "braindecode.preprocessing.Resample": [[110, "braindecode-preprocessing-resample"]], "braindecode.preprocessing.SetEEGReference": [[111, "braindecode-preprocessing-seteegreference"]], "braindecode.preprocessing.create_fixed_length_windows": [[112, "braindecode-preprocessing-create-fixed-length-windows"]], "Examples using braindecode.preprocessing.create_fixed_length_windows": [[112, "examples-using-braindecode-preprocessing-create-fixed-length-windows"]], "braindecode.preprocessing.create_windows_from_events": [[113, "braindecode-preprocessing-create-windows-from-events"]], "Examples using braindecode.preprocessing.create_windows_from_events": [[113, "examples-using-braindecode-preprocessing-create-windows-from-events"]], "braindecode.preprocessing.create_windows_from_target_channels": [[114, "braindecode-preprocessing-create-windows-from-target-channels"]], "Examples using braindecode.preprocessing.create_windows_from_target_channels": [[114, "examples-using-braindecode-preprocessing-create-windows-from-target-channels"]], "braindecode.preprocessing.exponential_moving_demean": [[115, "braindecode-preprocessing-exponential-moving-demean"]], "braindecode.preprocessing.exponential_moving_standardize": [[116, "braindecode-preprocessing-exponential-moving-standardize"]], "Examples using braindecode.preprocessing.exponential_moving_standardize": [[116, "examples-using-braindecode-preprocessing-exponential-moving-standardize"]], "braindecode.preprocessing.filterbank": [[117, "braindecode-preprocessing-filterbank"]], "braindecode.preprocessing.preprocess": [[118, "braindecode-preprocessing-preprocess"]], "Examples using braindecode.preprocessing.preprocess": [[118, "examples-using-braindecode-preprocessing-preprocess"]], "braindecode.preprocessing.scale": [[119, "braindecode-preprocessing-scale"]], "Examples using braindecode.preprocessing.scale": [[119, "examples-using-braindecode-preprocessing-scale"]], "braindecode.regressor.EEGRegressor": [[120, "braindecode-regressor-eegregressor"]], "braindecode.samplers.BalancedSequenceSampler": [[121, "braindecode-samplers-balancedsequencesampler"]], "braindecode.samplers.RecordingSampler": [[122, "braindecode-samplers-recordingsampler"]], "Examples using braindecode.samplers.RecordingSampler": [[122, "examples-using-braindecode-samplers-recordingsampler"]], "braindecode.samplers.RelativePositioningSampler": [[123, "braindecode-samplers-relativepositioningsampler"]], "Examples using braindecode.samplers.RelativePositioningSampler": [[123, "examples-using-braindecode-samplers-relativepositioningsampler"]], "braindecode.samplers.SequenceSampler": [[124, "braindecode-samplers-sequencesampler"]], "Examples using braindecode.samplers.SequenceSampler": [[124, "examples-using-braindecode-samplers-sequencesampler"]], "braindecode.training.CroppedLoss": [[125, "braindecode-training-croppedloss"]], "Examples using braindecode.training.CroppedLoss": [[125, "examples-using-braindecode-training-croppedloss"]], "braindecode.training.CroppedTimeSeriesEpochScoring": [[126, "braindecode-training-croppedtimeseriesepochscoring"]], "Examples using braindecode.training.CroppedTimeSeriesEpochScoring": [[126, "examples-using-braindecode-training-croppedtimeseriesepochscoring"]], "braindecode.training.CroppedTrialEpochScoring": [[127, "braindecode-training-croppedtrialepochscoring"]], "Examples using braindecode.training.CroppedTrialEpochScoring": [[127, "examples-using-braindecode-training-croppedtrialepochscoring"]], "braindecode.training.PostEpochTrainScoring": [[128, "braindecode-training-postepochtrainscoring"]], "braindecode.training.TimeSeriesLoss": [[129, "braindecode-training-timeseriesloss"]], "Examples using braindecode.training.TimeSeriesLoss": [[129, "examples-using-braindecode-training-timeseriesloss"]], "braindecode.training.mixup_criterion": [[130, "braindecode-training-mixup-criterion"]], "braindecode.training.predict_trials": [[131, "braindecode-training-predict-trials"]], "braindecode.training.trial_preds_from_window_preds": [[132, "braindecode-training-trial-preds-from-window-preds"]], "braindecode.util.set_random_seeds": [[133, "braindecode-util-set-random-seeds"]], "Examples using braindecode.util.set_random_seeds": [[133, "examples-using-braindecode-util-set-random-seeds"]], "braindecode.visualization.compute_amplitude_gradients": [[134, "braindecode-visualization-compute-amplitude-gradients"]], "braindecode.visualization.plot_confusion_matrix": [[135, "braindecode-visualization-plot-confusion-matrix"]], "Examples using braindecode.visualization.plot_confusion_matrix": [[135, "examples-using-braindecode-visualization-plot-confusion-matrix"]], "Frequently Asked Questions (FAQ)": [[136, "frequently-asked-questions-faq"]], "How do I cite Braindecode?": [[136, "how-do-i-cite-braindecode"]], "Help! I can\u2019t get Python and Braindecode working!": [[136, "help-i-can-t-get-python-and-braindecode-working"]], "I still can\u2019t get it to work!": [[136, "i-still-can-t-get-it-to-work"]], "I think I found a bug, what do I do?": [[136, "i-think-i-found-a-bug-what-do-i-do"]], "Braindecode Homepage": [[137, "braindecode-homepage"]], "Installation": [[138, "installation"]], "Installing from PyPI": [[139, "installing-from-pypi"]], "Installing from sources": [[140, "installing-from-sources"]], "Clone the repository from GitHub": [[140, "clone-the-repository-from-github"]], "Installing Braindecode from the source": [[140, "installing-braindecode-from-the-source"]], "Testing if your installation is working": [[140, "testing-if-your-installation-is-working"]], "braindecode package": [[141, "module-braindecode"]], "Subpackages": [[141, "subpackages"]], "Submodules": [[141, "submodules"], [142, "submodules"], [143, "submodules"], [144, "submodules"], [145, "submodules"], [146, "submodules"], [147, "submodules"], [148, "submodules"], [149, "submodules"]], "braindecode.classifier module": [[141, "module-braindecode.classifier"]], "braindecode.eegneuralnet module": [[141, "module-braindecode.eegneuralnet"]], "braindecode.regressor module": [[141, "module-braindecode.regressor"]], "braindecode.util module": [[141, "module-braindecode.util"]], "braindecode.version module": [[141, "module-braindecode.version"]], "braindecode.augmentation package": [[142, "module-braindecode.augmentation"]], "braindecode.augmentation.base module": [[142, "module-braindecode.augmentation.base"]], "braindecode.augmentation.functional module": [[142, "module-braindecode.augmentation.functional"]], "braindecode.augmentation.transforms module": [[142, "module-braindecode.augmentation.transforms"]], "braindecode.datasets package": [[143, "module-braindecode.datasets"]], "braindecode.datasets.base module": [[143, "module-braindecode.datasets.base"]], "braindecode.datasets.bbci module": [[143, "module-braindecode.datasets.bbci"]], "braindecode.datasets.bcicomp module": [[143, "module-braindecode.datasets.bcicomp"]], "braindecode.datasets.mne module": [[143, "module-braindecode.datasets.mne"]], "braindecode.datasets.moabb module": [[143, "module-braindecode.datasets.moabb"]], "braindecode.datasets.sleep_physionet module": [[143, "module-braindecode.datasets.sleep_physionet"]], "braindecode.datasets.tuh module": [[143, "module-braindecode.datasets.tuh"]], "braindecode.datasets.xy module": [[143, "module-braindecode.datasets.xy"]], "braindecode.datautil package": [[144, "module-braindecode.datautil"]], "braindecode.datautil.mne module": [[144, "module-braindecode.datautil.mne"]], "braindecode.datautil.preprocess module": [[144, "module-braindecode.datautil.preprocess"]], "braindecode.datautil.serialization module": [[144, "module-braindecode.datautil.serialization"]], "braindecode.datautil.util module": [[144, "module-braindecode.datautil.util"]], "braindecode.datautil.windowers module": [[144, "module-braindecode.datautil.windowers"]], "braindecode.datautil.xy module": [[144, "module-braindecode.datautil.xy"]], "braindecode.models package": [[145, "module-braindecode.models"]], "braindecode.models.atcnet module": [[145, "module-braindecode.models.atcnet"]], "braindecode.models.base module": [[145, "module-braindecode.models.base"]], "braindecode.models.deep4 module": [[145, "module-braindecode.models.deep4"]], "braindecode.models.deepsleepnet module": [[145, "module-braindecode.models.deepsleepnet"]], "braindecode.models.eegconformer module": [[145, "module-braindecode.models.eegconformer"]], "braindecode.models.eeginception module": [[145, "module-braindecode.models.eeginception"]], "braindecode.models.eeginception_erp module": [[145, "module-braindecode.models.eeginception_erp"]], "braindecode.models.eeginception_mi module": [[145, "module-braindecode.models.eeginception_mi"]], "braindecode.models.eegitnet module": [[145, "module-braindecode.models.eegitnet"]], "braindecode.models.eegnet module": [[145, "module-braindecode.models.eegnet"]], "braindecode.models.eegresnet module": [[145, "module-braindecode.models.eegresnet"]], "braindecode.models.functions module": [[145, "module-braindecode.models.functions"]], "braindecode.models.hybrid module": [[145, "module-braindecode.models.hybrid"]], "braindecode.models.modules module": [[145, "module-braindecode.models.modules"]], "braindecode.models.shallow_fbcsp module": [[145, "module-braindecode.models.shallow_fbcsp"]], "braindecode.models.sleep_stager_blanco_2020 module": [[145, "module-braindecode.models.sleep_stager_blanco_2020"]], "braindecode.models.sleep_stager_chambon_2018 module": [[145, "module-braindecode.models.sleep_stager_chambon_2018"]], "braindecode.models.sleep_stager_eldele_2021 module": [[145, "module-braindecode.models.sleep_stager_eldele_2021"]], "braindecode.models.tcn module": [[145, "module-braindecode.models.tcn"]], "braindecode.models.tidnet module": [[145, "module-braindecode.models.tidnet"]], "braindecode.models.usleep module": [[145, "module-braindecode.models.usleep"]], "braindecode.models.util module": [[145, "module-braindecode.models.util"]], "braindecode.preprocessing package": [[146, "module-braindecode.preprocessing"]], "braindecode.preprocessing.mne_preprocess module": [[146, "module-braindecode.preprocessing.mne_preprocess"]], "braindecode.preprocessing.preprocess module": [[146, "module-braindecode.preprocessing.preprocess"]], "braindecode.preprocessing.windowers module": [[146, "module-braindecode.preprocessing.windowers"]], "braindecode.samplers package": [[147, "module-braindecode.samplers"]], "braindecode.samplers.base module": [[147, "module-braindecode.samplers.base"]], "braindecode.samplers.ssl module": [[147, "module-braindecode.samplers.ssl"]], "braindecode.training package": [[148, "module-braindecode.training"]], "braindecode.training.callbacks module": [[148, "module-braindecode.training.callbacks"]], "braindecode.training.losses module": [[148, "module-braindecode.training.losses"]], "braindecode.training.scoring module": [[148, "module-braindecode.training.scoring"]], "braindecode.visualization package": [[149, "module-braindecode.visualization"]], "braindecode.visualization.confusion_matrices module": [[149, "module-braindecode.visualization.confusion_matrices"]], "braindecode.visualization.gradients module": [[149, "module-braindecode.visualization.gradients"]], "braindecode": [[150, "braindecode"]], "What\u2019s new": [[151, "what-s-new"]], "Current 0.9 (dev0)": [[151, "current-0-9-dev0"]], "Enhancements": [[151, "enhancements"], [151, "id1"], [151, "id8"], [151, "id11"], [151, "id14"]], "Bugs": [[151, "bugs"], [151, "id6"], [151, "id9"], [151, "id12"], [151, "id15"]], "API changes": [[151, "api-changes"], [151, "id7"], [151, "id10"], [151, "id13"], [151, "id16"]], "Current 0.8 (11-2022)": [[151, "current-0-8-11-2022"]], "Current 0.7 (10-2022)": [[151, "current-0-7-10-2022"]], "Version 0.6 (2021-12-06)": [[151, "version-0-6-2021-12-06"]], "Version 0.5.1 (2021-07-14)": [[151, "version-0-5-1-2021-07-14"]], "Authors": [[151, "authors"]]}, "indexentries": {"braindecode": [[0, "module-braindecode"], [141, "module-braindecode"]], "module": [[0, "module-braindecode"], [141, "module-braindecode"], [141, "module-braindecode.classifier"], [141, "module-braindecode.eegneuralnet"], [141, "module-braindecode.regressor"], [141, "module-braindecode.util"], [141, "module-braindecode.version"], [142, "module-braindecode.augmentation"], [142, "module-braindecode.augmentation.base"], [142, "module-braindecode.augmentation.functional"], [142, "module-braindecode.augmentation.transforms"], [143, "module-braindecode.datasets"], [143, "module-braindecode.datasets.base"], [143, "module-braindecode.datasets.bbci"], [143, "module-braindecode.datasets.bcicomp"], [143, "module-braindecode.datasets.mne"], [143, "module-braindecode.datasets.moabb"], [143, "module-braindecode.datasets.sleep_physionet"], [143, "module-braindecode.datasets.tuh"], [143, "module-braindecode.datasets.xy"], [144, "module-braindecode.datautil"], [144, "module-braindecode.datautil.mne"], [144, "module-braindecode.datautil.preprocess"], [144, "module-braindecode.datautil.serialization"], [144, "module-braindecode.datautil.util"], [144, "module-braindecode.datautil.windowers"], [144, "module-braindecode.datautil.xy"], [145, "module-braindecode.models"], [145, "module-braindecode.models.atcnet"], [145, "module-braindecode.models.base"], [145, "module-braindecode.models.deep4"], [145, "module-braindecode.models.deepsleepnet"], [145, "module-braindecode.models.eegconformer"], [145, "module-braindecode.models.eeginception"], [145, "module-braindecode.models.eeginception_erp"], [145, "module-braindecode.models.eeginception_mi"], [145, "module-braindecode.models.eegitnet"], [145, "module-braindecode.models.eegnet"], [145, "module-braindecode.models.eegresnet"], [145, "module-braindecode.models.functions"], [145, "module-braindecode.models.hybrid"], [145, "module-braindecode.models.modules"], [145, "module-braindecode.models.shallow_fbcsp"], [145, "module-braindecode.models.sleep_stager_blanco_2020"], [145, "module-braindecode.models.sleep_stager_chambon_2018"], [145, "module-braindecode.models.sleep_stager_eldele_2021"], [145, "module-braindecode.models.tcn"], [145, "module-braindecode.models.tidnet"], [145, "module-braindecode.models.usleep"], [145, "module-braindecode.models.util"], [146, "module-braindecode.preprocessing"], [146, "module-braindecode.preprocessing.mne_preprocess"], [146, "module-braindecode.preprocessing.preprocess"], [146, "module-braindecode.preprocessing.windowers"], [147, "module-braindecode.samplers"], [147, "module-braindecode.samplers.base"], [147, "module-braindecode.samplers.ssl"], [148, "module-braindecode.training"], [148, "module-braindecode.training.callbacks"], [148, "module-braindecode.training.losses"], [148, "module-braindecode.training.scoring"], [149, "module-braindecode.visualization"], [149, "module-braindecode.visualization.confusion_matrices"], [149, "module-braindecode.visualization.gradients"]], "augmenteddataloader (class in braindecode.augmentation)": [[35, "braindecode.augmentation.AugmentedDataLoader"], [142, "braindecode.augmentation.AugmentedDataLoader"]], "bandstopfilter (class in braindecode.augmentation)": [[36, "braindecode.augmentation.BandstopFilter"], [142, "braindecode.augmentation.BandstopFilter"]], "get_augmentation_params() (braindecode.augmentation.bandstopfilter method)": [[36, "braindecode.augmentation.BandstopFilter.get_augmentation_params"], [142, "braindecode.augmentation.BandstopFilter.get_augmentation_params"]], "operation() (braindecode.augmentation.bandstopfilter static method)": [[36, "braindecode.augmentation.BandstopFilter.operation"], [142, "braindecode.augmentation.BandstopFilter.operation"]], "channelsdropout (class in braindecode.augmentation)": [[37, "braindecode.augmentation.ChannelsDropout"], [142, "braindecode.augmentation.ChannelsDropout"]], "get_augmentation_params() (braindecode.augmentation.channelsdropout method)": [[37, "braindecode.augmentation.ChannelsDropout.get_augmentation_params"], [142, "braindecode.augmentation.ChannelsDropout.get_augmentation_params"]], "operation() (braindecode.augmentation.channelsdropout static method)": [[37, "braindecode.augmentation.ChannelsDropout.operation"], [142, "braindecode.augmentation.ChannelsDropout.operation"]], "channelsshuffle (class in braindecode.augmentation)": [[38, "braindecode.augmentation.ChannelsShuffle"], [142, "braindecode.augmentation.ChannelsShuffle"]], "get_augmentation_params() (braindecode.augmentation.channelsshuffle method)": [[38, "braindecode.augmentation.ChannelsShuffle.get_augmentation_params"], [142, "braindecode.augmentation.ChannelsShuffle.get_augmentation_params"]], "operation() (braindecode.augmentation.channelsshuffle static method)": [[38, "braindecode.augmentation.ChannelsShuffle.operation"], [142, "braindecode.augmentation.ChannelsShuffle.operation"]], "channelssymmetry (class in braindecode.augmentation)": [[39, "braindecode.augmentation.ChannelsSymmetry"], [142, "braindecode.augmentation.ChannelsSymmetry"]], "get_augmentation_params() (braindecode.augmentation.channelssymmetry method)": [[39, "braindecode.augmentation.ChannelsSymmetry.get_augmentation_params"], [142, "braindecode.augmentation.ChannelsSymmetry.get_augmentation_params"]], "operation() (braindecode.augmentation.channelssymmetry static method)": [[39, "braindecode.augmentation.ChannelsSymmetry.operation"], [142, "braindecode.augmentation.ChannelsSymmetry.operation"]], "compose (class in braindecode.augmentation)": [[40, "braindecode.augmentation.Compose"], [142, "braindecode.augmentation.Compose"]], "forward() (braindecode.augmentation.compose method)": [[40, "braindecode.augmentation.Compose.forward"], [142, "braindecode.augmentation.Compose.forward"]], "ftsurrogate (class in braindecode.augmentation)": [[41, "braindecode.augmentation.FTSurrogate"], [142, "braindecode.augmentation.FTSurrogate"]], "get_augmentation_params() (braindecode.augmentation.ftsurrogate method)": [[41, "braindecode.augmentation.FTSurrogate.get_augmentation_params"], [142, "braindecode.augmentation.FTSurrogate.get_augmentation_params"]], "operation() (braindecode.augmentation.ftsurrogate static method)": [[41, "braindecode.augmentation.FTSurrogate.operation"], [142, "braindecode.augmentation.FTSurrogate.operation"]], "frequencyshift (class in braindecode.augmentation)": [[42, "braindecode.augmentation.FrequencyShift"], [142, "braindecode.augmentation.FrequencyShift"]], "get_augmentation_params() (braindecode.augmentation.frequencyshift method)": [[42, "braindecode.augmentation.FrequencyShift.get_augmentation_params"], [142, "braindecode.augmentation.FrequencyShift.get_augmentation_params"]], "operation() (braindecode.augmentation.frequencyshift static method)": [[42, "braindecode.augmentation.FrequencyShift.operation"], [142, "braindecode.augmentation.FrequencyShift.operation"]], "gaussiannoise (class in braindecode.augmentation)": [[43, "braindecode.augmentation.GaussianNoise"], [142, "braindecode.augmentation.GaussianNoise"]], "get_augmentation_params() (braindecode.augmentation.gaussiannoise method)": [[43, "braindecode.augmentation.GaussianNoise.get_augmentation_params"], [142, "braindecode.augmentation.GaussianNoise.get_augmentation_params"]], "operation() (braindecode.augmentation.gaussiannoise static method)": [[43, "braindecode.augmentation.GaussianNoise.operation"], [142, "braindecode.augmentation.GaussianNoise.operation"]], "identitytransform (class in braindecode.augmentation)": [[44, "braindecode.augmentation.IdentityTransform"], [142, "braindecode.augmentation.IdentityTransform"]], "operation() (braindecode.augmentation.identitytransform static method)": [[44, "braindecode.augmentation.IdentityTransform.operation"], [142, "braindecode.augmentation.IdentityTransform.operation"]], "mixup (class in braindecode.augmentation)": [[45, "braindecode.augmentation.Mixup"], [142, "braindecode.augmentation.Mixup"]], "get_augmentation_params() (braindecode.augmentation.mixup method)": [[45, "braindecode.augmentation.Mixup.get_augmentation_params"], [142, "braindecode.augmentation.Mixup.get_augmentation_params"]], "operation() (braindecode.augmentation.mixup static method)": [[45, "braindecode.augmentation.Mixup.operation"], [142, "braindecode.augmentation.Mixup.operation"]], "sensorsrotation (class in braindecode.augmentation)": [[46, "braindecode.augmentation.SensorsRotation"], [142, "braindecode.augmentation.SensorsRotation"]], "get_augmentation_params() (braindecode.augmentation.sensorsrotation method)": [[46, "braindecode.augmentation.SensorsRotation.get_augmentation_params"], [142, "braindecode.augmentation.SensorsRotation.get_augmentation_params"]], "operation() (braindecode.augmentation.sensorsrotation static method)": [[46, "braindecode.augmentation.SensorsRotation.operation"], [142, "braindecode.augmentation.SensorsRotation.operation"]], "sensorsxrotation (class in braindecode.augmentation)": [[47, "braindecode.augmentation.SensorsXRotation"], [142, "braindecode.augmentation.SensorsXRotation"]], "sensorsyrotation (class in braindecode.augmentation)": [[48, "braindecode.augmentation.SensorsYRotation"], [142, "braindecode.augmentation.SensorsYRotation"]], "sensorszrotation (class in braindecode.augmentation)": [[49, "braindecode.augmentation.SensorsZRotation"], [142, "braindecode.augmentation.SensorsZRotation"]], "signflip (class in braindecode.augmentation)": [[50, "braindecode.augmentation.SignFlip"], [142, "braindecode.augmentation.SignFlip"]], "operation() (braindecode.augmentation.signflip static method)": [[50, "braindecode.augmentation.SignFlip.operation"], [142, "braindecode.augmentation.SignFlip.operation"]], "smoothtimemask (class in braindecode.augmentation)": [[51, "braindecode.augmentation.SmoothTimeMask"], [142, "braindecode.augmentation.SmoothTimeMask"]], "get_augmentation_params() (braindecode.augmentation.smoothtimemask method)": [[51, "braindecode.augmentation.SmoothTimeMask.get_augmentation_params"], [142, "braindecode.augmentation.SmoothTimeMask.get_augmentation_params"]], "operation() (braindecode.augmentation.smoothtimemask static method)": [[51, "braindecode.augmentation.SmoothTimeMask.operation"], [142, "braindecode.augmentation.SmoothTimeMask.operation"]], "timereverse (class in braindecode.augmentation)": [[52, "braindecode.augmentation.TimeReverse"], [142, "braindecode.augmentation.TimeReverse"]], "operation() (braindecode.augmentation.timereverse static method)": [[52, "braindecode.augmentation.TimeReverse.operation"], [142, "braindecode.augmentation.TimeReverse.operation"]], "transform (class in braindecode.augmentation)": [[53, "braindecode.augmentation.Transform"], [142, "braindecode.augmentation.Transform"]], "forward() (braindecode.augmentation.transform method)": [[53, "braindecode.augmentation.Transform.forward"], [142, "braindecode.augmentation.Transform.forward"]], "get_augmentation_params() (braindecode.augmentation.transform method)": [[53, "braindecode.augmentation.Transform.get_augmentation_params"], [142, "braindecode.augmentation.Transform.get_augmentation_params"]], "bandstop_filter() (in module braindecode.augmentation.functional)": [[54, "braindecode.augmentation.functional.bandstop_filter"], [142, "braindecode.augmentation.functional.bandstop_filter"]], "channels_dropout() (in module braindecode.augmentation.functional)": [[55, "braindecode.augmentation.functional.channels_dropout"], [142, "braindecode.augmentation.functional.channels_dropout"]], "channels_permute() (in module braindecode.augmentation.functional)": [[56, "braindecode.augmentation.functional.channels_permute"], [142, "braindecode.augmentation.functional.channels_permute"]], "channels_shuffle() (in module braindecode.augmentation.functional)": [[57, "braindecode.augmentation.functional.channels_shuffle"], [142, "braindecode.augmentation.functional.channels_shuffle"]], "frequency_shift() (in module braindecode.augmentation.functional)": [[58, "braindecode.augmentation.functional.frequency_shift"], [142, "braindecode.augmentation.functional.frequency_shift"]], "ft_surrogate() (in module braindecode.augmentation.functional)": [[59, "braindecode.augmentation.functional.ft_surrogate"], [142, "braindecode.augmentation.functional.ft_surrogate"]], "gaussian_noise() (in module braindecode.augmentation.functional)": [[60, "braindecode.augmentation.functional.gaussian_noise"], [142, "braindecode.augmentation.functional.gaussian_noise"]], "identity() (in module braindecode.augmentation.functional)": [[61, "braindecode.augmentation.functional.identity"], [142, "braindecode.augmentation.functional.identity"]], "mixup() (in module braindecode.augmentation.functional)": [[62, "braindecode.augmentation.functional.mixup"], [142, "braindecode.augmentation.functional.mixup"]], "sensors_rotation() (in module braindecode.augmentation.functional)": [[63, "braindecode.augmentation.functional.sensors_rotation"], [142, "braindecode.augmentation.functional.sensors_rotation"]], "sign_flip() (in module braindecode.augmentation.functional)": [[64, "braindecode.augmentation.functional.sign_flip"], [142, "braindecode.augmentation.functional.sign_flip"]], "smooth_time_mask() (in module braindecode.augmentation.functional)": [[65, "braindecode.augmentation.functional.smooth_time_mask"], [142, "braindecode.augmentation.functional.smooth_time_mask"]], "time_reverse() (in module braindecode.augmentation.functional)": [[66, "braindecode.augmentation.functional.time_reverse"], [142, "braindecode.augmentation.functional.time_reverse"]], "eegclassifier (class in braindecode.classifier)": [[67, "braindecode.classifier.EEGClassifier"], [141, "braindecode.classifier.EEGClassifier"]], "_criteria (braindecode.classifier.eegclassifier attribute)": [[67, "braindecode.classifier.EEGClassifier._criteria"], [141, "braindecode.classifier.EEGClassifier._criteria"]], "_modules (braindecode.classifier.eegclassifier attribute)": [[67, "braindecode.classifier.EEGClassifier._modules"], [141, "braindecode.classifier.EEGClassifier._modules"]], "_optimizers (braindecode.classifier.eegclassifier attribute)": [[67, "braindecode.classifier.EEGClassifier._optimizers"], [141, "braindecode.classifier.EEGClassifier._optimizers"]], "callbacks_ (braindecode.classifier.eegclassifier attribute)": [[67, "braindecode.classifier.EEGClassifier.callbacks_"], [141, "braindecode.classifier.EEGClassifier.callbacks_"]], "classes_ (braindecode.classifier.eegclassifier attribute)": [[67, "braindecode.classifier.EEGClassifier.classes_"], [141, "braindecode.classifier.EEGClassifier.classes_"]], "criterion_ (braindecode.classifier.eegclassifier attribute)": [[67, "braindecode.classifier.EEGClassifier.criterion_"], [141, "braindecode.classifier.EEGClassifier.criterion_"]], "cuda_dependent_attributes_ (braindecode.classifier.eegclassifier attribute)": [[67, "braindecode.classifier.EEGClassifier.cuda_dependent_attributes_"], [141, "braindecode.classifier.EEGClassifier.cuda_dependent_attributes_"]], "get_iterator() (braindecode.classifier.eegclassifier method)": [[67, "braindecode.classifier.EEGClassifier.get_iterator"], [141, "braindecode.classifier.EEGClassifier.get_iterator"]], "get_loss() (braindecode.classifier.eegclassifier method)": [[67, "braindecode.classifier.EEGClassifier.get_loss"], [141, "braindecode.classifier.EEGClassifier.get_loss"]], "initialized_ (braindecode.classifier.eegclassifier attribute)": [[67, "braindecode.classifier.EEGClassifier.initialized_"], [141, "braindecode.classifier.EEGClassifier.initialized_"]], "module_ (braindecode.classifier.eegclassifier attribute)": [[67, "braindecode.classifier.EEGClassifier.module_"], [141, "braindecode.classifier.EEGClassifier.module_"]], "predict() (braindecode.classifier.eegclassifier method)": [[67, "braindecode.classifier.EEGClassifier.predict"], [141, "braindecode.classifier.EEGClassifier.predict"]], "predict_proba() (braindecode.classifier.eegclassifier method)": [[67, "braindecode.classifier.EEGClassifier.predict_proba"], [141, "braindecode.classifier.EEGClassifier.predict_proba"]], "predict_trials() (braindecode.classifier.eegclassifier method)": [[67, "braindecode.classifier.EEGClassifier.predict_trials"], [141, "braindecode.classifier.EEGClassifier.predict_trials"]], "prefixes_ (braindecode.classifier.eegclassifier attribute)": [[67, "braindecode.classifier.EEGClassifier.prefixes_"], [141, "braindecode.classifier.EEGClassifier.prefixes_"]], "bcicompetitionivdataset4 (class in braindecode.datasets)": [[68, "braindecode.datasets.BCICompetitionIVDataset4"], [143, "braindecode.datasets.BCICompetitionIVDataset4"]], "download() (braindecode.datasets.bcicompetitionivdataset4 static method)": [[68, "braindecode.datasets.BCICompetitionIVDataset4.download"], [143, "braindecode.datasets.BCICompetitionIVDataset4.download"]], "bnci2014001 (class in braindecode.datasets)": [[69, "braindecode.datasets.BNCI2014001"], [143, "braindecode.datasets.BNCI2014001"]], "baseconcatdataset (class in braindecode.datasets)": [[70, "braindecode.datasets.BaseConcatDataset"], [143, "braindecode.datasets.BaseConcatDataset"]], "get_metadata() (braindecode.datasets.baseconcatdataset method)": [[70, "braindecode.datasets.BaseConcatDataset.get_metadata"], [143, "braindecode.datasets.BaseConcatDataset.get_metadata"]], "save() (braindecode.datasets.baseconcatdataset method)": [[70, "braindecode.datasets.BaseConcatDataset.save"], [143, "braindecode.datasets.BaseConcatDataset.save"]], "set_description() (braindecode.datasets.baseconcatdataset method)": [[70, "braindecode.datasets.BaseConcatDataset.set_description"], [143, "braindecode.datasets.BaseConcatDataset.set_description"]], "split() (braindecode.datasets.baseconcatdataset method)": [[70, "braindecode.datasets.BaseConcatDataset.split"], [143, "braindecode.datasets.BaseConcatDataset.split"]], "basedataset (class in braindecode.datasets)": [[71, "braindecode.datasets.BaseDataset"], [143, "braindecode.datasets.BaseDataset"]], "set_description() (braindecode.datasets.basedataset method)": [[71, "braindecode.datasets.BaseDataset.set_description"], [143, "braindecode.datasets.BaseDataset.set_description"]], "hgd (class in braindecode.datasets)": [[72, "braindecode.datasets.HGD"], [143, "braindecode.datasets.HGD"]], "moabbdataset (class in braindecode.datasets)": [[73, "braindecode.datasets.MOABBDataset"], [143, "braindecode.datasets.MOABBDataset"]], "sleepphysionet (class in braindecode.datasets)": [[74, "braindecode.datasets.SleepPhysionet"], [143, "braindecode.datasets.SleepPhysionet"]], "tuh (class in braindecode.datasets)": [[75, "braindecode.datasets.TUH"], [143, "braindecode.datasets.TUH"]], "tuhabnormal (class in braindecode.datasets)": [[76, "braindecode.datasets.TUHAbnormal"], [143, "braindecode.datasets.TUHAbnormal"]], "windowsdataset (class in braindecode.datasets)": [[77, "braindecode.datasets.WindowsDataset"], [143, "braindecode.datasets.WindowsDataset"]], "set_description() (braindecode.datasets.windowsdataset method)": [[77, "braindecode.datasets.WindowsDataset.set_description"], [143, "braindecode.datasets.WindowsDataset.set_description"]], "create_from_x_y() (in module braindecode.datasets)": [[78, "braindecode.datasets.create_from_X_y"], [143, "braindecode.datasets.create_from_X_y"]], "create_from_mne_epochs() (in module braindecode.datasets)": [[79, "braindecode.datasets.create_from_mne_epochs"], [143, "braindecode.datasets.create_from_mne_epochs"]], "create_from_mne_raw() (in module braindecode.datasets)": [[80, "braindecode.datasets.create_from_mne_raw"], [143, "braindecode.datasets.create_from_mne_raw"]], "load_concat_dataset() (in module braindecode.datautil)": [[81, "braindecode.datautil.load_concat_dataset"]], "save_concat_dataset() (in module braindecode.datautil)": [[82, "braindecode.datautil.save_concat_dataset"]], "atcnet (class in braindecode.models)": [[83, "braindecode.models.ATCNet"]], "forward() (braindecode.models.atcnet method)": [[83, "braindecode.models.ATCNet.forward"]], "deep4net (class in braindecode.models)": [[84, "braindecode.models.Deep4Net"]], "deepsleepnet (class in braindecode.models)": [[85, "braindecode.models.DeepSleepNet"]], "forward() (braindecode.models.deepsleepnet method)": [[85, "braindecode.models.DeepSleepNet.forward"]], "eegconformer (class in braindecode.models)": [[86, "braindecode.models.EEGConformer"]], "forward() (braindecode.models.eegconformer method)": [[86, "braindecode.models.EEGConformer.forward"]], "get_fc_size() (braindecode.models.eegconformer method)": [[86, "braindecode.models.EEGConformer.get_fc_size"]], "eegitnet (class in braindecode.models)": [[87, "braindecode.models.EEGITNet"]], "eeginception (class in braindecode.models)": [[88, "braindecode.models.EEGInception"]], "eeginceptionerp (class in braindecode.models)": [[89, "braindecode.models.EEGInceptionERP"]], "eeginceptionmi (class in braindecode.models)": [[90, "braindecode.models.EEGInceptionMI"]], "forward() (braindecode.models.eeginceptionmi method)": [[90, "braindecode.models.EEGInceptionMI.forward"]], "eegmodulemixin (class in braindecode.models)": [[91, "braindecode.models.EEGModuleMixin"]], "get_output_shape() (braindecode.models.eegmodulemixin method)": [[91, "braindecode.models.EEGModuleMixin.get_output_shape"]], "get_torchinfo_statistics() (braindecode.models.eegmodulemixin method)": [[91, "braindecode.models.EEGModuleMixin.get_torchinfo_statistics"]], "load_state_dict() (braindecode.models.eegmodulemixin method)": [[91, "braindecode.models.EEGModuleMixin.load_state_dict"]], "to_dense_prediction_model() (braindecode.models.eegmodulemixin method)": [[91, "braindecode.models.EEGModuleMixin.to_dense_prediction_model"]], "eegnetv1 (class in braindecode.models)": [[92, "braindecode.models.EEGNetv1"]], "eegnetv4 (class in braindecode.models)": [[93, "braindecode.models.EEGNetv4"]], "eegresnet (class in braindecode.models)": [[94, "braindecode.models.EEGResNet"]], "hybridnet (class in braindecode.models)": [[95, "braindecode.models.HybridNet"]], "forward() (braindecode.models.hybridnet method)": [[95, "braindecode.models.HybridNet.forward"]], "shallowfbcspnet (class in braindecode.models)": [[96, "braindecode.models.ShallowFBCSPNet"]], "sleepstagerblanco2020 (class in braindecode.models)": [[97, "braindecode.models.SleepStagerBlanco2020"]], "forward() (braindecode.models.sleepstagerblanco2020 method)": [[97, "braindecode.models.SleepStagerBlanco2020.forward"]], "sleepstagerchambon2018 (class in braindecode.models)": [[98, "braindecode.models.SleepStagerChambon2018"]], "forward() (braindecode.models.sleepstagerchambon2018 method)": [[98, "braindecode.models.SleepStagerChambon2018.forward"]], "sleepstagereldele2021 (class in braindecode.models)": [[99, "braindecode.models.SleepStagerEldele2021"]], "forward() (braindecode.models.sleepstagereldele2021 method)": [[99, "braindecode.models.SleepStagerEldele2021.forward"]], "tcn (class in braindecode.models)": [[100, "braindecode.models.TCN"]], "forward() (braindecode.models.tcn method)": [[100, "braindecode.models.TCN.forward"]], "tidnet (class in braindecode.models)": [[101, "braindecode.models.TIDNet"]], "forward() (braindecode.models.tidnet method)": [[101, "braindecode.models.TIDNet.forward"]], "timedistributed (class in braindecode.models)": [[102, "braindecode.models.TimeDistributed"]], "forward() (braindecode.models.timedistributed method)": [[102, "braindecode.models.TimeDistributed.forward"]], "usleep (class in braindecode.models)": [[103, "braindecode.models.USleep"]], "forward() (braindecode.models.usleep method)": [[103, "braindecode.models.USleep.forward"]], "get_output_shape() (in module braindecode.models)": [[104, "braindecode.models.get_output_shape"]], "crop (class in braindecode.preprocessing)": [[105, "braindecode.preprocessing.Crop"], [146, "braindecode.preprocessing.Crop"]], "dropchannels (class in braindecode.preprocessing)": [[106, "braindecode.preprocessing.DropChannels"], [146, "braindecode.preprocessing.DropChannels"]], "filter (class in braindecode.preprocessing)": [[107, "braindecode.preprocessing.Filter"], [146, "braindecode.preprocessing.Filter"]], "pick (class in braindecode.preprocessing)": [[108, "braindecode.preprocessing.Pick"], [146, "braindecode.preprocessing.Pick"]], "preprocessor (class in braindecode.preprocessing)": [[109, "braindecode.preprocessing.Preprocessor"], [146, "braindecode.preprocessing.Preprocessor"]], "apply() (braindecode.preprocessing.preprocessor method)": [[109, "braindecode.preprocessing.Preprocessor.apply"], [146, "braindecode.preprocessing.Preprocessor.apply"]], "resample (class in braindecode.preprocessing)": [[110, "braindecode.preprocessing.Resample"], [146, "braindecode.preprocessing.Resample"]], "seteegreference (class in braindecode.preprocessing)": [[111, "braindecode.preprocessing.SetEEGReference"], [146, "braindecode.preprocessing.SetEEGReference"]], "create_fixed_length_windows() (in module braindecode.preprocessing)": [[112, "braindecode.preprocessing.create_fixed_length_windows"], [146, "braindecode.preprocessing.create_fixed_length_windows"]], "create_windows_from_events() (in module braindecode.preprocessing)": [[113, "braindecode.preprocessing.create_windows_from_events"], [146, "braindecode.preprocessing.create_windows_from_events"]], "create_windows_from_target_channels() (in module braindecode.preprocessing)": [[114, "braindecode.preprocessing.create_windows_from_target_channels"], [146, "braindecode.preprocessing.create_windows_from_target_channels"]], "exponential_moving_demean() (in module braindecode.preprocessing)": [[115, "braindecode.preprocessing.exponential_moving_demean"], [146, "braindecode.preprocessing.exponential_moving_demean"]], "exponential_moving_standardize() (in module braindecode.preprocessing)": [[116, "braindecode.preprocessing.exponential_moving_standardize"], [146, "braindecode.preprocessing.exponential_moving_standardize"]], "filterbank() (in module braindecode.preprocessing)": [[117, "braindecode.preprocessing.filterbank"], [146, "braindecode.preprocessing.filterbank"]], "preprocess() (in module braindecode.preprocessing)": [[118, "braindecode.preprocessing.preprocess"], [146, "braindecode.preprocessing.preprocess"]], "eegregressor (class in braindecode.regressor)": [[120, "braindecode.regressor.EEGRegressor"], [141, "braindecode.regressor.EEGRegressor"]], "_criteria (braindecode.regressor.eegregressor attribute)": [[120, "braindecode.regressor.EEGRegressor._criteria"], [141, "braindecode.regressor.EEGRegressor._criteria"]], "_modules (braindecode.regressor.eegregressor attribute)": [[120, "braindecode.regressor.EEGRegressor._modules"], [141, "braindecode.regressor.EEGRegressor._modules"]], "_optimizers (braindecode.regressor.eegregressor attribute)": [[120, "braindecode.regressor.EEGRegressor._optimizers"], [141, "braindecode.regressor.EEGRegressor._optimizers"]], "callbacks_ (braindecode.regressor.eegregressor attribute)": [[120, "braindecode.regressor.EEGRegressor.callbacks_"], [141, "braindecode.regressor.EEGRegressor.callbacks_"]], "criterion_ (braindecode.regressor.eegregressor attribute)": [[120, "braindecode.regressor.EEGRegressor.criterion_"], [141, "braindecode.regressor.EEGRegressor.criterion_"]], "cuda_dependent_attributes_ (braindecode.regressor.eegregressor attribute)": [[120, "braindecode.regressor.EEGRegressor.cuda_dependent_attributes_"], [141, "braindecode.regressor.EEGRegressor.cuda_dependent_attributes_"]], "fit() (braindecode.regressor.eegregressor method)": [[120, "braindecode.regressor.EEGRegressor.fit"], [141, "braindecode.regressor.EEGRegressor.fit"]], "get_iterator() (braindecode.regressor.eegregressor method)": [[120, "braindecode.regressor.EEGRegressor.get_iterator"], [141, "braindecode.regressor.EEGRegressor.get_iterator"]], "initialized_ (braindecode.regressor.eegregressor attribute)": [[120, "braindecode.regressor.EEGRegressor.initialized_"], [141, "braindecode.regressor.EEGRegressor.initialized_"]], "module_ (braindecode.regressor.eegregressor attribute)": [[120, "braindecode.regressor.EEGRegressor.module_"], [141, "braindecode.regressor.EEGRegressor.module_"]], "predict_proba() (braindecode.regressor.eegregressor method)": [[120, "braindecode.regressor.EEGRegressor.predict_proba"], [141, "braindecode.regressor.EEGRegressor.predict_proba"]], "predict_trials() (braindecode.regressor.eegregressor method)": [[120, "braindecode.regressor.EEGRegressor.predict_trials"], [141, "braindecode.regressor.EEGRegressor.predict_trials"]], "prefixes_ (braindecode.regressor.eegregressor attribute)": [[120, "braindecode.regressor.EEGRegressor.prefixes_"], [141, "braindecode.regressor.EEGRegressor.prefixes_"]], "balancedsequencesampler (class in braindecode.samplers)": [[121, "braindecode.samplers.BalancedSequenceSampler"], [147, "braindecode.samplers.BalancedSequenceSampler"]], "sample_class() (braindecode.samplers.balancedsequencesampler method)": [[121, "braindecode.samplers.BalancedSequenceSampler.sample_class"], [147, "braindecode.samplers.BalancedSequenceSampler.sample_class"]], "recordingsampler (class in braindecode.samplers)": [[122, "braindecode.samplers.RecordingSampler"], [147, "braindecode.samplers.RecordingSampler"]], "info (braindecode.samplers.recordingsampler attribute)": [[122, "braindecode.samplers.RecordingSampler.info"], [147, "braindecode.samplers.RecordingSampler.info"]], "n_recordings (braindecode.samplers.recordingsampler attribute)": [[122, "braindecode.samplers.RecordingSampler.n_recordings"], [147, "braindecode.samplers.RecordingSampler.n_recordings"]], "sample_recording() (braindecode.samplers.recordingsampler method)": [[122, "braindecode.samplers.RecordingSampler.sample_recording"], [147, "braindecode.samplers.RecordingSampler.sample_recording"]], "sample_window() (braindecode.samplers.recordingsampler method)": [[122, "braindecode.samplers.RecordingSampler.sample_window"], [147, "braindecode.samplers.RecordingSampler.sample_window"]], "relativepositioningsampler (class in braindecode.samplers)": [[123, "braindecode.samplers.RelativePositioningSampler"], [147, "braindecode.samplers.RelativePositioningSampler"]], "presample() (braindecode.samplers.relativepositioningsampler method)": [[123, "braindecode.samplers.RelativePositioningSampler.presample"], [147, "braindecode.samplers.RelativePositioningSampler.presample"]], "sequencesampler (class in braindecode.samplers)": [[124, "braindecode.samplers.SequenceSampler"], [147, "braindecode.samplers.SequenceSampler"]], "file_ids (braindecode.samplers.sequencesampler attribute)": [[124, "braindecode.samplers.SequenceSampler.file_ids"], [147, "braindecode.samplers.SequenceSampler.file_ids"]], "info (braindecode.samplers.sequencesampler attribute)": [[124, "braindecode.samplers.SequenceSampler.info"], [147, "braindecode.samplers.SequenceSampler.info"]], "croppedloss (class in braindecode.training)": [[125, "braindecode.training.CroppedLoss"], [148, "braindecode.training.CroppedLoss"]], "forward() (braindecode.training.croppedloss method)": [[125, "braindecode.training.CroppedLoss.forward"], [148, "braindecode.training.CroppedLoss.forward"]], "croppedtimeseriesepochscoring (class in braindecode.training)": [[126, "braindecode.training.CroppedTimeSeriesEpochScoring"], [148, "braindecode.training.CroppedTimeSeriesEpochScoring"]], "on_epoch_end() (braindecode.training.croppedtimeseriesepochscoring method)": [[126, "braindecode.training.CroppedTimeSeriesEpochScoring.on_epoch_end"], [148, "braindecode.training.CroppedTimeSeriesEpochScoring.on_epoch_end"]], "croppedtrialepochscoring (class in braindecode.training)": [[127, "braindecode.training.CroppedTrialEpochScoring"], [148, "braindecode.training.CroppedTrialEpochScoring"]], "on_batch_end() (braindecode.training.croppedtrialepochscoring method)": [[127, "braindecode.training.CroppedTrialEpochScoring.on_batch_end"], [148, "braindecode.training.CroppedTrialEpochScoring.on_batch_end"]], "on_epoch_end() (braindecode.training.croppedtrialepochscoring method)": [[127, "braindecode.training.CroppedTrialEpochScoring.on_epoch_end"], [148, "braindecode.training.CroppedTrialEpochScoring.on_epoch_end"]], "postepochtrainscoring (class in braindecode.training)": [[128, "braindecode.training.PostEpochTrainScoring"], [148, "braindecode.training.PostEpochTrainScoring"]], "on_epoch_end() (braindecode.training.postepochtrainscoring method)": [[128, "braindecode.training.PostEpochTrainScoring.on_epoch_end"], [148, "braindecode.training.PostEpochTrainScoring.on_epoch_end"]], "timeseriesloss (class in braindecode.training)": [[129, "braindecode.training.TimeSeriesLoss"], [148, "braindecode.training.TimeSeriesLoss"]], "forward() (braindecode.training.timeseriesloss method)": [[129, "braindecode.training.TimeSeriesLoss.forward"], [148, "braindecode.training.TimeSeriesLoss.forward"]], "mixup_criterion() (in module braindecode.training)": [[130, "braindecode.training.mixup_criterion"], [148, "braindecode.training.mixup_criterion"]], "predict_trials() (in module braindecode.training)": [[131, "braindecode.training.predict_trials"], [148, "braindecode.training.predict_trials"]], "trial_preds_from_window_preds() (in module braindecode.training)": [[132, "braindecode.training.trial_preds_from_window_preds"], [148, "braindecode.training.trial_preds_from_window_preds"]], "set_random_seeds() (in module braindecode.util)": [[133, "braindecode.util.set_random_seeds"], [141, "braindecode.util.set_random_seeds"]], "compute_amplitude_gradients() (in module braindecode.visualization)": [[134, "braindecode.visualization.compute_amplitude_gradients"], [149, "braindecode.visualization.compute_amplitude_gradients"]], "plot_confusion_matrix() (in module braindecode.visualization)": [[135, "braindecode.visualization.plot_confusion_matrix"], [149, "braindecode.visualization.plot_confusion_matrix"]], "eegclassifier (class in braindecode)": [[141, "braindecode.EEGClassifier"]], "eegregressor (class in braindecode)": [[141, "braindecode.EEGRegressor"]], "throwawayindexloader (class in braindecode.util)": [[141, "braindecode.util.ThrowAwayIndexLoader"]], "_criteria (braindecode.eegclassifier attribute)": [[141, "braindecode.EEGClassifier._criteria"]], "_criteria (braindecode.eegregressor attribute)": [[141, "braindecode.EEGRegressor._criteria"]], "_modules (braindecode.eegclassifier attribute)": [[141, "braindecode.EEGClassifier._modules"]], "_modules (braindecode.eegregressor attribute)": [[141, "braindecode.EEGRegressor._modules"]], "_optimizers (braindecode.eegclassifier attribute)": [[141, "braindecode.EEGClassifier._optimizers"]], "_optimizers (braindecode.eegregressor attribute)": [[141, "braindecode.EEGRegressor._optimizers"]], "braindecode.classifier": [[141, "module-braindecode.classifier"]], "braindecode.eegneuralnet": [[141, "module-braindecode.eegneuralnet"]], "braindecode.regressor": [[141, "module-braindecode.regressor"]], "braindecode.util": [[141, "module-braindecode.util"]], "braindecode.version": [[141, "module-braindecode.version"]], "callbacks_ (braindecode.eegclassifier attribute)": [[141, "braindecode.EEGClassifier.callbacks_"]], "callbacks_ (braindecode.eegregressor attribute)": [[141, "braindecode.EEGRegressor.callbacks_"]], "classes_ (braindecode.eegclassifier attribute)": [[141, "braindecode.EEGClassifier.classes_"]], "corr() (in module braindecode.util)": [[141, "braindecode.util.corr"]], "cov() (in module braindecode.util)": [[141, "braindecode.util.cov"]], "create_mne_dummy_raw() (in module braindecode.util)": [[141, "braindecode.util.create_mne_dummy_raw"]], "criterion_ (braindecode.eegclassifier attribute)": [[141, "braindecode.EEGClassifier.criterion_"]], "criterion_ (braindecode.eegregressor attribute)": [[141, "braindecode.EEGRegressor.criterion_"]], "cuda_dependent_attributes_ (braindecode.eegclassifier attribute)": [[141, "braindecode.EEGClassifier.cuda_dependent_attributes_"]], "cuda_dependent_attributes_ (braindecode.eegregressor attribute)": [[141, "braindecode.EEGRegressor.cuda_dependent_attributes_"]], "doc (braindecode.eegclassifier attribute)": [[141, "braindecode.EEGClassifier.doc"]], "doc (braindecode.eegregressor attribute)": [[141, "braindecode.EEGRegressor.doc"]], "doc (braindecode.classifier.eegclassifier attribute)": [[141, "braindecode.classifier.EEGClassifier.doc"]], "doc (braindecode.regressor.eegregressor attribute)": [[141, "braindecode.regressor.EEGRegressor.doc"]], "fit() (braindecode.eegregressor method)": [[141, "braindecode.EEGRegressor.fit"]], "get_balanced_batches() (in module braindecode.util)": [[141, "braindecode.util.get_balanced_batches"]], "get_iterator() (braindecode.eegclassifier method)": [[141, "braindecode.EEGClassifier.get_iterator"]], "get_iterator() (braindecode.eegregressor method)": [[141, "braindecode.EEGRegressor.get_iterator"]], "get_loss() (braindecode.eegclassifier method)": [[141, "braindecode.EEGClassifier.get_loss"]], "initialized_ (braindecode.eegclassifier attribute)": [[141, "braindecode.EEGClassifier.initialized_"]], "initialized_ (braindecode.eegregressor attribute)": [[141, "braindecode.EEGRegressor.initialized_"]], "module_ (braindecode.eegclassifier attribute)": [[141, "braindecode.EEGClassifier.module_"]], "module_ (braindecode.eegregressor attribute)": [[141, "braindecode.EEGRegressor.module_"]], "np_to_th() (in module braindecode.util)": [[141, "braindecode.util.np_to_th"]], "np_to_var() (in module braindecode.util)": [[141, "braindecode.util.np_to_var"]], "predict() (braindecode.eegclassifier method)": [[141, "braindecode.EEGClassifier.predict"]], "predict_proba() (braindecode.eegclassifier method)": [[141, "braindecode.EEGClassifier.predict_proba"]], "predict_proba() (braindecode.eegregressor method)": [[141, "braindecode.EEGRegressor.predict_proba"]], "predict_trials() (braindecode.eegclassifier method)": [[141, "braindecode.EEGClassifier.predict_trials"]], "predict_trials() (braindecode.eegregressor method)": [[141, "braindecode.EEGRegressor.predict_trials"]], "prefixes_ (braindecode.eegclassifier attribute)": [[141, "braindecode.EEGClassifier.prefixes_"]], "prefixes_ (braindecode.eegregressor attribute)": [[141, "braindecode.EEGRegressor.prefixes_"]], "read_all_file_names() (in module braindecode.util)": [[141, "braindecode.util.read_all_file_names"]], "th_to_np() (in module braindecode.util)": [[141, "braindecode.util.th_to_np"]], "update_estimator_docstring() (in module braindecode.util)": [[141, "braindecode.util.update_estimator_docstring"]], "var_to_np() (in module braindecode.util)": [[141, "braindecode.util.var_to_np"]], "wrap_reshape_apply_fn() (in module braindecode.util)": [[141, "braindecode.util.wrap_reshape_apply_fn"]], "augmenteddataloader (class in braindecode.augmentation.base)": [[142, "braindecode.augmentation.base.AugmentedDataLoader"]], "bandstopfilter (class in braindecode.augmentation.transforms)": [[142, "braindecode.augmentation.transforms.BandstopFilter"]], "channelsdropout (class in braindecode.augmentation.transforms)": [[142, "braindecode.augmentation.transforms.ChannelsDropout"]], "channelsshuffle (class in braindecode.augmentation.transforms)": [[142, "braindecode.augmentation.transforms.ChannelsShuffle"]], "channelssymmetry (class in braindecode.augmentation.transforms)": [[142, "braindecode.augmentation.transforms.ChannelsSymmetry"]], "compose (class in braindecode.augmentation.base)": [[142, "braindecode.augmentation.base.Compose"]], "ftsurrogate (class in braindecode.augmentation.transforms)": [[142, "braindecode.augmentation.transforms.FTSurrogate"]], "frequencyshift (class in braindecode.augmentation.transforms)": [[142, "braindecode.augmentation.transforms.FrequencyShift"]], "gaussiannoise (class in braindecode.augmentation.transforms)": [[142, "braindecode.augmentation.transforms.GaussianNoise"]], "identitytransform (class in braindecode.augmentation.base)": [[142, "braindecode.augmentation.base.IdentityTransform"]], "mixup (class in braindecode.augmentation.transforms)": [[142, "braindecode.augmentation.transforms.Mixup"]], "sensorsrotation (class in braindecode.augmentation.transforms)": [[142, "braindecode.augmentation.transforms.SensorsRotation"]], "sensorsxrotation (class in braindecode.augmentation.transforms)": [[142, "braindecode.augmentation.transforms.SensorsXRotation"]], "sensorsyrotation (class in braindecode.augmentation.transforms)": [[142, "braindecode.augmentation.transforms.SensorsYRotation"]], "sensorszrotation (class in braindecode.augmentation.transforms)": [[142, "braindecode.augmentation.transforms.SensorsZRotation"]], "signflip (class in braindecode.augmentation.transforms)": [[142, "braindecode.augmentation.transforms.SignFlip"]], "smoothtimemask (class in braindecode.augmentation.transforms)": [[142, "braindecode.augmentation.transforms.SmoothTimeMask"]], "timereverse (class in braindecode.augmentation.transforms)": [[142, "braindecode.augmentation.transforms.TimeReverse"]], "transform (class in braindecode.augmentation.base)": [[142, "braindecode.augmentation.base.Transform"]], "batch_size (braindecode.augmentation.augmenteddataloader attribute)": [[142, "braindecode.augmentation.AugmentedDataLoader.batch_size"]], "batch_size (braindecode.augmentation.base.augmenteddataloader attribute)": [[142, "braindecode.augmentation.base.AugmentedDataLoader.batch_size"]], "braindecode.augmentation": [[142, "module-braindecode.augmentation"]], "braindecode.augmentation.base": [[142, "module-braindecode.augmentation.base"]], "braindecode.augmentation.functional": [[142, "module-braindecode.augmentation.functional"]], "braindecode.augmentation.transforms": [[142, "module-braindecode.augmentation.transforms"]], "dataset (braindecode.augmentation.augmenteddataloader attribute)": [[142, "braindecode.augmentation.AugmentedDataLoader.dataset"]], "dataset (braindecode.augmentation.base.augmenteddataloader attribute)": [[142, "braindecode.augmentation.base.AugmentedDataLoader.dataset"]], "drop_last (braindecode.augmentation.augmenteddataloader attribute)": [[142, "braindecode.augmentation.AugmentedDataLoader.drop_last"]], "drop_last (braindecode.augmentation.base.augmenteddataloader attribute)": [[142, "braindecode.augmentation.base.AugmentedDataLoader.drop_last"]], "forward() (braindecode.augmentation.base.compose method)": [[142, "braindecode.augmentation.base.Compose.forward"]], "forward() (braindecode.augmentation.base.transform method)": [[142, "braindecode.augmentation.base.Transform.forward"]], "get_augmentation_params() (braindecode.augmentation.base.transform method)": [[142, "braindecode.augmentation.base.Transform.get_augmentation_params"]], "get_augmentation_params() (braindecode.augmentation.transforms.bandstopfilter method)": [[142, "braindecode.augmentation.transforms.BandstopFilter.get_augmentation_params"]], "get_augmentation_params() (braindecode.augmentation.transforms.channelsdropout method)": [[142, "braindecode.augmentation.transforms.ChannelsDropout.get_augmentation_params"]], "get_augmentation_params() (braindecode.augmentation.transforms.channelsshuffle method)": [[142, "braindecode.augmentation.transforms.ChannelsShuffle.get_augmentation_params"]], "get_augmentation_params() (braindecode.augmentation.transforms.channelssymmetry method)": [[142, "braindecode.augmentation.transforms.ChannelsSymmetry.get_augmentation_params"]], "get_augmentation_params() (braindecode.augmentation.transforms.ftsurrogate method)": [[142, "braindecode.augmentation.transforms.FTSurrogate.get_augmentation_params"]], "get_augmentation_params() (braindecode.augmentation.transforms.frequencyshift method)": [[142, "braindecode.augmentation.transforms.FrequencyShift.get_augmentation_params"]], "get_augmentation_params() (braindecode.augmentation.transforms.gaussiannoise method)": [[142, "braindecode.augmentation.transforms.GaussianNoise.get_augmentation_params"]], "get_augmentation_params() (braindecode.augmentation.transforms.mixup method)": [[142, "braindecode.augmentation.transforms.Mixup.get_augmentation_params"]], "get_augmentation_params() (braindecode.augmentation.transforms.sensorsrotation method)": [[142, "braindecode.augmentation.transforms.SensorsRotation.get_augmentation_params"]], "get_augmentation_params() (braindecode.augmentation.transforms.smoothtimemask method)": [[142, "braindecode.augmentation.transforms.SmoothTimeMask.get_augmentation_params"]], "num_workers (braindecode.augmentation.augmenteddataloader attribute)": [[142, "braindecode.augmentation.AugmentedDataLoader.num_workers"]], "num_workers (braindecode.augmentation.base.augmenteddataloader attribute)": [[142, "braindecode.augmentation.base.AugmentedDataLoader.num_workers"]], "operation (braindecode.augmentation.compose attribute)": [[142, "braindecode.augmentation.Compose.operation"]], "operation (braindecode.augmentation.transform attribute)": [[142, "braindecode.augmentation.Transform.operation"]], "operation (braindecode.augmentation.base.compose attribute)": [[142, "braindecode.augmentation.base.Compose.operation"]], "operation (braindecode.augmentation.base.transform attribute)": [[142, "braindecode.augmentation.base.Transform.operation"]], "operation() (braindecode.augmentation.base.identitytransform static method)": [[142, "braindecode.augmentation.base.IdentityTransform.operation"]], "operation() (braindecode.augmentation.transforms.bandstopfilter static method)": [[142, "braindecode.augmentation.transforms.BandstopFilter.operation"]], "operation() (braindecode.augmentation.transforms.channelsdropout static method)": [[142, "braindecode.augmentation.transforms.ChannelsDropout.operation"]], "operation() (braindecode.augmentation.transforms.channelsshuffle static method)": [[142, "braindecode.augmentation.transforms.ChannelsShuffle.operation"]], "operation() (braindecode.augmentation.transforms.channelssymmetry static method)": [[142, "braindecode.augmentation.transforms.ChannelsSymmetry.operation"]], "operation() (braindecode.augmentation.transforms.ftsurrogate static method)": [[142, "braindecode.augmentation.transforms.FTSurrogate.operation"]], "operation() (braindecode.augmentation.transforms.frequencyshift static method)": [[142, "braindecode.augmentation.transforms.FrequencyShift.operation"]], "operation() (braindecode.augmentation.transforms.gaussiannoise static method)": [[142, "braindecode.augmentation.transforms.GaussianNoise.operation"]], "operation() (braindecode.augmentation.transforms.mixup static method)": [[142, "braindecode.augmentation.transforms.Mixup.operation"]], "operation() (braindecode.augmentation.transforms.sensorsrotation static method)": [[142, "braindecode.augmentation.transforms.SensorsRotation.operation"]], "operation() (braindecode.augmentation.transforms.signflip static method)": [[142, "braindecode.augmentation.transforms.SignFlip.operation"]], "operation() (braindecode.augmentation.transforms.smoothtimemask static method)": [[142, "braindecode.augmentation.transforms.SmoothTimeMask.operation"]], "operation() (braindecode.augmentation.transforms.timereverse static method)": [[142, "braindecode.augmentation.transforms.TimeReverse.operation"]], "pin_memory (braindecode.augmentation.augmenteddataloader attribute)": [[142, "braindecode.augmentation.AugmentedDataLoader.pin_memory"]], "pin_memory (braindecode.augmentation.base.augmenteddataloader attribute)": [[142, "braindecode.augmentation.base.AugmentedDataLoader.pin_memory"]], "pin_memory_device (braindecode.augmentation.augmenteddataloader attribute)": [[142, "braindecode.augmentation.AugmentedDataLoader.pin_memory_device"]], "pin_memory_device (braindecode.augmentation.base.augmenteddataloader attribute)": [[142, "braindecode.augmentation.base.AugmentedDataLoader.pin_memory_device"]], "prefetch_factor (braindecode.augmentation.augmenteddataloader attribute)": [[142, "braindecode.augmentation.AugmentedDataLoader.prefetch_factor"]], "prefetch_factor (braindecode.augmentation.base.augmenteddataloader attribute)": [[142, "braindecode.augmentation.base.AugmentedDataLoader.prefetch_factor"]], "probability (braindecode.augmentation.transform property)": [[142, "braindecode.augmentation.Transform.probability"]], "probability (braindecode.augmentation.base.transform property)": [[142, "braindecode.augmentation.base.Transform.probability"]], "sampler (braindecode.augmentation.augmenteddataloader attribute)": [[142, "braindecode.augmentation.AugmentedDataLoader.sampler"]], "sampler (braindecode.augmentation.base.augmenteddataloader attribute)": [[142, "braindecode.augmentation.base.AugmentedDataLoader.sampler"]], "timeout (braindecode.augmentation.augmenteddataloader attribute)": [[142, "braindecode.augmentation.AugmentedDataLoader.timeout"]], "timeout (braindecode.augmentation.base.augmenteddataloader attribute)": [[142, "braindecode.augmentation.base.AugmentedDataLoader.timeout"]], "training (braindecode.augmentation.base.compose attribute)": [[142, "braindecode.augmentation.base.Compose.training"]], "training (braindecode.augmentation.base.identitytransform attribute)": [[142, "braindecode.augmentation.base.IdentityTransform.training"]], "training (braindecode.augmentation.base.transform attribute)": [[142, "braindecode.augmentation.base.Transform.training"]], "training (braindecode.augmentation.transforms.bandstopfilter attribute)": [[142, "braindecode.augmentation.transforms.BandstopFilter.training"]], "training (braindecode.augmentation.transforms.channelsdropout attribute)": [[142, "braindecode.augmentation.transforms.ChannelsDropout.training"]], "training (braindecode.augmentation.transforms.channelsshuffle attribute)": [[142, "braindecode.augmentation.transforms.ChannelsShuffle.training"]], "training (braindecode.augmentation.transforms.channelssymmetry attribute)": [[142, "braindecode.augmentation.transforms.ChannelsSymmetry.training"]], "training (braindecode.augmentation.transforms.ftsurrogate attribute)": [[142, "braindecode.augmentation.transforms.FTSurrogate.training"]], "training (braindecode.augmentation.transforms.frequencyshift attribute)": [[142, "braindecode.augmentation.transforms.FrequencyShift.training"]], "training (braindecode.augmentation.transforms.gaussiannoise attribute)": [[142, "braindecode.augmentation.transforms.GaussianNoise.training"]], "training (braindecode.augmentation.transforms.mixup attribute)": [[142, "braindecode.augmentation.transforms.Mixup.training"]], "training (braindecode.augmentation.transforms.sensorsrotation attribute)": [[142, "braindecode.augmentation.transforms.SensorsRotation.training"]], "training (braindecode.augmentation.transforms.sensorsxrotation attribute)": [[142, "braindecode.augmentation.transforms.SensorsXRotation.training"]], "training (braindecode.augmentation.transforms.sensorsyrotation attribute)": [[142, "braindecode.augmentation.transforms.SensorsYRotation.training"]], "training (braindecode.augmentation.transforms.sensorszrotation attribute)": [[142, "braindecode.augmentation.transforms.SensorsZRotation.training"]], "training (braindecode.augmentation.transforms.signflip attribute)": [[142, "braindecode.augmentation.transforms.SignFlip.training"]], "training (braindecode.augmentation.transforms.smoothtimemask attribute)": [[142, "braindecode.augmentation.transforms.SmoothTimeMask.training"]], "training (braindecode.augmentation.transforms.timereverse attribute)": [[142, "braindecode.augmentation.transforms.TimeReverse.training"]], "bbcidataset (class in braindecode.datasets.bbci)": [[143, "braindecode.datasets.bbci.BBCIDataset"]], "bcicompetitionivdataset4 (class in braindecode.datasets.bcicomp)": [[143, "braindecode.datasets.bcicomp.BCICompetitionIVDataset4"]], "bnci2014001 (class in braindecode.datasets.moabb)": [[143, "braindecode.datasets.moabb.BNCI2014001"]], "bnci2014001.bnci2014001 (class in braindecode.datasets)": [[143, "braindecode.datasets.BNCI2014001.BNCI2014001"]], "bnci2014001.bnci2014001 (class in braindecode.datasets.moabb)": [[143, "braindecode.datasets.moabb.BNCI2014001.BNCI2014001"]], "baseconcatdataset (class in braindecode.datasets.base)": [[143, "braindecode.datasets.base.BaseConcatDataset"]], "basedataset (class in braindecode.datasets.base)": [[143, "braindecode.datasets.base.BaseDataset"]], "eegwindowsdataset (class in braindecode.datasets.base)": [[143, "braindecode.datasets.base.EEGWindowsDataset"]], "hgd (class in braindecode.datasets.moabb)": [[143, "braindecode.datasets.moabb.HGD"]], "hgd.schirrmeister2017 (class in braindecode.datasets)": [[143, "braindecode.datasets.HGD.Schirrmeister2017"]], "hgd.schirrmeister2017 (class in braindecode.datasets.moabb)": [[143, "braindecode.datasets.moabb.HGD.Schirrmeister2017"]], "moabbdataset (class in braindecode.datasets.moabb)": [[143, "braindecode.datasets.moabb.MOABBDataset"]], "sleepphysionet (class in braindecode.datasets.sleep_physionet)": [[143, "braindecode.datasets.sleep_physionet.SleepPhysionet"]], "tuh (class in braindecode.datasets.tuh)": [[143, "braindecode.datasets.tuh.TUH"]], "tuhabnormal (class in braindecode.datasets.tuh)": [[143, "braindecode.datasets.tuh.TUHAbnormal"]], "windowsdataset (class in braindecode.datasets.base)": [[143, "braindecode.datasets.base.WindowsDataset"]], "braindecode.datasets": [[143, "module-braindecode.datasets"]], "braindecode.datasets.base": [[143, "module-braindecode.datasets.base"]], "braindecode.datasets.bbci": [[143, "module-braindecode.datasets.bbci"]], "braindecode.datasets.bcicomp": [[143, "module-braindecode.datasets.bcicomp"]], "braindecode.datasets.mne": [[143, "module-braindecode.datasets.mne"]], "braindecode.datasets.moabb": [[143, "module-braindecode.datasets.moabb"]], "braindecode.datasets.sleep_physionet": [[143, "module-braindecode.datasets.sleep_physionet"]], "braindecode.datasets.tuh": [[143, "module-braindecode.datasets.tuh"]], "braindecode.datasets.xy": [[143, "module-braindecode.datasets.xy"]], "create_from_x_y() (in module braindecode.datasets.xy)": [[143, "braindecode.datasets.xy.create_from_X_y"]], "create_from_mne_epochs() (in module braindecode.datasets.mne)": [[143, "braindecode.datasets.mne.create_from_mne_epochs"]], "create_from_mne_raw() (in module braindecode.datasets.mne)": [[143, "braindecode.datasets.mne.create_from_mne_raw"]], "cumulative_sizes (braindecode.datasets.bcicompetitionivdataset4 attribute)": [[143, "braindecode.datasets.BCICompetitionIVDataset4.cumulative_sizes"]], "cumulative_sizes (braindecode.datasets.bnci2014001 attribute)": [[143, "braindecode.datasets.BNCI2014001.cumulative_sizes"]], "cumulative_sizes (braindecode.datasets.baseconcatdataset attribute)": [[143, "braindecode.datasets.BaseConcatDataset.cumulative_sizes"]], "cumulative_sizes (braindecode.datasets.hgd attribute)": [[143, "braindecode.datasets.HGD.cumulative_sizes"]], "cumulative_sizes (braindecode.datasets.moabbdataset attribute)": [[143, "braindecode.datasets.MOABBDataset.cumulative_sizes"]], "cumulative_sizes (braindecode.datasets.sleepphysionet attribute)": [[143, "braindecode.datasets.SleepPhysionet.cumulative_sizes"]], "cumulative_sizes (braindecode.datasets.tuh attribute)": [[143, "braindecode.datasets.TUH.cumulative_sizes"]], "cumulative_sizes (braindecode.datasets.tuhabnormal attribute)": [[143, "braindecode.datasets.TUHAbnormal.cumulative_sizes"]], "cumulative_sizes (braindecode.datasets.base.baseconcatdataset attribute)": [[143, "braindecode.datasets.base.BaseConcatDataset.cumulative_sizes"]], "cumulative_sizes (braindecode.datasets.bcicomp.bcicompetitionivdataset4 attribute)": [[143, "braindecode.datasets.bcicomp.BCICompetitionIVDataset4.cumulative_sizes"]], "cumulative_sizes (braindecode.datasets.moabb.bnci2014001 attribute)": [[143, "braindecode.datasets.moabb.BNCI2014001.cumulative_sizes"]], "cumulative_sizes (braindecode.datasets.moabb.hgd attribute)": [[143, "braindecode.datasets.moabb.HGD.cumulative_sizes"]], "cumulative_sizes (braindecode.datasets.moabb.moabbdataset attribute)": [[143, "braindecode.datasets.moabb.MOABBDataset.cumulative_sizes"]], "cumulative_sizes (braindecode.datasets.sleep_physionet.sleepphysionet attribute)": [[143, "braindecode.datasets.sleep_physionet.SleepPhysionet.cumulative_sizes"]], "cumulative_sizes (braindecode.datasets.tuh.tuh attribute)": [[143, "braindecode.datasets.tuh.TUH.cumulative_sizes"]], "cumulative_sizes (braindecode.datasets.tuh.tuhabnormal attribute)": [[143, "braindecode.datasets.tuh.TUHAbnormal.cumulative_sizes"]], "data_path() (braindecode.datasets.hgd.schirrmeister2017 method)": [[143, "braindecode.datasets.HGD.Schirrmeister2017.data_path"]], "data_path() (braindecode.datasets.moabb.hgd.schirrmeister2017 method)": [[143, "braindecode.datasets.moabb.HGD.Schirrmeister2017.data_path"]], "datasets (braindecode.datasets.bcicompetitionivdataset4 attribute)": [[143, "braindecode.datasets.BCICompetitionIVDataset4.datasets"]], "datasets (braindecode.datasets.bnci2014001 attribute)": [[143, "braindecode.datasets.BNCI2014001.datasets"]], "datasets (braindecode.datasets.baseconcatdataset attribute)": [[143, "braindecode.datasets.BaseConcatDataset.datasets"]], "datasets (braindecode.datasets.hgd attribute)": [[143, "braindecode.datasets.HGD.datasets"]], "datasets (braindecode.datasets.moabbdataset attribute)": [[143, "braindecode.datasets.MOABBDataset.datasets"]], "datasets (braindecode.datasets.sleepphysionet attribute)": [[143, "braindecode.datasets.SleepPhysionet.datasets"]], "datasets (braindecode.datasets.tuh attribute)": [[143, "braindecode.datasets.TUH.datasets"]], "datasets (braindecode.datasets.tuhabnormal attribute)": [[143, "braindecode.datasets.TUHAbnormal.datasets"]], "datasets (braindecode.datasets.base.baseconcatdataset attribute)": [[143, "braindecode.datasets.base.BaseConcatDataset.datasets"]], "datasets (braindecode.datasets.bcicomp.bcicompetitionivdataset4 attribute)": [[143, "braindecode.datasets.bcicomp.BCICompetitionIVDataset4.datasets"]], "datasets (braindecode.datasets.moabb.bnci2014001 attribute)": [[143, "braindecode.datasets.moabb.BNCI2014001.datasets"]], "datasets (braindecode.datasets.moabb.hgd attribute)": [[143, "braindecode.datasets.moabb.HGD.datasets"]], "datasets (braindecode.datasets.moabb.moabbdataset attribute)": [[143, "braindecode.datasets.moabb.MOABBDataset.datasets"]], "datasets (braindecode.datasets.sleep_physionet.sleepphysionet attribute)": [[143, "braindecode.datasets.sleep_physionet.SleepPhysionet.datasets"]], "datasets (braindecode.datasets.tuh.tuh attribute)": [[143, "braindecode.datasets.tuh.TUH.datasets"]], "datasets (braindecode.datasets.tuh.tuhabnormal attribute)": [[143, "braindecode.datasets.tuh.TUHAbnormal.datasets"]], "description (braindecode.datasets.baseconcatdataset property)": [[143, "braindecode.datasets.BaseConcatDataset.description"]], "description (braindecode.datasets.basedataset property)": [[143, "braindecode.datasets.BaseDataset.description"]], "description (braindecode.datasets.windowsdataset property)": [[143, "braindecode.datasets.WindowsDataset.description"]], "description (braindecode.datasets.base.baseconcatdataset property)": [[143, "braindecode.datasets.base.BaseConcatDataset.description"]], "description (braindecode.datasets.base.basedataset property)": [[143, "braindecode.datasets.base.BaseDataset.description"]], "description (braindecode.datasets.base.eegwindowsdataset property)": [[143, "braindecode.datasets.base.EEGWindowsDataset.description"]], "description (braindecode.datasets.base.windowsdataset property)": [[143, "braindecode.datasets.base.WindowsDataset.description"]], "doc (braindecode.datasets.bnci2014001 attribute)": [[143, "braindecode.datasets.BNCI2014001.doc"]], "doc (braindecode.datasets.hgd attribute)": [[143, "braindecode.datasets.HGD.doc"]], "doc (braindecode.datasets.moabb.bnci2014001 attribute)": [[143, "braindecode.datasets.moabb.BNCI2014001.doc"]], "doc (braindecode.datasets.moabb.hgd attribute)": [[143, "braindecode.datasets.moabb.HGD.doc"]], "download() (braindecode.datasets.bcicomp.bcicompetitionivdataset4 static method)": [[143, "braindecode.datasets.bcicomp.BCICompetitionIVDataset4.download"]], "fetch_data_with_moabb() (in module braindecode.datasets.moabb)": [[143, "braindecode.datasets.moabb.fetch_data_with_moabb"]], "get_all_sensors() (braindecode.datasets.bbci.bbcidataset static method)": [[143, "braindecode.datasets.bbci.BBCIDataset.get_all_sensors"]], "get_metadata() (braindecode.datasets.base.baseconcatdataset method)": [[143, "braindecode.datasets.base.BaseConcatDataset.get_metadata"]], "load() (braindecode.datasets.bbci.bbcidataset method)": [[143, "braindecode.datasets.bbci.BBCIDataset.load"]], "load_bbci_sets_from_folder() (in module braindecode.datasets.bbci)": [[143, "braindecode.datasets.bbci.load_bbci_sets_from_folder"]], "possible_subjects (braindecode.datasets.bcicompetitionivdataset4 attribute)": [[143, "braindecode.datasets.BCICompetitionIVDataset4.possible_subjects"]], "possible_subjects (braindecode.datasets.bcicomp.bcicompetitionivdataset4 attribute)": [[143, "braindecode.datasets.bcicomp.BCICompetitionIVDataset4.possible_subjects"]], "save() (braindecode.datasets.base.baseconcatdataset method)": [[143, "braindecode.datasets.base.BaseConcatDataset.save"]], "set_description() (braindecode.datasets.base.baseconcatdataset method)": [[143, "braindecode.datasets.base.BaseConcatDataset.set_description"]], "set_description() (braindecode.datasets.base.basedataset method)": [[143, "braindecode.datasets.base.BaseDataset.set_description"]], "set_description() (braindecode.datasets.base.eegwindowsdataset method)": [[143, "braindecode.datasets.base.EEGWindowsDataset.set_description"]], "set_description() (braindecode.datasets.base.windowsdataset method)": [[143, "braindecode.datasets.base.WindowsDataset.set_description"]], "split() (braindecode.datasets.base.baseconcatdataset method)": [[143, "braindecode.datasets.base.BaseConcatDataset.split"]], "target_transform (braindecode.datasets.baseconcatdataset property)": [[143, "braindecode.datasets.BaseConcatDataset.target_transform"]], "target_transform (braindecode.datasets.base.baseconcatdataset property)": [[143, "braindecode.datasets.base.BaseConcatDataset.target_transform"]], "transform (braindecode.datasets.baseconcatdataset property)": [[143, "braindecode.datasets.BaseConcatDataset.transform"]], "transform (braindecode.datasets.basedataset property)": [[143, "braindecode.datasets.BaseDataset.transform"]], "transform (braindecode.datasets.windowsdataset property)": [[143, "braindecode.datasets.WindowsDataset.transform"]], "transform (braindecode.datasets.base.baseconcatdataset property)": [[143, "braindecode.datasets.base.BaseConcatDataset.transform"]], "transform (braindecode.datasets.base.basedataset property)": [[143, "braindecode.datasets.base.BaseDataset.transform"]], "transform (braindecode.datasets.base.eegwindowsdataset property)": [[143, "braindecode.datasets.base.EEGWindowsDataset.transform"]], "transform (braindecode.datasets.base.windowsdataset property)": [[143, "braindecode.datasets.base.WindowsDataset.transform"]], "braindecode.datautil": [[144, "module-braindecode.datautil"]], "braindecode.datautil.mne": [[144, "module-braindecode.datautil.mne"]], "braindecode.datautil.preprocess": [[144, "module-braindecode.datautil.preprocess"]], "braindecode.datautil.serialization": [[144, "module-braindecode.datautil.serialization"]], "braindecode.datautil.util": [[144, "module-braindecode.datautil.util"]], "braindecode.datautil.windowers": [[144, "module-braindecode.datautil.windowers"]], "braindecode.datautil.xy": [[144, "module-braindecode.datautil.xy"]], "load_concat_dataset() (in module braindecode.datautil.serialization)": [[144, "braindecode.datautil.serialization.load_concat_dataset"]], "ms_to_samples() (in module braindecode.datautil.util)": [[144, "braindecode.datautil.util.ms_to_samples"]], "samples_to_ms() (in module braindecode.datautil.util)": [[144, "braindecode.datautil.util.samples_to_ms"]], "save_concat_dataset() (in module braindecode.datautil.serialization)": [[144, "braindecode.datautil.serialization.save_concat_dataset"]], "atcnet (class in braindecode.models.atcnet)": [[145, "braindecode.models.atcnet.ATCNet"]], "avgpool2dwithconv (class in braindecode.models.modules)": [[145, "braindecode.models.modules.AvgPool2dWithConv"]], "causalconv1d (class in braindecode.models.modules)": [[145, "braindecode.models.modules.CausalConv1d"]], "chomp1d (class in braindecode.models.tcn)": [[145, "braindecode.models.tcn.Chomp1d"]], "combinedconv (class in braindecode.models.modules)": [[145, "braindecode.models.modules.CombinedConv"]], "conv2dwithconstraint (class in braindecode.models.eegnet)": [[145, "braindecode.models.eegnet.Conv2dWithConstraint"]], "deep4net (class in braindecode.models.deep4)": [[145, "braindecode.models.deep4.Deep4Net"]], "deepsleepnet (class in braindecode.models.deepsleepnet)": [[145, "braindecode.models.deepsleepnet.DeepSleepNet"]], "eegconformer (class in braindecode.models.eegconformer)": [[145, "braindecode.models.eegconformer.EEGConformer"]], "eegitnet (class in braindecode.models.eegitnet)": [[145, "braindecode.models.eegitnet.EEGITNet"]], "eeginception (class in braindecode.models.eeginception)": [[145, "braindecode.models.eeginception.EEGInception"]], "eeginceptionerp (class in braindecode.models.eeginception_erp)": [[145, "braindecode.models.eeginception_erp.EEGInceptionERP"]], "eeginceptionmi (class in braindecode.models.eeginception_mi)": [[145, "braindecode.models.eeginception_mi.EEGInceptionMI"]], "eegmodulemixin (class in braindecode.models.base)": [[145, "braindecode.models.base.EEGModuleMixin"]], "eegnetv1 (class in braindecode.models.eegnet)": [[145, "braindecode.models.eegnet.EEGNetv1"]], "eegnetv4 (class in braindecode.models.eegnet)": [[145, "braindecode.models.eegnet.EEGNetv4"]], "eegresnet (class in braindecode.models.eegresnet)": [[145, "braindecode.models.eegresnet.EEGResNet"]], "ensure4d (class in braindecode.models.modules)": [[145, "braindecode.models.modules.Ensure4d"]], "expression (class in braindecode.models.modules)": [[145, "braindecode.models.modules.Expression"]], "hybridnet (class in braindecode.models.hybrid)": [[145, "braindecode.models.hybrid.HybridNet"]], "intermediateoutputwrapper (class in braindecode.models.modules)": [[145, "braindecode.models.modules.IntermediateOutputWrapper"]], "maxnormlinear (class in braindecode.models.modules)": [[145, "braindecode.models.modules.MaxNormLinear"]], "shallowfbcspnet (class in braindecode.models.shallow_fbcsp)": [[145, "braindecode.models.shallow_fbcsp.ShallowFBCSPNet"]], "sleepstagerblanco2020 (class in braindecode.models.sleep_stager_blanco_2020)": [[145, "braindecode.models.sleep_stager_blanco_2020.SleepStagerBlanco2020"]], "sleepstagerchambon2018 (class in braindecode.models.sleep_stager_chambon_2018)": [[145, "braindecode.models.sleep_stager_chambon_2018.SleepStagerChambon2018"]], "sleepstagereldele2021 (class in braindecode.models.sleep_stager_eldele_2021)": [[145, "braindecode.models.sleep_stager_eldele_2021.SleepStagerEldele2021"]], "tcn (class in braindecode.models.tcn)": [[145, "braindecode.models.tcn.TCN"]], "tidnet (class in braindecode.models.tidnet)": [[145, "braindecode.models.tidnet.TIDNet"]], "temporalblock (class in braindecode.models.tcn)": [[145, "braindecode.models.tcn.TemporalBlock"]], "timedistributed (class in braindecode.models.modules)": [[145, "braindecode.models.modules.TimeDistributed"]], "usleep (class in braindecode.models.usleep)": [[145, "braindecode.models.usleep.USleep"]], "add_log_softmax (braindecode.models.base.eegmodulemixin property)": [[145, "braindecode.models.base.EEGModuleMixin.add_log_softmax"]], "aggregate_probas() (in module braindecode.models.util)": [[145, "braindecode.models.util.aggregate_probas"]], "bias (braindecode.models.eegnet.conv2dwithconstraint attribute)": [[145, "braindecode.models.eegnet.Conv2dWithConstraint.bias"]], "bias (braindecode.models.modules.causalconv1d attribute)": [[145, "braindecode.models.modules.CausalConv1d.bias"]], "braindecode.models": [[145, "module-braindecode.models"]], "braindecode.models.atcnet": [[145, "module-braindecode.models.atcnet"]], "braindecode.models.base": [[145, "module-braindecode.models.base"]], "braindecode.models.deep4": [[145, "module-braindecode.models.deep4"]], "braindecode.models.deepsleepnet": [[145, "module-braindecode.models.deepsleepnet"]], "braindecode.models.eegconformer": [[145, "module-braindecode.models.eegconformer"]], "braindecode.models.eeginception": [[145, "module-braindecode.models.eeginception"]], "braindecode.models.eeginception_erp": [[145, "module-braindecode.models.eeginception_erp"]], "braindecode.models.eeginception_mi": [[145, "module-braindecode.models.eeginception_mi"]], "braindecode.models.eegitnet": [[145, "module-braindecode.models.eegitnet"]], "braindecode.models.eegnet": [[145, "module-braindecode.models.eegnet"]], "braindecode.models.eegresnet": [[145, "module-braindecode.models.eegresnet"]], "braindecode.models.functions": [[145, "module-braindecode.models.functions"]], "braindecode.models.hybrid": [[145, "module-braindecode.models.hybrid"]], "braindecode.models.modules": [[145, "module-braindecode.models.modules"]], "braindecode.models.shallow_fbcsp": [[145, "module-braindecode.models.shallow_fbcsp"]], "braindecode.models.sleep_stager_blanco_2020": [[145, "module-braindecode.models.sleep_stager_blanco_2020"]], "braindecode.models.sleep_stager_chambon_2018": [[145, "module-braindecode.models.sleep_stager_chambon_2018"]], "braindecode.models.sleep_stager_eldele_2021": [[145, "module-braindecode.models.sleep_stager_eldele_2021"]], "braindecode.models.tcn": [[145, "module-braindecode.models.tcn"]], "braindecode.models.tidnet": [[145, "module-braindecode.models.tidnet"]], "braindecode.models.usleep": [[145, "module-braindecode.models.usleep"]], "braindecode.models.util": [[145, "module-braindecode.models.util"]], "chs_info (braindecode.models.base.eegmodulemixin property)": [[145, "braindecode.models.base.EEGModuleMixin.chs_info"]], "deprecated_args() (in module braindecode.models.base)": [[145, "braindecode.models.base.deprecated_args"]], "dilation (braindecode.models.eegnet.conv2dwithconstraint attribute)": [[145, "braindecode.models.eegnet.Conv2dWithConstraint.dilation"]], "dilation (braindecode.models.modules.causalconv1d attribute)": [[145, "braindecode.models.modules.CausalConv1d.dilation"]], "extra_repr() (braindecode.models.tcn.chomp1d method)": [[145, "braindecode.models.tcn.Chomp1d.extra_repr"]], "forward() (braindecode.models.atcnet.atcnet method)": [[145, "braindecode.models.atcnet.ATCNet.forward"]], "forward() (braindecode.models.deepsleepnet.deepsleepnet method)": [[145, "braindecode.models.deepsleepnet.DeepSleepNet.forward"]], "forward() (braindecode.models.eegconformer.eegconformer method)": [[145, "braindecode.models.eegconformer.EEGConformer.forward"]], "forward() (braindecode.models.eeginception_mi.eeginceptionmi method)": [[145, "braindecode.models.eeginception_mi.EEGInceptionMI.forward"]], "forward() (braindecode.models.eegnet.conv2dwithconstraint method)": [[145, "braindecode.models.eegnet.Conv2dWithConstraint.forward"]], "forward() (braindecode.models.hybrid.hybridnet method)": [[145, "braindecode.models.hybrid.HybridNet.forward"]], "forward() (braindecode.models.modules.avgpool2dwithconv method)": [[145, "braindecode.models.modules.AvgPool2dWithConv.forward"]], "forward() (braindecode.models.modules.causalconv1d method)": [[145, "braindecode.models.modules.CausalConv1d.forward"]], "forward() (braindecode.models.modules.combinedconv method)": [[145, "braindecode.models.modules.CombinedConv.forward"]], "forward() (braindecode.models.modules.ensure4d method)": [[145, "braindecode.models.modules.Ensure4d.forward"]], "forward() (braindecode.models.modules.expression method)": [[145, "braindecode.models.modules.Expression.forward"]], "forward() (braindecode.models.modules.intermediateoutputwrapper method)": [[145, "braindecode.models.modules.IntermediateOutputWrapper.forward"]], "forward() (braindecode.models.modules.maxnormlinear method)": [[145, "braindecode.models.modules.MaxNormLinear.forward"]], "forward() (braindecode.models.modules.timedistributed method)": [[145, "braindecode.models.modules.TimeDistributed.forward"]], "forward() (braindecode.models.sleep_stager_blanco_2020.sleepstagerblanco2020 method)": [[145, "braindecode.models.sleep_stager_blanco_2020.SleepStagerBlanco2020.forward"]], "forward() (braindecode.models.sleep_stager_chambon_2018.sleepstagerchambon2018 method)": [[145, "braindecode.models.sleep_stager_chambon_2018.SleepStagerChambon2018.forward"]], "forward() (braindecode.models.sleep_stager_eldele_2021.sleepstagereldele2021 method)": [[145, "braindecode.models.sleep_stager_eldele_2021.SleepStagerEldele2021.forward"]], "forward() (braindecode.models.tcn.chomp1d method)": [[145, "braindecode.models.tcn.Chomp1d.forward"]], "forward() (braindecode.models.tcn.tcn method)": [[145, "braindecode.models.tcn.TCN.forward"]], "forward() (braindecode.models.tcn.temporalblock method)": [[145, "braindecode.models.tcn.TemporalBlock.forward"]], "forward() (braindecode.models.tidnet.tidnet method)": [[145, "braindecode.models.tidnet.TIDNet.forward"]], "forward() (braindecode.models.usleep.usleep method)": [[145, "braindecode.models.usleep.USleep.forward"]], "get_fc_size() (braindecode.models.eegconformer.eegconformer method)": [[145, "braindecode.models.eegconformer.EEGConformer.get_fc_size"]], "get_output_shape() (braindecode.models.base.eegmodulemixin method)": [[145, "braindecode.models.base.EEGModuleMixin.get_output_shape"]], "get_output_shape() (in module braindecode.models.util)": [[145, "braindecode.models.util.get_output_shape"]], "get_torchinfo_statistics() (braindecode.models.base.eegmodulemixin method)": [[145, "braindecode.models.base.EEGModuleMixin.get_torchinfo_statistics"]], "groups (braindecode.models.eegnet.conv2dwithconstraint attribute)": [[145, "braindecode.models.eegnet.Conv2dWithConstraint.groups"]], "groups (braindecode.models.modules.causalconv1d attribute)": [[145, "braindecode.models.modules.CausalConv1d.groups"]], "identity() (in module braindecode.models.functions)": [[145, "braindecode.models.functions.identity"]], "in_channels (braindecode.models.eegnet.conv2dwithconstraint attribute)": [[145, "braindecode.models.eegnet.Conv2dWithConstraint.in_channels"]], "in_channels (braindecode.models.modules.causalconv1d attribute)": [[145, "braindecode.models.modules.CausalConv1d.in_channels"]], "in_features (braindecode.models.modules.maxnormlinear attribute)": [[145, "braindecode.models.modules.MaxNormLinear.in_features"]], "input_shape (braindecode.models.base.eegmodulemixin property)": [[145, "braindecode.models.base.EEGModuleMixin.input_shape"]], "input_window_seconds (braindecode.models.base.eegmodulemixin property)": [[145, "braindecode.models.base.EEGModuleMixin.input_window_seconds"]], "kernel_size (braindecode.models.eegnet.conv2dwithconstraint attribute)": [[145, "braindecode.models.eegnet.Conv2dWithConstraint.kernel_size"]], "kernel_size (braindecode.models.modules.causalconv1d attribute)": [[145, "braindecode.models.modules.CausalConv1d.kernel_size"]], "load_state_dict() (braindecode.models.base.eegmodulemixin method)": [[145, "braindecode.models.base.EEGModuleMixin.load_state_dict"]], "mapping (braindecode.models.base.eegmodulemixin attribute)": [[145, "braindecode.models.base.EEGModuleMixin.mapping"]], "n_chans (braindecode.models.base.eegmodulemixin property)": [[145, "braindecode.models.base.EEGModuleMixin.n_chans"]], "n_outputs (braindecode.models.base.eegmodulemixin property)": [[145, "braindecode.models.base.EEGModuleMixin.n_outputs"]], "n_times (braindecode.models.base.eegmodulemixin property)": [[145, "braindecode.models.base.EEGModuleMixin.n_times"]], "num_features (braindecode.models.tidnet.tidnet property)": [[145, "braindecode.models.tidnet.TIDNet.num_features"]], "out_channels (braindecode.models.eegnet.conv2dwithconstraint attribute)": [[145, "braindecode.models.eegnet.Conv2dWithConstraint.out_channels"]], "out_channels (braindecode.models.modules.causalconv1d attribute)": [[145, "braindecode.models.modules.CausalConv1d.out_channels"]], "out_features (braindecode.models.modules.maxnormlinear attribute)": [[145, "braindecode.models.modules.MaxNormLinear.out_features"]], "output_padding (braindecode.models.eegnet.conv2dwithconstraint attribute)": [[145, "braindecode.models.eegnet.Conv2dWithConstraint.output_padding"]], "output_padding (braindecode.models.modules.causalconv1d attribute)": [[145, "braindecode.models.modules.CausalConv1d.output_padding"]], "padding (braindecode.models.eegnet.conv2dwithconstraint attribute)": [[145, "braindecode.models.eegnet.Conv2dWithConstraint.padding"]], "padding (braindecode.models.modules.causalconv1d attribute)": [[145, "braindecode.models.modules.CausalConv1d.padding"]], "padding_mode (braindecode.models.eegnet.conv2dwithconstraint attribute)": [[145, "braindecode.models.eegnet.Conv2dWithConstraint.padding_mode"]], "padding_mode (braindecode.models.modules.causalconv1d attribute)": [[145, "braindecode.models.modules.CausalConv1d.padding_mode"]], "return_feats (braindecode.models.sleep_stager_eldele_2021.sleepstagereldele2021 attribute)": [[145, "braindecode.models.sleep_stager_eldele_2021.SleepStagerEldele2021.return_feats"]], "safe_log() (in module braindecode.models.functions)": [[145, "braindecode.models.functions.safe_log"]], "sfreq (braindecode.models.base.eegmodulemixin property)": [[145, "braindecode.models.base.EEGModuleMixin.sfreq"]], "square() (in module braindecode.models.functions)": [[145, "braindecode.models.functions.square"]], "squeeze_final_output() (in module braindecode.models.functions)": [[145, "braindecode.models.functions.squeeze_final_output"]], "stride (braindecode.models.eegnet.conv2dwithconstraint attribute)": [[145, "braindecode.models.eegnet.Conv2dWithConstraint.stride"]], "stride (braindecode.models.modules.causalconv1d attribute)": [[145, "braindecode.models.modules.CausalConv1d.stride"]], "to_dense_prediction_model() (braindecode.models.base.eegmodulemixin method)": [[145, "braindecode.models.base.EEGModuleMixin.to_dense_prediction_model"]], "to_dense_prediction_model() (in module braindecode.models.util)": [[145, "braindecode.models.util.to_dense_prediction_model"]], "training (braindecode.models.atcnet.atcnet attribute)": [[145, "braindecode.models.atcnet.ATCNet.training"]], "training (braindecode.models.modules.avgpool2dwithconv attribute)": [[145, "braindecode.models.modules.AvgPool2dWithConv.training"]], "training (braindecode.models.modules.combinedconv attribute)": [[145, "braindecode.models.modules.CombinedConv.training"]], "training (braindecode.models.modules.ensure4d attribute)": [[145, "braindecode.models.modules.Ensure4d.training"]], "training (braindecode.models.modules.expression attribute)": [[145, "braindecode.models.modules.Expression.training"]], "training (braindecode.models.modules.intermediateoutputwrapper attribute)": [[145, "braindecode.models.modules.IntermediateOutputWrapper.training"]], "training (braindecode.models.modules.timedistributed attribute)": [[145, "braindecode.models.modules.TimeDistributed.training"]], "training (braindecode.models.tcn.chomp1d attribute)": [[145, "braindecode.models.tcn.Chomp1d.training"]], "training (braindecode.models.tcn.temporalblock attribute)": [[145, "braindecode.models.tcn.TemporalBlock.training"]], "transpose_time_to_spat() (in module braindecode.models.functions)": [[145, "braindecode.models.functions.transpose_time_to_spat"]], "transposed (braindecode.models.eegnet.conv2dwithconstraint attribute)": [[145, "braindecode.models.eegnet.Conv2dWithConstraint.transposed"]], "transposed (braindecode.models.modules.causalconv1d attribute)": [[145, "braindecode.models.modules.CausalConv1d.transposed"]], "weight (braindecode.models.eegnet.conv2dwithconstraint attribute)": [[145, "braindecode.models.eegnet.Conv2dWithConstraint.weight"]], "weight (braindecode.models.modules.causalconv1d attribute)": [[145, "braindecode.models.modules.CausalConv1d.weight"]], "weight (braindecode.models.modules.maxnormlinear attribute)": [[145, "braindecode.models.modules.MaxNormLinear.weight"]], "crop (class in braindecode.preprocessing.mne_preprocess)": [[146, "braindecode.preprocessing.mne_preprocess.Crop"]], "dropchannels (class in braindecode.preprocessing.mne_preprocess)": [[146, "braindecode.preprocessing.mne_preprocess.DropChannels"]], "filter (class in braindecode.preprocessing.mne_preprocess)": [[146, "braindecode.preprocessing.mne_preprocess.Filter"]], "pick (class in braindecode.preprocessing.mne_preprocess)": [[146, "braindecode.preprocessing.mne_preprocess.Pick"]], "preprocessor (class in braindecode.preprocessing.mne_preprocess)": [[146, "braindecode.preprocessing.mne_preprocess.Preprocessor"]], "preprocessor (class in braindecode.preprocessing.preprocess)": [[146, "braindecode.preprocessing.preprocess.Preprocessor"]], "resample (class in braindecode.preprocessing.mne_preprocess)": [[146, "braindecode.preprocessing.mne_preprocess.Resample"]], "seteegreference (class in braindecode.preprocessing.mne_preprocess)": [[146, "braindecode.preprocessing.mne_preprocess.SetEEGReference"]], "apply() (braindecode.preprocessing.mne_preprocess.preprocessor method)": [[146, "braindecode.preprocessing.mne_preprocess.Preprocessor.apply"]], "apply() (braindecode.preprocessing.preprocess.preprocessor method)": [[146, "braindecode.preprocessing.preprocess.Preprocessor.apply"]], "braindecode.preprocessing": [[146, "module-braindecode.preprocessing"]], "braindecode.preprocessing.mne_preprocess": [[146, "module-braindecode.preprocessing.mne_preprocess"]], "braindecode.preprocessing.preprocess": [[146, "module-braindecode.preprocessing.preprocess"]], "braindecode.preprocessing.windowers": [[146, "module-braindecode.preprocessing.windowers"]], "create_fixed_length_windows() (in module braindecode.preprocessing.windowers)": [[146, "braindecode.preprocessing.windowers.create_fixed_length_windows"]], "create_windows_from_events() (in module braindecode.preprocessing.windowers)": [[146, "braindecode.preprocessing.windowers.create_windows_from_events"]], "create_windows_from_target_channels() (in module braindecode.preprocessing.windowers)": [[146, "braindecode.preprocessing.windowers.create_windows_from_target_channels"]], "exponential_moving_demean() (in module braindecode.preprocessing.preprocess)": [[146, "braindecode.preprocessing.preprocess.exponential_moving_demean"]], "exponential_moving_standardize() (in module braindecode.preprocessing.preprocess)": [[146, "braindecode.preprocessing.preprocess.exponential_moving_standardize"]], "filterbank() (in module braindecode.preprocessing.preprocess)": [[146, "braindecode.preprocessing.preprocess.filterbank"]], "fn (braindecode.preprocessing.crop attribute)": [[146, "braindecode.preprocessing.Crop.fn"]], "fn (braindecode.preprocessing.dropchannels attribute)": [[146, "braindecode.preprocessing.DropChannels.fn"]], "fn (braindecode.preprocessing.filter attribute)": [[146, "braindecode.preprocessing.Filter.fn"]], "fn (braindecode.preprocessing.pick attribute)": [[146, "braindecode.preprocessing.Pick.fn"]], "fn (braindecode.preprocessing.resample attribute)": [[146, "braindecode.preprocessing.Resample.fn"]], "fn (braindecode.preprocessing.seteegreference attribute)": [[146, "braindecode.preprocessing.SetEEGReference.fn"]], "fn (braindecode.preprocessing.mne_preprocess.crop attribute)": [[146, "braindecode.preprocessing.mne_preprocess.Crop.fn"]], "fn (braindecode.preprocessing.mne_preprocess.dropchannels attribute)": [[146, "braindecode.preprocessing.mne_preprocess.DropChannels.fn"]], "fn (braindecode.preprocessing.mne_preprocess.filter attribute)": [[146, "braindecode.preprocessing.mne_preprocess.Filter.fn"]], "fn (braindecode.preprocessing.mne_preprocess.pick attribute)": [[146, "braindecode.preprocessing.mne_preprocess.Pick.fn"]], "fn (braindecode.preprocessing.mne_preprocess.resample attribute)": [[146, "braindecode.preprocessing.mne_preprocess.Resample.fn"]], "fn (braindecode.preprocessing.mne_preprocess.seteegreference attribute)": [[146, "braindecode.preprocessing.mne_preprocess.SetEEGReference.fn"]], "preprocess() (in module braindecode.preprocessing.preprocess)": [[146, "braindecode.preprocessing.preprocess.preprocess"]], "balancedsequencesampler (class in braindecode.samplers.base)": [[147, "braindecode.samplers.base.BalancedSequenceSampler"]], "recordingsampler (class in braindecode.samplers.base)": [[147, "braindecode.samplers.base.RecordingSampler"]], "relativepositioningsampler (class in braindecode.samplers.ssl)": [[147, "braindecode.samplers.ssl.RelativePositioningSampler"]], "sequencesampler (class in braindecode.samplers.base)": [[147, "braindecode.samplers.base.SequenceSampler"]], "braindecode.samplers": [[147, "module-braindecode.samplers"]], "braindecode.samplers.base": [[147, "module-braindecode.samplers.base"]], "braindecode.samplers.ssl": [[147, "module-braindecode.samplers.ssl"]], "file_ids (braindecode.samplers.base.sequencesampler attribute)": [[147, "braindecode.samplers.base.SequenceSampler.file_ids"]], "info (braindecode.samplers.base.recordingsampler attribute)": [[147, "braindecode.samplers.base.RecordingSampler.info"]], "info (braindecode.samplers.base.sequencesampler attribute)": [[147, "braindecode.samplers.base.SequenceSampler.info"]], "n_recordings (braindecode.samplers.recordingsampler property)": [[147, "id0"]], "n_recordings (braindecode.samplers.base.recordingsampler attribute)": [[147, "braindecode.samplers.base.RecordingSampler.n_recordings"]], "n_recordings (braindecode.samplers.base.recordingsampler property)": [[147, "id4"]], "presample() (braindecode.samplers.ssl.relativepositioningsampler method)": [[147, "braindecode.samplers.ssl.RelativePositioningSampler.presample"]], "sample_class() (braindecode.samplers.base.balancedsequencesampler method)": [[147, "braindecode.samplers.base.BalancedSequenceSampler.sample_class"]], "sample_recording() (braindecode.samplers.base.recordingsampler method)": [[147, "braindecode.samplers.base.RecordingSampler.sample_recording"]], "sample_window() (braindecode.samplers.base.recordingsampler method)": [[147, "braindecode.samplers.base.RecordingSampler.sample_window"]], "croppedloss (class in braindecode.training.losses)": [[148, "braindecode.training.losses.CroppedLoss"]], "croppedtimeseriesepochscoring (class in braindecode.training.scoring)": [[148, "braindecode.training.scoring.CroppedTimeSeriesEpochScoring"]], "croppedtrialepochscoring (class in braindecode.training.scoring)": [[148, "braindecode.training.scoring.CroppedTrialEpochScoring"]], "maxnormconstraintcallback (class in braindecode.training.callbacks)": [[148, "braindecode.training.callbacks.MaxNormConstraintCallback"]], "postepochtrainscoring (class in braindecode.training.scoring)": [[148, "braindecode.training.scoring.PostEpochTrainScoring"]], "timeseriesloss (class in braindecode.training.losses)": [[148, "braindecode.training.losses.TimeSeriesLoss"]], "braindecode.training": [[148, "module-braindecode.training"]], "braindecode.training.callbacks": [[148, "module-braindecode.training.callbacks"]], "braindecode.training.losses": [[148, "module-braindecode.training.losses"]], "braindecode.training.scoring": [[148, "module-braindecode.training.scoring"]], "forward() (braindecode.training.losses.croppedloss method)": [[148, "braindecode.training.losses.CroppedLoss.forward"]], "forward() (braindecode.training.losses.timeseriesloss method)": [[148, "braindecode.training.losses.TimeSeriesLoss.forward"]], "mixup_criterion() (in module braindecode.training.losses)": [[148, "braindecode.training.losses.mixup_criterion"]], "on_batch_end() (braindecode.training.callbacks.maxnormconstraintcallback method)": [[148, "braindecode.training.callbacks.MaxNormConstraintCallback.on_batch_end"]], "on_batch_end() (braindecode.training.scoring.croppedtrialepochscoring method)": [[148, "braindecode.training.scoring.CroppedTrialEpochScoring.on_batch_end"]], "on_epoch_end() (braindecode.training.scoring.croppedtimeseriesepochscoring method)": [[148, "braindecode.training.scoring.CroppedTimeSeriesEpochScoring.on_epoch_end"]], "on_epoch_end() (braindecode.training.scoring.croppedtrialepochscoring method)": [[148, "braindecode.training.scoring.CroppedTrialEpochScoring.on_epoch_end"]], "on_epoch_end() (braindecode.training.scoring.postepochtrainscoring method)": [[148, "braindecode.training.scoring.PostEpochTrainScoring.on_epoch_end"]], "predict_trials() (in module braindecode.training.scoring)": [[148, "braindecode.training.scoring.predict_trials"]], "training (braindecode.training.croppedloss attribute)": [[148, "braindecode.training.CroppedLoss.training"]], "training (braindecode.training.timeseriesloss attribute)": [[148, "braindecode.training.TimeSeriesLoss.training"]], "training (braindecode.training.losses.croppedloss attribute)": [[148, "braindecode.training.losses.CroppedLoss.training"]], "training (braindecode.training.losses.timeseriesloss attribute)": [[148, "braindecode.training.losses.TimeSeriesLoss.training"]], "trial_preds_from_window_preds() (in module braindecode.training.scoring)": [[148, "braindecode.training.scoring.trial_preds_from_window_preds"]], "braindecode.visualization": [[149, "module-braindecode.visualization"]], "braindecode.visualization.confusion_matrices": [[149, "module-braindecode.visualization.confusion_matrices"]], "braindecode.visualization.gradients": [[149, "module-braindecode.visualization.gradients"]], "compute_amplitude_gradients() (in module braindecode.visualization.gradients)": [[149, "braindecode.visualization.gradients.compute_amplitude_gradients"]], "compute_amplitude_gradients_for_x() (in module braindecode.visualization.gradients)": [[149, "braindecode.visualization.gradients.compute_amplitude_gradients_for_X"]], "plot_confusion_matrix() (in module braindecode.visualization.confusion_matrices)": [[149, "braindecode.visualization.confusion_matrices.plot_confusion_matrix"]]}})