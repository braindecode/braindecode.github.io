Search.setIndex({"docnames": ["api", "auto_examples/advanced_training/index", "auto_examples/advanced_training/plot_bcic_iv_4_ecog_cropped", "auto_examples/advanced_training/plot_data_augmentation", "auto_examples/advanced_training/plot_data_augmentation_search", "auto_examples/advanced_training/plot_relative_positioning", "auto_examples/advanced_training/sg_execution_times", "auto_examples/applied_examples/index", "auto_examples/applied_examples/plot_bcic_iv_4_ecog_trial", "auto_examples/applied_examples/plot_sleep_staging_chambon2018", "auto_examples/applied_examples/plot_sleep_staging_eldele2021", "auto_examples/applied_examples/plot_sleep_staging_usleep", "auto_examples/applied_examples/plot_tuh_eeg_corpus", "auto_examples/applied_examples/sg_execution_times", "auto_examples/datasets_io/benchmark_lazy_eager_loading", "auto_examples/datasets_io/index", "auto_examples/datasets_io/plot_benchmark_preprocessing", "auto_examples/datasets_io/plot_custom_dataset_example", "auto_examples/datasets_io/plot_load_save_datasets", "auto_examples/datasets_io/plot_mne_dataset_example", "auto_examples/datasets_io/plot_moabb_dataset_example", "auto_examples/datasets_io/plot_split_dataset", "auto_examples/datasets_io/plot_tuh_discrete_multitarget", "auto_examples/datasets_io/sg_execution_times", "auto_examples/index", "auto_examples/model_building/index", "auto_examples/model_building/plot_bcic_iv_2a_moabb_cropped", "auto_examples/model_building/plot_bcic_iv_2a_moabb_trial", "auto_examples/model_building/plot_how_train_test_and_tune", "auto_examples/model_building/plot_hyperparameter_tuning_with_scikit-learn", "auto_examples/model_building/plot_regression", "auto_examples/model_building/sg_execution_times", "cite", "generated/braindecode.augmentation.AugmentedDataLoader", "generated/braindecode.augmentation.BandstopFilter", "generated/braindecode.augmentation.ChannelsDropout", "generated/braindecode.augmentation.ChannelsShuffle", "generated/braindecode.augmentation.ChannelsSymmetry", "generated/braindecode.augmentation.Compose", "generated/braindecode.augmentation.FTSurrogate", "generated/braindecode.augmentation.FrequencyShift", "generated/braindecode.augmentation.GaussianNoise", "generated/braindecode.augmentation.IdentityTransform", "generated/braindecode.augmentation.Mixup", "generated/braindecode.augmentation.SensorsRotation", "generated/braindecode.augmentation.SensorsXRotation", "generated/braindecode.augmentation.SensorsYRotation", "generated/braindecode.augmentation.SensorsZRotation", "generated/braindecode.augmentation.SignFlip", "generated/braindecode.augmentation.SmoothTimeMask", "generated/braindecode.augmentation.TimeReverse", "generated/braindecode.augmentation.Transform", "generated/braindecode.augmentation.functional.bandstop_filter", "generated/braindecode.augmentation.functional.channels_dropout", "generated/braindecode.augmentation.functional.channels_permute", "generated/braindecode.augmentation.functional.channels_shuffle", "generated/braindecode.augmentation.functional.frequency_shift", "generated/braindecode.augmentation.functional.ft_surrogate", "generated/braindecode.augmentation.functional.gaussian_noise", "generated/braindecode.augmentation.functional.identity", "generated/braindecode.augmentation.functional.mixup", "generated/braindecode.augmentation.functional.sensors_rotation", "generated/braindecode.augmentation.functional.sign_flip", "generated/braindecode.augmentation.functional.smooth_time_mask", "generated/braindecode.augmentation.functional.time_reverse", "generated/braindecode.classifier.EEGClassifier", "generated/braindecode.datasets.BCICompetitionIVDataset4", "generated/braindecode.datasets.BNCI2014001", "generated/braindecode.datasets.BaseConcatDataset", "generated/braindecode.datasets.BaseDataset", "generated/braindecode.datasets.HGD", "generated/braindecode.datasets.MOABBDataset", "generated/braindecode.datasets.SleepPhysionet", "generated/braindecode.datasets.TUH", "generated/braindecode.datasets.TUHAbnormal", "generated/braindecode.datasets.WindowsDataset", "generated/braindecode.datasets.create_from_X_y", "generated/braindecode.datasets.create_from_mne_epochs", "generated/braindecode.datasets.create_from_mne_raw", "generated/braindecode.datautil.load_concat_dataset", "generated/braindecode.datautil.save_concat_dataset", "generated/braindecode.models.ATCNet", "generated/braindecode.models.Deep4Net", "generated/braindecode.models.DeepSleepNet", "generated/braindecode.models.EEGConformer", "generated/braindecode.models.EEGITNet", "generated/braindecode.models.EEGInception", "generated/braindecode.models.EEGInceptionERP", "generated/braindecode.models.EEGInceptionMI", "generated/braindecode.models.EEGNetv1", "generated/braindecode.models.EEGNetv4", "generated/braindecode.models.EEGResNet", "generated/braindecode.models.HybridNet", "generated/braindecode.models.ShallowFBCSPNet", "generated/braindecode.models.SleepStagerBlanco2020", "generated/braindecode.models.SleepStagerChambon2018", "generated/braindecode.models.SleepStagerEldele2021", "generated/braindecode.models.TCN", "generated/braindecode.models.TIDNet", "generated/braindecode.models.TimeDistributed", "generated/braindecode.models.USleep", "generated/braindecode.models.get_output_shape", "generated/braindecode.preprocessing.Crop", "generated/braindecode.preprocessing.DropChannels", "generated/braindecode.preprocessing.Filter", "generated/braindecode.preprocessing.Pick", "generated/braindecode.preprocessing.Preprocessor", "generated/braindecode.preprocessing.Resample", "generated/braindecode.preprocessing.SetEEGReference", "generated/braindecode.preprocessing.create_fixed_length_windows", "generated/braindecode.preprocessing.create_windows_from_events", "generated/braindecode.preprocessing.create_windows_from_target_channels", "generated/braindecode.preprocessing.exponential_moving_demean", "generated/braindecode.preprocessing.exponential_moving_standardize", "generated/braindecode.preprocessing.filterbank", "generated/braindecode.preprocessing.preprocess", "generated/braindecode.preprocessing.scale", "generated/braindecode.regressor.EEGRegressor", "generated/braindecode.samplers.BalancedSequenceSampler", "generated/braindecode.samplers.RecordingSampler", "generated/braindecode.samplers.RelativePositioningSampler", "generated/braindecode.samplers.SequenceSampler", "generated/braindecode.training.CroppedLoss", "generated/braindecode.training.CroppedTimeSeriesEpochScoring", "generated/braindecode.training.CroppedTrialEpochScoring", "generated/braindecode.training.PostEpochTrainScoring", "generated/braindecode.training.TimeSeriesLoss", "generated/braindecode.training.mixup_criterion", "generated/braindecode.training.predict_trials", "generated/braindecode.training.trial_preds_from_window_preds", "generated/braindecode.util.set_random_seeds", "generated/braindecode.visualization.compute_amplitude_gradients", "generated/braindecode.visualization.plot_confusion_matrix", "help", "index", "install/install", "install/install_pip", "install/install_source", "whats_new"], "filenames": ["api.rst", "auto_examples/advanced_training/index.rst", "auto_examples/advanced_training/plot_bcic_iv_4_ecog_cropped.rst", "auto_examples/advanced_training/plot_data_augmentation.rst", "auto_examples/advanced_training/plot_data_augmentation_search.rst", "auto_examples/advanced_training/plot_relative_positioning.rst", "auto_examples/advanced_training/sg_execution_times.rst", "auto_examples/applied_examples/index.rst", "auto_examples/applied_examples/plot_bcic_iv_4_ecog_trial.rst", "auto_examples/applied_examples/plot_sleep_staging_chambon2018.rst", "auto_examples/applied_examples/plot_sleep_staging_eldele2021.rst", "auto_examples/applied_examples/plot_sleep_staging_usleep.rst", "auto_examples/applied_examples/plot_tuh_eeg_corpus.rst", "auto_examples/applied_examples/sg_execution_times.rst", "auto_examples/datasets_io/benchmark_lazy_eager_loading.rst", "auto_examples/datasets_io/index.rst", "auto_examples/datasets_io/plot_benchmark_preprocessing.rst", "auto_examples/datasets_io/plot_custom_dataset_example.rst", "auto_examples/datasets_io/plot_load_save_datasets.rst", "auto_examples/datasets_io/plot_mne_dataset_example.rst", "auto_examples/datasets_io/plot_moabb_dataset_example.rst", "auto_examples/datasets_io/plot_split_dataset.rst", "auto_examples/datasets_io/plot_tuh_discrete_multitarget.rst", "auto_examples/datasets_io/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/model_building/index.rst", "auto_examples/model_building/plot_bcic_iv_2a_moabb_cropped.rst", "auto_examples/model_building/plot_bcic_iv_2a_moabb_trial.rst", "auto_examples/model_building/plot_how_train_test_and_tune.rst", "auto_examples/model_building/plot_hyperparameter_tuning_with_scikit-learn.rst", "auto_examples/model_building/plot_regression.rst", "auto_examples/model_building/sg_execution_times.rst", "cite.rst", "generated/braindecode.augmentation.AugmentedDataLoader.rst", "generated/braindecode.augmentation.BandstopFilter.rst", "generated/braindecode.augmentation.ChannelsDropout.rst", "generated/braindecode.augmentation.ChannelsShuffle.rst", "generated/braindecode.augmentation.ChannelsSymmetry.rst", "generated/braindecode.augmentation.Compose.rst", "generated/braindecode.augmentation.FTSurrogate.rst", "generated/braindecode.augmentation.FrequencyShift.rst", "generated/braindecode.augmentation.GaussianNoise.rst", "generated/braindecode.augmentation.IdentityTransform.rst", "generated/braindecode.augmentation.Mixup.rst", "generated/braindecode.augmentation.SensorsRotation.rst", "generated/braindecode.augmentation.SensorsXRotation.rst", "generated/braindecode.augmentation.SensorsYRotation.rst", "generated/braindecode.augmentation.SensorsZRotation.rst", "generated/braindecode.augmentation.SignFlip.rst", "generated/braindecode.augmentation.SmoothTimeMask.rst", "generated/braindecode.augmentation.TimeReverse.rst", "generated/braindecode.augmentation.Transform.rst", "generated/braindecode.augmentation.functional.bandstop_filter.rst", "generated/braindecode.augmentation.functional.channels_dropout.rst", "generated/braindecode.augmentation.functional.channels_permute.rst", "generated/braindecode.augmentation.functional.channels_shuffle.rst", "generated/braindecode.augmentation.functional.frequency_shift.rst", "generated/braindecode.augmentation.functional.ft_surrogate.rst", "generated/braindecode.augmentation.functional.gaussian_noise.rst", "generated/braindecode.augmentation.functional.identity.rst", "generated/braindecode.augmentation.functional.mixup.rst", "generated/braindecode.augmentation.functional.sensors_rotation.rst", "generated/braindecode.augmentation.functional.sign_flip.rst", "generated/braindecode.augmentation.functional.smooth_time_mask.rst", "generated/braindecode.augmentation.functional.time_reverse.rst", "generated/braindecode.classifier.EEGClassifier.rst", "generated/braindecode.datasets.BCICompetitionIVDataset4.rst", "generated/braindecode.datasets.BNCI2014001.rst", "generated/braindecode.datasets.BaseConcatDataset.rst", "generated/braindecode.datasets.BaseDataset.rst", "generated/braindecode.datasets.HGD.rst", "generated/braindecode.datasets.MOABBDataset.rst", "generated/braindecode.datasets.SleepPhysionet.rst", "generated/braindecode.datasets.TUH.rst", "generated/braindecode.datasets.TUHAbnormal.rst", "generated/braindecode.datasets.WindowsDataset.rst", "generated/braindecode.datasets.create_from_X_y.rst", "generated/braindecode.datasets.create_from_mne_epochs.rst", "generated/braindecode.datasets.create_from_mne_raw.rst", "generated/braindecode.datautil.load_concat_dataset.rst", "generated/braindecode.datautil.save_concat_dataset.rst", "generated/braindecode.models.ATCNet.rst", "generated/braindecode.models.Deep4Net.rst", "generated/braindecode.models.DeepSleepNet.rst", "generated/braindecode.models.EEGConformer.rst", "generated/braindecode.models.EEGITNet.rst", "generated/braindecode.models.EEGInception.rst", "generated/braindecode.models.EEGInceptionERP.rst", "generated/braindecode.models.EEGInceptionMI.rst", "generated/braindecode.models.EEGNetv1.rst", "generated/braindecode.models.EEGNetv4.rst", "generated/braindecode.models.EEGResNet.rst", "generated/braindecode.models.HybridNet.rst", "generated/braindecode.models.ShallowFBCSPNet.rst", "generated/braindecode.models.SleepStagerBlanco2020.rst", "generated/braindecode.models.SleepStagerChambon2018.rst", "generated/braindecode.models.SleepStagerEldele2021.rst", "generated/braindecode.models.TCN.rst", "generated/braindecode.models.TIDNet.rst", "generated/braindecode.models.TimeDistributed.rst", "generated/braindecode.models.USleep.rst", "generated/braindecode.models.get_output_shape.rst", "generated/braindecode.preprocessing.Crop.rst", "generated/braindecode.preprocessing.DropChannels.rst", "generated/braindecode.preprocessing.Filter.rst", "generated/braindecode.preprocessing.Pick.rst", "generated/braindecode.preprocessing.Preprocessor.rst", "generated/braindecode.preprocessing.Resample.rst", "generated/braindecode.preprocessing.SetEEGReference.rst", "generated/braindecode.preprocessing.create_fixed_length_windows.rst", "generated/braindecode.preprocessing.create_windows_from_events.rst", "generated/braindecode.preprocessing.create_windows_from_target_channels.rst", "generated/braindecode.preprocessing.exponential_moving_demean.rst", "generated/braindecode.preprocessing.exponential_moving_standardize.rst", "generated/braindecode.preprocessing.filterbank.rst", "generated/braindecode.preprocessing.preprocess.rst", "generated/braindecode.preprocessing.scale.rst", "generated/braindecode.regressor.EEGRegressor.rst", "generated/braindecode.samplers.BalancedSequenceSampler.rst", "generated/braindecode.samplers.RecordingSampler.rst", "generated/braindecode.samplers.RelativePositioningSampler.rst", "generated/braindecode.samplers.SequenceSampler.rst", "generated/braindecode.training.CroppedLoss.rst", "generated/braindecode.training.CroppedTimeSeriesEpochScoring.rst", "generated/braindecode.training.CroppedTrialEpochScoring.rst", "generated/braindecode.training.PostEpochTrainScoring.rst", "generated/braindecode.training.TimeSeriesLoss.rst", "generated/braindecode.training.mixup_criterion.rst", "generated/braindecode.training.predict_trials.rst", "generated/braindecode.training.trial_preds_from_window_preds.rst", "generated/braindecode.util.set_random_seeds.rst", "generated/braindecode.visualization.compute_amplitude_gradients.rst", "generated/braindecode.visualization.plot_confusion_matrix.rst", "help.rst", "index.rst", "install/install.rst", "install/install_pip.rst", "install/install_source.rst", "whats_new.rst"], "titles": ["API Reference", "Advanced neural network training strategies", "Fingers flexion cropped decoding on BCIC IV 4 ECoG Dataset", "Data Augmentation on BCIC IV 2a Dataset", "Searching the best data augmentation on BCIC IV 2a Dataset", "Self-supervised learning on EEG with relative positioning", "Computation times", "Applied examples on real-world datasets", "Fingers flexion decoding on BCIC IV 4 ECoG Dataset", "Sleep staging on the Sleep Physionet dataset using Chambon2018 network", "Sleep staging on the Sleep Physionet dataset using Eldele2021", "Sleep staging on the Sleep Physionet dataset using U-Sleep network", "Process a big data EEG resource (TUH EEG Corpus)", "Computation times", "Benchmarking eager and lazy loading", "Loading and organizing data", "Benchmarking preprocessing with parallelization and serialization", "Custom Dataset Example", "Load and save dataset example", "MNE Dataset Example", "MOABB Dataset Example", "Split Dataset Example", "Multiple discrete targets with the TUH EEG Corpus", "Computation times", "Examples", "Basic model building and training", "Cropped Decoding on BCIC IV 2a Dataset", "Basic Brain Decoding on EEG Data", "How to train, test and tune your model", "Hyperparameter tuning with scikit-learn", "Convolutional neural network regression model on fake data.", "Computation times", "How to cite Braindecode", "braindecode.augmentation.AugmentedDataLoader", "braindecode.augmentation.BandstopFilter", "braindecode.augmentation.ChannelsDropout", "braindecode.augmentation.ChannelsShuffle", "braindecode.augmentation.ChannelsSymmetry", "braindecode.augmentation.Compose", "braindecode.augmentation.FTSurrogate", "braindecode.augmentation.FrequencyShift", "braindecode.augmentation.GaussianNoise", "braindecode.augmentation.IdentityTransform", "braindecode.augmentation.Mixup", "braindecode.augmentation.SensorsRotation", "braindecode.augmentation.SensorsXRotation", "braindecode.augmentation.SensorsYRotation", "braindecode.augmentation.SensorsZRotation", "braindecode.augmentation.SignFlip", "braindecode.augmentation.SmoothTimeMask", "braindecode.augmentation.TimeReverse", "braindecode.augmentation.Transform", "braindecode.augmentation.functional.bandstop_filter", "braindecode.augmentation.functional.channels_dropout", "braindecode.augmentation.functional.channels_permute", "braindecode.augmentation.functional.channels_shuffle", "braindecode.augmentation.functional.frequency_shift", "braindecode.augmentation.functional.ft_surrogate", "braindecode.augmentation.functional.gaussian_noise", "braindecode.augmentation.functional.identity", "braindecode.augmentation.functional.mixup", "braindecode.augmentation.functional.sensors_rotation", "braindecode.augmentation.functional.sign_flip", "braindecode.augmentation.functional.smooth_time_mask", "braindecode.augmentation.functional.time_reverse", "braindecode.classifier.EEGClassifier", "braindecode.datasets.BCICompetitionIVDataset4", "braindecode.datasets.BNCI2014001", "braindecode.datasets.BaseConcatDataset", "braindecode.datasets.BaseDataset", "braindecode.datasets.HGD", "braindecode.datasets.MOABBDataset", "braindecode.datasets.SleepPhysionet", "braindecode.datasets.TUH", "braindecode.datasets.TUHAbnormal", "braindecode.datasets.WindowsDataset", "braindecode.datasets.create_from_X_y", "braindecode.datasets.create_from_mne_epochs", "braindecode.datasets.create_from_mne_raw", "braindecode.datautil.load_concat_dataset", "braindecode.datautil.save_concat_dataset", "braindecode.models.ATCNet", "braindecode.models.Deep4Net", "braindecode.models.DeepSleepNet", "braindecode.models.EEGConformer", "braindecode.models.EEGITNet", "braindecode.models.EEGInception", "braindecode.models.EEGInceptionERP", "braindecode.models.EEGInceptionMI", "braindecode.models.EEGNetv1", "braindecode.models.EEGNetv4", "braindecode.models.EEGResNet", "braindecode.models.HybridNet", "braindecode.models.ShallowFBCSPNet", "braindecode.models.SleepStagerBlanco2020", "braindecode.models.SleepStagerChambon2018", "braindecode.models.SleepStagerEldele2021", "braindecode.models.TCN", "braindecode.models.TIDNet", "braindecode.models.TimeDistributed", "braindecode.models.USleep", "braindecode.models.get_output_shape", "braindecode.preprocessing.Crop", "braindecode.preprocessing.DropChannels", "braindecode.preprocessing.Filter", "braindecode.preprocessing.Pick", "braindecode.preprocessing.Preprocessor", "braindecode.preprocessing.Resample", "braindecode.preprocessing.SetEEGReference", "braindecode.preprocessing.create_fixed_length_windows", "braindecode.preprocessing.create_windows_from_events", "braindecode.preprocessing.create_windows_from_target_channels", "braindecode.preprocessing.exponential_moving_demean", "braindecode.preprocessing.exponential_moving_standardize", "braindecode.preprocessing.filterbank", "braindecode.preprocessing.preprocess", "braindecode.preprocessing.scale", "braindecode.regressor.EEGRegressor", "braindecode.samplers.BalancedSequenceSampler", "braindecode.samplers.RecordingSampler", "braindecode.samplers.RelativePositioningSampler", "braindecode.samplers.SequenceSampler", "braindecode.training.CroppedLoss", "braindecode.training.CroppedTimeSeriesEpochScoring", "braindecode.training.CroppedTrialEpochScoring", "braindecode.training.PostEpochTrainScoring", "braindecode.training.TimeSeriesLoss", "braindecode.training.mixup_criterion", "braindecode.training.predict_trials", "braindecode.training.trial_preds_from_window_preds", "braindecode.util.set_random_seeds", "braindecode.visualization.compute_amplitude_gradients", "braindecode.visualization.plot_confusion_matrix", "Frequently Asked Questions (FAQ)", "Braindecode", "Installation", "Installing from PyPI", "Installing from sources", "What\u2019s new"], "terms": {"thi": [0, 2, 8, 9, 10, 11, 14, 16, 17, 18, 19, 20, 22, 30, 45, 46, 47, 65, 66, 67, 68, 70, 72, 73, 74, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 104, 108, 109, 110, 112, 113, 116, 117, 119, 125, 130, 133, 137, 138], "i": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 27, 29, 30, 32, 34, 38, 39, 40, 43, 44, 49, 51, 52, 56, 57, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 102, 104, 106, 107, 108, 109, 110, 115, 116, 117, 120, 125, 129, 130, 134, 135, 136, 138], "class": [0, 3, 4, 5, 9, 10, 11, 12, 14, 21, 26, 27, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 138], "camelcas": 0, "name": [0, 2, 5, 8, 9, 10, 11, 12, 16, 17, 18, 21, 22, 30, 37, 65, 67, 68, 69, 70, 71, 76, 79, 103, 104, 105, 106, 108, 117, 123, 124, 125, 138], "function": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 20, 22, 26, 27, 29, 30, 32, 39, 51, 65, 68, 81, 82, 84, 86, 87, 88, 91, 93, 102, 106, 108, 110, 116, 117, 123, 124, 125, 130, 138], "underscore_cas": 0, "braindecod": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 135, 136, 138], "base": [0, 2, 3, 4, 5, 8, 9, 10, 12, 16, 18, 20, 21, 26, 27, 28, 29, 30, 33, 41, 43, 58, 60, 65, 67, 68, 81, 83, 84, 85, 86, 87, 88, 89, 90, 96, 102, 104, 105, 109, 110, 117, 119, 127, 138], "datautil": [0, 5, 18, 75, 138], "exampl": [1, 2, 8, 9, 10, 11, 14, 15, 16, 22, 23, 25, 30, 34, 36, 37, 41, 42, 43, 44, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 108, 133, 138], "explain": [1, 4, 24, 26, 85], "more": [1, 2, 3, 4, 5, 8, 9, 10, 11, 16, 22, 24, 26, 27, 28, 29, 65, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 102, 103, 104, 105, 107, 108, 117, 130, 137, 138], "topic": [1, 24, 32], "finger": [1, 6, 7, 13, 24, 66, 68, 70, 93, 101, 106, 109, 111, 113, 115, 123, 124, 126, 130, 138], "flexion": [1, 6, 7, 13, 24, 66, 68, 93, 101, 106, 109, 111, 113, 115, 123, 124, 126, 130, 138], "crop": [1, 6, 8, 10, 11, 12, 16, 20, 24, 25, 28, 29, 30, 31, 65, 66, 68, 71, 72, 75, 93, 101, 106, 109, 110, 113, 115, 117, 122, 123, 124, 126, 128, 130, 132, 138], "decod": [1, 3, 4, 6, 7, 13, 20, 22, 24, 25, 28, 29, 30, 31, 32, 65, 66, 68, 71, 76, 82, 84, 92, 93, 100, 101, 106, 109, 110, 111, 113, 115, 117, 122, 123, 124, 126, 128, 130, 132, 134, 138], "bcic": [1, 6, 7, 13, 20, 24, 25, 28, 31, 33, 35, 38, 39, 40, 48, 49, 51, 66, 68, 71, 93, 101, 106, 109, 110, 111, 113, 115, 122, 123, 124, 126, 130, 132, 138], "iv": [1, 6, 7, 13, 20, 21, 24, 25, 27, 28, 29, 31, 33, 35, 38, 39, 40, 48, 49, 51, 66, 68, 71, 81, 88, 93, 101, 106, 109, 110, 111, 113, 115, 122, 123, 124, 126, 130, 132, 138], "4": [1, 3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 66, 67, 68, 70, 81, 82, 84, 85, 86, 87, 88, 89, 90, 93, 95, 98, 100, 101, 106, 109, 111, 113, 114, 115, 118, 119, 123, 124, 126, 130], "ecog": [1, 6, 7, 13, 24, 66, 68, 93, 101, 106, 108, 109, 111, 113, 115, 123, 124, 126, 130, 134, 138], "dataset": [1, 6, 13, 14, 15, 16, 23, 25, 31, 33, 35, 38, 39, 40, 48, 49, 51, 65, 79, 81, 88, 93, 95, 96, 99, 100, 101, 106, 109, 110, 111, 113, 115, 116, 117, 119, 121, 122, 123, 124, 126, 128, 130, 131, 132, 133, 134, 136, 137, 138], "data": [1, 2, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 21, 25, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 55, 58, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 82, 84, 93, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 115, 116, 117, 122, 127, 130, 132, 133, 134, 138], "augment": [1, 6, 24, 68, 71, 84, 93, 106, 110, 113, 115, 130, 134, 138], "2a": [1, 6, 20, 21, 24, 25, 27, 28, 29, 31, 33, 35, 38, 39, 40, 48, 49, 51, 68, 71, 81, 88, 93, 106, 110, 113, 115, 122, 130, 132, 138], "search": [1, 6, 24, 28, 29, 33, 35, 39, 49, 51, 65, 68, 71, 93, 106, 110, 113, 115, 117, 130, 133, 138], "best": [1, 6, 24, 33, 35, 39, 49, 51, 68, 71, 93, 106, 110, 113, 115, 130], "self": [1, 4, 6, 11, 24, 65, 68, 72, 81, 84, 95, 106, 110, 115, 117, 119, 120, 121, 130, 133, 138], "supervis": [1, 4, 6, 24, 28, 68, 72, 95, 106, 110, 115, 119, 120, 130, 138], "learn": [1, 2, 3, 4, 6, 8, 9, 10, 11, 24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 41, 43, 49, 52, 53, 54, 55, 58, 60, 63, 65, 68, 71, 72, 82, 86, 87, 92, 93, 95, 96, 106, 110, 113, 115, 117, 119, 120, 130, 132, 134, 136, 138], "eeg": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 17, 20, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 70, 71, 72, 73, 74, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 104, 105, 106, 108, 109, 110, 113, 115, 116, 119, 120, 127, 130, 132, 134, 138], "rel": [1, 6, 24, 68, 72, 95, 106, 110, 115, 119, 120, 130], "posit": [1, 6, 24, 34, 44, 45, 46, 47, 49, 52, 61, 63, 68, 72, 95, 106, 110, 115, 119, 120, 129, 130], "go": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 102], "end": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 32, 65, 88, 102, 107, 109, 110, 117, 123, 124, 125, 138], "download": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 66, 73, 74, 136], "full": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 130], "code": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 30, 81, 84, 85, 86, 87, 96, 97, 98, 133, 135, 137, 138], "tutori": [2, 3, 4, 5, 8, 9, 10, 11, 22, 24, 26, 27, 28, 29, 137, 138], "show": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 21, 27, 28, 29, 30, 70, 138], "you": [2, 3, 4, 5, 8, 9, 11, 12, 16, 17, 18, 19, 21, 22, 24, 26, 27, 28, 32, 65, 117, 125, 133, 135, 136, 137], "how": [2, 3, 4, 5, 8, 9, 10, 11, 12, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 65, 68, 71, 93, 102, 106, 108, 110, 113, 115, 117, 130, 138], "deep": [2, 3, 4, 5, 8, 9, 10, 11, 14, 26, 27, 28, 29, 30, 32, 41, 58, 82, 86, 87, 92, 93, 95, 96, 98, 132, 134, 136], "bci": [2, 4, 8, 21, 27, 29, 39, 57, 66, 67, 81, 88, 98], "competit": [2, 4, 8, 11, 14, 21, 27, 28, 29, 66, 67, 86, 87], "us": [2, 3, 4, 7, 8, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 32, 34, 36, 37, 41, 43, 44, 45, 46, 47, 50, 53, 55, 57, 58, 61, 65, 67, 70, 75, 81, 84, 86, 87, 88, 102, 104, 105, 107, 108, 117, 125, 128, 133, 136, 137, 138], "mode": [2, 24, 65, 82, 104, 107, 117, 125, 137, 138], "For": [2, 4, 5, 8, 14, 26, 27, 28, 29, 65, 100, 104, 108, 117, 119, 125, 127, 130, 134, 135, 136, 137], "we": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 24, 26, 27, 28, 29, 32, 70, 84, 117, 130, 133, 136, 137], "predict": [2, 4, 5, 8, 9, 10, 11, 26, 27, 30, 65, 69, 99, 117, 122, 123, 124, 125, 126, 127, 128, 129, 138], "5": [2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 65, 67, 81, 82, 83, 84, 86, 87, 88, 93, 94, 95, 96, 100, 117], "regress": [2, 5, 8, 24, 25, 29, 31, 68, 69, 82, 93, 101, 109, 117, 122, 130, 138], "target": [2, 4, 5, 8, 9, 10, 15, 17, 18, 20, 23, 24, 26, 27, 28, 30, 43, 51, 60, 65, 66, 68, 69, 73, 75, 76, 78, 79, 109, 110, 117, 118, 119, 122, 123, 126, 127, 128, 132, 138], "correspond": [2, 5, 8, 12, 21, 26, 27, 29, 30, 34, 37, 65, 66, 67, 68, 75, 76, 78, 108, 110, 115, 117, 118, 126], "each": [2, 4, 8, 9, 10, 11, 12, 14, 16, 17, 19, 21, 22, 28, 29, 30, 33, 34, 35, 39, 44, 48, 50, 52, 53, 57, 61, 62, 64, 65, 66, 67, 68, 70, 72, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 104, 107, 109, 110, 117, 119, 121, 123, 124, 125, 129], "The": [2, 3, 4, 5, 8, 10, 11, 12, 14, 16, 18, 20, 21, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 49, 56, 65, 67, 69, 70, 75, 81, 82, 84, 86, 87, 88, 89, 90, 91, 93, 94, 96, 100, 102, 103, 104, 105, 107, 108, 114, 117, 127, 128, 132, 135, 137], "were": [2, 8, 9, 11, 14, 19, 29, 67, 68, 70, 84, 94, 104, 138], "record": [2, 4, 8, 9, 10, 11, 14, 16, 21, 22, 30, 66, 67, 70, 72, 73, 74, 78, 82, 83, 84, 85, 86, 89, 90, 91, 93, 94, 95, 96, 97, 108, 109, 110, 118, 119, 120, 138], "time": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 50, 64, 65, 66, 68, 72, 75, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 102, 104, 112, 113, 117, 118, 122, 123, 126, 129, 138], "seri": [2, 4, 5, 8, 9, 10, 28, 29, 30, 65, 69, 75, 78, 94, 95, 117, 119, 123, 138], "25": [2, 5, 8, 9, 11, 12, 14, 28, 30, 67, 81, 82, 83, 84, 86, 87, 89, 90, 93, 95, 104], "hz": [2, 3, 4, 5, 8, 9, 11, 16, 26, 30, 34, 40, 52, 56, 67, 81, 84, 88, 100, 104], "so": [2, 5, 8, 9, 10, 11, 14, 16, 18, 26, 27, 28, 29, 34, 37, 65, 100, 109, 114, 117, 138], "an": [2, 5, 8, 10, 12, 14, 18, 22, 26, 28, 29, 38, 44, 45, 46, 47, 51, 65, 67, 69, 70, 75, 78, 81, 82, 83, 85, 86, 87, 88, 91, 93, 94, 95, 96, 97, 99, 100, 103, 104, 106, 107, 108, 110, 117, 119, 125, 133, 134, 138], "author": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 30, 32, 84, 85, 86, 87, 88, 89, 90], "maciej": [2, 8, 138], "sliwowski": [2, 8], "maciek": [2, 8], "gmail": [2, 5, 8, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 30], "com": [2, 3, 5, 8, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 30, 73, 74, 137], "moham": [2, 8, 138], "fattouh": [2, 8, 138], "mo": [2, 8], "licens": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 30], "bsd": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 30], "3": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 41, 43, 44, 58, 60, 61, 65, 66, 67, 70, 72, 81, 82, 86, 87, 88, 91, 94, 98, 117, 118, 119, 128, 135, 138], "claus": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22], "first": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 26, 27, 29, 37, 49, 63, 65, 68, 72, 73, 74, 81, 82, 84, 93, 96, 104, 107, 108, 110, 117, 133, 137], "In": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 18, 20, 21, 26, 27, 28, 29, 34, 41, 43, 44, 45, 46, 47, 49, 52, 58, 60, 61, 63, 65, 67, 104, 105, 108, 117, 130], "avail": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 18, 19, 22, 26, 27, 28, 29, 30, 66, 72, 84, 86, 87, 96, 109, 110, 118, 119], "part": [2, 8, 16, 17, 19, 27, 28, 29, 35, 36, 49, 53, 55, 63, 84, 86, 87], "librari": [2, 3, 8, 24, 27, 28, 29, 32, 66, 137], "http": [2, 4, 5, 8, 12, 26, 27, 32, 43, 60, 65, 66, 72, 82, 84, 86, 87, 92, 93, 94, 96, 117, 127, 130, 132, 137], "searchwork": [2, 8, 66], "stanford": [2, 8, 66], "edu": [2, 4, 8, 66], "view": [2, 4, 8, 22, 66], "zk881ps0522": [2, 8, 66], "contain": [2, 5, 8, 12, 14, 16, 18, 21, 22, 30, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 49, 52, 60, 61, 63, 65, 66, 68, 71, 72, 75, 108, 109, 110, 117, 118, 119, 120, 126, 127, 133, 138], "signal": [2, 3, 4, 5, 8, 9, 10, 11, 12, 18, 20, 27, 30, 33, 34, 35, 36, 39, 40, 44, 45, 46, 47, 49, 52, 53, 55, 56, 57, 61, 63, 67, 69, 72, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 104, 107, 108, 109, 110, 114, 116, 120], "differ": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 18, 21, 26, 27, 28, 29, 67, 86, 87, 88, 100, 120, 135], "than": [2, 5, 8, 9, 10, 11, 12, 14, 16, 26, 34, 52, 65, 78, 104, 110, 117, 138], "standard": [2, 3, 4, 5, 8, 9, 10, 11, 26, 27, 28, 29, 33, 41, 44, 45, 46, 47, 58, 61, 108, 113], "setup": [2, 4, 8, 26, 135], "multipl": [2, 3, 4, 8, 9, 10, 14, 15, 16, 21, 23, 24, 26, 65, 68, 73, 88, 99, 100, 104, 108, 109, 114, 116, 117, 128, 138], "trial": [2, 3, 4, 8, 19, 21, 26, 27, 28, 29, 30, 65, 67, 70, 76, 78, 110, 117, 123, 124, 128, 129, 138], "usual": [2, 3, 4, 8, 16, 28, 65, 117], "one": [2, 4, 8, 9, 10, 11, 14, 16, 20, 26, 28, 29, 38, 43, 49, 63, 65, 67, 68, 81, 84, 88, 100, 108, 109, 110, 117, 118, 119, 120, 133], "per": [2, 4, 5, 8, 9, 10, 11, 26, 43, 49, 63, 67, 70, 72, 88, 98, 108, 138], "here": [2, 3, 4, 5, 8, 10, 11, 12, 21, 22, 24, 26, 27, 28, 29, 40, 56, 78, 88, 109, 110], "chang": [2, 5, 8, 14, 18, 30, 42, 65, 108, 117, 125, 137], "ar": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 19, 20, 22, 24, 26, 27, 28, 29, 30, 32, 34, 43, 60, 65, 68, 75, 76, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 102, 103, 104, 105, 108, 109, 110, 114, 117, 120, 122, 126, 133, 135, 136, 137, 138], "sampl": [2, 3, 4, 5, 8, 9, 10, 14, 16, 17, 26, 27, 28, 29, 30, 34, 35, 36, 39, 40, 43, 44, 45, 46, 47, 49, 52, 55, 56, 57, 63, 65, 67, 69, 70, 72, 76, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 104, 109, 110, 118, 119, 120, 121, 127, 133, 138], "frequenc": [2, 3, 4, 8, 11, 12, 16, 17, 26, 27, 28, 29, 30, 34, 40, 52, 56, 70, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 104, 107, 114, 118, 138], "equal": [2, 8, 76, 77, 78, 101, 109], "If": [2, 8, 14, 18, 19, 22, 28, 29, 32, 34, 43, 65, 66, 67, 68, 70, 71, 72, 73, 74, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 102, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 120, 121, 125, 126, 127, 128, 133, 137], "pleas": [2, 4, 5, 8, 11, 12, 22, 26, 66, 84, 86, 114, 137, 138], "cite": [2, 8, 66], "1": [2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 57, 58, 60, 61, 63, 65, 66, 67, 68, 70, 72, 73, 74, 79, 81, 82, 86, 87, 88, 91, 93, 94, 96, 98, 100, 101, 104, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 127, 128, 129, 132], "miller": [2, 8, 66], "kai": [2, 8, 66], "j": [2, 4, 5, 8, 26, 27, 29, 30, 34, 37, 39, 41, 49, 52, 54, 57, 58, 63, 66, 82, 85, 89, 90, 92, 93, 95, 97, 98, 132], "A": [2, 3, 4, 5, 8, 9, 10, 16, 26, 30, 33, 35, 36, 39, 51, 53, 55, 57, 65, 66, 68, 71, 73, 74, 83, 86, 87, 88, 89, 90, 94, 95, 98, 104, 108, 109, 110, 115, 117, 120, 128, 132, 138], "human": [2, 8, 30, 32, 37, 54, 66, 82, 92, 93, 104, 132], "electrocorticograph": [2, 8, 66], "analys": [2, 8, 66], "natur": [2, 8, 14, 66], "behaviour": [2, 8, 66], "11": [2, 3, 4, 5, 8, 10, 12, 13, 17, 18, 19, 20, 21, 26, 27, 28, 30, 66, 83], "2019": [2, 8, 30, 66], "1225": [2, 8, 66], "1235": [2, 8, 66], "doi": [2, 8, 10, 26, 27, 32, 66, 81, 82, 85, 86, 87, 92, 93, 94, 96, 98, 132], "org": [2, 4, 5, 8, 26, 27, 32, 43, 60, 65, 66, 72, 82, 84, 86, 87, 92, 93, 94, 96, 117, 127, 130, 132], "10": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 30, 32, 37, 44, 45, 46, 47, 61, 65, 66, 67, 81, 82, 84, 85, 86, 87, 92, 93, 94, 96, 98, 104, 108, 117, 118, 132], "1038": [2, 8, 66], "s41562": [2, 8, 66], "019": [2, 8, 66, 94], "0678": [2, 8, 66], "import": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 39, 57, 133, 137], "copi": [2, 11, 16, 39, 57, 66, 102, 133], "numpi": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 17, 26, 27, 28, 29, 30, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 61, 65, 104, 107, 117, 130, 132], "np": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 28, 30, 65, 112, 113, 116, 117, 118, 119, 120, 121, 128], "sklearn": [2, 4, 5, 8, 9, 10, 11, 16, 26, 27, 28, 29, 30, 65, 117, 125, 132, 138], "from": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 35, 36, 39, 43, 44, 45, 46, 47, 53, 55, 57, 61, 65, 67, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 102, 108, 109, 110, 117, 118, 119, 120, 121, 123, 124, 125, 127, 128, 135, 138], "mne": [2, 3, 4, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 27, 29, 44, 61, 66, 68, 69, 72, 75, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 133, 138], "set_log_level": [2, 8, 12, 14, 22], "bcicompetitionivdataset4": [2, 8, 138], "subject_id": [2, 3, 4, 5, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 26, 27, 28, 29, 66, 67, 70, 71, 72, 138], "can": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 26, 27, 28, 29, 32, 40, 44, 61, 65, 68, 72, 73, 74, 75, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 103, 104, 105, 107, 108, 117, 128, 135, 136, 138], "easili": [2, 8, 20, 27, 28, 29, 119], "addit": [2, 8, 12, 17, 20, 21, 27, 28, 29, 41, 58, 65, 67, 68, 69, 75, 78, 110, 117, 132], "info": [2, 3, 4, 8, 12, 14, 16, 17, 19, 20, 21, 26, 27, 28, 29, 68, 75, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 104, 105, 108, 119, 121, 133, 138], "store": [2, 4, 8, 9, 10, 11, 12, 14, 18, 22, 27, 28, 29, 66, 68, 79, 138], "descript": [2, 5, 8, 12, 17, 18, 19, 20, 22, 26, 27, 28, 29, 66, 67, 68, 69, 73, 74, 75, 78, 79, 81, 82, 84, 86, 88, 89, 90, 91, 93, 94, 100, 109, 110], "attribut": [2, 8, 27, 28, 29, 65, 69, 75, 106, 117, 138], "case": [2, 8, 16, 21, 26, 27, 28, 29, 65, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 108, 117, 130, 136, 138], "session": [2, 4, 8, 12, 18, 20, 21, 26, 27, 28, 29, 30, 67, 70, 119], "column": [2, 8, 16, 18, 19, 21, 22, 26, 27, 28, 29, 68, 75, 79, 118, 119, 132], "select": [2, 4, 8, 9, 16, 20, 27, 28, 29, 34, 70, 108, 118], "valid": [2, 21, 26, 30, 65, 96, 108, 109, 110, 117, 125, 126, 138], "final": [2, 4, 5, 8, 9, 10, 11, 12, 14, 16, 26, 28, 82, 83, 90, 93, 94, 95, 96, 113], "evalu": [2, 5, 8, 9, 10, 11, 14, 21, 29, 97], "train_set": [2, 3, 4, 8, 9, 10, 11, 26, 27, 28, 29, 30], "test_set": [2, 8, 28, 30], "now": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 22, 26, 27, 29, 108, 137, 138], "appli": [2, 3, 4, 5, 8, 9, 10, 12, 16, 18, 19, 20, 26, 27, 28, 29, 33, 34, 35, 36, 37, 39, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 69, 75, 94, 95, 99, 100, 104, 106, 108, 114, 115, 117, 127, 138], "like": [2, 8, 16, 27, 28, 29, 34, 39, 44, 52, 57, 61, 65, 76, 77, 78, 96, 104, 105, 117, 119, 137, 138], "bandpass": [2, 3, 4, 8, 20, 26, 27, 28, 29, 67, 104, 114], "filter": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 20, 26, 27, 28, 29, 34, 52, 67, 81, 82, 84, 86, 87, 88, 90, 93, 95, 97, 98, 100, 106, 107, 114, 138], "our": [2, 5, 8, 9, 10, 11, 12, 16, 20, 26, 27, 29, 70, 135], "either": [2, 8, 27, 28, 29, 65, 67, 68, 70, 104, 108, 117, 128], "provid": [2, 8, 9, 10, 11, 27, 28, 29, 32, 65, 67, 68, 69, 73, 74, 99, 104, 105, 106, 115, 117, 133], "raw": [2, 3, 4, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 68, 69, 72, 73, 74, 78, 83, 102, 103, 104, 105, 106, 108, 109, 110, 114, 116, 134, 138], "epoch": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 17, 18, 19, 21, 26, 27, 28, 29, 30, 65, 68, 75, 77, 78, 102, 103, 104, 105, 106, 108, 109, 110, 117, 120, 123, 124, 125, 138], "your": [2, 8, 14, 16, 21, 24, 25, 26, 27, 29, 31, 32, 65, 68, 71, 93, 106, 110, 113, 115, 117, 130, 133, 135], "own": [2, 8, 26, 27, 28, 29, 70, 133], "object": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 18, 19, 21, 26, 27, 28, 29, 30, 38, 69, 72, 73, 74, 75, 78, 102, 106, 109, 110, 115, 132, 138], "underli": [2, 5, 8, 27, 29, 106], "arrai": [2, 4, 8, 11, 17, 22, 27, 28, 29, 34, 44, 51, 52, 61, 65, 76, 77, 78, 104, 105, 106, 107, 117, 121, 128, 132], "step": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 18, 22, 27, 28, 29, 78, 109, 110, 133], "taken": [2, 5, 8, 14], "process": [2, 4, 5, 7, 8, 13, 14, 15, 16, 22, 24, 28, 68, 73, 106, 109, 115, 116, 138], "pipelin": [2, 5, 8, 28], "onli": [2, 4, 5, 8, 9, 10, 11, 12, 14, 18, 21, 26, 28, 38, 51, 65, 70, 72, 78, 85, 86, 87, 88, 89, 90, 102, 104, 105, 107, 108, 110, 117, 126, 133, 137, 138], "cutoff": [2, 8, 16, 104], "proper": [2, 8], "other": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 18, 28, 29, 51, 65, 70, 72, 81, 82, 83, 91, 93, 94, 95, 96, 97, 100, 117], "mai": [2, 3, 4, 5, 8, 9, 11, 16, 18, 26, 27, 28, 32, 65, 117, 125, 130, 133], "need": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 26, 27, 28, 65, 81, 84, 88, 117, 130, 135, 138], "These": [2, 5, 8, 26, 27, 29], "prepocess": [2, 8, 27, 29], "directli": [2, 3, 5, 8, 12, 22, 26, 27, 29, 30, 65, 75, 106, 108, 117, 137], "fly": [2, 8, 27, 29, 69, 75, 138], "transform": [2, 5, 8, 9, 10, 11, 20, 26, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 69, 75, 76, 77, 78, 84, 117, 138], "pytorch": [2, 8, 14, 22, 26, 27, 29, 65, 81, 86, 87, 117, 128, 130, 136, 138], "torchvis": [2, 8, 27, 29], "preprocessor": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 18, 20, 26, 27, 28, 29, 115, 138], "exponential_moving_standard": [2, 3, 4, 8, 26, 27, 28, 29], "low_cut_hz": [2, 3, 4, 8, 26, 27, 28, 29], "low": [2, 3, 4, 5, 8, 9, 10, 11, 16, 26, 27, 28, 29, 34, 52, 86, 87, 104], "high_cut_hz": [2, 3, 4, 5, 8, 9, 10, 26, 27, 28, 29], "200": [2, 8, 10, 14, 82], "high": [2, 3, 4, 8, 11, 26, 27, 28, 29, 34, 52, 70, 86, 87, 100, 104, 118], "higher": [2, 5, 8, 96], "paramet": [2, 3, 4, 5, 8, 10, 14, 16, 17, 18, 19, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 132, 138], "exponenti": [2, 3, 4, 8, 26, 27, 28, 29, 100, 112, 113], "move": [2, 3, 4, 8, 14, 16, 26, 27, 28, 29, 66, 112, 113, 138], "factor_new": [2, 3, 4, 8, 26, 27, 28, 29, 112, 113], "1e": [2, 3, 4, 8, 9, 10, 11, 26, 27, 28, 29], "init_block_s": [2, 3, 4, 8, 26, 27, 28, 29, 112, 113], "1000": [2, 3, 4, 8, 12, 21, 22, 26, 27, 28, 29, 70, 86, 87, 119], "30": [2, 5, 8, 9, 10, 11, 12, 16, 26, 29, 30, 72, 93, 94, 95, 96, 100], "second": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 29, 30, 37, 67, 70, 73, 74, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 102], "limit": [2, 5, 8, 11, 12, 16, 102], "memori": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 65, 110, 117], "run": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 65, 67, 70, 78, 81, 84, 88, 94, 104, 106, 107, 109, 110, 117, 119, 130, 133, 137], "6": [2, 3, 4, 5, 8, 9, 10, 12, 16, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 67, 70, 84, 104], "To": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 17, 22, 26, 27, 28, 29, 30, 104, 136, 137], "obtain": [2, 3, 4, 5, 8, 9, 11, 26, 27, 44, 61, 65, 69, 70, 75, 117, 119], "whole": [2, 8, 9, 10], "should": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 20, 26, 27, 29, 34, 37, 44, 49, 52, 61, 63, 65, 66, 68, 69, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 102, 104, 105, 107, 108, 116, 117, 125, 133, 137], "valid_set": [2, 3, 8, 9, 10, 11, 26, 27, 30], "deepcopi": 2, "tmin": [2, 8, 12, 16, 19, 102], "24": [2, 5, 9, 10, 11, 12, 26, 94, 98, 105], "tmax": [2, 8, 12, 102], "n_job": [2, 3, 4, 5, 12, 14, 16, 26, 27, 28, 29, 73, 74, 79, 104, 107, 109, 110, 111, 115, 138], "0": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 34, 35, 36, 39, 41, 42, 43, 51, 53, 55, 57, 60, 65, 67, 68, 72, 73, 74, 78, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 117, 119, 128, 132], "baseconcatdataset": [2, 5, 9, 10, 12, 14, 16, 21, 30, 65, 76, 77, 78, 79, 109, 110, 115, 117, 119, 128, 138], "0x7f15e93ee050": 2, "variabl": [2, 4, 8, 66, 130], "channel": [2, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 19, 30, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 49, 53, 54, 55, 56, 57, 58, 60, 61, 63, 72, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 103, 104, 105, 108, 109, 110, 114, 138], "type": [2, 3, 4, 8, 26, 27, 28, 34, 35, 36, 37, 39, 40, 41, 43, 44, 49, 60, 65, 68, 70, 76, 77, 78, 79, 88, 99, 101, 104, 105, 107, 108, 109, 110, 112, 113, 115, 117, 119, 121, 127, 129, 132], "misc": [2, 4, 8, 75], "thu": [2, 4, 8, 102], "those": [2, 4, 5, 8, 12, 65, 104, 105, 117], "have": [2, 4, 5, 8, 11, 12, 14, 16, 17, 19, 21, 26, 27, 28, 29, 44, 49, 61, 63, 65, 76, 77, 78, 88, 106, 108, 109, 117, 125, 133, 136, 137, 138], "further": [2, 4, 5, 8, 9, 10, 11, 26, 28, 65, 117], "howev": [2, 3, 4, 5, 8, 11, 12, 14, 16, 21, 26, 27, 28, 30, 110, 117], "mani": [2, 4, 5, 8, 16, 26, 28, 68], "ignor": [2, 4, 8, 28, 49, 65, 81, 84, 88, 103, 106, 109, 110, 117, 120], "perform": [2, 4, 8, 9, 10, 11, 26, 27, 28, 29, 67, 68, 70, 81, 84, 88, 96, 112, 113, 138], "oper": [2, 3, 4, 8, 16, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 59, 102, 107], "see": [2, 3, 4, 5, 8, 9, 10, 11, 16, 20, 24, 26, 27, 29, 43, 60, 65, 66, 67, 70, 72, 74, 75, 85, 89, 90, 92, 97, 98, 102, 103, 104, 105, 107, 108, 109, 110, 117, 118, 120, 121, 127, 130, 133, 136, 137], "tool": [2, 4, 8, 72, 134, 137], "stabl": [2, 4, 5, 8, 16, 65, 72, 117, 130, 132], "glossari": [2, 4, 8], "html": [2, 4, 5, 8, 12, 26, 65, 72, 73, 74, 117, 130, 132], "term": [2, 4, 8, 83], "todo": 2, "ensur": [2, 100, 130, 136], "remov": [2, 3, 4, 5, 8, 9, 11, 26, 27, 30, 86, 103, 108, 129, 138], "pick_typ": [2, 3, 4, 8, 20, 26, 27, 28, 29, 103], "true": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 26, 27, 28, 29, 30, 43, 44, 45, 46, 47, 65, 68, 69, 72, 73, 74, 75, 78, 81, 82, 83, 84, 91, 93, 94, 95, 96, 100, 102, 106, 108, 109, 110, 111, 114, 117, 120, 121, 123, 124, 125, 128, 130, 138], "lambda": [2, 3, 4, 5, 8, 9, 10, 26, 27, 28, 29, 65, 91, 117], "x": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 20, 22, 26, 27, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 76, 77, 78, 81, 83, 84, 88, 92, 94, 95, 96, 97, 98, 99, 100, 107, 112, 113, 116, 117, 122, 125, 126, 128], "1e6": [2, 3, 4, 5, 8, 9, 10, 12, 26, 27, 28, 29], "pick": [2, 8, 10, 12, 20, 104, 109, 110, 111, 138], "convert": [2, 3, 4, 5, 8, 9, 10, 17, 19, 26, 27, 28, 29, 104], "v": [2, 3, 4, 5, 8, 10, 16, 26, 27, 28, 29, 86, 87, 89, 90, 97], "uv": [2, 3, 4, 5, 8, 10, 26, 27, 28, 29], "l_freq": [2, 3, 4, 5, 8, 9, 10, 16, 26, 27, 28, 29, 104], "h_freq": [2, 3, 4, 5, 8, 9, 10, 16, 26, 27, 28, 29, 104], "extract": [2, 8, 12, 14, 16, 17, 19, 22, 26, 27, 28, 29, 75, 86, 87, 88, 94, 96, 109, 110, 118, 120], "check": [2, 3, 4, 8, 9, 10, 11, 26, 27, 28, 29, 32, 85, 86, 87, 88, 89, 90, 133, 136, 138], "thei": [2, 3, 4, 5, 8, 12, 14, 16, 26, 27, 28, 29, 30, 108, 138], "same": [2, 3, 4, 5, 8, 9, 10, 11, 14, 18, 21, 27, 28, 29, 40, 49, 56, 63, 65, 70, 72, 96, 117, 120], "all": [2, 3, 4, 8, 12, 14, 16, 24, 26, 27, 28, 29, 40, 41, 49, 56, 58, 63, 65, 66, 67, 70, 71, 72, 81, 84, 86, 87, 88, 102, 104, 105, 107, 108, 109, 110, 117, 125, 138], "sfreq": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 26, 27, 28, 29, 30, 34, 40, 52, 56, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 104, 138], "assert": [2, 3, 4, 8, 12, 14, 26, 27, 28, 29], "d": [2, 3, 4, 5, 8, 12, 14, 22, 26, 27, 28, 29, 30, 35, 36, 39, 53, 55, 57, 81, 82, 90, 92, 93, 94, 98, 120, 132, 138], "target_sfreq": [2, 8], "temp": [2, 8], "home": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19, 26, 27, 28, 29, 30], "runner": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19, 26, 27, 28, 29, 30], "work": [2, 3, 4, 5, 8, 10, 12, 16, 18, 20, 22, 24, 26, 27, 28, 29, 30, 65, 100, 102, 117, 125, 134, 136, 138], "py": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31], "55": [2, 3, 4, 5, 8, 10, 26, 27, 28, 29], "userwarn": [2, 3, 4, 5, 8, 10, 11, 16, 18, 26, 27, 28, 29, 30], "choic": [2, 3, 4, 5, 8, 10, 26, 27, 28, 29, 84, 138], "cannot": [2, 3, 4, 5, 8, 9, 10, 11, 26, 27, 28, 29, 65, 102, 117], "save": [2, 3, 4, 5, 8, 10, 14, 15, 16, 23, 24, 26, 27, 28, 29, 65, 68, 71, 79, 106, 110, 115, 117, 138], "warn": [2, 3, 4, 5, 8, 9, 10, 14, 16, 18, 26, 27, 28, 29, 30, 67, 96, 103, 109, 110, 130, 138], "contrast": [2, 4, 5, 26, 34, 41, 49, 52, 58, 63, 117], "trialwis": [2, 4, 8, 20, 27, 29, 65, 117, 128, 138], "befor": [2, 11, 16, 26, 27, 28, 29, 65, 68, 69, 72, 75, 81, 82, 83, 84, 93, 94, 95, 96, 112, 113, 117, 125, 130, 136, 138], "becaus": [2, 16, 26, 28, 29, 133], "know": [2, 3, 4, 26], "recept": [2, 26, 65, 117, 128], "field": [2, 26, 65, 108, 117, 128], "network": [2, 4, 5, 7, 8, 10, 13, 14, 25, 26, 27, 31, 32, 41, 58, 65, 68, 69, 72, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 109, 110, 115, 116, 117, 119, 121, 122, 128, 130, 132, 138], "larg": [2, 5, 14, 16, 26, 68, 110], "stride": [2, 9, 10, 11, 26, 76, 77, 78, 82, 84, 93, 98, 109, 110], "choos": [2, 3, 4, 8, 18, 26, 27, 28, 29], "input": [2, 3, 4, 8, 10, 11, 14, 21, 26, 27, 28, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99, 100, 117, 138], "size": [2, 3, 4, 5, 14, 16, 26, 27, 28, 29, 30, 34, 49, 52, 63, 65, 76, 77, 78, 81, 84, 86, 87, 88, 94, 95, 97, 98, 100, 101, 104, 107, 109, 110, 117, 120, 122, 126, 128, 132], "fed": [2, 26, 45, 46, 47], "dure": [2, 4, 5, 8, 9, 10, 11, 12, 14, 26, 27, 28, 29, 65, 66, 104, 108, 117, 138], "ha": [2, 3, 4, 5, 8, 10, 12, 20, 21, 22, 26, 27, 28, 29, 30, 45, 46, 47, 65, 68, 69, 72, 75, 78, 85, 86, 87, 88, 89, 90, 100, 104, 109, 110, 117, 127, 133, 138], "larger": [2, 5, 26, 86, 87], "otherwis": [2, 14, 26, 30, 78, 109, 110], "chosen": [2, 16, 18, 26, 49, 65, 104, 117, 128], "effici": [2, 3, 16, 26], "explan": [2, 26, 114], "begin": [2, 26, 67, 94, 104, 109], "which": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 20, 21, 24, 26, 28, 29, 32, 33, 36, 39, 44, 55, 57, 61, 65, 68, 69, 70, 75, 96, 99, 104, 107, 108, 117, 119, 120, 121, 133], "rate": [2, 5, 14, 26, 27, 28, 29, 30, 65, 67, 70, 84, 86, 87, 94, 95, 96, 100, 117, 138], "input_window_sampl": [2, 3, 4, 8, 14, 26, 27, 28, 29, 30, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 98, 101], "come": [2, 8, 14, 27, 29, 121, 130], "some": [2, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 22, 26, 27, 29, 32, 65, 68, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 108, 117, 130], "predefin": [2, 8, 27, 29], "convolut": [2, 5, 8, 9, 11, 24, 25, 26, 27, 29, 31, 32, 39, 41, 57, 58, 68, 69, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 100, 101, 109, 122, 130, 132, 138], "neural": [2, 4, 5, 8, 9, 10, 11, 14, 25, 26, 27, 31, 32, 41, 58, 68, 69, 82, 83, 84, 86, 87, 88, 92, 93, 94, 95, 96, 98, 101, 109, 122, 130, 132, 138], "architectur": [2, 5, 8, 9, 10, 11, 26, 27, 29, 65, 83, 84, 94, 95, 96, 100, 117, 134], "domain": [2, 4, 8, 16, 27, 29, 40, 56, 100, 104, 107], "shallow": [2, 8, 14, 26, 27, 29, 30, 93], "convnet": [2, 8, 26, 27, 29, 82, 92, 93], "visual": [2, 8, 9, 10, 11, 12, 26, 27, 29, 30, 32, 70, 82, 84, 92, 93, 134, 138], "pure": [2, 5, 8, 27, 29], "therefor": [2, 8, 12, 16, 26, 27, 28, 29, 125], "just": [2, 4, 8, 22, 27, 28, 29, 65, 82, 93, 117], "normal": [2, 5, 8, 9, 10, 27, 29, 94, 95, 116, 119, 132, 138], "nn": [2, 3, 4, 5, 8, 9, 10, 11, 14, 26, 27, 28, 29, 30, 65, 81, 86, 87, 88, 99, 100, 117, 128], "modul": [2, 4, 5, 8, 9, 10, 11, 14, 27, 29, 65, 81, 84, 86, 87, 88, 96, 99, 117, 128, 130, 132, 136, 138], "torch": [2, 3, 4, 5, 8, 9, 10, 11, 14, 22, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 81, 83, 86, 87, 92, 94, 95, 96, 97, 98, 99, 117, 122, 126, 127, 128, 130, 138], "shallowfbcspnet": [2, 3, 4, 8, 14, 26, 27, 28, 29, 30], "util": [2, 3, 4, 5, 8, 9, 10, 11, 14, 18, 22, 26, 27, 29, 30, 138], "set_random_se": [2, 3, 4, 5, 8, 9, 10, 11, 26, 27, 28, 29, 30, 138], "cuda": [2, 3, 4, 5, 8, 9, 10, 11, 14, 26, 27, 28, 29, 30, 65, 104, 107, 117, 130, 136], "is_avail": [2, 3, 4, 5, 8, 9, 10, 11, 14, 26, 27, 28, 29, 30], "gpu": [2, 3, 4, 5, 8, 9, 10, 11, 26, 27, 28, 29, 65, 117, 136, 138], "devic": [2, 3, 4, 5, 8, 9, 10, 11, 14, 26, 27, 28, 29, 30, 33, 65, 117, 138], "els": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 26, 27, 28, 29, 30, 65, 117], "cpu": [2, 3, 4, 5, 8, 9, 10, 11, 26, 27, 28, 29, 65, 117], "backend": [2, 3, 4, 5, 8, 9, 10, 11, 14, 26, 27, 28, 29, 30, 130, 138], "cudnn": [2, 3, 4, 5, 8, 9, 10, 11, 14, 26, 27, 28, 29, 30, 130, 138], "benchmark": [2, 3, 4, 5, 8, 9, 10, 11, 15, 23, 24, 26, 27, 28, 29, 30, 68, 72, 74, 82, 93, 106, 109, 115, 130, 138], "set": [2, 4, 8, 9, 10, 11, 12, 14, 16, 17, 19, 22, 26, 28, 29, 30, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 60, 65, 67, 68, 70, 82, 86, 87, 88, 93, 94, 95, 98, 100, 102, 105, 108, 109, 110, 117, 130, 136, 138], "random": [2, 3, 4, 5, 8, 9, 10, 11, 26, 27, 29, 30, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 70, 118, 119, 120, 121, 125, 130, 138], "seed": [2, 3, 4, 5, 8, 9, 10, 11, 26, 27, 28, 29, 30, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 58, 130], "abl": [2, 3, 4, 5, 8, 9, 10, 11, 12, 26, 27, 29, 65, 117, 133], "roughli": [2, 3, 4, 5, 8, 9, 11, 26, 27, 70], "reproduc": [2, 3, 4, 5, 8, 9, 10, 11, 24, 26, 27, 29, 130, 138], "note": [2, 3, 4, 5, 8, 9, 11, 17, 20, 26, 27, 29, 40, 56, 65, 66, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 102, 104, 105, 108, 116, 117, 125, 130], "indetermin": [2, 3, 4, 5, 8, 9, 11, 26, 27], "still": [2, 3, 4, 5, 8, 9, 11, 26, 27, 28, 70], "make": [2, 3, 4, 5, 8, 9, 11, 12, 26, 27, 28, 29, 96, 104, 133, 138], "substanti": [2, 3, 4, 5, 8, 9, 11, 14, 26, 27], "between": [2, 3, 4, 5, 8, 9, 11, 26, 27, 28, 34, 35, 36, 39, 40, 43, 44, 45, 46, 47, 51, 52, 53, 55, 57, 60, 67, 76, 77, 78, 82, 84, 93, 94, 102, 109, 110, 121, 126], "consist": [2, 3, 4, 5, 8, 9, 11, 26, 27, 45, 46, 47, 67, 70], "cost": [2, 3, 4, 5, 8, 9, 11, 26, 27], "increas": [2, 3, 4, 5, 8, 9, 10, 11, 16, 26, 27, 28, 88, 96], "cudnn_benchmark": [2, 3, 4, 5, 8, 9, 11, 26, 27, 130], "fals": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 26, 27, 28, 29, 30, 39, 43, 44, 45, 46, 47, 57, 61, 65, 66, 68, 69, 72, 73, 74, 75, 78, 80, 81, 82, 83, 84, 93, 94, 95, 96, 100, 102, 106, 108, 109, 110, 111, 114, 115, 117, 120, 121, 123, 124, 130, 132, 138], "20200220": [2, 3, 4, 8, 26, 27, 28, 29, 30], "n_class": [2, 3, 4, 9, 10, 11, 14, 26, 27, 28, 29, 30, 65, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 117, 122, 126, 128], "number": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 22, 26, 27, 28, 29, 30, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 58, 61, 63, 65, 68, 72, 73, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 104, 107, 109, 110, 114, 115, 117, 118, 119, 120, 121, 128, 129], "chan": [2, 3, 4, 8, 26, 27, 28, 29, 67, 70], "n_chan": [2, 8, 11, 26, 27, 29, 30, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100], "shape": [2, 3, 4, 5, 8, 9, 10, 11, 17, 20, 22, 26, 27, 28, 29, 44, 61, 65, 83, 84, 92, 94, 95, 96, 97, 98, 99, 100, 101, 121, 122, 126], "final_conv_length": [2, 3, 4, 8, 14, 26, 27, 28, 29, 30, 82, 89, 90, 93], "2": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 29, 30, 34, 35, 36, 39, 40, 41, 43, 49, 52, 57, 58, 60, 63, 65, 67, 70, 72, 81, 82, 86, 87, 89, 90, 91, 94, 96, 98, 100, 104, 108, 113, 117, 118, 119, 127, 128], "softmax": [2, 3, 4, 8, 26, 27, 28, 30, 65, 97, 100, 117], "layer": [2, 3, 4, 5, 8, 9, 10, 26, 27, 28, 30, 81, 82, 83, 84, 88, 93, 94, 95, 96, 97, 98, 100, 138], "new_model": [2, 8], "sequenti": [2, 3, 4, 5, 8, 9, 10, 16, 30, 70], "module_": [2, 3, 8, 9, 10, 26, 27, 30, 65, 117], "named_children": [2, 8, 30], "continu": [2, 8, 14, 16, 20, 30, 69, 70, 76, 77, 78, 109, 110, 116, 136, 138], "add_modul": [2, 8, 30], "send": [2, 3, 4, 8, 9, 10, 11, 16, 26, 27, 28, 29], "get_output_shap": [2, 26, 30, 138], "to_dense_prediction_model": [2, 26, 30, 138], "local": [2, 5, 9, 10, 11, 14, 26, 30, 66, 108, 133, 137], "lib": [2, 5, 9, 10, 11, 26, 30], "python3": [2, 5, 9, 10, 11, 26, 30], "site": [2, 5, 9, 10, 11, 26, 30], "packag": [2, 5, 9, 10, 11, 26, 30, 32, 135, 136], "deprec": [2, 5, 8, 9, 12, 26, 27, 30, 86, 138], "86": [2, 9, 30], "futurewarn": [2, 9, 29, 30], "version": [2, 5, 9, 10, 18, 22, 29, 30, 65, 84, 102, 103, 104, 105, 107, 108, 117, 133, 135, 136, 137], "eegmodulemixin": [2, 30, 138], "method": [2, 4, 5, 8, 12, 16, 21, 28, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 65, 66, 68, 69, 75, 81, 82, 83, 84, 88, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 106, 108, 117, 118, 119, 120, 122, 123, 124, 125, 126, 138], "msg": [2, 9, 30], "categori": [2, 4, 9, 30], "calcul": [2, 3, 4, 26, 27, 28, 29, 65, 98, 117], "output": [2, 3, 4, 5, 12, 14, 21, 26, 27, 28, 30, 65, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 104, 105, 107, 108, 109, 110, 117], "dummi": [2, 26], "n_preds_per_input": [2, 26, 30], "create_fixed_length_window": [2, 5, 12, 14, 16, 22, 30, 138], "It": [2, 3, 4, 8, 9, 10, 11, 18, 26, 27, 28, 29, 39, 57, 65, 68, 75, 78, 96, 109, 110, 117, 134], "defin": [2, 5, 9, 10, 11, 12, 14, 20, 21, 26, 27, 29, 37, 51, 54, 65, 75, 81, 84, 88, 98, 110, 117, 120], "start_offset_sampl": [2, 14, 22, 30, 109], "stop_offset_sampl": [2, 14, 22, 30, 109, 138], "none": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 18, 19, 20, 22, 26, 27, 28, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 102, 104, 105, 107, 108, 109, 110, 111, 112, 113, 115, 117, 118, 119, 120, 121, 123, 124, 125, 130, 132, 138], "window_size_sampl": [2, 5, 8, 9, 10, 11, 12, 14, 17, 19, 22, 26, 30, 76, 77, 78, 109, 110, 111], "window_stride_sampl": [2, 5, 9, 10, 11, 12, 14, 17, 19, 22, 26, 30, 76, 77, 78, 109, 110], "drop_last_window": [2, 12, 14, 17, 19, 22, 26, 30, 76, 77, 78, 109, 110], "targets_from": [2, 75, 109], "last_target_onli": [2, 8, 75, 109, 111], "preload": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 21, 22, 26, 27, 28, 29, 30, 72, 73, 74, 78, 79, 108, 109, 110, 111, 115, 138], "thumb": [2, 8, 26], "": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 21, 22, 29, 30, 37, 39, 41, 44, 45, 46, 47, 54, 57, 58, 61, 65, 66, 67, 69, 70, 71, 72, 73, 74, 81, 87, 88, 89, 90, 95, 97, 100, 103, 104, 106, 108, 117, 118, 122, 125, 126], "consid": [2, 4, 28, 45, 46, 47, 65, 117, 125], "well": [2, 5, 8, 12, 26, 27, 28, 78, 109, 110, 134, 138], "encourag": [2, 8, 24, 26, 27], "find": [2, 4, 8, 29], "wai": [2, 5, 8, 16, 21, 24, 28, 96, 135, 137], "target_transform": [2, 8, 9, 10, 68, 138], "suppli": [2, 3, 5, 8, 9, 10, 11, 26, 27, 28], "eegclassifi": [2, 5, 9, 10, 11, 26, 27, 28, 29, 138], "croppedloss": [2, 26, 30], "criterion": [2, 3, 4, 5, 8, 9, 10, 11, 26, 27, 28, 29, 30, 65, 117], "criterion__loss_funct": [2, 26, 30], "loss": [2, 5, 8, 9, 10, 11, 14, 26, 27, 30, 65, 117, 122, 126, 127], "mean": [2, 3, 4, 8, 12, 14, 16, 26, 28, 29, 30, 70, 82, 90, 93, 108, 112, 113, 117, 133], "default": [2, 8, 12, 26, 27, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 65, 66, 72, 73, 74, 75, 78, 81, 84, 86, 87, 88, 102, 103, 104, 105, 107, 108, 110, 117, 125, 130, 138], "found": [2, 8, 10, 12, 16, 18, 19, 20, 21, 26, 27, 28, 29, 66, 108, 109, 110], "motor": [2, 4, 8, 26, 27, 67, 70, 81, 85, 88, 138], "strongli": [2, 8, 26, 27, 86, 87, 88], "hyperparamet": [2, 5, 8, 9, 10, 11, 14, 24, 25, 26, 27, 31, 43, 65, 68, 71, 93, 106, 110, 113, 115, 117, 130, 138], "optim": [2, 3, 4, 5, 8, 9, 10, 11, 14, 26, 27, 28, 29, 30, 65, 70, 117], "cross": [2, 8, 16, 26, 27, 67], "skorch": [2, 3, 4, 5, 8, 9, 10, 11, 17, 26, 27, 28, 29, 30, 65, 76, 77, 78, 117, 138], "callback": [2, 3, 4, 5, 8, 9, 10, 11, 26, 27, 28, 29, 30, 65, 117, 125], "lrschedul": [2, 3, 4, 8, 26, 27, 28, 29, 30], "helper": [2, 3, 4, 5, 8, 9, 10, 11, 26, 27, 28, 29, 30], "predefined_split": [2, 3, 5, 8, 9, 10, 11, 26, 27, 28, 30], "eegregressor": [2, 8, 30, 138], "croppedtimeseriesepochscor": 2, "timeseriesloss": 2, "valu": [2, 4, 5, 8, 9, 10, 11, 12, 26, 27, 28, 29, 30, 40, 43, 60, 65, 68, 69, 75, 78, 88, 98, 104, 105, 107, 108, 109, 110, 117, 126, 127, 128, 138], "good": [2, 8, 26, 27], "mi": [2, 8], "lr": [2, 3, 4, 5, 8, 9, 10, 11, 26, 27, 28, 29, 30, 65, 117], "0625": [2, 3, 4, 8, 26, 27, 28], "01": [2, 3, 4, 8, 12, 13, 23, 26, 27, 28, 65, 86, 87, 117], "weight_decai": [2, 3, 4, 8, 26, 27, 28], "batch_siz": [2, 3, 4, 5, 8, 9, 10, 11, 14, 22, 26, 27, 28, 29, 30, 34, 43, 44, 52, 60, 61, 65, 83, 84, 92, 94, 95, 96, 97, 98, 99, 101, 117, 122, 126, 128, 131], "27": [2, 4, 9, 70], "64": [2, 3, 4, 5, 6, 8, 10, 11, 14, 17, 19, 26, 27, 28, 81, 90, 95], "n_epoch": [2, 3, 4, 5, 8, 9, 10, 11, 14, 26, 27, 28, 29, 30], "8": [2, 3, 4, 5, 8, 9, 10, 11, 13, 14, 17, 18, 19, 20, 21, 23, 26, 27, 28, 29, 30, 81, 84, 86, 87, 89, 90, 95, 114, 135], "regressor": [2, 8, 138], "aggregate_predict": [2, 65, 117], "mse_loss": [2, 30], "adamw": [2, 3, 4, 8, 26, 27, 28, 29, 30], "train_split": [2, 3, 4, 5, 8, 9, 10, 11, 26, 27, 28, 29, 30, 65, 117], "optimizer__lr": [2, 3, 4, 5, 8, 9, 10, 11, 26, 27, 28, 29, 30, 65, 117], "optimizer__weight_decai": [2, 3, 4, 8, 26, 27, 28, 30], "iterator_train__shuffl": [2, 5, 9, 10, 11, 26, 30, 65, 117], "lr_schedul": [2, 3, 4, 8, 26, 27, 28, 29, 30], "cosineannealinglr": [2, 3, 4, 8, 26, 27, 28, 29, 30], "t_max": [2, 3, 4, 8, 26, 27, 28, 29, 30], "r2_train": 2, "metric": [2, 5, 9, 10, 11, 26, 27, 132], "r2_score": 2, "lower_is_bett": [2, 5, 8, 9, 10, 11, 123, 124, 125], "on_train": [2, 5, 8, 9, 10, 11, 123, 124], "r2_valid": 2, "verbos": [2, 3, 4, 8, 28, 29, 65, 66, 102, 104, 105, 107, 108, 109, 110, 111, 117, 138], "specifi": [2, 3, 5, 8, 9, 10, 11, 12, 18, 21, 22, 26, 27, 28, 65, 66, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 104, 108, 115, 117], "y": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 20, 22, 26, 27, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 76, 77, 78, 83, 84, 88, 107, 117, 125], "alreadi": [2, 3, 5, 8, 9, 10, 11, 14, 19, 26, 27, 28, 68, 69, 75, 115, 133, 135], "fit": [2, 3, 5, 8, 9, 10, 11, 14, 24, 26, 27, 28, 29, 30, 65, 110, 117], "train_loss": [2, 3, 5, 8, 9, 10, 11, 26, 27, 28, 29, 30, 65, 117], "valid_loss": [2, 3, 5, 8, 9, 10, 11, 26, 27, 28, 29, 30], "dur": [2, 3, 5, 8, 9, 10, 11, 26, 27, 28, 29, 30], "16": [2, 5, 11, 13, 28, 29, 81, 90, 95, 104], "9036": 2, "3098": 2, "5378": 2, "20": [2, 5, 9, 10, 11, 12, 23, 27, 28, 30, 31, 37, 44, 45, 46, 47, 61, 94, 108], "7346": 2, "0006": [2, 3, 8, 26, 27, 28], "8247": 2, "13": [2, 5, 9, 17, 19, 70, 72, 104, 114], "7536": 2, "7": [2, 3, 4, 5, 6, 9, 10, 11, 16, 17, 18, 19, 20, 21, 23, 26, 27, 28, 30, 31, 32, 70, 81, 88, 94], "1257": 2, "9596": 2, "18": [2, 4, 5, 6, 11, 12, 88], "0738": 2, "7122": 2, "12": [2, 4, 5, 10, 11, 17, 18, 19, 28, 29, 67, 100, 132], "7769": 2, "7413": 2, "6787": 2, "17": [2, 5, 11, 28, 98], "1885": 2, "0005": [2, 3, 22, 27, 30], "7058": 2, "7973": 2, "3917": 2, "5638": 2, "4416": 2, "0004": 2, "7063": 2, "2718": 2, "1846": 2, "4237": 2, "0097": 2, "0002": [2, 3, 27], "7082": 2, "5742": 2, "9208": 2, "3549": 2, "15": [2, 5, 9, 10, 11, 12, 14, 26, 28, 44, 45, 46, 47, 84, 93, 98, 104, 107], "4435": 2, "0001": [2, 91, 113], "6841": 2, "9": [2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 23, 26, 27, 28, 31, 67, 70, 86, 88, 100, 108], "8235": 2, "6185": 2, "3132": 2, "14": [2, 5, 6, 8, 10, 11, 13, 17, 19, 26, 27, 70, 104, 130], "7799": 2, "0000": [2, 3, 8, 26, 27, 28, 29, 30], "6866": 2, "0649": 2, "3051": 2, "3316": 2, "0883": 2, "6945": 2, "def": [2, 3, 5, 8, 9, 10, 11, 12, 14, 16, 28, 30], "pad_and_select_predict": 2, "pred": [2, 8, 122, 126, 127, 129], "pad": [2, 9, 10, 11, 26, 95, 104, 107, 138], "constant": 2, "constant_valu": 2, "mask": [2, 5, 49, 63, 126], "isnan": 2, "squeez": [2, 3, 4, 26, 27, 28, 29], "return": [2, 5, 8, 9, 10, 11, 12, 14, 17, 19, 21, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 69, 73, 74, 75, 76, 77, 78, 79, 83, 84, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 125, 127, 128, 129, 132, 138], "t": [2, 4, 5, 11, 16, 17, 18, 19, 26, 27, 30, 39, 57, 65, 66, 67, 82, 92, 93, 100, 102, 112, 113, 117, 130, 132], "preds_train": [2, 8], "y_train": [2, 8, 9, 10, 11, 28], "predict_tri": [2, 65, 117, 138], "return_target": [2, 65, 117, 128], "preds_valid": [2, 8], "y_valid": [2, 8], "preds_test": [2, 8], "y_test": [2, 8, 28], "adn": [2, 8], "decreas": [2, 8, 11], "nede": [2, 8], "doe": [2, 8, 14, 16, 18, 26, 28, 42, 65, 81, 110, 117, 133], "divers": [2, 4, 8], "caus": [2, 8], "overfit": [2, 8, 9, 10, 11, 28], "better": [2, 5, 8, 10, 14, 16, 26, 27, 28, 84, 125], "improv": [2, 3, 5, 8, 9, 10, 11, 104, 133, 138], "matplotlib": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 26, 27, 28, 29, 30, 132], "pyplot": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 26, 27, 28, 29, 30], "plt": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 26, 27, 28, 29, 30], "panda": [2, 4, 5, 8, 9, 10, 11, 14, 16, 20, 21, 26, 27, 28, 29, 30, 65, 68, 69, 75, 78, 117], "pd": [2, 4, 5, 8, 9, 10, 11, 14, 16, 26, 27, 28, 29, 30, 68, 69, 75, 118, 119, 120, 121], "line": [2, 8, 14, 26, 27, 30, 67, 133], "line2d": [2, 8, 26, 27], "style": [2, 5, 8, 12, 26, 27, 30, 45, 46, 47, 98], "seaborn": [2, 5, 8, 12, 14, 26, 27, 29, 30], "fig": [2, 4, 5, 8, 9, 10, 11, 16, 26, 27, 28, 29, 30, 132], "ax": [2, 3, 4, 5, 8, 9, 10, 11, 16, 26, 27, 28, 29, 30], "subplot": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 26, 27, 28, 29, 30], "figsiz": [2, 5, 8, 9, 10, 11, 12, 16, 26, 27, 28, 30, 132], "set_titl": [2, 8, 16, 28, 30], "arang": [2, 8, 28], "label": [2, 3, 5, 8, 9, 10, 11, 12, 16, 22, 26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 99, 117, 120, 122, 126, 128, 132], "set_ylabel": [2, 5, 8, 9, 10, 11, 16, 26, 27, 30], "legend": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 26, 27, 28, 30], "set_xlabel": [2, 4, 5, 8, 9, 10, 11, 16, 26, 27, 30], "tight_layout": [2, 4, 5, 8, 9, 10, 11, 26, 27, 28, 29], "advanced_train": [2, 5], "plot_bcic_iv_4_ecog_crop": [2, 6], "370": 2, "matplotlibdeprecationwarn": [2, 5, 8, 12, 26, 27, 30], "ship": [2, 5, 8, 12, 26, 27, 30], "sinc": [2, 5, 8, 9, 10, 11, 12, 22, 26, 27, 29, 30, 65, 81, 84, 88, 117, 133], "longer": [2, 5, 8, 12, 26, 27, 28, 30, 65, 117], "remain": [2, 5, 8, 12, 16, 26, 27, 28, 30], "v0_8": [2, 5, 8, 12, 26, 27, 30], "altern": [2, 5, 8, 12, 26, 27, 30, 65, 117], "api": [2, 5, 8, 12, 26, 27, 30, 137], "instead": [2, 3, 4, 5, 8, 9, 12, 22, 26, 27, 28, 29, 30, 65, 81, 84, 86, 88, 108, 117, 138], "correl": [2, 8, 28], "coeffici": [2, 8, 43, 60, 127], "corr_coeff": [2, 8], "dim": [2, 8], "rang": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 26, 27, 28, 30, 39, 57, 66, 114, 132], "append": [2, 8, 12, 14, 16, 26, 27, 30, 65, 104, 117], "corrcoef": [2, 8], "print": [2, 4, 5, 8, 9, 10, 11, 14, 17, 20, 21, 22, 26, 27, 28, 29, 65, 117, 133], "dimens": [2, 5, 8, 49, 63, 81, 84, 96, 100, 107, 138], "round": [2, 8], "histori": [2, 5, 8, 9, 10, 11, 26, 27, 30, 65, 117], "throughout": [2, 8, 9, 10, 11, 27, 28], "accuraci": [2, 3, 4, 5, 8, 9, 10, 11, 26, 27, 28, 29, 125], "curv": [2, 8, 27], "results_column": [2, 8, 26, 27], "df": [2, 5, 8, 9, 10, 11, 12, 16, 26, 27], "datafram": [2, 4, 5, 8, 9, 10, 11, 14, 16, 20, 21, 22, 26, 27, 28, 29, 65, 68, 117, 118, 119, 120, 121], "index": [2, 5, 8, 9, 10, 11, 17, 26, 27, 29, 30, 69, 102, 112, 113, 118, 119, 129, 135], "ax1": [2, 5, 8, 9, 10, 11, 26, 27], "loc": [2, 8, 12, 26, 27, 28], "marker": [2, 5, 8, 16, 26, 27, 28], "o": [2, 4, 5, 8, 16, 26, 27, 34, 35, 36, 37, 41, 49, 52, 53, 54, 55, 58, 63, 120], "color": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 26, 27, 28, 132], "tab": [2, 5, 8, 16, 26, 27], "blue": [2, 5, 8, 16, 26, 27], "fontsiz": [2, 8, 12, 26, 27, 28], "tick_param": [2, 5, 8, 12, 26, 27], "axi": [2, 3, 5, 8, 26, 27, 30, 44, 45, 46, 47, 48, 50, 61, 62, 64, 107, 129], "labelcolor": [2, 5, 8, 26, 27], "labels": [2, 8, 12, 26, 27], "ax2": [2, 5, 8, 9, 10, 11, 26, 27], "twinx": [2, 5, 8, 26, 27], "instanti": [2, 3, 4, 8, 14, 26, 27, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 53, 55, 58, 65, 71, 117, 138], "share": [2, 8, 14, 26, 27], "red": [2, 8, 26, 27], "r2": [2, 8], "score": [2, 4, 5, 9, 10, 11, 28, 29, 65, 83, 94, 117, 123, 124, 125, 138], "where": [2, 4, 8, 9, 10, 22, 26, 27, 28, 34, 43, 44, 49, 52, 60, 61, 63, 65, 66, 68, 76, 117, 128, 130, 138], "been": [2, 3, 4, 8, 10, 14, 16, 26, 27, 85, 86, 87, 88, 89, 90, 127, 133, 137, 138], "handl": [2, 3, 4, 8, 26, 27, 29, 108], "black": [2, 8, 12, 26, 27, 67, 70, 132], "linewidth": [2, 8, 26, 27], "linestyl": [2, 8, 12, 26, 27], "h": [2, 4, 5, 8, 26, 27, 34, 37, 41, 49, 52, 54, 58, 63, 81, 83, 85, 120], "get_label": [2, 8, 26, 27, 28], "center": [2, 8, 9, 10, 34, 52], "right": [2, 4, 8, 12, 26, 27, 28, 37, 67, 70, 137], "total": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 67], "script": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 130], "minut": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 72], "234": [2, 6], "estim": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30], "usag": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 133, 138], "819": 2, "mb": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31], "python": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 32, 102, 130, 134, 135, 137, 138], "sourc": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135], "jupyt": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30], "notebook": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30], "ipynb": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30], "galleri": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30], "gener": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 65, 94, 97, 104, 117, 125, 132, 138], "sphinx": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30], "follow": [3, 4, 5, 9, 10, 11, 14, 28, 86, 87, 104, 107, 110, 135, 136, 137, 138], "wise": [3, 4, 5, 9, 10, 11], "also": [3, 4, 5, 9, 10, 11, 12, 14, 18, 21, 27, 29, 32, 65, 75, 84, 86, 87, 96, 104, 105, 107, 117, 128, 133, 136, 137], "illustr": 3, "effect": 3, "simon": [3, 20, 138], "brandt": [3, 20, 138], "simonbrandt": [3, 20], "protonmail": [3, 20], "c\u00e9dric": [3, 4], "rommel": [3, 4, 138], "cedric": [3, 4, 138], "inria": [3, 4, 11], "fr": [3, 4, 11], "moabbdataset": [3, 4, 18, 20, 21, 26, 27, 28, 29, 138], "dataset_nam": [3, 4, 18, 20, 21, 26, 27, 28, 29, 71], "bnci2014001": [3, 4, 18, 20, 21, 26, 27, 28, 29], "multipli": [3, 4, 5, 9, 10, 12, 26, 27, 28, 29, 81, 86, 87], "cut": [3, 4, 19, 34, 52, 76, 104], "38": [3, 4, 26, 27, 28, 29, 30], "factor": [3, 4, 5, 9, 10, 12, 26, 27, 28, 29, 96, 98, 100, 107, 116], "meg": [3, 4, 20, 26, 27, 28, 29, 32, 104, 105, 134], "stim": [3, 4, 20, 26, 27, 28, 29], "keep": [3, 4, 10, 11, 16, 26, 27, 28, 29, 70, 72], "sensor": [3, 4, 26, 27, 28, 29, 37, 44, 45, 46, 47, 61, 70], "moabb": [3, 4, 15, 18, 21, 23, 24, 26, 28, 29, 67, 68, 70, 71, 106, 115, 136, 137, 138], "0x7f15f0bebbb0": 3, "create_windows_from_ev": [3, 4, 5, 9, 10, 11, 18, 21, 26, 27, 28, 29, 138], "trial_start_offset_second": [3, 4, 26, 27, 28, 29], "start": [3, 4, 12, 14, 16, 22, 26, 27, 28, 29, 49, 63, 65, 78, 102, 107, 109, 110, 117, 135], "offset": [3, 4, 16, 18, 26, 27, 28, 29, 68, 78, 109, 110], "trial_start_offset_sampl": [3, 4, 5, 9, 10, 11, 18, 19, 21, 26, 27, 28, 29, 78, 110], "int": [3, 4, 5, 9, 10, 14, 16, 26, 27, 28, 29, 30, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 102, 104, 105, 107, 108, 109, 110, 112, 113, 115, 117, 118, 119, 120, 121, 128, 130, 132], "windows_dataset": [3, 4, 5, 8, 9, 10, 11, 17, 18, 19, 26, 27, 28, 29, 30, 76, 77, 78, 109, 110], "trial_stop_offset_sampl": [3, 4, 5, 9, 10, 11, 18, 19, 21, 26, 27, 28, 29, 30, 78, 110, 138], "session_t": [3, 4, 18, 20, 21, 26, 27, 28, 29, 119], "session_": [3, 4, 20, 21, 26, 27, 28, 29], "callabl": [3, 38, 51, 65, 68, 69, 75, 82, 93, 106, 117, 125], "custom": [3, 4, 15, 23, 24, 33, 68, 76], "loader": [3, 4, 5, 14], "call": [3, 16, 26, 28, 65, 68, 75, 78, 81, 84, 88, 102, 106, 109, 110, 117, 123, 124, 125], "demonstr": [3, 4, 7, 22, 24], "below": [3, 5, 32, 34, 133, 136, 138], "illutr": 3, "purpos": [3, 14, 16], "chose": 3, "frequencyshift": 3, "randomli": [3, 5, 34, 35, 36, 41, 49, 53, 55, 58, 121], "translat": 3, "within": [3, 4, 70, 81, 84, 88, 98, 120, 138], "given": [3, 4, 5, 21, 35, 36, 37, 39, 48, 50, 51, 65, 66, 79, 104, 105, 108, 116, 117, 128, 138], "probabl": [3, 4, 29, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 65, 81, 82, 85, 93, 97, 98, 117], "actual": [3, 5, 12, 14, 22], "modifi": [3, 5, 10, 12, 39, 57, 65, 102, 103, 105, 106, 114, 117, 130], "max_delta_freq": [3, 40], "shift": [3, 28, 40, 56], "next": [3, 4, 5, 9, 10, 11, 12, 14, 16, 18, 22], "let": [3, 4, 22], "u": [3, 5, 7, 13, 24, 29, 68, 72, 100, 106, 110, 115, 118, 119, 121, 130, 132, 137, 138], "result": [3, 12, 14, 16, 28, 65, 78, 107, 109, 110, 117, 125, 130, 133], "origin": [3, 11, 16, 17, 18, 19, 21, 28, 43, 44, 45, 46, 47, 49, 60, 61, 63, 68, 78, 84, 85, 86, 87, 88, 89, 90, 110, 114], "get_data": [3, 17], "allow": [3, 5, 14, 28, 29, 38, 65, 78, 82, 86, 87, 93, 109, 110, 117, 138], "fix": [3, 37, 54, 133, 138], "x_tr": 3, "_": [3, 5, 14, 16, 17, 28, 30, 138], "as_tensor": 3, "float": [3, 5, 30, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 65, 72, 76, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 102, 104, 107, 110, 112, 113, 116, 117, 127, 132], "psd": 3, "plot": [3, 5, 12, 14, 16, 28, 30, 138], "plot_psd": 3, "freq": 3, "time_frequ": 3, "psd_array_multitap": 3, "fmin": 3, "fmax": 3, "100": [3, 4, 5, 8, 9, 10, 11, 12, 14, 20, 26, 27, 28, 29, 30, 34, 49, 67, 82, 100, 107], "log10": 3, "psds_mean": 3, "k": [3, 5, 9, 10, 11, 26, 27, 30, 34, 41, 44, 45, 46, 47, 49, 52, 58, 61, 63, 82, 88, 92, 93, 132], "r": [3, 5, 9, 10, 11, 26, 27, 30, 34, 41, 49, 52, 58, 63, 82, 86, 87, 89, 90, 92, 93, 132], "titl": [3, 12, 28, 29, 32], "multitap": 3, "gradiomet": 3, "xlabel": [3, 12, 28, 29], "ylabel": [3, 12, 28, 29], "power": [3, 5, 29, 104, 107], "spectral": 3, "densiti": 3, "db": [3, 16, 108], "them": [3, 4, 5, 12, 14, 16, 17, 19, 26, 28, 65, 68, 81, 82, 83, 84, 88, 91, 93, 94, 95, 96, 97, 100, 117, 137], "try": [3, 4, 12, 18, 22, 24, 29, 133, 137], "its": [3, 9, 10, 16, 20, 21, 30, 65, 68, 106, 117], "comput": [3, 4, 5, 9, 10, 11, 18, 22, 32, 45, 46, 47, 65, 67, 78, 81, 84, 86, 87, 88, 89, 90, 94, 108, 110, 112, 113, 117, 122, 123, 124, 126, 130, 133, 137, 138], "list": [3, 5, 11, 14, 16, 21, 22, 26, 27, 28, 30, 32, 33, 37, 38, 45, 46, 47, 54, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 103, 104, 105, 108, 109, 110, 114, 115, 117, 127, 129, 132, 138], "n_channel": [3, 4, 5, 9, 10, 14, 17, 19, 22, 28, 30, 43, 44, 60, 61, 76, 81, 83, 84, 92, 94, 95, 96, 97, 98, 99, 112, 113, 116], "auto": [3, 4, 8, 14, 17, 19, 27, 28, 29, 65, 82, 89, 90, 93, 104, 107, 108, 117, 138], "21": [3, 4, 5, 6, 8, 9, 26, 27, 28, 29, 30, 108], "depreci": [3, 4, 8, 26, 27, 28, 29, 30], "n_time": [3, 4, 5, 8, 9, 10, 11, 12, 14, 17, 19, 26, 27, 28, 29, 30, 43, 60, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 112, 113, 116, 122, 126], "order": [3, 4, 12, 21, 37, 45, 46, 47, 54, 65, 70, 73, 74, 104, 108, 114, 117, 121, 138], "pass": [3, 4, 9, 10, 16, 22, 26, 27, 28, 29, 33, 38, 51, 65, 71, 81, 83, 84, 88, 92, 94, 95, 96, 97, 98, 102, 104, 105, 107, 108, 117, 122, 125, 126, 138], "batch": [3, 4, 5, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 82, 83, 92, 93, 94, 95, 96, 97, 98, 101, 117, 124, 128, 138], "augmenteddataload": [3, 4, 138], "signflip": 3, "freq_shift": 3, "sign_flip": 3, "iter": [3, 4, 5, 20, 22, 28, 43, 65, 103, 117, 128], "argument": [3, 4, 16, 28, 33, 35, 36, 37, 39, 48, 50, 51, 65, 71, 102, 104, 105, 106, 107, 108, 114, 117, 125, 138], "clf": [3, 4, 5, 9, 10, 11, 26, 27, 28, 29], "iterator_train": [3, 4, 65, 117], "tell": [3, 4, 133], "dataload": [3, 4, 5, 14, 33, 65, 117, 128], "iterator_train__transform": [3, 4], "nllloss": [3, 4, 14, 27, 28, 29, 65, 100], "train_accuraci": [3, 26, 27, 28, 29], "valid_accuraci": [3, 26, 27, 28, 29], "2535": [3, 27, 28], "6458": 3, "1251": [3, 8, 22], "7604": 3, "2639": [3, 28], "3297": 3, "2500": [3, 22, 26, 27, 28, 119], "7606": 3, "4922": [3, 5], "1539": 3, "1230": 3, "4955": 3, "2708": [3, 9], "1567": 3, "2554": 3, "5041": [3, 22], "classifi": [3, 4, 5, 9, 10, 26, 27, 138], "initi": [3, 5, 9, 10, 26, 27, 28, 29, 65, 84, 86, 87, 100, 117], "var_nam": [3, 4, 26, 27, 28], "depth": [3, 4, 11, 26, 27, 28, 81, 86, 87, 100], "idx": [3, 4, 9, 10, 11, 26, 27, 28, 29], "param": [3, 4, 5, 26, 27, 28, 29, 34, 35, 36, 37, 39, 40, 41, 43, 44, 49], "kernel": [3, 4, 11, 26, 27, 28, 44, 45, 46, 47, 61, 81, 87, 88, 94, 95, 97, 100], "22": [3, 4, 5, 11, 17, 19, 26, 27, 28, 67], "1125": [3, 4, 27, 28], "ensure4d": [3, 4, 26, 27, 28], "ensuredim": [3, 4, 26, 27, 28], "rearrang": [3, 4, 26, 27, 28, 138], "dimshuffl": [3, 4, 26, 27, 28], "combinedconv": [3, 4, 26, 27, 28, 82, 93], "conv_time_spat": [3, 4, 26, 27, 28], "40": [3, 4, 5, 6, 9, 14, 17, 18, 26, 27, 28, 30, 84, 93], "1101": [3, 4, 27, 28], "36": [3, 4, 9, 26, 27, 28], "240": [3, 4, 17, 26, 27, 28], "batchnorm2d": [3, 4, 26, 27, 28, 82, 86, 87, 93], "bnorm": [3, 4, 26, 27, 28], "80": [3, 4, 10, 19, 26, 27, 28, 70, 96], "express": [3, 4, 26, 27, 28], "conv_nonlin_exp": [3, 4, 26, 27, 28], "avgpool2d": [3, 4, 26, 27, 28], "pool": [3, 4, 26, 27, 28, 81, 82, 84, 86, 87, 93, 95, 98, 100], "69": [3, 4, 27, 28], "75": [3, 4, 9, 14, 16, 26, 27, 28, 84, 93, 98], "pool_nonlin_exp": [3, 4, 26, 27, 28], "dropout": [3, 4, 5, 9, 10, 26, 27, 28, 29, 81, 82, 84, 85, 86, 87, 93, 94, 95, 96, 97, 98], "drop": [3, 4, 14, 16, 17, 18, 19, 21, 26, 27, 28, 35, 53, 78, 103, 110, 114], "conv2d": [3, 4, 9, 26, 27, 28], "conv_classifi": [3, 4, 26, 27, 28], "044": [3, 4, 27, 28], "logsoftmax": [3, 4, 26, 27, 28], "47": [3, 4, 5, 9, 10, 11, 27, 28], "364": [3, 4, 27, 28], "trainabl": [3, 4, 26, 27, 28], "non": [3, 4, 11, 16, 22, 26, 27, 28, 65, 70, 82, 93, 104, 117], "mult": [3, 4, 26, 27, 28], "add": [3, 4, 5, 26, 27, 28, 40, 41, 56, 58, 65, 68, 69, 75, 97, 104, 117, 125, 138], "m": [3, 4, 5, 9, 10, 11, 12, 16, 18, 22, 26, 27, 28, 29, 30, 34, 37, 41, 44, 45, 46, 47, 49, 52, 54, 58, 61, 63, 81, 82, 89, 90, 92, 93, 95, 100, 104, 118, 132, 137], "forward": [3, 4, 5, 26, 27, 28, 38, 51, 65, 81, 83, 84, 88, 92, 94, 95, 96, 97, 98, 99, 100, 104, 106, 108, 117, 122, 126, 128], "backward": [3, 4, 14, 26, 27, 28, 104, 138], "35": [3, 4, 5, 11, 27, 28, 29, 30], "04": [3, 4, 11, 27, 28], "50": [3, 4, 9, 10, 14, 16, 19, 23, 27, 28, 67, 82], "would": [3, 28, 65, 82, 93, 117], "equival": 3, "although": [3, 65, 81, 84, 88, 117], "composit": [3, 38], "composed_transform": 3, "possibl": [3, 4, 11, 12, 16, 18, 65, 67, 109, 117, 130, 133, 138], "most": [3, 9, 10, 11, 14, 120, 133, 136], "windowsdataset": [3, 18, 68, 76, 77, 78, 79, 109, 110, 115, 138], "through": [3, 4, 11, 12, 14, 16, 20, 22, 26, 27, 29, 44, 61, 69, 75, 83, 94, 95, 96, 138], "commonli": 3, "done": [3, 11, 16, 18, 81, 109, 110], "advis": [3, 29, 39, 57, 117], "abov": [3, 14, 16, 22, 26, 28, 133, 135], "compat": [3, 14, 17, 19, 29, 65, 76, 117, 138], "264": [3, 6], "plot_data_augment": [3, 6], "inde": 4, "known": [4, 65], "often": [4, 9, 10, 11, 27, 29], "depend": [4, 5, 9, 10, 11, 12, 14, 16, 32, 65, 70, 96, 117, 128, 135, 137, 138], "task": [4, 9, 10, 11, 29, 39, 57, 67, 69, 120], "phenomenon": 4, "studi": [4, 5, 7, 24], "methodologi": 4, "propos": [4, 35, 36, 39, 49, 53, 55, 57, 63, 88, 138], "openli": [4, 5, 9, 10, 11], "could": [4, 5, 14, 28, 137], "brain": [4, 24, 25, 26, 30, 31, 32, 68, 71, 82, 86, 87, 89, 90, 92, 93, 106, 110, 113, 115, 130, 132, 134], "recent": [4, 133], "shown": [4, 5, 9, 11, 16, 28, 67, 70], "artifici": 4, "cast": [4, 38], "paradigm": [4, 5, 65, 67, 117, 128], "present": [4, 12, 28, 67, 70, 103], "both": [4, 5, 16, 22, 29, 67, 70, 94, 95, 100], "pretext": 4, "approach": [4, 5, 9, 10, 11, 16, 24, 29, 96, 118], "demand": 4, "intens": 4, "comparison": [4, 14, 26, 27], "strength": 4, "context": [4, 5, 32, 96, 120], "bruno": [4, 138], "aristimunha": [4, 138], "ufabc": 4, "br": 4, "bnci": [4, 67], "websit": 4, "There": [4, 24, 82, 93, 135, 137], "subject": [4, 5, 9, 10, 11, 12, 14, 18, 19, 20, 21, 22, 34, 41, 49, 52, 58, 63, 66, 67, 69, 70, 71, 72, 119], "electrod": [4, 20, 67, 70, 108], "while": [4, 5, 14, 28, 70, 81, 84, 88, 94, 129], "do": [4, 12, 14, 26, 28, 65, 76, 77, 78, 100, 109, 110, 117, 121, 130, 137], "imageri": [4, 67, 81, 85, 88, 138], "144": [4, 67], "librairi": 4, "focu": 4, "relat": [4, 5, 32, 70, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100], "activ": [4, 16, 18, 19, 65, 70, 81, 82, 86, 87, 88], "0x7f15e93aa6e0": 4, "out": [4, 8, 9, 10, 29, 34, 49, 52, 63, 65, 67, 117, 118, 126, 133], "provind": 4, "slicedataset": [4, 28, 29], "eval_set": [4, 29], "three": [4, 16, 28, 65, 66, 84, 86, 87, 117, 133], "categor": [4, 118], "aggreg": [4, 84], "sever": [4, 12, 18, 24, 109, 110, 134], "being": [4, 10, 14, 65, 70, 117], "spatial": [4, 39, 57, 82, 93, 100, 138], "paper": [4, 11, 32, 44, 45, 46, 47, 61, 81, 84, 85, 86, 87, 88, 89, 90, 96, 138], "ftsurrog": 4, "smoothtimemask": 4, "channelsdropout": 4, "respect": [4, 5, 29], "adjust": [4, 28, 84], "two": [4, 5, 9, 10, 11, 12, 14, 16, 18, 26, 28, 43, 49, 60, 67, 70, 72, 88, 94, 104, 107, 108, 120, 121, 127], "insid": [4, 9, 29, 86, 87, 137], "rememb": [4, 28], "\u03c6max": 4, "2\u03c0": 4, "p_drop": [4, 35, 53], "linspac": [4, 12], "transforms_freq": 4, "phase_noise_magnitud": [4, 39, 57], "phase_freq": 4, "random_st": [4, 5, 8, 29, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 118, 119, 120, 121], "transforms_tim": 4, "mask_len_sampl": [4, 49, 63], "transforms_spati": 4, "prob": 4, "gridsearchcv": [4, 28, 29, 125, 138], "control": [4, 5, 10, 28, 65, 94, 102, 104, 105, 107, 108, 109, 110, 115, 117, 138], "over": [4, 10, 16, 28, 30, 39, 44, 45, 46, 47, 57, 61, 65, 117, 138], "framework": 4, "necessari": [4, 65, 108, 117], "slicedata": 4, "mandatori": 4, "eval": [4, 29, 138], "train_x": [4, 29], "train_i": [4, 29], "kfold": [4, 28, 29], "model_select": [4, 5, 8, 28, 29], "cv": [4, 28, 29], "n_split": [4, 28, 29], "shuffl": [4, 8, 14, 28, 29, 36, 43, 55, 65, 117], "fit_param": [4, 29], "param_grid": [4, 28, 29], "return_train_scor": [4, 28, 29], "refit": [4, 28, 29], "error_scor": [4, 28, 29], "rais": [4, 14, 28, 29, 30, 65, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 103, 110, 115, 138], "fold": [4, 29], "candid": [4, 28, 29], "x27": 4, "lt": 4, "gt": 4, "uniniti": [4, 65, 117], "ou": 4, "environ": [4, 66, 130], "rerun": 4, "cell": 4, "represent": [4, 34, 41, 43, 49, 52, 58, 60, 63, 138], "trust": 4, "On": [4, 26, 29, 30, 69, 75], "github": [4, 29, 133, 135, 138], "unabl": 4, "render": 4, "page": [4, 28, 32, 133, 138], "nbviewer": 4, "gridsearchcvgridsearchcv": 4, "analysi": [4, 5, 9, 10, 11, 32, 134], "wa": [4, 5, 9, 10, 11, 27, 28, 29, 65, 67, 70, 82, 84, 93, 96, 117, 118, 138], "search_result": [4, 28, 29], "cv_results_": [4, 28, 29], "best_run": [4, 28, 29], "rank_test_scor": [4, 28, 29], "best_aug": 4, "validation_scor": 4, "around": [4, 10, 44, 45, 46, 47, 61, 110, 118], "mean_test_scor": [4, 29], "training_scor": 4, "mean_train_scor": [4, 29], "report_messag": 4, "gave": [4, 29], "format": [4, 14, 17, 19, 28, 76, 77, 78], "eval_x": [4, 29], "eval_i": [4, 29], "f": [4, 5, 10, 11, 12, 14, 16, 17, 18, 22, 26, 27, 28, 29, 30, 41, 58, 82, 86, 87, 92, 93, 98, 132], "2f": [4, 28, 29], "accuracyof": 4, "08": [4, 9, 31], "26": [4, 5, 9, 10, 11, 20, 95], "39": [4, 22, 26, 31], "bar": 4, "param_iterator_train__transform": 4, "yerr": 4, "std_train_scor": 4, "rot": 4, "45": [4, 9, 13, 16], "c0": 4, "c1": 4, "c2": 4, "strategi": [4, 25, 28], "set_ylim": [4, 26, 27], "32": [4, 5, 9, 10, 11, 26, 81, 89, 98], "c": [4, 5, 9, 10, 11, 20, 28, 39, 57, 83, 88, 89, 90, 100, 118, 133], "paillard": 4, "moreau": [4, 138], "gramfort": [4, 5, 9, 10, 32, 95, 120, 138], "2022": [4, 29, 81, 84, 85, 86, 87], "systemat": 4, "arxiv": [4, 5, 30, 34, 35, 36, 37, 39, 41, 43, 49, 52, 53, 54, 55, 57, 58, 60, 63, 89, 90, 97, 120, 127], "ab": [4, 5, 43, 60, 127], "2206": 4, "14483": 4, "banvil": [4, 5, 9, 14, 16, 20, 120, 138], "chehab": [4, 5, 11, 120, 138], "hyv\u00e4rinen": [4, 5, 120], "engemann": [4, 5, 32, 120, 138], "2021": [4, 10, 11, 86, 87, 88, 96, 100, 118], "uncov": [4, 5, 120], "structur": [4, 5, 16, 17, 19, 119, 120, 138], "clinic": [4, 5, 7, 24, 120], "journal": [4, 32, 88], "engin": [4, 5, 9, 10, 28, 44, 45, 46, 47, 61, 83, 84, 86, 87, 88, 95, 96], "046020": 4, "53": [4, 5, 6, 16, 22, 28, 31], "874": [4, 6], "68": [4, 5, 9], "plot_data_augmentation_search": [4, 6], "access": [5, 9, 10, 11, 12, 14, 85, 119, 135], "physionet": [5, 7, 13, 16, 24, 68, 72, 95, 96, 99, 100, 106, 110, 115, 116, 119, 121, 130, 132, 138], "ssl": 5, "leverag": [5, 96], "unlabel": 5, "design": [5, 16, 96, 104], "prior": 5, "understand": [5, 24, 28], "under": [5, 14, 66, 115, 137, 138], "e": [5, 9, 10, 11, 14, 16, 26, 27, 28, 29, 34, 37, 41, 49, 51, 52, 54, 58, 63, 65, 69, 72, 73, 74, 75, 78, 81, 83, 84, 86, 87, 88, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 109, 110, 114, 117, 121, 125, 132, 137, 138], "g": [5, 9, 10, 11, 14, 16, 27, 28, 34, 37, 39, 41, 49, 51, 52, 54, 57, 58, 65, 69, 72, 73, 74, 75, 78, 81, 84, 88, 95, 98, 99, 100, 102, 103, 104, 105, 106, 109, 110, 114, 117, 121, 125, 132, 138], "autocorrel": 5, "strutur": 5, "requir": [5, 11, 12, 14, 16, 17, 22, 51, 65, 70, 75, 117, 138], "anoth": [5, 21, 28, 120], "interest": [5, 12, 16, 18, 22], "onc": [5, 16, 28, 104, 109, 120, 137], "reus": [5, 9, 11], "featur": [5, 9, 10, 83, 84, 86, 87, 88, 94, 95, 96, 100, 133, 137, 138], "extractor": [5, 9, 10, 83, 94, 95, 96, 100], "weight": [5, 9, 10, 11, 29, 81, 132], "downstream": 5, "help": [5, 9, 10, 21, 108], "reduc": [5, 10, 14, 16, 72, 110], "quantiti": 5, "compar": [5, 14, 16, 22, 26, 28], "strictli": 5, "rp": 5, "simpl": [5, 12, 16], "whether": [5, 14, 35, 36, 37, 39, 44, 45, 46, 47, 48, 50, 51, 57, 61, 65, 68, 75, 76, 77, 78, 79, 82, 93, 97, 109, 114, 115, 117, 120, 125, 130, 133], "close": [5, 16, 18, 120, 133], "far": [5, 120], "apart": 5, "yield": [5, 14, 20, 67, 98, 133], "physiolog": [5, 9, 10, 11], "relev": [5, 32, 65, 117], "boost": 5, "classif": [5, 9, 10, 11, 26, 29, 34, 39, 41, 49, 52, 57, 58, 63, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97], "regim": 5, "hubert": [5, 9, 14, 16, 20, 138], "jbanvil": [5, 9, 14, 16, 20], "87": 5, "few": [5, 9, 10, 11, 14, 16, 138], "sleep_physionet": [5, 9, 10, 11], "sleepphysionet": [5, 9, 10, 11, 16, 138], "recording_id": [5, 9, 10, 11, 12, 14, 16, 22, 72, 73, 74], "crop_wake_min": [5, 9, 10, 11, 16, 72], "microvolt": [5, 9, 10], "lowpass": [5, 9, 10, 16], "don": [5, 11, 17, 19, 65, 117], "resampl": [5, 12, 14, 18, 20, 72, 104, 138], "0x7f15f0a287c0": 5, "As": [5, 16, 26, 28, 65, 117], "conveni": [5, 108], "later": [5, 12, 22, 69, 70, 73, 74, 82], "window_size_": [5, 9, 10, 11], "map": [5, 9, 10, 11, 12, 22, 28, 30, 32, 65, 78, 81, 82, 92, 93, 99, 109, 110, 117, 132], "merg": [5, 9, 10, 11, 138], "aasm": [5, 9, 10, 11], "w": [5, 9, 10, 11, 12, 26, 27], "z": [5, 9, 10, 30, 44, 47, 61, 97], "scale": [5, 9, 10, 11, 12, 16, 84, 86, 87, 88, 138], "standard_scal": [5, 9, 10], "channel_wis": [5, 9, 10, 11, 16], "0x7f15caf39030": 5, "new": [5, 9, 10, 11, 20, 37, 54, 65, 84, 102, 103, 104, 105, 107, 108, 117, 133, 137], "receiv": 5, "pair": [5, 120], "indic": [5, 9, 10, 21, 28, 30, 43, 60, 68, 104, 105, 108, 119, 120, 121, 138], "when": [5, 9, 10, 11, 14, 16, 22, 26, 28, 29, 32, 38, 39, 44, 45, 46, 47, 51, 57, 61, 65, 66, 71, 76, 77, 78, 81, 84, 100, 103, 104, 105, 108, 109, 110, 115, 117, 130, 133, 138], "train_test_split": [5, 8, 28], "uniqu": [5, 9, 10, 11, 21, 65, 69, 117], "subj_train": 5, "subj_test": 5, "test_siz": [5, 8, 28], "subj_valid": 5, "relativepositioningdataset": 5, "__getitem__": [5, 65, 117], "expect": [5, 14, 65, 117], "__init__": 5, "list_of_d": [5, 68], "super": [5, 123, 124], "return_pair": 5, "ind1": 5, "ind2": 5, "properti": [5, 68, 138], "_return_pair": 5, "setter": 5, "split_id": [5, 9, 10, 11, 12, 68, 138], "dict": [5, 9, 10, 11, 21, 26, 27, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 49, 68, 69, 71, 75, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 104, 109, 110, 114, 138], "item": [5, 14, 16, 18, 19, 20, 26, 27], "main": [5, 86, 87, 88], "tau_po": [5, 120], "tau_neg": [5, 120], "neg": [5, 26, 30, 65, 120], "separ": [5, 28, 67, 104, 110, 120], "less": [5, 28], "min": [5, 12, 72, 104], "n_exampl": [5, 120], "regular": [5, 112, 113], "instanc": [5, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 58, 65, 81, 84, 88, 102, 103, 104, 105, 108, 117, 119, 138], "000": [5, 14, 16, 17, 18, 19, 22, 23, 30], "lower": [5, 9, 12, 34, 52, 104, 125], "250": [5, 20, 26, 67, 81, 84, 88], "relativepositioningsampl": 5, "60": [5, 10, 12, 19], "n_examples_train": 5, "len": [5, 8, 9, 10, 11, 12, 14, 17, 20, 22, 28, 67, 70, 114], "n_examples_valid": 5, "n_examples_test": 5, "train_sampl": [5, 9, 10, 11], "get_metadata": [5, 9, 10, 11, 26, 27, 28, 30, 68, 119], "same_rec_neg": [5, 120], "valid_sampl": [5, 9, 10, 11], "presampl": [5, 120], "test_sampl": 5, "introduc": [5, 9, 10, 11, 14, 15, 24, 25, 30], "four": [5, 9, 44, 67, 70], "embedd": 5, "dimension": [5, 65, 84, 117, 128], "last": [5, 22, 30, 49, 63, 70, 72, 76, 77, 78, 81, 84, 104, 107, 109, 110], "embed": [5, 9, 10, 81, 84], "after": [5, 12, 16, 21, 27, 28, 29, 67, 72, 82, 93, 94, 95, 122, 125, 138], "tempor": [5, 9, 10, 14, 81, 82, 84, 85, 87, 93, 94, 95, 96, 97, 98, 100, 138], "wrap": [5, 68], "siames": 5, "contrastivenet": 5, "sleepstagerchambon2018": [5, 9], "input_size_sampl": [5, 9, 10, 11], "emb_siz": 5, "emb": 5, "n_output": [5, 9, 10, 11, 30, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100], "n_conv_ch": [5, 95], "apply_batch_norm": [5, 94, 95], "linear": [5, 9, 10, 43, 60, 82, 83, 93, 94, 95, 96, 104], "top": [5, 9, 10, 11, 32], "x1": [5, 120], "x2": [5, 120], "z1": 5, "z2": 5, "flatten": [5, 9, 10, 11], "similar": [5, 102], "account": [5, 68, 109], "smaller": [5, 26, 78, 86, 87, 110], "checkpoint": 5, "earlystop": [5, 28], "epochscor": [5, 8, 9, 10, 11, 65, 117], "5e": 5, "128": [5, 10, 11, 65, 70, 86, 87, 95, 100, 117], "512": 5, "enough": [5, 70], "num_work": [5, 14, 128], "cp": 5, "dirnam": 5, "f_criterion": 5, "f_optim": 5, "f_histori": 5, "early_stop": 5, "patienc": 5, "train_acc": 5, "valid_acc": 5, "bcewithlogitsloss": [5, 65, 117], "adam": [5, 9, 10, 11, 14, 30], "max_epoch": [5, 28, 65, 117], "iterator_train__sampl": [5, 9, 10, 11], "iterator_valid__sampl": [5, 9, 10, 11], "iterator_train__num_work": 5, "iterator_valid__num_work": 5, "load_param": 5, "lowest": 5, "pt": [5, 81], "delet": [5, 22, 68, 115], "file": [5, 6, 12, 13, 14, 16, 17, 18, 19, 23, 31, 68, 72, 73, 79, 102, 121, 133, 138], "5547": 5, "7113": 5, "6000": 5, "6843": 5, "5263": 5, "6328": 5, "6624": 5, "5600": 5, "6505": 5, "0679": 5, "8274": 5, "5560": 5, "6834": 5, "5078": 5, "7217": 5, "5360": 5, "7066": 5, "0915": 5, "5859": 5, "6870": 5, "6240": 5, "6799": 5, "0713": 5, "6016": 5, "6796": 5, "6640": 5, "6374": 5, "0737": 5, "6560": 5, "6086": 5, "0547": 5, "5312": 5, "6652": [5, 22], "6600": 5, "5995": 5, "0538": [5, 22], "6250": 5, "6280": 5, "6480": 5, "5983": 5, "0871": 5, "6371": 5, "6520": 5, "5872": 5, "0575": 5, "6539": 5, "6720": 5, "5716": 5, "0628": 5, "6641": 5, "6481": 5, "6840": 5, "5585": 5, "0583": 5, "6172": 5, "6784": 5, "7080": 5, "5460": 5, "0640": 5, "6074": 5, "7200": [5, 10], "5350": 5, "0648": 5, "7109": 5, "6056": 5, "7320": 5, "5279": 5, "0595": 5, "7031": 5, "5857": 5, "7360": 5, "5259": 5, "0587": 5, "6123": 5, "7440": 5, "5328": 5, "0647": 5, "6562": 5, "5821": 5, "5331": 5, "0729": 5, "19": [5, 10, 11, 102, 108], "7344": 5, "5464": 5, "7400": 5, "5277": 5, "0560": 5, "6484": 5, "6304": 5, "5234": 5, "0564": 5, "6953": 5, "5459": 5, "5264": 5, "0469": 5, "7422": 5, "5492": 5, "7280": 5, "5297": 5, "0569": 5, "23": [5, 9, 10, 11, 103], "5958": 5, "7160": 5, "5296": 5, "0542": 5, "7188": 5, "6367": 5, "7240": 5, "5252": 5, "0347": 5, "6875": 5, "5745": 5, "5237": 5, "0403": 5, "balanc": [5, 9, 10, 11, 118, 138], "to_list": [5, 9, 10, 11], "ys1": 5, "ys2": 5, "talk": 5, "y1": 5, "y2": 5, "zip": [5, 12, 16, 24], "l": [5, 9, 10, 11, 12, 17, 18, 19, 20, 21, 22, 26, 27, 30, 81, 82, 92, 93, 100, 118, 132], "orang": [5, 12, 16], "lines1": 5, "labels1": 5, "get_legend_handles_label": 5, "lines2": 5, "labels2": 5, "plot_relative_posit": [5, 6], "375": 5, "displai": [5, 9, 10, 11, 26, 27, 28, 70, 130], "confus": [5, 9, 10, 11, 132, 138], "matrix": [5, 9, 10, 11, 36, 37, 44, 54, 55, 61, 84, 132, 138], "report": [5, 9, 10, 11, 14, 28, 73, 74, 81, 133], "confusion_matrix": [5, 9, 10, 11, 26, 27, 132], "classification_report": [5, 9, 10, 11], "switch": 5, "y_pred": [5, 9, 10, 11, 26, 27, 65, 100, 124], "y_true": [5, 9, 10, 11, 26, 27, 65], "66": 5, "94": 5, "precis": [5, 9, 10, 11, 132], "recal": [5, 9, 10, 11], "f1": [5, 9, 10, 11, 81, 90, 125], "support": [5, 9, 10, 11, 18, 26, 65, 104, 107, 108, 114, 117, 138], "65": [5, 29], "59": 5, "121": [5, 12], "63": [5, 9], "73": 5, "129": 5, "macro": [5, 9, 10, 11], "avg": [5, 9, 10, 11], "logist": 5, "balanced_accuracy_scor": [5, 11], "linear_model": 5, "logisticregress": 5, "standardscal": 5, "make_pipelin": 5, "singl": [5, 9, 10, 26, 29, 38, 39, 40, 56, 57, 65, 83, 96, 108, 117, 128, 138], "no_grad": 5, "feat": 5, "batch_x": [5, 22], "concaten": [5, 9, 10, 68, 81, 99, 104, 109, 110], "log_reg": 5, "penalti": 5, "l2": [5, 81], "class_weight": [5, 9, 10, 11], "solver": 5, "lbfg": 5, "multi_class": 5, "multinomi": 5, "clf_pipe": 5, "train_y_pr": 5, "valid_y_pr": 5, "test_y_pr": 5, "train_bal_acc": [5, 9, 10, 11], "valid_bal_acc": [5, 9, 10, 11], "test_bal_acc": 5, "bal": 5, "acc": [5, 28], "4f": 5, "_logist": 5, "460": [5, 138], "convergencewarn": 5, "fail": [5, 12], "converg": [5, 28, 30], "statu": 5, "stop": [5, 34, 52, 78, 104, 109, 110, 129, 138], "NO": 5, "reach": [5, 9, 10], "max_it": 5, "scikit": [5, 24, 25, 31, 65, 68, 71, 93, 106, 110, 113, 115, 117, 130, 132, 138], "document": [5, 10, 12, 32, 84, 102, 104, 105, 107, 108, 133, 137, 138], "option": [5, 10, 18, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 65, 68, 71, 78, 81, 87, 88, 104, 107, 110, 117, 128, 132, 137, 138], "n_iter_i": 5, "_check_optimize_result": 5, "9068": 5, "5774": 5, "5624": 5, "103": 5, "33": [5, 9, 16, 26], "346": 5, "166": [5, 138], "70": 5, "114": 5, "79": 5, "142": [5, 138], "37": [5, 22], "49": [5, 29], "42": [5, 9, 26, 29], "109": 5, "74": 5, "62": [5, 14], "67": [5, 6, 100], "562": [5, 28], "85": [5, 26, 27], "31": [5, 9, 10, 11, 26, 84], "46": [5, 28, 31], "105": 5, "170": [5, 138], "1088": [5, 98], "56": 5, "61": [5, 9, 26], "much": [5, 26, 65, 107, 117], "chanc": [5, 9, 10], "level": [5, 9, 10, 22, 66, 102, 104, 105, 107, 108, 138], "problem": [5, 39, 57, 133, 136], "quick": [5, 119], "2d": [5, 132], "space": [5, 16], "pca": 5, "decomposit": 5, "cm": [5, 67, 132], "n_compon": 5, "tsne": 5, "compon": [5, 9, 10, 11, 70, 86, 87], "fit_transform": 5, "get_cmap": 5, "viridi": 5, "enumer": [5, 12, 28], "n1": [5, 9, 10, 11], "n2": [5, 9, 10, 11], "n3": [5, 9, 10, 11], "scatter": [5, 16, 28, 30], "alpha": [5, 9, 10, 11, 12, 43, 81, 86, 87], "477": 5, "minor": 5, "releas": [5, 86, 133, 137], "colormap": [5, 28, 132], "obj": 5, "0x7f15d69f51b0": 5, "nonlinear": [5, 65, 81, 91, 117], "project": [5, 12, 14, 16, 18, 19, 73, 74, 108], "umap": 5, "might": [5, 14, 16, 28, 29, 110, 119], "insight": 5, "explor": 5, "ag": [5, 12, 18, 22, 67, 70, 73, 74], "sex": 5, "specif": [5, 9, 10, 11, 16, 18, 29, 65, 79, 94, 102, 117, 119, 135], "subset": [5, 8, 20, 28, 30, 68, 104, 105, 138], "achiev": [5, 9, 10, 11], "reason": [5, 10, 28, 65, 117, 125], "avenu": 5, "entir": [5, 14, 20, 138], "describ": [5, 11, 26, 27, 28, 82, 83, 86, 87, 88, 93, 94, 95, 96, 100], "discov": 5, "2020": [5, 34, 35, 36, 41, 49, 52, 53, 55, 58, 63, 86, 87, 94, 98, 120], "preprint": [5, 30, 34, 35, 36, 37, 39, 41, 49, 52, 53, 54, 55, 57, 58, 63, 89, 90, 97, 120], "2007": [5, 34, 41, 49, 52, 58, 63, 120], "16104": [5, 120], "kemp": [5, 9, 10, 11], "b": [5, 9, 10, 11, 28, 37, 54, 84, 89, 90, 100], "zwinderman": [5, 9, 10, 11], "tuk": [5, 9, 10, 11], "kamphuisen": [5, 9, 10, 11], "obery": 5, "2000": [5, 9, 10, 11, 22, 119], "neuron": [5, 9, 10, 11], "feedback": [5, 9, 10, 11, 67], "loop": [5, 9, 10, 11, 14, 65, 117], "slow": [5, 9, 10, 11, 16, 130, 138], "wave": [5, 9, 10, 11], "microcontinu": [5, 9, 10, 11], "ieee": [5, 9, 10, 11, 44, 45, 46, 47, 61, 81, 83, 84, 85, 86, 87, 95, 96], "transact": [5, 10, 81, 83, 84, 86, 87, 95, 96], "biomed": 5, "1185": [5, 9, 10, 11, 22], "1194": [5, 9, 10, 11], "goldberg": [5, 9, 10, 11], "amar": [5, 9, 10, 11], "glass": [5, 9, 10, 11], "hausdorff": [5, 9, 10, 11], "ivanov": [5, 9, 10, 11], "p": [5, 9, 10, 30, 34, 41, 49, 52, 58, 63, 89, 90, 95], "mark": [5, 9, 10, 11], "stanlei": [5, 9, 10, 11], "physiobank": [5, 9, 10, 11], "physiotoolkit": [5, 9, 10, 11], "research": [5, 9, 10, 11, 29, 32, 134], "resourc": [5, 7, 9, 10, 11, 13, 16, 24, 68, 73, 106, 109, 115, 116, 138], "complex": [5, 9, 10, 11, 28, 70, 94], "circul": [5, 9, 10, 11], "101": [5, 9, 10, 11, 12], "e215": [5, 9, 10, 11], "e220": [5, 9, 10, 11], "chambon": [5, 9, 10, 95], "galtier": [5, 9, 10, 95], "arnal": [5, 9, 10, 95], "wainrib": [5, 9, 10, 95], "2018": [5, 9, 10, 37, 39, 41, 43, 54, 57, 58, 60, 90, 95, 97], "multivari": [5, 9, 10, 95], "multimod": [5, 9, 10, 95], "tran": [5, 9, 10], "system": [5, 9, 10, 44, 61, 83, 84, 86, 87, 95, 96, 136], "rehabilit": [5, 9, 10, 83, 84, 86, 87, 95, 96], "758": [5, 9, 10, 95], "769": [5, 9, 10, 95], "956": [5, 6], "153": [5, 6], "02": [6, 10, 23, 26, 28, 31], "329": 6, "execut": [6, 12, 13, 14, 16, 17, 19, 23, 31, 70, 115], "auto_examples_advanced_train": 6, "00": [6, 9, 10, 13, 16, 18, 23, 28, 31], "818": [6, 10, 96], "analaysi": [7, 24], "sleep": [7, 13, 16, 24, 29, 39, 57, 68, 72, 83, 94, 95, 96, 99, 100, 106, 110, 115, 116, 118, 119, 121, 130, 132, 138], "cognit": [7, 24], "experi": [7, 14, 24, 28, 66, 70], "stage": [7, 13, 24, 28, 29, 68, 72, 83, 94, 95, 96, 99, 100, 106, 110, 115, 116, 118, 119, 121, 130, 132, 138], "chambon2018": [7, 13, 24, 68, 72, 95, 99, 106, 110, 115, 116, 119, 121, 130, 132], "eldele2021": [7, 13, 24, 68, 72, 96, 99, 106, 110, 115, 119, 121, 130, 132], "big": [7, 13, 24, 68, 73, 106, 109, 115, 116, 138], "tuh": [7, 13, 14, 15, 23, 24, 68, 74, 106, 109, 115, 116, 138], "corpu": [7, 13, 14, 15, 23, 24, 68, 73, 74, 106, 109, 115, 116, 138], "bcicomp": 8, "0x7f15f1aef220": 8, "decid": [8, 27, 29, 35, 36, 37, 39, 48, 50, 51], "about": [8, 9, 10, 12, 29, 69, 75, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 117, 130, 133], "length": [8, 9, 11, 12, 14, 16, 26, 29, 43, 60, 68, 78, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 95, 96, 97, 98, 104, 109, 110, 138], "preced": 8, "create_windows_from_target_channel": [8, 138], "cnosid": 8, "finer": [8, 138], "fexion": 8, "idx_train": 8, "idx_valid": 8, "n_out_chan": 8, "long": [8, 14, 70, 83], "respons": [8, 9, 10, 11, 27, 29], "manag": [8, 9, 10, 11, 27, 29, 30], "inherit": [8, 9, 10, 11, 27, 29, 65, 117], "neuralnetregressor": 8, "logic": [8, 9, 10, 11, 27, 29], "pearson": 8, "pearson_r_scor": 8, "net": [8, 65, 96, 100, 117, 123, 124, 125], "mseloss": [8, 117], "valid_pearson_r": 8, "train_pearson_r": 8, "train_r2": 8, "valid_r2": 8, "5083": 8, "5567": 8, "7019": 8, "1480": 8, "6079": [8, 30], "8003": 8, "7986": 8, "3712": 8, "3152": 8, "2267": 8, "1482": 8, "3906": 8, "5338": 8, "stack": 8, "applied_exampl": [8, 12], "plot_bcic_iv_4_ecog_tri": [8, 13], "330": 8, "09": [8, 9, 26], "44": [8, 13, 29, 31, 70], "069": [8, 13], "test": [9, 10, 11, 16, 21, 24, 25, 27, 29, 31, 65, 68, 70, 71, 93, 106, 110, 113, 115, 117, 130, 138], "adapt": [9, 11, 16, 85, 86, 87, 96, 97, 98], "distribut": [9, 10, 28, 43, 135], "individu": [9, 10, 11, 12, 26, 65, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 117, 138], "integr": [9, 10], "omit": [9, 34], "downsampl": [9, 10, 107], "apply_on_arrai": [9, 12, 106], "0x7f15f0fbec20": 9, "0x7f15f10f9720": 9, "take": [9, 10, 11, 16, 17, 28, 30, 51, 79, 81, 84, 88, 96], "everi": [9, 10, 11, 14, 18, 28, 70, 81, 84, 88], "consecut": [9, 10, 11, 49, 63, 99, 110, 118, 121], "simplifi": [9, 10, 119, 138], "rather": [9, 10], "freez": [9, 10, 138], "sequencesampl": [9, 10, 11, 138], "n_window": [9, 10, 11, 22, 81, 116, 118, 121], "n_windows_strid": [9, 10, 11, 121], "maxim": [9, 10, 29, 34], "overlap": [9, 10, 11, 76, 77, 78, 104, 109, 110], "372": 9, "383": 9, "implement": [9, 10, 14, 16, 28, 43, 51, 60, 65, 81, 82, 85, 86, 87, 88, 89, 90, 93, 117, 127, 128, 134, 138], "get_center_label": [9, 10], "isinst": [9, 10], "ceil": [9, 10, 98], "astyp": [9, 10], "appear": [9, 10, 11, 67], "lot": [9, 10, 11, 65, 117], "night": [9, 10, 11], "spent": [9, 10, 11], "imbalanc": [9, 10, 11], "avoid": [9, 10, 11, 12, 14, 16, 22, 26, 28, 72, 117, 138], "frequent": [9, 10, 11], "compute_class_weight": [9, 10, 11], "vector": [9, 10, 104, 107], "timedistribut": [9, 10, 138], "feat_extractor": [9, 10], "return_feat": [9, 10, 83, 94, 95, 96], "start_dim": [9, 10], "len_last_lay": [9, 10], "neuralnetclassifi": [9, 10, 11, 27, 29], "mass": 9, "ss3": 9, "speak": [9, 11, 14], "recommend": [9, 11, 16, 28, 29, 32, 84, 136, 137], "balanced_accuraci": [9, 10], "crossentropyloss": [9, 10, 11, 65, 100, 117], "criterion__weight": [9, 10, 11], "tensor": [9, 10, 11, 22, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 83, 84, 88, 92, 94, 95, 96, 97, 98, 99, 117, 122, 126, 127], "2107": 9, "6178": 9, "2066": 9, "6041": 9, "1431": 9, "2280": 9, "5977": 9, "6133": 9, "8017": 9, "2202": 9, "5796": 9, "2128": 9, "6148": 9, "8280": 9, "3580": 9, "4962": 9, "3285": 9, "5805": 9, "7927": 9, "4434": 9, "3255": 9, "2195": 9, "7629": 9, "8417": 9, "5262": 9, "0843": 9, "3614": 9, "6399": 9, "8031": 9, "5755": 9, "9415": 9, "4105": 9, "4619": 9, "8029": 9, "6745": 9, "8265": 9, "3784": 9, "8734": 9, "7905": 9, "6944": 9, "7710": 9, "3966": 9, "8442": 9, "8342": 9, "7365": 9, "6541": 9, "5511": 9, "8083": 9, "spatial_conv": 9, "kernel_s": [9, 10, 97], "feature_extractor": [9, 10], "ident": [9, 26, 42, 65, 82, 117], "relu": [9, 10, 88], "maxpool2d": 9, "dilat": [9, 10, 11, 26], "ceil_mod": [9, 10], "end_dim": [9, 10], "inplac": [9, 10, 16], "in_featur": [9, 10], "816": 9, "out_featur": [9, 10], "bia": [9, 10, 11], "sharex": [9, 10, 11], "plot_confusion_matrix": [9, 10, 11, 26, 27, 138], "confusion_mat": [9, 10, 11, 26, 27, 132], "class_nam": [9, 10, 11, 26, 27, 132], "wake": [9, 10, 11, 72], "rem": [9, 10, 11], "28": [9, 11, 28, 86, 87], "58": 9, "194": 9, "hypnogram": [9, 10, 11], "overlaid": [9, 10, 11], "correctli": [9, 10, 11, 137, 138], "identifi": [9, 10, 11, 78, 109, 110], "amount": [9, 10, 11, 16, 107], "expert": [9, 10, 11], "annot": [9, 10, 11, 18, 19, 21, 26, 27, 28, 29, 104], "text": [9, 10, 11, 132], "150": [9, 10, 11, 70], "22222222222223": [9, 10, 11], "despit": [9, 10, 11], "held": [9, 10], "includ": [9, 11, 12, 14, 27, 28, 36, 55, 71, 102, 104, 105, 109, 110, 133, 134], "accordingli": [9, 102], "especi": [9, 29], "ah": [9, 10, 11], "hac": [9, 10, 11], "jjl": [9, 10, 11], "obery\u00e9": [9, 10, 11], "bme": [9, 10, 11], "al": [9, 10, 11, 70, 82, 83, 85, 89, 90, 92, 93, 94, 95, 96, 97, 98, 100, 125], "lan": [9, 10, 11], "jm": [9, 10, 11], "pch": [9, 10, 11], "rg": [9, 10, 11], "mietu": [9, 10, 11], "je": [9, 10, 11], "moodi": [9, 10, 11], "gb": [9, 10, 11], "peng": [9, 10, 11, 41, 58], "he": [9, 10, 11], "29": [9, 10, 13, 30, 96], "102": [9, 13], "plot_sleep_staging_chambon2018": [9, 13], "attent": [10, 81, 84, 96], "divyesh": [10, 138], "narayanan": [10, 138], "400": [10, 11, 138], "speed": [10, 11, 16, 138], "0x7f15d7e004c0": 10, "fpz": 10, "cz": [10, 12, 108, 114], "give": [10, 12, 22, 44, 61, 104, 133], "pz": [10, 12], "oz": 10, "0x7f15d7e00a60": 10, "133": [10, 11], "sleepstagereldele2021": [10, 138], "1471": 10, "1814": 10, "1764": 10, "4756": 10, "6287": 10, "2712": [10, 26], "8848": 10, "2186": 10, "1543": 10, "1656": 10, "4518": 10, "4956": 10, "2200": 10, "2330": 10, "1426": 10, "_mrcnn": 10, "gelu": 10, "approxim": [10, 45, 46, 47], "features1": 10, "conv1d": [10, 11, 100], "batchnorm1d": 10, "ep": [10, 113], "05": [10, 11, 12, 98], "momentum": [10, 82, 86, 87, 93], "affin": 10, "track_running_stat": 10, "maxpool1d": 10, "features2": 10, "afr": [10, 96], "_sebasicblock": 10, "conv1": 10, "bn1": 10, "conv2": 10, "bn2": 10, "se": 10, "_selay": 10, "avg_pool": 10, "adaptiveavgpool1d": [10, 98], "output_s": [10, 99], "fc": [10, 96], "sigmoid": [10, 65, 117], "_tce": 10, "modulelist": 10, "_encoderlay": 10, "self_attn": 10, "_multiheadedattent": 10, "conv": [10, 11, 100], "_causalconv1d": 10, "feed_forward": 10, "_positionwisefeedforward": 10, "w_1": 10, "120": [10, 70, 96], "w_2": 10, "sublayer_output": 10, "_sublayeroutput": 10, "norm": [10, 81], "layernorm": 10, "06": [10, 11, 23], "elementwise_affin": 10, "n4": 10, "_classif": 10, "1469": 10, "undefinedmetricwarn": 10, "ill": 10, "zero_divis": 10, "behavior": [10, 29, 65, 117, 138], "_warn_prf": 10, "averag": [10, 12, 26, 28, 30, 65, 81, 108, 117, 122], "msg_start": 10, "03": [10, 11, 13, 23], "48": [10, 18, 20, 21, 26, 27, 28, 29, 31, 67, 88], "43": [10, 26], "faster": [10, 16, 26, 65, 107, 117], "89": 10, "eldel": [10, 96], "et": [10, 70, 82, 83, 85, 89, 90, 92, 93, 94, 95, 96, 97, 98, 100, 125], "With": [10, 96], "vol": [10, 96], "pp": [10, 34, 41, 44, 45, 46, 47, 49, 52, 58, 61, 63, 84, 96], "809": [10, 96], "1109": [10, 81, 85, 86, 87, 96], "tnsre": [10, 86, 87, 96], "3076234": [10, 96], "374": [10, 13], "plot_sleep_staging_eldele2021": [10, 13], "look": [11, 12, 17, 22, 28, 66, 119], "simpler": 11, "current": [11, 65, 108, 117, 133], "seq2seq": 11, "written": [11, 115, 135], "veri": [11, 28, 68, 110], "short": [11, 12, 28, 67, 83], "excecut": 11, "too": 11, "small": [11, 12, 28, 133], "theo": [11, 138], "gnassoun": [11, 138], "omar": [11, 138], "emir": 11, "zero": [11, 16, 49, 63, 104, 107, 110, 113], "median": 11, "unit": [11, 104, 137], "interquartil": 11, "upsampl": [11, 100, 107], "light": [11, 132], "No": [11, 16, 18, 19, 28, 67], "robust_scal": 11, "0x7f15f10fb280": 11, "shorter": [11, 138], "fulli": [11, 81, 84, 86, 87, 88], "usleep": [11, 138], "in_chan": [11, 30, 82, 89, 90, 91, 92, 93, 98, 100, 101], "with_skip_connect": [11, 100], "apply_softmax": [11, 100], "balanced_accuracy_multi": 11, "309": 11, "even": [11, 28, 65, 66, 100, 117], "odd": [11, 88, 100], "trigger": 11, "intern": [11, 14, 16, 20, 21, 41, 43, 44, 45, 46, 47, 58, 60, 61, 106], "aten": 11, "src": 11, "nativ": 11, "cpp": 11, "1003": 11, "2040": 11, "6129": 11, "1707": 11, "5807": 11, "1120": 11, "2224": 11, "5430": 11, "1594": 11, "5866": 11, "5096": 11, "3464": 11, "4928": 11, "1853": 11, "6026": 11, "4384": 11, "52": 11, "34": 11, "41": [11, 26], "197": [11, 138], "84": 11, "399": 11, "perslev": [11, 100, 118], "darkner": [11, 100, 118], "kempfner": [11, 100, 118], "nikol": [11, 100, 118], "jennum": [11, 100, 118], "pj": [11, 100, 118], "igel": [11, 100, 118], "resili": [11, 100, 118], "npj": [11, 100, 118], "digit": [11, 22, 100, 118], "med": [11, 100, 118], "72": [11, 100, 118], "448": [11, 13], "plot_sleep_staging_usleep": [11, 13], "showcas": [12, 28], "templ": [12, 73, 74, 138], "univers": [12, 70, 73, 74, 138], "hospit": [12, 73, 74, 138], "www": [12, 14, 32, 66, 73, 74], "isip": [12, 14, 73, 74], "piconepress": [12, 14, 73, 74], "tuh_eeg": [12, 14, 22, 73, 74], "shtml": [12, 73, 74], "c_tueg": [12, 73], "luka": [12, 17, 18, 19, 20, 21, 22, 30, 32, 138], "gemein": [12, 17, 18, 19, 20, 21, 22, 30, 138], "tempfil": [12, 16, 18], "error": [12, 22, 26, 29, 30, 78, 103, 109, 110, 111, 117, 133, 138], "messag": [12, 14, 22, 133], "everytim": [12, 14, 22], "plot_tuh_eeg_corpu": [12, 13], "creation": [12, 22], "mock": [12, 22], "want": [12, 14, 18, 21, 22, 24, 27, 28, 29, 65, 117, 134, 137], "disconsid": 12, "section": [12, 22, 70, 136], "_tuhmock": [12, 22], "noqa": [12, 22], "f811": [12, 22], "firstli": [12, 21], "complet": [12, 14, 26, 65, 117], "read": [12, 14, 16, 17, 18, 19, 73, 74, 79, 110], "tuh_path": [12, 14, 22], "pars": 12, "inform": [12, 14, 17, 28, 39, 57, 65, 68, 75, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 104, 117, 119, 137], "path": [12, 14, 16, 17, 18, 19, 22, 66, 68, 73, 74, 79, 80], "patient": [12, 66], "id": [12, 18, 20, 21, 26, 27, 28, 29, 68, 73, 74, 79, 109, 110, 138], "sort": [12, 26, 27, 138], "chronolog": [12, 73, 74], "year": [12, 32], "month": [12, 32], "dai": [12, 67], "segment": [12, 16, 28, 104], "regard": 12, "gender": [12, 18, 22, 73, 74], "insert": [12, 22], "job": [12, 65, 73, 79, 104, 107, 109, 110, 115, 117], "load": [12, 16, 17, 19, 22, 23, 26, 66, 68, 71, 72, 74, 79, 82, 93, 106, 109, 110, 115, 138], "target_nam": [12, 14, 18, 22, 30, 68, 69, 73, 74, 79, 138], "add_physician_report": [12, 22, 73, 74], "__name__": 12, "statist": 12, "plt_histogram": 12, "df_of_ages_gend": 12, "ylim": [12, 28], "show_titl": 12, "dafaram": 12, "male_df": 12, "female_df": 12, "figur": [12, 26, 27, 28, 67, 81, 132], "suptitl": 12, "95": [12, 65, 117], "male": 12, "hist": 12, "bin": 12, "green": 12, "orient": 12, "horizont": 12, "axhlin": 12, "1f": 12, "std": [12, 28, 41, 58, 70], "barh": 12, "height": 12, "width": [12, 98, 104], "xlim": [12, 28], "upper": [12, 16, 104], "left": [12, 26, 27, 37, 65, 67, 70, 117], "ytick": [12, 28], "gca": 12, "invert_xaxi": 12, "femal": [12, 70], "122": 12, "subplots_adjust": [12, 28], "wspace": [12, 28], "hspace": 12, "count": [12, 65, 117], "labelpad": 12, "durat": [12, 30, 102, 104, 110], "least": [12, 104, 119, 120], "five": [12, 66], "select_by_dur": 12, "inf": 12, "determin": [12, 65, 87, 117], "d_i": 12, "ones": [12, 118, 138], "split": [12, 15, 20, 23, 24, 30, 65, 68, 71, 82, 93, 110, 117, 138], "discard": [12, 72], "incomplet": 12, "configur": [12, 16, 26, 28], "subdivis": 12, "le": 12, "repres": [12, 21, 45, 46, 47, 84], "re": [12, 21, 65, 108, 117, 133], "referenc": [12, 108], "short_ch_nam": 12, "a1": 12, "a2": 12, "fp1": 12, "fp2": 12, "f3": 12, "f4": 12, "c3": 12, "c4": 12, "p3": 12, "p4": 12, "o1": [12, 114], "o2": 12, "f7": 12, "f8": 12, "t3": 12, "t4": 12, "t5": 12, "t6": 12, "fz": 12, "subdivid": 12, "refer": [12, 32, 34, 35, 36, 37, 39, 41, 43, 44, 45, 46, 47, 49, 52, 53, 54, 55, 57, 58, 60, 61, 63, 66, 67, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 108, 114, 118, 120, 127, 132], "ar_ch_nam": 12, "ref": 12, "le_ch_nam": 12, "ar_ch_map": 12, "ch_name": [12, 14, 17, 76, 103, 114], "le_ch_map": 12, "ch_map": 12, "select_by_channel": 12, "endswith": 12, "seta": 12, "kei": [12, 21, 26, 27, 68, 69, 75, 109, 110], "recod": 12, "setb": 12, "issubset": 12, "region": [12, 104], "renam": [12, 138], "micro": 12, "volt": 12, "clip": 12, "outlier": 12, "800": [12, 18], "common": [12, 14, 108, 136, 138], "custom_rename_channel": 12, "unexpect": [12, 133], "rename_channel": 12, "custom_crop": 12, "include_tmax": [12, 102], "bigger": 12, "set_eeg_refer": [12, 108], "ref_channel": [12, 108], "ch_type": [12, 108], "pick_channel": [12, 103, 106], "a_min": 12, "a_max": 12, "parallel": [12, 14, 15, 23, 24, 68, 72, 73, 79, 86, 87, 88, 104, 106, 107, 109, 110, 115, 138], "addition": [12, 18, 32, 65, 117, 128], "serial": [12, 15, 18, 23, 24, 68, 72, 106, 109, 115, 138], "must": [12, 14, 16, 75, 82, 93, 94, 99, 102, 106, 108, 109, 118, 136, 138], "lazi": [12, 15, 16, 23, 24, 74, 82, 93, 109, 138], "capabl": [12, 16, 28, 65, 117], "automat": [12, 14, 66, 83, 98, 108], "reload": [12, 16, 115], "machin": [12, 14, 16, 28, 32, 34, 37, 41, 49, 52, 54, 58, 63, 65, 117], "build": [12, 26, 135, 137], "core": [12, 16], "out_path": 12, "mkdtemp": [12, 18], "directori": [12, 16, 18, 26, 66, 68, 73, 74, 79, 115, 137], "tuh_preproc": 12, "concat_d": [12, 16, 18, 109, 110, 111, 115], "save_dir": [12, 16, 115], "readi": [12, 16, 17, 18, 19, 30], "model": [12, 14, 21, 31, 32, 41, 58, 65, 68, 69, 71, 106, 109, 110, 113, 115, 117, 122, 123, 124, 125, 126, 127, 128, 130, 131, 134, 138], "train": [12, 14, 20, 21, 31, 65, 68, 70, 71, 75, 93, 106, 110, 113, 115, 117, 130, 138], "disk": [12, 14, 16, 73, 74, 110], "tuh_window": [12, 22], "305": [12, 13], "297": 13, "auto_examples_applied_exampl": 13, "sake": 14, "etc": [14, 27, 29, 106], "preprocess": [14, 15, 18, 20, 21, 22, 23, 24, 26, 30, 68, 72, 134, 138], "fast": [14, 16, 130], "expens": [14, 65, 117], "ultim": 14, "becom": [14, 16, 28], "imposs": 14, "tb": 14, "potenti": [14, 16, 136], "issu": [14, 16, 133, 138], "overhead": [14, 110], "accomod": 14, "window": [14, 16, 18, 21, 65, 68, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 107, 109, 110, 116, 117, 118, 119, 120, 121, 128, 129, 138], "overal": 14, "though": [14, 16, 28], "impact": [14, 29], "dispatch": 14, "enabl": [14, 16, 26, 65, 67, 98, 117, 138], "fif": [14, 16, 18, 68, 79, 138], "edf": [14, 16, 17, 19, 22], "itertool": [14, 16], "product": [14, 16], "sn": [14, 29], "tuhabnorm": [14, 18, 138], "deep4net": [14, 30], "affect": [14, 26, 125], "57": 14, "algorithm": 14, "set_num_thread": 14, "thread": 14, "autom": [14, 28], "abnorm": [14, 74], "slide": [14, 30, 81, 109], "bundl": 14, "prepar": [14, 16, 20], "load_example_data": 14, "window_len_": 14, "n_record": [14, 119], "creat": [14, 16, 17, 18, 19, 20, 21, 30, 65, 68, 75, 76, 77, 78, 108, 109, 110, 117, 128, 138], "bool": [14, 39, 43, 44, 45, 46, 47, 57, 61, 65, 66, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 93, 94, 95, 96, 97, 100, 102, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 120, 121, 125, 128, 130, 132], "windows_d": [14, 16], "assum": [14, 65, 102, 117, 122, 126, 138], "patholog": [14, 18, 74], "window_len_sampl": 14, "drop_bad_window": [14, 30, 78, 109, 110, 111], "bad": [14, 16, 17, 18, 19, 21, 104, 105, 108, 133], "xxx": [14, 91], "itself": [14, 133], "drop_bad": [14, 78, 109, 110], "create_example_model": 14, "kind": 14, "str": [14, 22, 26, 27, 33, 65, 66, 68, 69, 71, 73, 74, 75, 78, 79, 82, 84, 93, 102, 103, 104, 105, 106, 107, 108, 109, 110, 115, 117, 125, 132], "n_filters_tim": [14, 30, 82, 84, 93], "filter_time_length": [14, 82, 84, 93], "n_filters_spat": [14, 30, 82, 93], "pool_time_length": [14, 82, 84, 93], "pool_time_strid": [14, 82, 84, 93], "split_first_lay": [14, 82, 91, 93], "batch_norm": [14, 82, 93], "batch_norm_alpha": [14, 82, 86, 87, 91, 93], "drop_prob": [14, 29, 82, 84, 85, 86, 87, 89, 90, 93, 97, 98], "elif": [14, 30], "n_filters_2": [14, 30, 82], "filter_length_2": [14, 82], "n_filters_3": [14, 30, 82], "filter_length_3": [14, 82], "n_filters_4": [14, 30, 82], "filter_length_4": [14, 82], "first_pool_mod": [14, 82], "max": [14, 16, 82, 89, 93, 95, 98, 100, 104, 113], "later_pool_mod": [14, 82], "double_time_conv": 14, "stride_before_pool": [14, 30, 82], "valueerror": [14, 30, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100], "run_train": 14, "serv": [14, 67, 69, 75], "loss_val": 14, "zero_grad": 14, "256": [14, 138], "minibatch": 14, "pin_memori": 14, "pin": 14, "n_repetit": 14, "repeat": [14, 133], "get": [14, 16, 17, 22, 26, 27, 28, 65, 117], "folder": [14, 66], "storag": 14, "tuh_eeg_abnorm": 14, "v2": 14, "cycl": 14, "combin": [14, 16, 68], "all_result": 14, "win_len_": 14, "model_kind": 14, "repetit": [14, 16, 70], "nrepetit": 14, "n": [14, 16, 22, 34, 35, 36, 41, 43, 49, 52, 53, 55, 58, 60, 63, 81, 89, 90, 95, 127], "data_loading_start": 14, "data_loading_end": 14, "training_setup_start": 14, "worker_init_fn": 14, "training_setup_end": 14, "model_training_start": 14, "trained_model": 14, "model_training_end": 14, "del": 14, "data_prepar": 14, "training_setup": 14, "model_train": 14, "csv": 14, "results_df": 14, "fname": 14, "lazy_vs_eager_loading_result": 14, "to_csv": 14, "summar": 14, "catplot": 14, "row": [14, 22, 37, 68, 132], "hue": 14, "col": 14, "strip": 14, "hardwar": [14, 16], "slower": 14, "pretti": [14, 133], "worker": [14, 128, 138], "speedup": 14, "benchmark_lazy_eager_load": [14, 23], "basic": [15, 26, 28, 31, 51, 68, 71, 88, 93, 106, 110, 113, 115, 130, 132], "eager": [15, 23, 24, 74, 82, 93, 109], "discret": [15, 23, 24, 68, 73, 109, 138], "simplest": 16, "scenario": [16, 110], "act": [16, 108], "stai": [16, 26, 67], "aris": 16, "bottleneck": [16, 86, 87, 98], "consider": 16, "solut": [16, 108], "clear": 16, "downsid": 16, "write": [16, 18], "cours": [16, 66], "whenev": 16, "up": [16, 17, 67, 100, 107, 138], "significantli": 16, "joblib": 16, "made": [16, 88, 138], "tradeoff": 16, "memory_profil": 16, "memory_usag": 16, "goe": 16, "prepare_data": 16, "n_rec": 16, "tmp_dir": 16, "temporarydirectori": 16, "overwrit": [16, 18, 65, 68, 69, 73, 74, 75, 80, 115, 117], "measur": 16, "peak": [16, 109, 110], "character": 16, "n_repet": 16, "all_n_rec": 16, "all_n_job": 16, "mem": 16, "proc": 16, "time_taken": 16, "max_mem": 16, "mne_data": [16, 17, 19, 26, 66], "sc4001e0": 16, "psg": 16, "detect": [16, 17, 19, 29, 70], "sc4011e0": 16, "2507000": 16, "25070": 16, "sec": [16, 17, 18, 19, 30], "contigu": [16, 49, 63], "fir": [16, 104], "phase": [16, 39, 57, 104], "causal": [16, 104], "firwin": [16, 104], "ham": [16, 104], "0194": 16, "passband": 16, "rippl": 16, "stopband": 16, "attenu": [16, 104], "edg": [16, 104], "transit": [16, 34, 52, 104], "bandwidth": [16, 34, 52], "450": 16, "tmp": [16, 18], "tmpgm3mokq1": 16, "3260000": 16, "32600": 16, "574": [16, 18], "subdirectori": [16, 18, 68, 115], "open": [16, 18, 133, 134, 136], "isotrak": 16, "2884000": 16, "5391000": 16, "28840": 16, "53910": 16, "1975000": 16, "5235000": 16, "19750": 16, "52350": 16, "835": 16, "event": [16, 17, 18, 19, 20, 21, 26, 27, 28, 29, 72, 78, 109, 110], "3000": [16, 22, 30], "point": [16, 17, 18, 19, 20, 21, 67, 108, 112, 113], "1086": [16, 26, 31], "566": [16, 18], "match": [16, 18, 19, 29, 68, 81], "exist": [16, 18, 22, 30, 66, 68, 69, 75, 108, 115], "encount": [16, 18, 133], "mix": [16, 18, 43, 60, 127], "i_d": [16, 18], "epo": [16, 18, 68, 79], "29990": 16, "ctf": [16, 18], "compens": [16, 18, 28, 104], "matric": [16, 18, 26, 27, 45, 46, 47, 65, 117], "ad": [16, 18, 19, 68, 73, 74, 98, 100, 108, 138], "metadata": [16, 18, 19, 68, 75, 109, 118, 119, 120, 121], "baselin": [16, 18, 19], "correct": [16, 18, 19, 65, 85, 86, 87, 88, 89, 90, 117, 138], "tmp6vcs1925": 16, "tmp_f3vyvt2": 16, "tmpsixef66m": 16, "sub_df": 16, "groupbi": 16, "mib": 16, "without": [16, 28, 29, 65, 117, 127, 138], "circl": 16, "advantag": [16, 28, 86, 87], "togeth": [16, 26, 28, 138], "54": [16, 23, 26], "418": [16, 23], "plot_benchmark_preprocess": [16, 23], "create_from_x_i": 17, "fetch": [17, 19, 20, 21, 67, 70, 71], "imagin": [17, 19], "hand": [17, 19, 24, 27, 29, 67, 70], "feet": [17, 18, 19, 21, 26, 27, 28, 29, 67, 70], "event_cod": [17, 19], "yet": [17, 19, 137], "physionet_path": [17, 19], "eegbci": [17, 19], "load_data": [17, 19], "update_path": [17, 19], "io": [17, 19, 69, 102, 104, 114], "read_raw_edf": [17, 19], "stim_channel": [17, 19], "eegmmidb": [17, 19], "s022": [17, 19], "s022r05": [17, 19], "19999": [17, 19], "124": [17, 19, 26], "994": [17, 19], "s022r06": [17, 19], "s022r09": [17, 19], "s022r10": [17, 19], "s022r13": [17, 19], "s022r14": [17, 19], "ani": [17, 18, 26, 28, 65, 96, 104, 108, 117, 137], "500": [17, 19, 27, 29, 119, 138], "rawarrai": [17, 19, 30, 78], "float64": [17, 19, 30], "20000": 17, "manipul": 17, "x_i": 17, "y_i": 17, "window_ind": 17, "start_ind": 17, "stop_ind": 17, "384": [17, 23], "plot_custom_dataset_exampl": [17, 23], "load_concat_dataset": [18, 138], "skip": [18, 22, 28, 88, 100], "fn": [18, 106], "0x7f15e9234e80": 18, "concat": [18, 68, 81, 109, 110, 115], "json": [18, 68, 79, 138], "hold": [18, 68, 69, 75, 109, 110], "due": [18, 138], "tmpdir": 18, "temporari": 18, "tmphbbb0zhh": 18, "complianc": 18, "upon": 18, "dataset_load": 18, "ids_to_load": [18, 79], "3868": 18, "386": 18, "left_hand": [18, 21, 26, 27, 28, 29], "right_hand": [18, 21, 26, 27, 28, 29], "tongu": [18, 21, 26, 27, 28, 29, 67], "run_1": [18, 20, 21], "run_3": [18, 20, 21], "again": [18, 22, 28], "windows_dataset_load": 18, "3900": 18, "312": [18, 23, 138], "plot_load_save_dataset": [18, 23], "create_from_mne_raw": 19, "create_from_mne_epoch": 19, "t0": 19, "t1": 19, "t2": 19, "beforehand": 19, "list_of_epoch": [19, 77], "Not": 19, "81": 19, "620": [19, 23], "plot_mne_dataset_exampl": [19, 23], "daniel": [20, 32, 138], "wilson": [20, 138], "dan": [20, 138], "wil": 20, "run_0": [20, 21, 119], "run_2": [20, 21], "run_4": [20, 21], "run_5": [20, 21], "break": [20, 67], "place": [20, 30, 102, 114, 116], "legaci": 20, "inst": [20, 103, 104, 105, 108], "criteria": [20, 65, 117], "subset_nam": 20, "232164": 20, "523": [20, 23], "plot_moabb_dataset_exampl": [20, 23], "aim": [21, 22], "dictionari": [21, 65, 68, 71, 104, 117], "string": [21, 22, 32, 37, 45, 46, 47, 65, 68, 104, 105, 106, 115, 117, 125], "entri": [21, 103], "0x7f15e8fbf8b0": 21, "0x7f15d69eada0": 21, "0x7f15d69ea890": 21, "0x7f15d69eb1f0": 21, "0x7f15d69ead10": 21, "0x7f15d69e8e50": 21, "integ": [21, 22, 26, 27, 37, 49, 54, 63, 68, 104, 105], "0x7f15d69e99f0": 21, "0x7f15d69e9f00": 21, "0x7f15d69e96f0": 21, "0x7f15d69ebbb0": 21, "0x7f15d69eb130": 21, "0x7f15d69e85e0": 21, "0x7f15d69e85b0": 21, "similarli": 21, "0x7f15e8fbcac0": 21, "0x7f15d69e9270": 21, "0x7f15d69e9540": 21, "0x7f15e907e260": 21, "0x7f15e907e350": 21, "0x7f15e907f010": 21, "0x7f15d69ea200": 21, "0x7f15d69e9ff0": 21, "0x7f15d69e8eb0": 21, "0x7f15d69e9ed0": 21, "272": [21, 23], "plot_split_dataset": [21, 23], "welcom": 22, "ll": 22, "guid": [22, 28, 136], "log": [22, 26, 65, 97, 102, 104, 105, 107, 108, 109, 110, 117], "excess": 22, "v1": 22, "02_tcp_le": 22, "00000058": 22, "s001": 22, "01_tcp_ar": 22, "099": 22, "00009932": 22, "s004": 22, "03_tcp_ar_a": 22, "123": 22, "00012331": 22, "s0": 22, "00000000": 22, "149": 22, "00014928": 22, "83": [22, 29, 31], "ndarrai": [22, 44, 61, 65, 107, 112, 113, 116, 117, 121, 128, 129], "92922518": 22, "22477157": 22, "12493701": 22, "28417889": 22, "13578887": 22, "56835277": 22, "25153176": 22, "7638324": 22, "14345092": 22, "30167542": 22, "68056549": 22, "70380673": 22, "70052629": 22, "21543634": 22, "96330007": 22, "02736802": 22, "65902848": 22, "15756383": 22, "38658058": 22, "04194231": 22, "15447331": 22, "set_descript": [22, 68, 69, 75], "ind": 22, "16017832": 22, "11754766": 22, "6515615": 22, "50407195": 22, "7429778": 22, "9292252": 22, "86039335": 22, "5169721": 22, "0308012": 22, "1209397": 22, "5210943": 22, "2247716": 22, "373041": 22, "14827406": 22, "25829056": 22, "1486133": 22, "15352039": 22, "30362263": 22, "939559": 22, "5686462": 22, "5503989": 22, "3299779": 22, "3865806": 22, "7443461": 22, "1792846": 22, "25878426": 22, "5670986": 22, "2997373": 22, "0537782": 22, "4429058": 22, "05458383": 22, "000525": 22, "66521484": 22, "15447332": 22, "dtype": [22, 29], "float32": 22, "2600": 22, "3600": [22, 72], "dl": 22, "batch_i": 22, "batch_ind": 22, "simpli": 22, "8024": 22, "4564": 22, "4433": 22, "7404": 22, "2522": 22, "0508": 22, "4418": 22, "5201": 22, "2037": 22, "0273": 22, "0506": 22, "1677": 22, "1145": 22, "7075": 22, "1768": 22, "0260": 22, "7216": 22, "2742": 22, "3986": 22, "3912": 22, "8000": 22, "0593": 22, "8097": 22, "1729": 22, "6267": 22, "8419": 22, "3996": 22, "6685": 22, "9266": 22, "1319": 22, "1409": 22, "6246": 22, "6229": 22, "5953": 22, "3169": 22, "4604": 22, "2885": 22, "0168": 22, "6279": 22, "6533": 22, "7673": 22, "6671": 22, "0448": 22, "1422": 22, "5395": 22, "4664": 22, "1882": 22, "2031": 22, "6282": 22, "4535": 22, "8585": 22, "2657": 22, "9942": 22, "3878": 22, "1360": 22, "9132": 22, "9481": 22, "5033": 22, "3406": 22, "6089": 22, "9883": 22, "2919": 22, "3796": 22, "8036": 22, "7666": 22, "8174": 22, "3829": 22, "1508": 22, "8516": 22, "0426": 22, "1322": 22, "4122": 22, "2526": 22, "9711": 22, "6890": 22, "4660": 22, "5510": 22, "3613": 22, "0280": 22, "1350": 22, "2249": 22, "9406": 22, "7754": 22, "7664": 22, "1807": 22, "8206": 22, "1281": 22, "1607": 22, "9353": 22, "0165": 22, "6509": 22, "7276": 22, "2137": 22, "5619": 22, "0408": 22, "9825": 22, "3648": 22, "6978": 22, "8943": 22, "2374": 22, "4398": 22, "8218": 22, "5172": 22, "2975": 22, "0311": 22, "1602": 22, "1175": 22, "6516": 22, "7430": 22, "9292": 22, "8604": 22, "5170": 22, "0308": 22, "1209": 22, "5211": 22, "2248": 22, "3730": 22, "1483": 22, "2583": 22, "1486": 22, "1535": 22, "1249": 22, "3036": 22, "9396": 22, "5686": 22, "5504": 22, "3300": 22, "3866": 22, "7443": 22, "1793": 22, "2588": 22, "5671": 22, "2997": 22, "0419": 22, "4429": 22, "0546": 22, "1545": 22, "422": [22, 23], "plot_tuh_discrete_multitarget": [22, 23], "952": 23, "auto_examples_datasets_io": 23, "fundament": [24, 25], "tune": [24, 25, 31, 68, 71, 84, 93, 106, 110, 113, 115, 130, 138], "fake": [24, 25, 31, 68, 69, 82, 93, 101, 109, 122, 130, 138], "auto_examples_python": 24, "auto_examples_jupyt": 24, "push": [26, 65, 117], "produc": [26, 28, 96], "neighbour": 26, "simultan": [26, 86, 87], "implicitli": [26, 28], "timestep": 26, "user": [26, 65, 117, 133, 135, 136, 138], "mostli": 26, "runtim": 26, "rule": [26, 65, 117], "mathemat": 26, "At": [26, 67], "redund": 26, "lead": [26, 28, 65, 108, 117], "gradient": [26, 138], "likelihood": [26, 65], "typic": [26, 65, 102, 117], "plot_bcic_iv_2a_moabb_tri": [26, 27, 31], "__": 26, "locat": [26, 66], "anyth": [26, 65], "manual": [26, 28, 136], "runtimewarn": 26, "config": [26, 66], "mne_datasets_bnci_path": 26, "set_config": 26, "get_config": 26, "0x7f15e91ac040": 26, "definit": [26, 65, 117], "torchinfo": [26, 27, 28, 138], "tabl": [26, 27, 28, 29, 81, 138], "976": 26, "804": 26, "And": 26, "dens": [26, 94, 95], "explicit": [26, 125], "deep4": [26, 27, 138], "001": [26, 27, 30, 67, 112, 113], "nll_loss": 26, "4632": 26, "9340": 26, "5844": 26, "2539": 26, "3594": 26, "467": [26, 138], "902": 26, "percent": [26, 27], "misclass": [26, 27], "assign": [26, 27, 129], "train_misclass": [26, 27], "valid_misclass": [26, 27], "misclassif": [26, 27], "get_ylim": [26, 27], "room": [26, 27], "model_build": [26, 27, 28, 29, 30], "plot_bcic_iv_2a_moabb_crop": [26, 31], "311": 26, "label_dict": [26, 27], "i_class": [26, 27], "event_id": [26, 27], "kv": [26, 27], "conf": [26, 27], "800x550": [26, 27], "schirrmeist": [26, 27, 30, 32, 70, 82, 92, 93, 132, 138], "springenberg": [26, 27, 30, 32, 82, 92, 93, 132], "fieder": [26, 27, 30, 32, 82, 92, 93, 132], "glasstett": [26, 27, 30, 32, 82, 92, 93, 132], "eggensperg": [26, 27, 30, 32, 82, 92, 93, 132], "tangermann": [26, 27, 30, 32, 82, 92, 93, 132], "hutter": [26, 27, 32, 82, 92, 93, 132], "burgard": [26, 27, 32], "ball": [26, 27, 30, 32, 70, 82, 92, 93, 132], "2017": [26, 27, 30, 32, 44, 45, 46, 47, 61, 70, 82, 83, 92, 93, 132], "hum": [26, 27], "mapp": [26, 27], "5391": [26, 27, 30], "5420": [26, 27, 30], "1002": [26, 27, 32, 82, 92, 93, 132], "hbm": [26, 27, 32, 82, 92, 93, 132], "23730": [26, 27, 32, 82, 92, 93, 132], "939": [26, 31], "classic": 27, "via": [27, 28, 29, 100, 104, 135, 136, 138], "0x7f15f0fe8ac0": 27, "benefici": [27, 29], "6001": [27, 28], "6724": 27, "6259": 27, "2570": 27, "9811": 27, "4857": 27, "2569": 27, "1473": 27, "0234": 27, "4688": 27, "0680": 27, "2431": 27, "9948": 27, "4500": 27, "276": 27, "136": [27, 31], "502": [27, 31], "properli": [28, 104, 107, 108], "detail": [28, 43, 60, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 102, 103, 104, 105, 107, 108, 114, 130, 137], "exclus": 28, "elabor": 28, "feel": 28, "free": 28, "distinguish": 28, "scheme": [28, 108], "answer": 28, "reliabl": 28, "sound": 28, "divis": [28, 94, 96, 113], "But": 28, "stori": 28, "develop": [28, 133, 137], "ml": 28, "degre": [28, 44, 45, 46, 47, 61], "freedom": 28, "kept": 28, "adjustmenty": 28, "leakag": 28, "memor": 28, "independ": [28, 39, 57, 104, 138], "never": 28, "explicitli": [28, 104, 105, 108], "recogn": 28, "behind": 28, "alwai": [28, 32, 51, 65, 117], "paramt": 28, "readabl": [28, 104], "reiniti": 28, "0x7f15e91b3460": 28, "matter": [28, 73, 74], "easiest": 28, "distinct": 28, "previous": 28, "credibl": 28, "test_acc": 28, "9998": 28, "2351": 28, "8042": 28, "patch": 28, "plot_simple_train_test": 28, "braindecode_cmap": 28, "3a6190": 28, "683e00": 28, "ddf2ff": 28, "2196f3": 28, "lw": 28, "yticklabel": 28, "nsplit": 28, "ndataset": 28, "risk": [28, 43, 60, 127], "tweak": 28, "until": [28, 67], "visit": 28, "realli": 28, "quit": 28, "unreli": 28, "ratio": 28, "leav": [28, 138], "empti": [28, 65, 104, 108], "x_train": 28, "train_indic": 28, "val_indic": 28, "indices_": 28, "train_subset": 28, "val_subset": 28, "meaning": 28, "3348": 28, "2877": 28, "3448": [28, 29], "0762": 28, "6918": 28, "3522": 28, "0681": 28, "3621": 28, "5753": 28, "5717": 28, "82": [28, 41, 58], "plot_train_valid_test": 28, "mention": 28, "suffici": 28, "afterward": [28, 81, 84, 88, 108], "unseen": 28, "holdout": 28, "highli": 28, "cross_val_scor": 28, "splitter": 28, "train_val_split": 28, "cv_result": 28, "encode_color": 28, "br_cmap": 28, "encod": [28, 96, 100], "plot_k_fold": 28, "mosaic": 28, "aa": 28, "bc": 28, "constrained_layout": 28, "subplot_mosa": 28, "gridspec_kw": 28, "height_ratio": 28, "width_ratio": 28, "ii": 28, "tr": 28, "tt": 28, "fill": [28, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100], "group": [28, 94], "nan": [28, 126], "color_indic": 28, "vmin": [28, 132], "vmax": [28, 132], "ndata": 28, "yaxi": 28, "set_fonts": 28, "300": 28, "075": 28, "plot_how_train_test_and_tun": [28, 31], "544": 28, "fixedformatt": 28, "fixedloc": 28, "599": 28, "layout": 28, "incompat": [28, 138], "One": [28, 67, 86, 87], "earli": 28, "rough": 28, "quickli": 28, "messi": 28, "jointli": 28, "sould": 28, "analog": [28, 125], "grid": [28, 29], "tupl": [28, 29, 43, 51, 60, 65, 69, 72, 101, 107, 114, 117, 120, 132], "00625": [28, 29], "000625": 28, "best_paramet": 28, "1950": 28, "0414": 28, "9855": 28, "9209": 28, "replac": [28, 49, 63, 138], "947": [28, 31], "sensit": [29, 67, 132], "signific": 29, "discrimin": 29, "pathologi": 29, "playbook": 29, "googl": 29, "0x7f15f0e969e0": 29, "functool": 29, "partial": 29, "analyz": 29, "initialis": 29, "validsplit": [29, 65, 117], "slice": [29, 104, 105, 109, 110], "fine": 29, "learning_r": 29, "0000625": 29, "module__drop_prob": 29, "3130": 29, "0200": 29, "2586": 29, "9829": 29, "0063": 29, "9299": 29, "5174": 29, "4675": 29, "3182": 29, "8526": 29, "pivot": 29, "heatmap": 29, "pivot_t": 29, "param_optimizer__lr": 29, "param_module__drop_prob": 29, "fmt": 29, "3f": 29, "cmap": 29, "ylgnbu": 29, "cbar": 29, "plot_hyperparameter_tuning_with_scikit": [29, 31], "303": 29, "futur": [29, 86], "constructor": 29, "infer": [29, 65, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 110, 117, 125], "numer": [29, 110], "sequenc": [29, 33, 38, 65, 97, 99, 117, 118, 121, 128, 136, 138], "76": 29, "varun": 29, "godbol": 29, "georg": 29, "dahl": 29, "justin": 29, "gilmer": 29, "christoph": 29, "shallu": 29, "zachari": 29, "nado": 29, "tuning_playbook": 29, "037": [29, 31], "sara": [30, 138], "sedlar": [30, 138], "n_fake_rec": 30, "sinusoid": 30, "gaussian": [30, 41, 58], "nois": [30, 41, 58, 67], "n_fake_ch": 30, "fake_dur": 30, "fake_sfreq": 30, "basedataset": [30, 33, 68, 75, 79, 115, 138], "create_mne_dummy_raw": 30, "fake_regression_dataset": 30, "n_fake_target": 30, "fake_data_split": 30, "fraction": 30, "target_subset": 30, "randint": 30, "sin": 30, "pi": [30, 39, 57], "_data": 30, "expand_dim": 30, "fake_descript": 30, "n_fake_chan": 30, "2999": 30, "990": 30, "model_nam": 30, "shallowconvnet": 30, "model_clf": 30, "deepconvnet": 30, "unknown": [30, 125], "convers": 30, "model_reg": 30, "By": [30, 43, 65, 117], "602": 30, "minim": [30, 43, 60, 127, 133], "mse": 30, "ground": [30, 67, 70], "truth": 30, "period": 30, "schedul": 30, "optimizer_lr": 30, "optimizer_weight_decai": 30, "neg_root_mean_squared_error": 30, "train_neg_root_mean_squared_error": 30, "valid_neg_root_mean_squared_error": 30, "1146": 30, "4996": 30, "0189": 30, "6493": 30, "0010": 30, "4308": 30, "9908": 30, "1932": 30, "0913": 30, "3634": 30, "3263": 30, "0107": 30, "9366": 30, "9689": 30, "3895": 30, "root": [30, 137], "squar": [30, 93, 117], "rmse": 30, "plot_regress": [30, 31], "224": 30, "0x7f15f1b39a50": 30, "versu": 30, "trend": 30, "y_estim": 30, "ravel": 30, "y_gt": 30, "to_numpi": [30, 123, 124, 125], "polyfit": 30, "poly1d": 30, "kingma": 30, "diederik": 30, "jimmi": 30, "ba": 30, "stochast": 30, "1412": 30, "6980": 30, "2014": [30, 67], "reddi": 30, "sashank": 30, "satyen": 30, "kale": 30, "sanjiv": 30, "kumar": 30, "beyond": [30, 43, 60, 127], "1904": 30, "09237": 30, "923": [30, 31], "981": 31, "auto_examples_model_build": 31, "scientif": 32, "softwar": [32, 133], "canon": 32, "articl": 32, "hbm23730": 32, "robin": [32, 138], "tibor": [32, 138], "jost": 32, "tobia": 32, "dominiqu": 32, "josef": 32, "martin": [32, 138], "katharina": 32, "michael": 32, "frank": 32, "wolfram": 32, "tonio": 32, "issn": 32, "1097": 32, "0193": 32, "url": 32, "dx": [32, 82, 86, 87, 92, 93, 132], "aug": [32, 82, 92, 93, 132], "keyword": [32, 33, 71, 102, 104, 105, 106, 107, 108, 114], "electroencephalographi": 32, "interfac": [32, 86, 87, 89, 90], "interpret": [32, 37, 54, 104, 105, 117], "built": [32, 133], "zenodo": 32, "ask": [32, 67], "3389": 32, "fnin": 32, "2013": 32, "00267": 32, "alexandr": 32, "luessi": 32, "larson": 32, "eric": 32, "deni": [32, 138], "strohmeier": 32, "brodbeck": 32, "christian": 32, "goj": 32, "roman": 32, "ja": 32, "mainak": 32, "brook": 32, "teon": 32, "parkkonen": 32, "lauri": 32, "h\u00e4m\u00e4l\u00e4inen": 32, "matti": 32, "frontier": 32, "neurosci": 32, "volum": 32, "267": 32, "frontiersin": 32, "1662": 32, "453x": 32, "appropri": [32, 136], "kwarg": [33, 65, 82, 93, 106, 117, 123, 124, 125], "max_freq": 34, "band": [34, 52, 104, 114, 138], "desir": [34, 44, 52, 61, 67, 102, 108], "suggest": [34, 37, 41, 44, 45, 46, 47, 49, 52, 54, 58, 61, 78, 109, 110], "distanc": [34, 52, 67], "admiss": 34, "1hz": 34, "nyquist": 34, "cheng": [34, 41, 49, 52, 58, 63], "goh": [34, 41, 49, 52, 58, 63], "dogrusoz": [34, 41, 49, 52, 58, 63], "tuzel": [34, 41, 49, 52, 58, 63], "azemi": [34, 41, 49, 52, 58, 63], "awar": [34, 41, 49, 52, 58, 63], "biosign": [34, 41, 49, 52, 58, 63], "04871": [34, 41, 49, 52, 58, 63], "mohsenvand": [34, 41, 49, 52, 58, 63], "izadi": [34, 41, 49, 52, 58, 63], "mae": [34, 41, 49, 52, 58, 63], "electroencephalogram": [34, 41, 49, 52, 58, 63], "health": [34, 41, 49, 52, 58, 63], "238": [34, 41, 49, 52, 58, 63], "253": [34, 41, 49, 52, 58, 63], "pmlr": [34, 41, 49, 52, 58, 63], "get_augmentation_param": [34, 35, 36, 37, 39, 40, 41, 43, 44, 49, 51, 138], "freqs_to_notch": [34, 52], "greater": [34, 52], "static": [34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 48, 49, 50, 66], "flat": [35, 53, 109, 110, 111], "cmsaugment": [35, 36, 53, 55], "polici": [35, 36, 53, 55], "proba_drop": 35, "eras": 35, "saeed": [35, 36, 53, 55], "grangier": [35, 36, 53, 55], "pietquin": [35, 36, 53, 55], "zeghidour": [35, 36, 53, 55], "heterogen": [35, 36, 53, 55], "differenti": [35, 36, 53, 55], "reorder": [35, 36, 53, 55], "2010": [35, 36, 53, 55, 70], "13694": [35, 36, 53, 55], "p_shuffl": [36, 55], "permut": [36, 37, 43, 54, 55, 60], "carri": [36, 55, 67], "ordered_ch_nam": [37, 45, 46, 47], "invert": 37, "side": [37, 104], "nomenclatur": 37, "deiss": [37, 54], "biswal": [37, 54], "jin": [37, 54], "sun": [37, 54], "westov": [37, 54], "hamlet": [37, 54], "co": [37, 54], "techniqu": [37, 54, 104, 108], "1803": [37, 54, 97], "09702": [37, 54], "accord": [37, 54, 108], "channel_indep": [39, 57], "ft": [39, 57, 81], "surrog": [39, 57], "pertub": [39, 57], "uniformli": [39, 43, 44, 45, 46, 47, 57, 118], "perturb": [39, 57], "schwabed": [39, 57], "snyder": [39, 57], "cakmak": [39, 57], "nemati": [39, 57], "clifford": [39, 57], "address": [39, 57], "imbal": [39, 57, 72], "noisi": [39, 57], "fourier": [39, 57], "1806": [39, 57], "08675": [39, 57], "magnitud": [39, 49], "cliffordlab": [39, 57], "tf": [39, 57], "draw": [39, 57], "maximum": [40, 44, 45, 46, 47, 81, 109], "absolut": 40, "delta_freq": [40, 56], "amplitud": [40, 56, 109, 110, 138], "white": [41, 58], "deviat": [41, 58], "wang": [41, 58], "zhong": [41, 58], "jiang": [41, 58], "liu": [41, 58, 84], "emot": [41, 58], "recognit": [41, 58], "confer": [41, 43, 44, 45, 46, 47, 58, 60, 61], "multimedia": [41, 58], "93": [41, 58], "beta_per_sampl": 43, "drawn": 43, "beta": 43, "hongyi": [43, 60, 127], "zhang": [43, 60, 88, 127], "moustapha": [43, 60, 127], "ciss": [43, 60, 127], "yann": [43, 60, 127], "dauphin": [43, 60, 127], "david": [43, 60, 127], "lopez": [43, 60, 127], "paz": [43, 60, 127], "empir": [43, 60, 97, 127], "iclr": [43, 60], "onlin": [43, 60, 82, 86, 87, 92, 93, 127, 132], "1710": [43, 60, 127], "09412": [43, 60, 127], "facebookresearch": [43, 60, 127], "cifar10": [43, 60, 127], "interpol": [43, 44, 45, 46, 47, 60, 61], "lam": [43, 60], "idx_perm": [43, 60], "form": [43, 60, 67, 68, 69, 75], "sensors_positions_matrix": [44, 61], "max_degre": [44, 45, 46, 47], "spherical_splin": [44, 45, 46, 47, 61], "rotat": [44, 45, 46, 47, 61, 132], "angl": [44, 45, 46, 47, 61, 132], "3d": [44, 61, 138], "cartesian": [44, 61], "coordin": [44, 61], "ten_twenty_montag": [44, 61], "make_standard_montag": [44, 61], "standard_1020": [44, 61], "get_posit": [44, 61], "ch_po": [44, 61], "spheric": [44, 45, 46, 47, 61], "spline": [44, 45, 46, 47, 61], "scipi": [44, 45, 46, 47, 61, 65, 104, 107, 117], "rbf": [44, 45, 46, 47, 61], "quadrat": [44, 45, 46, 47, 61], "krell": [44, 45, 46, 47, 61], "kim": [44, 45, 46, 47, 61, 88], "electroencephalograph": [44, 45, 46, 47, 61], "39th": [44, 45, 46, 47, 61], "annual": [44, 45, 46, 47, 61], "medicin": [44, 45, 46, 47, 61], "biologi": [44, 45, 46, 47, 61], "societi": [44, 45, 46, 47, 61], "embc": [44, 45, 46, 47, 61], "471": [44, 45, 46, 47, 61], "474": [44, 45, 46, 47, 61], "element": [44, 49, 61], "montag": [45, 46, 47, 67], "flip": [48, 50, 62, 64], "sign": [48, 62], "smoothli": [49, 63], "Will": 49, "mask_start_per_sampl": [49, 63], "resp": 51, "uniform": 51, "instati": 51, "arg": [65, 82, 93, 117], "iterator_train__drop_last": [65, 117, 138], "uninstanti": [65, 117], "get_loss": 65, "classes_": 65, "restor": 65, "attributeerror": 65, "sgd": [65, 117], "updat": [65, 66, 68, 69, 75, 78, 109, 110, 114, 117, 136, 138], "outcom": [65, 117], "keyboard": [65, 117], "interrupt": [65, 117], "mini": [65, 117], "iterator_train__batch_s": [65, 117], "iterator_test__batch_s": [65, 117], "iterator_valid": [65, 117], "incom": [65, 117], "__len__": [65, 117], "deal": [65, 117], "box": [65, 117], "prefix": [65, 117], "dataset__": [65, 117], "initialz": [65, 117], "dataset_train": [65, 117, 123, 124, 125], "dataset_valid": [65, 117, 123, 124, 125], "get_default_callback": [65, 117], "disabl": [65, 104, 117], "conflict": [65, 117], "resolv": [65, 117], "suffix": [65, 117], "epochscoring_1": [65, 117], "print_log": [65, 117], "set_param": [65, 117], "callbacks__print_log__keys_ignor": [65, 117], "predict_nonlinear": [65, 117], "pickleabl": [65, 117], "accept": [65, 78, 99, 110, 117], "predict_proba": [65, 117, 138], "whatev": [65, 117], "anywher": [65, 117], "notabl": [65, 117], "unaffect": [65, 117], "warm_start": [65, 117], "cold": [65, 117], "warm": [65, 117], "summari": [65, 98, 117], "regardless": [65, 117], "acceler": [65, 117], "sent": [65, 117], "unmodifi": [65, 117], "compil": [65, 117], "instal": [65, 104, 107, 117, 138], "volta": [65, 117], "amper": [65, 117], "dunder": [65, 117], "notat": [65, 117], "compile__dynam": [65, 117], "dynam": [65, 117], "use_cach": [65, 117, 123, 124], "overrid": [65, 66, 117], "cach": [65, 117], "batchscor": [65, 117], "certain": [65, 117], "situat": [65, 117], "tight": [65, 117], "cumbersom": [65, 117], "global": [65, 117, 125], "honor": [65, 117], "model_evalu": [65, 117], "prefixes_": [65, 117], "special": [65, 117], "neuralnet": [65, 117], "optimizer__momentum": [65, 117], "popul": [65, 117], "what": [65, 81, 109, 110, 117], "cuda_dependent_attributes_": [65, 117], "whose": [65, 78, 110, 117], "unpickl": [65, 117], "expand": [65, 100, 117], "initialized_": [65, 117], "criterion_": [65, 117], "callbacks_": [65, 117], "_modul": [65, 117], "collect": [65, 70, 117], "_criteria": [65, 117], "_optim": [65, 117], "get_iter": [65, 117], "drop_index": [65, 117], "iterator_test": [65, 117], "spars": [65, 117], "csr": [65, 117], "former": [65, 81, 84, 88, 117], "doesn": [65, 66, 117], "y_proba": [65, 117], "trial_predict": [65, 117, 128], "n_trial": [65, 76, 117, 128], "n_predict": [65, 117, 122, 126, 128], "trial_label": [65, 117, 128], "n_target": [65, 117, 128], "bbci": 66, "de": 66, "desc_4": 66, "pdf": 66, "force_upd": 66, "mne_datasets_": 66, "_path": 66, "forc": 66, "subj": [67, 70], "250hz": 67, "iia": 67, "r382d436f3223": 67, "cue": [67, 70], "imag": [67, 86, 87], "inat": 67, "movement": [67, 70], "compris": 67, "288": [67, 138], "sit": 67, "comfort": 67, "armchair": 67, "front": 67, "screen": 67, "fixat": 67, "acoust": 67, "tone": 67, "arrow": [67, 70], "down": [67, 94, 100, 107, 130], "foot": 67, "prompt": [67, 133], "disappear": 67, "twenti": 67, "agcl": 67, "inter": [67, 70], "monopolarli": 67, "mastoid": [67, 108], "amplifi": 67, "\u03bcv": 67, "notch": 67, "suppress": [67, 104], "raw_preproc_kwarg": 68, "window_kwarg": 68, "window_preproc_kwarg": 68, "old": [68, 115, 138], "datapoint": 68, "along": [69, 75, 107, 136, 138], "gamma": 70, "discrib": 70, "schirrmeister2017": [70, 82, 92, 93], "500hz": 70, "r5e478952091a": 70, "cover": [70, 132], "cortex": 70, "healthi": [70, 72], "963": 70, "divid": [70, 76, 77, 78, 109], "rest": [70, 108], "approx": 70, "880": 70, "except": [70, 72], "160": 70, "acquir": 70, "lab": 70, "invas": 70, "2008": [70, 83], "darva": 70, "direct": [70, 133], "grai": 70, "back": 70, "had": [70, 86, 87], "clench": 70, "toe": 70, "downward": 70, "tap": 70, "leftward": 70, "rightward": 70, "relax": 70, "upward": 70, "littl": 70, "proxim": 70, "muscular": 70, "volv": 70, "pace": 70, "maintain": 70, "interv": [70, 110], "pseudo": 70, "ideal": 70, "260": 70, "stimuli": 70, "bci2000": 70, "schalk": 70, "2004": 70, "approv": 70, "ethic": 70, "committe": 70, "freiburg": 70, "dataset_kwarg": 71, "load_eeg_onli": 72, "content": 72, "edfx": 72, "overnight": 72, "78": 72, "auto_tutori": 72, "plot_sleep": 72, "eog": [72, 100], "emg": 72, "temperatur": 72, "respir": 72, "3h": 72, "parent": [73, 74], "ascend": [73, 74], "preserv": [73, 74], "physician": [73, 74], "c_tuab": 74, "i_window_in_tri": [75, 119, 129], "i_start_in_tri": [75, 119], "i_stop_in_tri": [75, 119, 129], "applic": [75, 104], "pre": [76, 108], "compativl": [77, 78], "accepted_bads_ratio": [78, 110], "onset": [78, 110], "fall": [78, 109, 110], "outsid": [78, 109, 110], "proport": [78, 86, 87, 110], "withinconsist": 78, "exceed": [78, 110], "pathlib": 79, "concat_dataset": [79, 80], "input_window_second": [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100], "conv_block_n_filt": 81, "conv_block_kernel_length_1": 81, "conv_block_kernel_length_2": 81, "conv_block_pool_size_1": 81, "conv_block_pool_size_2": 81, "conv_block_depth_mult": 81, "conv_block_dropout": 81, "att_head_dim": 81, "att_num_head": 81, "att_dropout": 81, "tcn_depth": 81, "tcn_kernel_s": 81, "tcn_n_filter": 81, "tcn_dropout": 81, "tcn_activ": 81, "elu": [81, 82, 86, 87, 91], "max_norm_const": 81, "chs_info": [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100], "input_size_": [81, 94, 95, 96, 100], "offici": [81, 136], "tensorflow": 81, "secod": 81, "block": [81, 86, 87, 88, 97, 100], "denot": 81, "kc": 81, "p2": 81, "depthwis": [81, 86, 87], "pc": 81, "head": [81, 84, 96, 119], "dh": 81, "1_": 81, "pa": 81, "tcn": [81, 138], "residu": [81, 91], "kt": 81, "slid": 81, "feed": [81, 96], "connect": [81, 84, 88, 94, 100], "logit": 81, "contrari": 81, "constraint": 81, "impos": 81, "ch": [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100], "alia": [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100], "attempt": [81, 82, 83, 91, 93, 94, 95, 96, 97, 100, 108], "altaheri": 81, "muhammad": 81, "alsulaiman": 81, "physic": 81, "industri": 81, "informat": 81, "tii": 81, "3197419": 81, "overridden": [81, 84, 88], "subclass": [81, 84, 88], "recip": [81, 84, 88], "care": [81, 84, 88], "regist": [81, 84, 88], "hook": [81, 84, 88], "latter": [81, 84, 88], "silent": [81, 84, 88], "miss": [81, 82, 84, 86, 88, 89, 90, 91, 93, 94, 100, 138], "first_conv_nonlin": 82, "first_pool_nonlin": 82, "later_conv_nonlin": 82, "later_pool_nonlin": 82, "normalis": [82, 93], "load_state_dict": [82, 93], "state_dict": [82, 93], "wrapper": [82, 93], "supratak": 83, "bidirect": 83, "supratak2017": 83, "dong": 83, "wu": 83, "guo": 83, "1998": 83, "att_depth": 84, "att_head": 84, "att_drop_prob": 84, "final_fc_length": 84, "2440": 84, "return_featur": 84, "conform": 84, "methodolog": 84, "song2022": 84, "conformercod": 84, "reciev": 84, "tradit": 84, "n_timestep": 84, "compos": 84, "patchembed": 84, "transformerencod": 84, "classificationhead": 84, "sement": 84, "recombin": 84, "song": [84, 138], "zheng": 84, "q": 84, "gao": 84, "710": 84, "719": 84, "ieeexplor": 84, "9991178": 84, "eeyhsong": 84, "get_fc_siz": 84, "in_channel": [85, 86, 87, 88], "itnet": [85, 138], "incept": [85, 86, 87, 88, 138], "salami": 85, "salami2022": 85, "abbassalami": 85, "guarante": [85, 86, 87, 88, 89, 90], "reimplement": [85, 86, 87, 88, 89, 90], "andreu": 85, "perez": 85, "gillmeist": 85, "3161489": 85, "scales_samples_": [86, 87], "125": [86, 87, 95], "n_filter": [86, 87, 88, 97], "depth_multipli": [86, 87], "pooling_s": [86, 87], "erp": [86, 87], "deperec": 86, "AND": 86, "WILL": 86, "BE": 86, "IN": 86, "THE": 86, "OF": 86, "eeginceptionerp": [86, 138], "santamaria2020": [86, 87], "inceptionnet": [86, 87, 88], "goal": [86, 87, 88], "largest": [86, 87], "associ": [86, 87], "winner": [86, 87], "beetl": [86, 87], "neurip": [86, 87], "r15fdf33b022f": 86, "santamaria": [86, 87], "vazquez": [86, 87], "martinez": [86, 87], "cagig": [86, 87], "vaquerizo": [86, 87], "villar": [86, 87], "hornero": [86, 87], "novel": [86, 87], "assist": [86, 87], "3048106": [86, 87], "grifcc": [86, 87], "r37c4761d4e92": 87, "sampel": 87, "eegincept": [87, 138], "n_conv": 88, "kernel_unit_": 88, "input_window_": 88, "vision": 88, "wide": 88, "branch": 88, "1d": 88, "bose": 88, "eskandarian": 88, "accur": 88, "robust": 88, "046014": 88, "pool_mod": [89, 90, 93], "second_kernel_s": 89, "third_kernel_s": [89, 90], "eegnet": [89, 90], "lawhern": [89, 90], "2016": 89, "solon": [89, 90], "waytowich": [89, 90], "gordon": [89, 90], "hung": [89, 90], "lanc": [89, 90], "compact": [89, 90], "1611": [89, 90], "08024": [89, 90], "f2": 90, "kernel_length": 90, "v4": 90, "eegnet4": 90, "final_pool_length": [91, 138], "n_first_filt": 91, "n_layers_per_block": 91, "first_filter_length": 91, "batch_norm_epsilon": 91, "conv_weight_init_fn": 91, "hybrid": 92, "conv_nonlin": 93, "pool_nonlin": 93, "safe_log": 93, "n_conv_chan": 94, "n_group": 94, "max_pool_s": 94, "blanco": 94, "blanco2020": 94, "seven": 94, "fernandez": 94, "rivero": 94, "pazo": 94, "soft": 94, "4067": 94, "4079": 94, "1007": 94, "s00500": 94, "04174": 94, "time_conv_size_": [95, 100], "max_pool_size_": 95, "pad_size_": 95, "half": [95, 104], "n_tce": 96, "d_model": 96, "d_ff": 96, "n_attn_head": 96, "after_reduced_cnn_s": 96, "multi": 96, "resolut": 96, "mrcnn": 96, "recalibr": 96, "tce": 96, "mechan": [96, 138], "captur": 96, "among": 96, "100hz": 96, "125hz": 96, "shh": 96, "unintend": 96, "clone": [96, 138], "positionwisefeedforward": 96, "emadeldeen24": 96, "attnsleep": 96, "sleepdata": 96, "n_block": 97, "add_log_softmax": 97, "n_in_chan": 97, "bai": 97, "bai2018": 97, "locuslab": 97, "kolter": 97, "koltun": 97, "recurr": 97, "01271": 97, "s_growth": 98, "t_filter": 98, "temp_lay": 98, "spat_lay": 98, "temp_span": 98, "thinker": [98, 138], "invari": [98, 138], "densenet": 98, "kosta": 98, "growth": 98, "densefilt": 98, "percentag": 98, "temp_len": 98, "1500": [98, 119], "spoclab": 98, "ca": 98, "thinkerinvari": 98, "rudzicz": 98, "across": [98, 108, 118, 122], "peopl": 98, "eng": 98, "056008": 98, "1741": 98, "2552": 98, "abb7a7": 98, "stager": 99, "middl": 99, "seq_len": 99, "n_time_filt": 100, "complexity_factor": 100, "0703125": 100, "ensure_odd_conv_s": 100, "autoencod": 100, "shrink": 100, "maxpool": 100, "fewer": [100, 104], "2x2": 100, "halv": 100, "ne": 100, "output_shap": 101, "subsequ": 102, "time_as_index": 102, "first_samp": 102, "last_samp": 102, "exce": 102, "exclud": [102, 104, 105, 108], "on_miss": [103, 109, 110], "emit": 103, "evok": [103, 104, 105, 108], "reorder_channel": 103, "drop_channel": 103, "filter_length": 104, "l_trans_bandwidth": 104, "h_trans_bandwidth": 104, "iir_param": 104, "fir_window": 104, "fir_design": 104, "skip_by_annot": 104, "bad_acq_skip": 104, "reflect_limit": [104, 107], "iir": 104, "meg0111": [104, 105], "meg2623": [104, 105], "reciproc": 104, "shortest": 104, "firwin2": 104, "5500m": 104, "doubl": 104, "off": 104, "cupi": [104, 107], "filtfilt": 104, "4th": 104, "butterworth": 104, "construct_iir_filt": 104, "symmetr": 104, "construct": [104, 108], "delai": [104, 138], "twice": 104, "minimum": 104, "weaker": 104, "lfilter": 104, "hann": 104, "blackman": 104, "concatenate_raw": 104, "acquisit": 104, "reflect": [104, 107], "mirror": [104, 107], "create_filt": 104, "savgol_filt": 104, "notch_filt": 104, "filter_data": 104, "apply_funct": [106, 116], "raw_or_epoch": 106, "npad": 107, "boxcar": 107, "joint": 108, "virtual": 108, "infin": 108, "footcit": 108, "yao2001": 108, "apply_proj": 108, "seeg": 108, "projector": 108, "set_bipolar_refer": 108, "bipolar": 108, "m1": 108, "m2": 108, "request": [108, 133], "reject": [109, 110, 111], "concatdataset": 109, "ie": 109, "winddow_size_sampl": 109, "exactli": 110, "inconsist": 110, "demeanin": 112, "exponent": [112, 113], "m_t": [112, 113], "mathrm": [112, 113], "factornew": [112, 113], "cdot": [112, 113], "x_t": [112, 113], "m_": [112, 113], "deman": 112, "_t": [112, 113], "demean": 112, "Then": 113, "varianc": 113, "v_t": 113, "v_": 113, "sqrt": 113, "stabil": 113, "frequency_band": 114, "drop_original_sign": 114, "order_by_frequency_band": 114, "mne_filter_kwarg": 114, "unfilt": 114, "oder": 114, "cz_4": 114, "o1_4": 114, "cz_8": 114, "o1_8": 114, "fileexistserror": 115, "suppos": 116, "mistakenli": 117, "forget": 117, "deriv": 117, "n_sequenc": [118, 121], "inspir": 118, "perslev2021": 118, "recordingsampl": [118, 120, 121], "randomst": [118, 119, 120, 121], "state": [118, 119, 120, 121], "sample_class": 118, "rec_ind": [118, 119], "multiindex": 119, "sample_record": 119, "sample_window": 119, "tau_max": 120, "banville2020": 120, "file_id": 121, "ensembl": [121, 138], "loss_funct": [122, 126], "n_batch": [122, 126], "target_extractor": [123, 124, 125], "on_epoch_end": [123, 124, 125], "on_batch_end": 124, "recomput": 125, "slightli": 125, "scorer": 125, "signatur": 125, "scalar": 125, "wors": 125, "tri": 125, "timeseri": 126, "window_len": 126, "mixup": [127, 138], "duplic": [129, 138], "atleast": 129, "2darrai": 129, "preds_per_tri": 129, "doc": [130, 137, 138], "lack": 130, "pythonhashse": 130, "forum": 130, "ai": 130, "solv": [130, 138], "31628": 130, "use_deterministic_algorithm": 130, "linearsegmentedcolormap": 132, "textcolor": 132, "fontweight": 132, "rotate_row_label": 132, "90": 132, "rotate_col_label": 132, "with_f1_scor": 132, "norm_ax": 132, "rotate_precis": 132, "class_names_fonts": 132, "font": 132, "bold": 132, "heavi": 132, "ultrabold": 132, "ultralight": 132, "hard": 133, "happen": [133, 138], "mistak": 133, "corrupt": 133, "irregular": 133, "chat": 133, "bear": 133, "tracker": 133, "sure": 133, "ve": 133, "shell": 133, "__version__": [133, 137], "latest": [133, 136, 137], "replic": 133, "link": [133, 138], "anonym": 133, "portion": 133, "persist": 133, "smallest": 133, "past": 133, "backtick": 133, "contributor": [133, 137], "snippet": 133, "toolbox": 134, "electrophysiolog": 134, "fetcher": 134, "neuroscientist": 134, "who": 134, "neurophysiolog": 134, "pypi": 135, "repositori": 135, "pip": [135, 136, 137, 138], "beginn": 135, "advanc": 135, "familiar": 135, "instruct": 135, "contribut": [135, 137], "braincod": 136, "command": [136, 137], "nvidia": 136, "driver": 136, "cuda_path": 136, "troubleshoot": 136, "thing": 137, "enter": 137, "git": 137, "cd": 137, "repo": 137, "zipbal": 137, "master": 137, "egg": 137, "edit": 137, "verifi": 137, "guidelin": 137, "whats_new": 138, "einop": 138, "466": 138, "extra": 138, "marco": 138, "zamboni": 138, "468": 138, "conda": 138, "yml": 138, "ci": 138, "479": 138, "refactor": 138, "sub": 138, "470": 138, "action": 138, "472": 138, "489": 138, "485": 138, "pierr": 138, "guetschel": 138, "490": 138, "487": 138, "473": 138, "488": 138, "495": 138, "sylvain": 138, "chevalli": 138, "494": 138, "bruna": 138, "lope": 138, "491": 138, "enforc": 138, "fuction": 138, "497": 138, "env": 138, "505": 138, "friendli": 138, "\u015bliwowski": 138, "shallowfbcsp": 138, "503": 138, "sampler": 138, "504": 138, "th\u00e9o": 138, "dropchannel": 138, "seteegrefer": 138, "514": 138, "eegresnet": 138, "451": 138, "465": 138, "397": 138, "eeginceptionmi": 138, "428": 138, "atcnet": 138, "429": 138, "431": 138, "mohammad": 138, "javad": 138, "oskar": 138, "st\u00f8rmer": 138, "deepsleepnet": 138, "417": 138, "eegconform": 138, "454": 138, "yonghao": 138, "461": 138, "e231": 138, "whitespac": 138, "untrac": 138, "flake8": 138, "transposit": 138, "_frequency_shift": 138, "446": 138, "matthieu": 138, "terri": 138, "390": 138, "eegitnet": 138, "ghaith": 138, "bouallegu": 138, "371": 138, "389": 138, "exemplifi": 138, "349": 138, "unifi": 138, "sheme": 138, "378": 138, "wimpff": 138, "391": 138, "406": 138, "recoding_id": 138, "402": 138, "ft_surrog": 138, "409": 138, "get_param": 138, "388": 138, "alex": 138, "413": 138, "zscore": 138, "mnepreproc": 138, "numpypreproc": 138, "415": 138, "411": 138, "263": 138, "tidnet": 138, "ann": 138, "kathrin": 138, "kiessner": 138, "henrik": 138, "bonsmann": 138, "vytauta": 138, "jankauska": 138, "274": 138, "254": 138, "thoma": 138, "facilit": 138, "287": 138, "aggregate_proba": 138, "294": 138, "balancedsequencesampl": 138, "295": 138, "277": 138, "318": 138, "261": 138, "cloneabl": 138, "347": 138, "353": 138, "docstr": 138, "333": 138, "365": 138, "367": 138, "304": 138, "mismatch": 138, "327": 138, "propag": 138, "269": 138, "favour": 138, "292": 138, "199": 138, "198": 138, "178": 138, "161": 138, "152": 138, "138": 138, "147": 138, "realiz": 138, "filterbank": 138, "158": 138, "159": 138, "timecrop": 138, "164": 138, "185": 138, "282": 138, "sleepstagerblanco2020": 138, "341": 138, "accident": 138, "sum": 138, "previou": 138, "167": 138, "compute_amplitude_gradi": 138, "4d": 138, "incorrect": 138, "146": 138, "169": 138, "window_s": 138, "148": 138, "171": 138, "155": 138, "223": 138, "favor": 138}, "objects": {"": [[0, 0, 0, "-", "braindecode"]], "braindecode.augmentation": [[33, 1, 1, "", "AugmentedDataLoader"], [34, 1, 1, "", "BandstopFilter"], [35, 1, 1, "", "ChannelsDropout"], [36, 1, 1, "", "ChannelsShuffle"], [37, 1, 1, "", "ChannelsSymmetry"], [38, 1, 1, "", "Compose"], [39, 1, 1, "", "FTSurrogate"], [40, 1, 1, "", "FrequencyShift"], [41, 1, 1, "", "GaussianNoise"], [42, 1, 1, "", "IdentityTransform"], [43, 1, 1, "", "Mixup"], [44, 1, 1, "", "SensorsRotation"], [45, 1, 1, "", "SensorsXRotation"], [46, 1, 1, "", "SensorsYRotation"], [47, 1, 1, "", "SensorsZRotation"], [48, 1, 1, "", "SignFlip"], [49, 1, 1, "", "SmoothTimeMask"], [50, 1, 1, "", "TimeReverse"], [51, 1, 1, "", "Transform"]], "braindecode.augmentation.BandstopFilter": [[34, 2, 1, "", "get_augmentation_params"], [34, 2, 1, "", "operation"]], "braindecode.augmentation.ChannelsDropout": [[35, 2, 1, "", "get_augmentation_params"], [35, 2, 1, "", "operation"]], "braindecode.augmentation.ChannelsShuffle": [[36, 2, 1, "", "get_augmentation_params"], [36, 2, 1, "", "operation"]], "braindecode.augmentation.ChannelsSymmetry": [[37, 2, 1, "", "get_augmentation_params"], [37, 2, 1, "", "operation"]], "braindecode.augmentation.Compose": [[38, 2, 1, "", "forward"]], "braindecode.augmentation.FTSurrogate": [[39, 2, 1, "", "get_augmentation_params"], [39, 2, 1, "", "operation"]], "braindecode.augmentation.FrequencyShift": [[40, 2, 1, "", "get_augmentation_params"], [40, 2, 1, "", "operation"]], "braindecode.augmentation.GaussianNoise": [[41, 2, 1, "", "get_augmentation_params"], [41, 2, 1, "", "operation"]], "braindecode.augmentation.IdentityTransform": [[42, 2, 1, "", "operation"]], "braindecode.augmentation.Mixup": [[43, 2, 1, "", "get_augmentation_params"], [43, 2, 1, "", "operation"]], "braindecode.augmentation.SensorsRotation": [[44, 2, 1, "", "get_augmentation_params"], [44, 2, 1, "", "operation"]], "braindecode.augmentation.SignFlip": [[48, 2, 1, "", "operation"]], "braindecode.augmentation.SmoothTimeMask": [[49, 2, 1, "", "get_augmentation_params"], [49, 2, 1, "", "operation"]], "braindecode.augmentation.TimeReverse": [[50, 2, 1, "", "operation"]], "braindecode.augmentation.Transform": [[51, 2, 1, "", "forward"], [51, 2, 1, "", "get_augmentation_params"]], "braindecode.augmentation.functional": [[52, 3, 1, "", "bandstop_filter"], [53, 3, 1, "", "channels_dropout"], [54, 3, 1, "", "channels_permute"], [55, 3, 1, "", "channels_shuffle"], [56, 3, 1, "", "frequency_shift"], [57, 3, 1, "", "ft_surrogate"], [58, 3, 1, "", "gaussian_noise"], [59, 3, 1, "", "identity"], [60, 3, 1, "", "mixup"], [61, 3, 1, "", "sensors_rotation"], [62, 3, 1, "", "sign_flip"], [63, 3, 1, "", "smooth_time_mask"], [64, 3, 1, "", "time_reverse"]], "braindecode.classifier": [[65, 1, 1, "", "EEGClassifier"]], "braindecode.classifier.EEGClassifier": [[65, 4, 1, "", "_criteria"], [65, 4, 1, "", "_modules"], [65, 4, 1, "", "_optimizers"], [65, 4, 1, "", "callbacks_"], [65, 4, 1, "", "classes_"], [65, 4, 1, "", "criterion_"], [65, 4, 1, "", "cuda_dependent_attributes_"], [65, 2, 1, "", "get_iterator"], [65, 2, 1, "", "get_loss"], [65, 4, 1, "", "initialized_"], [65, 4, 1, "", "module_"], [65, 2, 1, "", "predict"], [65, 2, 1, "", "predict_proba"], [65, 2, 1, "", "predict_trials"], [65, 4, 1, "", "prefixes_"]], "braindecode.datasets": [[66, 1, 1, "", "BCICompetitionIVDataset4"], [67, 1, 1, "", "BNCI2014001"], [68, 1, 1, "", "BaseConcatDataset"], [69, 1, 1, "", "BaseDataset"], [70, 1, 1, "", "HGD"], [71, 1, 1, "", "MOABBDataset"], [72, 1, 1, "", "SleepPhysionet"], [73, 1, 1, "", "TUH"], [74, 1, 1, "", "TUHAbnormal"], [75, 1, 1, "", "WindowsDataset"], [76, 3, 1, "", "create_from_X_y"], [77, 3, 1, "", "create_from_mne_epochs"], [78, 3, 1, "", "create_from_mne_raw"]], "braindecode.datasets.BCICompetitionIVDataset4": [[66, 2, 1, "", "download"]], "braindecode.datasets.BaseConcatDataset": [[68, 2, 1, "", "get_metadata"], [68, 2, 1, "", "save"], [68, 2, 1, "", "set_description"], [68, 2, 1, "", "split"]], "braindecode.datasets.BaseDataset": [[69, 2, 1, "", "set_description"]], "braindecode.datasets.WindowsDataset": [[75, 2, 1, "", "set_description"]], "braindecode.datautil": [[79, 3, 1, "", "load_concat_dataset"], [80, 3, 1, "", "save_concat_dataset"]], "braindecode.models": [[81, 1, 1, "", "ATCNet"], [82, 1, 1, "", "Deep4Net"], [83, 1, 1, "", "DeepSleepNet"], [84, 1, 1, "", "EEGConformer"], [85, 1, 1, "", "EEGITNet"], [86, 1, 1, "", "EEGInception"], [87, 1, 1, "", "EEGInceptionERP"], [88, 1, 1, "", "EEGInceptionMI"], [89, 1, 1, "", "EEGNetv1"], [90, 1, 1, "", "EEGNetv4"], [91, 1, 1, "", "EEGResNet"], [92, 1, 1, "", "HybridNet"], [93, 1, 1, "", "ShallowFBCSPNet"], [94, 1, 1, "", "SleepStagerBlanco2020"], [95, 1, 1, "", "SleepStagerChambon2018"], [96, 1, 1, "", "SleepStagerEldele2021"], [97, 1, 1, "", "TCN"], [98, 1, 1, "", "TIDNet"], [99, 1, 1, "", "TimeDistributed"], [100, 1, 1, "", "USleep"], [101, 3, 1, "", "get_output_shape"]], "braindecode.models.ATCNet": [[81, 2, 1, "", "forward"]], "braindecode.models.Deep4Net": [[82, 2, 1, "", "load_state_dict"]], "braindecode.models.DeepSleepNet": [[83, 2, 1, "", "forward"]], "braindecode.models.EEGConformer": [[84, 2, 1, "", "forward"], [84, 2, 1, "", "get_fc_size"]], "braindecode.models.EEGInceptionMI": [[88, 2, 1, "", "forward"]], "braindecode.models.HybridNet": [[92, 2, 1, "", "forward"]], "braindecode.models.ShallowFBCSPNet": [[93, 2, 1, "", "load_state_dict"]], "braindecode.models.SleepStagerBlanco2020": [[94, 2, 1, "", "forward"]], "braindecode.models.SleepStagerChambon2018": [[95, 2, 1, "", "forward"]], "braindecode.models.SleepStagerEldele2021": [[96, 2, 1, "", "forward"]], "braindecode.models.TCN": [[97, 2, 1, "", "forward"]], "braindecode.models.TIDNet": [[98, 2, 1, "", "forward"]], "braindecode.models.TimeDistributed": [[99, 2, 1, "", "forward"]], "braindecode.models.USleep": [[100, 2, 1, "", "forward"]], "braindecode.preprocessing": [[102, 1, 1, "", "Crop"], [103, 1, 1, "", "DropChannels"], [104, 1, 1, "", "Filter"], [105, 1, 1, "", "Pick"], [106, 1, 1, "", "Preprocessor"], [107, 1, 1, "", "Resample"], [108, 1, 1, "", "SetEEGReference"], [109, 3, 1, "", "create_fixed_length_windows"], [110, 3, 1, "", "create_windows_from_events"], [111, 3, 1, "", "create_windows_from_target_channels"], [112, 3, 1, "", "exponential_moving_demean"], [113, 3, 1, "", "exponential_moving_standardize"], [114, 3, 1, "", "filterbank"], [115, 3, 1, "", "preprocess"], [116, 3, 1, "", "scale"]], "braindecode.preprocessing.Preprocessor": [[106, 2, 1, "", "apply"]], "braindecode.regressor": [[117, 1, 1, "", "EEGRegressor"]], "braindecode.regressor.EEGRegressor": [[117, 4, 1, "", "_criteria"], [117, 4, 1, "", "_modules"], [117, 4, 1, "", "_optimizers"], [117, 4, 1, "", "callbacks_"], [117, 4, 1, "", "criterion_"], [117, 4, 1, "", "cuda_dependent_attributes_"], [117, 2, 1, "", "fit"], [117, 2, 1, "", "get_iterator"], [117, 4, 1, "", "initialized_"], [117, 4, 1, "", "module_"], [117, 2, 1, "", "predict_proba"], [117, 2, 1, "", "predict_trials"], [117, 4, 1, "", "prefixes_"]], "braindecode.samplers": [[118, 1, 1, "", "BalancedSequenceSampler"], [119, 1, 1, "", "RecordingSampler"], [120, 1, 1, "", "RelativePositioningSampler"], [121, 1, 1, "", "SequenceSampler"]], "braindecode.samplers.BalancedSequenceSampler": [[118, 2, 1, "", "sample_class"]], "braindecode.samplers.RecordingSampler": [[119, 4, 1, "", "info"], [119, 4, 1, "", "n_recordings"], [119, 2, 1, "", "sample_recording"], [119, 2, 1, "", "sample_window"]], "braindecode.samplers.RelativePositioningSampler": [[120, 2, 1, "", "presample"]], "braindecode.samplers.SequenceSampler": [[121, 4, 1, "", "file_ids"], [121, 4, 1, "", "info"]], "braindecode.training": [[122, 1, 1, "", "CroppedLoss"], [123, 1, 1, "", "CroppedTimeSeriesEpochScoring"], [124, 1, 1, "", "CroppedTrialEpochScoring"], [125, 1, 1, "", "PostEpochTrainScoring"], [126, 1, 1, "", "TimeSeriesLoss"], [127, 3, 1, "", "mixup_criterion"], [128, 3, 1, "", "predict_trials"], [129, 3, 1, "", "trial_preds_from_window_preds"]], "braindecode.training.CroppedLoss": [[122, 2, 1, "", "forward"]], "braindecode.training.CroppedTimeSeriesEpochScoring": [[123, 2, 1, "", "on_epoch_end"]], "braindecode.training.CroppedTrialEpochScoring": [[124, 2, 1, "", "on_batch_end"], [124, 2, 1, "", "on_epoch_end"]], "braindecode.training.PostEpochTrainScoring": [[125, 2, 1, "", "on_epoch_end"]], "braindecode.training.TimeSeriesLoss": [[126, 2, 1, "", "forward"]], "braindecode.util": [[130, 3, 1, "", "set_random_seeds"]], "braindecode.visualization": [[131, 3, 1, "", "compute_amplitude_gradients"], [132, 3, 1, "", "plot_confusion_matrix"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"]}, "titleterms": {"api": [0, 138], "refer": [0, 4, 5, 9, 10, 11, 26, 27, 29, 30, 133], "classifi": [0, 30, 65], "regressor": [0, 30, 117], "model": [0, 2, 3, 4, 5, 8, 9, 10, 11, 22, 24, 25, 26, 27, 28, 29, 30, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "train": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 22, 24, 25, 26, 27, 28, 29, 30, 122, 123, 124, 125, 126, 127, 128, 129], "dataset": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "preprocess": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116], "data": [0, 3, 4, 12, 15, 22, 24, 26, 27, 30], "util": [0, 28, 130], "sampler": [0, 5, 9, 10, 11, 118, 119, 120, 121], "augment": [0, 3, 4, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], "visual": [0, 3, 5, 28, 131, 132], "advanc": [1, 24], "neural": [1, 24, 29, 30], "network": [1, 9, 11, 24, 29, 30], "strategi": [1, 24], "finger": [2, 8], "flexion": [2, 8], "crop": [2, 26, 102], "decod": [2, 8, 26, 27], "bcic": [2, 3, 4, 8, 26], "iv": [2, 3, 4, 8, 26], "4": [2, 8], "ecog": [2, 8], "load": [2, 3, 4, 5, 8, 9, 10, 11, 14, 15, 18, 21, 24, 27, 28, 29], "prepar": [2, 8, 27], "split": [2, 3, 4, 5, 8, 9, 10, 11, 21, 26, 27, 28, 29], "test": [2, 5, 8, 28, 30, 137], "creat": [2, 3, 4, 5, 8, 9, 10, 11, 12, 22, 26, 27, 28, 29], "cut": [2, 8, 12, 26, 27, 28, 29], "comput": [2, 6, 8, 12, 13, 23, 26, 27, 28, 29, 31], "window": [2, 3, 4, 5, 8, 9, 10, 11, 12, 22, 26, 27, 28, 29, 30], "plot": [2, 4, 8, 9, 10, 11, 26, 27, 29], "result": [2, 4, 5, 8, 9, 10, 11, 26, 27, 29], "2a": [3, 4, 26], "thi": [3, 4, 5, 12, 21, 26, 27, 28, 29], "exampl": [3, 4, 5, 7, 12, 17, 18, 19, 20, 21, 24, 26, 27, 28, 29, 33, 35, 38, 39, 40, 48, 49, 51, 66, 68, 69, 71, 72, 73, 74, 76, 77, 78, 79, 82, 93, 95, 96, 99, 100, 101, 106, 109, 110, 111, 113, 115, 116, 119, 120, 121, 122, 123, 124, 126, 130, 132], "cover": [3, 4, 5, 12, 21, 26, 27, 28, 29], "extract": [3, 4, 5, 9, 10, 11], "valid": [3, 4, 5, 8, 9, 10, 11, 27, 28, 29], "defin": [3, 4, 28, 30], "transform": [3, 4, 51], "manipul": 3, "one": 3, "session": 3, "an": [3, 4], "eegclassifi": [3, 4, 65], "desir": [3, 4], "manual": 3, "compos": [3, 38], "set": [3, 5, 27], "level": 3, "search": 4, "best": [4, 29], "list": 4, "analys": 4, "fit": 4, "self": 5, "supervis": 5, "learn": [5, 29], "eeg": [5, 12, 22, 27], "rel": 5, "posit": 5, "raw": 5, "record": [5, 12], "inspect": 5, "pretext": 5, "task": 5, "perform": 5, "us": [5, 9, 10, 11, 12, 33, 35, 38, 39, 40, 48, 49, 51, 66, 68, 69, 71, 72, 73, 74, 76, 77, 78, 79, 82, 93, 95, 96, 99, 100, 101, 106, 109, 110, 111, 113, 115, 116, 119, 120, 121, 122, 123, 124, 126, 130, 132], "represent": 5, "sleep": [5, 9, 10, 11], "stage": [5, 9, 10, 11], "conclus": 5, "time": [6, 13, 23, 31], "appli": [7, 24], "real": [7, 24], "world": [7, 24], "physionet": [9, 10, 11], "chambon2018": 9, "sequenc": [9, 10, 11], "eldele2021": 10, "u": 11, "process": 12, "big": 12, "resourc": 12, "tuh": [12, 22, 73], "corpu": [12, 22], "tuhmock": 12, "select": 12, "combin": 12, "step": 12, "benchmark": [14, 16], "eager": 14, "lazi": 14, "organ": [15, 24], "parallel": 16, "serial": 16, "custom": 17, "save": 18, "mne": [19, 32], "moabb": [20, 27], "By": 21, "descript": 21, "inform": 21, "row": 21, "index": 21, "observ": 21, "multipl": 22, "discret": 22, "target": 22, "templ": 22, "univers": 22, "hospit": 22, "explor": 22, "dataload": 22, "basic": [24, 25, 27], "build": [24, 25], "paramet": 26, "i": [26, 28, 133, 137], "again": 26, "same": 26, "code": 26, "trialwis": 26, "confus": [26, 27], "matrix": [26, 27], "brain": 27, "how": [28, 32, 133], "tune": [28, 29], "your": [28, 137], "why": [28, 29], "should": 28, "care": 28, "about": 28, "evalu": [28, 30], "etc": 28, "option": 28, "1": [28, 138], "simpl": 28, "let": 28, "": [28, 138], "first": 28, "function": [28, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], "2": 28, "val": 28, "second": 28, "3": 28, "k": 28, "fold": 28, "cross": 28, "third": 28, "hyperparamet": [28, 29], "scikit": 29, "do": [29, 133], "you": 29, "need": 29, "get": [29, 133], "convolut": 30, "regress": 30, "fake": 30, "gener": 30, "cnn": 30, "convert": 30, "braindecod": [30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137], "choos": 30, "between": 30, "gpu": 30, "cpu": 30, "processor": 30, "cite": [32, 133], "other": 32, "algorithm": 32, "augmenteddataload": 33, "bandstopfilt": 34, "channelsdropout": 35, "channelsshuffl": 36, "channelssymmetri": 37, "ftsurrog": 39, "frequencyshift": 40, "gaussiannois": 41, "identitytransform": 42, "mixup": [43, 60], "sensorsrot": 44, "sensorsxrot": 45, "sensorsyrot": 46, "sensorszrot": 47, "signflip": 48, "smoothtimemask": 49, "timerevers": 50, "bandstop_filt": 52, "channels_dropout": 53, "channels_permut": 54, "channels_shuffl": 55, "frequency_shift": 56, "ft_surrog": 57, "gaussian_nois": 58, "ident": 59, "sensors_rot": 61, "sign_flip": 62, "smooth_time_mask": 63, "time_revers": 64, "bcicompetitionivdataset4": 66, "bnci2014001": 67, "summari": [67, 70], "baseconcatdataset": 68, "basedataset": 69, "hgd": 70, "moabbdataset": 71, "sleepphysionet": 72, "tuhabnorm": 74, "windowsdataset": 75, "create_from_x_i": 76, "create_from_mne_epoch": 77, "create_from_mne_raw": 78, "datautil": [79, 80], "load_concat_dataset": 79, "save_concat_dataset": 80, "atcnet": 81, "deep4net": 82, "deepsleepnet": 83, "eegconform": 84, "eegitnet": 85, "eegincept": 86, "eeginceptionerp": 87, "eeginceptionmi": 88, "eegnetv1": 89, "eegnetv4": 90, "eegresnet": 91, "hybridnet": 92, "shallowfbcspnet": 93, "sleepstagerblanco2020": 94, "sleepstagerchambon2018": 95, "sleepstagereldele2021": 96, "tcn": 97, "tidnet": 98, "timedistribut": 99, "usleep": 100, "get_output_shap": 101, "dropchannel": 103, "filter": 104, "pick": 105, "preprocessor": 106, "resampl": 107, "seteegrefer": 108, "create_fixed_length_window": 109, "create_windows_from_ev": 110, "create_windows_from_target_channel": 111, "exponential_moving_demean": 112, "exponential_moving_standard": 113, "filterbank": 114, "scale": 116, "eegregressor": 117, "balancedsequencesampl": 118, "recordingsampl": 119, "relativepositioningsampl": 120, "sequencesampl": 121, "croppedloss": 122, "croppedtimeseriesepochscor": 123, "croppedtrialepochscor": 124, "postepochtrainscor": 125, "timeseriesloss": 126, "mixup_criterion": 127, "predict_tri": 128, "trial_preds_from_window_pr": 129, "set_random_se": 130, "compute_amplitude_gradi": 131, "plot_confusion_matrix": 132, "frequent": 133, "ask": 133, "question": 133, "faq": 133, "help": 133, "can": 133, "t": 133, "python": 133, "work": [133, 137], "still": 133, "think": 133, "found": 133, "bug": [133, 138], "what": [133, 138], "homepag": 134, "instal": [135, 136, 137], "from": [136, 137], "pypi": 136, "sourc": 137, "clone": 137, "repositori": 137, "github": 137, "new": 138, "current": 138, "0": 138, "8": 138, "dev0": 138, "enhanc": 138, "chang": 138, "7": 138, "10": 138, "2022": 138, "version": 138, "6": 138, "2021": 138, "12": 138, "06": 138, "5": 138, "07": 138, "14": 138, "author": 138}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"API Reference": [[0, "api-reference"]], "Classifier": [[0, "classifier"]], "Regressor": [[0, "regressor"]], "Models": [[0, "models"]], "Training": [[0, "training"], [2, "training"], [5, "training"], [8, "training"], [9, "training"], [10, "training"], [11, "training"], [26, "training"], [29, "training"]], "Datasets": [[0, "datasets"]], "Preprocessing": [[0, "preprocessing"], [2, "preprocessing"], [3, "preprocessing"], [4, "preprocessing"], [5, "preprocessing"], [8, "preprocessing"], [9, "preprocessing"], [10, "preprocessing"], [11, "preprocessing"], [12, "preprocessing"], [27, "preprocessing"], [28, "preprocessing"], [29, "preprocessing"]], "Data Utils": [[0, "data-utils"]], "Samplers": [[0, "samplers"]], "Augmentation": [[0, "augmentation"]], "Utils": [[0, "utils"]], "Visualization": [[0, "visualization"]], "Advanced neural network training strategies": [[1, "advanced-neural-network-training-strategies"], [24, "advanced-neural-network-training-strategies"]], "Fingers flexion cropped decoding on BCIC IV 4 ECoG Dataset": [[2, "fingers-flexion-cropped-decoding-on-bcic-iv-4-ecog-dataset"]], "Loading and preparing the dataset": [[2, "loading-and-preparing-the-dataset"], [8, "loading-and-preparing-the-dataset"]], "Loading": [[2, "loading"], [3, "loading"], [4, "loading"], [8, "loading"], [9, "loading"], [10, "loading"], [11, "loading"], [28, "loading"], [29, "loading"]], "Split dataset into train and test": [[2, "split-dataset-into-train-and-test"], [28, "split-dataset-into-train-and-test"]], "Create model": [[2, "create-model"], [3, "create-model"], [4, "create-model"], [8, "create-model"], [9, "create-model"], [10, "create-model"], [11, "create-model"], [28, "create-model"], [29, "create-model"]], "Cut Compute Windows": [[2, "cut-compute-windows"], [8, "cut-compute-windows"], [12, "cut-compute-windows"], [28, "cut-compute-windows"], [29, "cut-compute-windows"]], "Plot Results": [[2, "plot-results"], [8, "plot-results"], [26, "plot-results"]], "Data Augmentation on BCIC IV 2a Dataset": [[3, "data-augmentation-on-bcic-iv-2a-dataset"]], "This example covers:": [[3, "this-example-covers"], [4, "this-example-covers"], [5, "this-example-covers"], [12, "this-example-covers"], [21, "this-example-covers"], [26, "this-example-covers"], [27, "this-example-covers"], [28, "this-example-covers"], [29, "this-example-covers"]], "Loading and preprocessing the dataset": [[3, "loading-and-preprocessing-the-dataset"], [4, "loading-and-preprocessing-the-dataset"], [5, "loading-and-preprocessing-the-dataset"], [9, "loading-and-preprocessing-the-dataset"], [10, "loading-and-preprocessing-the-dataset"], [11, "loading-and-preprocessing-the-dataset"], [29, "loading-and-preprocessing-the-dataset"]], "Extracting windows": [[3, "extracting-windows"], [4, "extracting-windows"], [5, "extracting-windows"]], "Split dataset into train and valid": [[3, "split-dataset-into-train-and-valid"], [4, "split-dataset-into-train-and-valid"], [9, "split-dataset-into-train-and-valid"], [10, "split-dataset-into-train-and-valid"], [11, "split-dataset-into-train-and-valid"], [29, "split-dataset-into-train-and-valid"]], "Defining a Transform": [[3, "defining-a-transform"]], "Manipulating one session and visualizing the transformed data": [[3, "manipulating-one-session-and-visualizing-the-transformed-data"]], "Training a model with data augmentation": [[3, "training-a-model-with-data-augmentation"], [4, "training-a-model-with-data-augmentation"]], "Create an EEGClassifier with the desired augmentation": [[3, "create-an-eegclassifier-with-the-desired-augmentation"], [4, "create-an-eegclassifier-with-the-desired-augmentation"]], "Manually composing Transforms": [[3, "manually-composing-transforms"]], "Setting the data augmentation at the Dataset level": [[3, "setting-the-data-augmentation-at-the-dataset-level"]], "Searching the best data augmentation on BCIC IV 2a Dataset": [[4, "searching-the-best-data-augmentation-on-bcic-iv-2a-dataset"]], "Data Augmentation": [[4, null]], "Defining a list of transforms": [[4, "defining-a-list-of-transforms"]], "Analysing the best fit": [[4, "analysing-the-best-fit"]], "Plot results": [[4, "plot-results"], [9, "plot-results"], [10, "plot-results"], [11, "plot-results"]], "References": [[4, "references"], [5, "references"], [9, "references"], [10, "references"], [11, "references"], [26, "references"], [27, "references"], [29, "references"], [30, "references"], [133, "references"]], "Self-supervised learning on EEG with relative positioning": [[5, "self-supervised-learning-on-eeg-with-relative-positioning"]], "Self-supervised learning": [[5, null]], "Loading the raw recordings": [[5, "loading-the-raw-recordings"]], "Preprocessing windows": [[5, "preprocessing-windows"]], "Splitting dataset into train, valid and test sets": [[5, "splitting-dataset-into-train-valid-and-test-sets"]], "Creating samplers": [[5, "creating-samplers"]], "Creating the model": [[5, "creating-the-model"]], "Visualizing the results": [[5, "visualizing-the-results"]], "Inspecting pretext task performance": [[5, "inspecting-pretext-task-performance"]], "Using the learned representation for sleep staging": [[5, "using-the-learned-representation-for-sleep-staging"]], "Conclusion": [[5, "conclusion"]], "Computation times": [[6, "computation-times"], [13, "computation-times"], [23, "computation-times"], [31, "computation-times"]], "Applied examples on real-world datasets": [[7, "applied-examples-on-real-world-datasets"], [24, "applied-examples-on-real-world-datasets"]], "Fingers flexion decoding on BCIC IV 4 ECoG Dataset": [[8, "fingers-flexion-decoding-on-bcic-iv-4-ecog-dataset"]], "Split dataset into train, valid, and test": [[8, "split-dataset-into-train-valid-and-test"]], "Sleep staging on the Sleep Physionet dataset using Chambon2018 network": [[9, "sleep-staging-on-the-sleep-physionet-dataset-using-chambon2018-network"]], "Extract windows": [[9, "extract-windows"], [10, "extract-windows"], [11, "extract-windows"]], "Window preprocessing": [[9, "window-preprocessing"], [10, "window-preprocessing"]], "Create sequence samplers": [[9, "create-sequence-samplers"], [10, "create-sequence-samplers"], [11, "create-sequence-samplers"]], "Sleep staging on the Sleep Physionet dataset using Eldele2021": [[10, "sleep-staging-on-the-sleep-physionet-dataset-using-eldele2021"]], "Sleep staging on the Sleep Physionet dataset using U-Sleep network": [[11, "sleep-staging-on-the-sleep-physionet-dataset-using-u-sleep-network"]], "Process a big data EEG resource (TUH EEG Corpus)": [[12, "process-a-big-data-eeg-resource-tuh-eeg-corpus"]], "Creating the dataset using TUHMock": [[12, "creating-the-dataset-using-tuhmock"]], "Selecting recordings": [[12, "selecting-recordings"]], "Combining preprocessing steps": [[12, "combining-preprocessing-steps"]], "Benchmarking eager and lazy loading": [[14, "benchmarking-eager-and-lazy-loading"]], "Loading and organizing data": [[15, "loading-and-organizing-data"], [24, "loading-and-organizing-data"]], "Benchmarking preprocessing with parallelization and serialization": [[16, "benchmarking-preprocessing-with-parallelization-and-serialization"]], "Custom Dataset Example": [[17, "custom-dataset-example"]], "Load and save dataset example": [[18, "load-and-save-dataset-example"]], "MNE Dataset Example": [[19, "mne-dataset-example"]], "MOABB Dataset Example": [[20, "moabb-dataset-example"]], "Split Dataset Example": [[21, "split-dataset-example"]], "Loading the dataset": [[21, "loading-the-dataset"]], "Splitting": [[21, "splitting"]], "By description information": [[21, "by-description-information"]], "By row index": [[21, "by-row-index"]], "Observation": [[21, "observation"]], "Multiple discrete targets with the TUH EEG Corpus": [[22, "multiple-discrete-targets-with-the-tuh-eeg-corpus"]], "Creating Temple University Hospital (TUH) EEG Corpus Dataset": [[22, "creating-temple-university-hospital-tuh-eeg-corpus-dataset"]], "Exploring Data": [[22, "exploring-data"]], "Creating Windows": [[22, "creating-windows"]], "Exploring Windows": [[22, "exploring-windows"]], "DataLoader for Model Training": [[22, "dataloader-for-model-training"]], "Exploring DataLoader": [[22, "exploring-dataloader"]], "Examples": [[24, "examples"]], "Basic model building and training": [[24, "basic-model-building-and-training"], [25, "basic-model-building-and-training"]], "Cropped Decoding on BCIC IV 2a Dataset": [[26, "cropped-decoding-on-bcic-iv-2a-dataset"]], "Create model and compute windowing parameters": [[26, "create-model-and-compute-windowing-parameters"]], "Cut the data into windows": [[26, "cut-the-data-into-windows"]], "Split the dataset": [[26, "split-the-dataset"]], "This is again the same code as in trialwise decoding.": [[26, "this-is-again-the-same-code-as-in-trialwise-decoding"]], "Plot Confusion Matrix": [[26, "plot-confusion-matrix"]], "Basic Brain Decoding on EEG Data": [[27, "basic-brain-decoding-on-eeg-data"]], "Loading and preparing the data": [[27, "loading-and-preparing-the-data"]], "Loading a MOABB dataset": [[27, "loading-a-moabb-dataset"]], "Cutting Compute Windows": [[27, "cutting-compute-windows"]], "Splitting the dataset into training and validation sets": [[27, "splitting-the-dataset-into-training-and-validation-sets"]], "Creating a model": [[27, "creating-a-model"]], "Model Training": [[27, "model-training"]], "Plotting Results": [[27, "plotting-results"]], "Plotting a  Confusion Matrix": [[27, "plotting-a-confusion-matrix"]], "How to train, test and tune your model": [[28, "how-to-train-test-and-tune-your-model"]], "Why should I care about model evaluation?": [[28, "why-should-i-care-about-model-evaluation"]], "Loading, preprocessing, defining a model, etc.": [[28, "loading-preprocessing-defining-a-model-etc"]], "How to train and evaluate your model": [[28, "how-to-train-and-evaluate-your-model"]], "Option 1: Simple Train-Test Split": [[28, "option-1-simple-train-test-split"]], "Let\u2019s visualize the first option with a util function.": [[28, "let-s-visualize-the-first-option-with-a-util-function"]], "Option 2: Train-Val-Test Split": [[28, "option-2-train-val-test-split"]], "Let\u2019s visualize the second option with a util function.": [[28, "let-s-visualize-the-second-option-with-a-util-function"]], "Option 3: k-Fold Cross Validation": [[28, "option-3-k-fold-cross-validation"]], "Let\u2019s visualize the third option with a util function.": [[28, "let-s-visualize-the-third-option-with-a-util-function"]], "How to tune your hyperparameters": [[28, "how-to-tune-your-hyperparameters"]], "Option 1: Train-Val-Test Split": [[28, "option-1-train-val-test-split"]], "Option 2: k-Fold Cross Validation": [[28, "option-2-k-fold-cross-validation"]], "Hyperparameter tuning with scikit-learn": [[29, "hyperparameter-tuning-with-scikit-learn"]], "Why do you need to tune the neural networks model?": [[29, null]], "Plotting the results": [[29, "plotting-the-results"]], "Get the best hyperparameters": [[29, "get-the-best-hyperparameters"]], "Convolutional neural network regression model on fake data.": [[30, "convolutional-neural-network-regression-model-on-fake-data"]], "Fake regression data": [[30, "fake-regression-data"]], "Generating fake regression dataset": [[30, "generating-fake-regression-dataset"]], "Defining a CNN regression model": [[30, "defining-a-cnn-regression-model"]], "Converting a braindecode classifier model to a regressor model": [[30, "converting-a-braindecode-classifier-model-to-a-regressor-model"]], "Choosing between GPU and CPU processors": [[30, "choosing-between-gpu-and-cpu-processors"]], "Data windowing": [[30, "data-windowing"]], "Model training": [[30, "model-training"]], "Model evaluation": [[30, "model-evaluation"]], "Model testing": [[30, "model-testing"]], "How to cite Braindecode": [[32, "how-to-cite-braindecode"]], "Citing the Braindecode": [[32, "citing-the-braindecode"]], "Citing the MNE": [[32, "citing-the-mne"]], "Citing other algorithms": [[32, "citing-other-algorithms"]], "braindecode.augmentation.AugmentedDataLoader": [[33, "braindecode-augmentation-augmenteddataloader"]], "Examples using braindecode.augmentation.AugmentedDataLoader": [[33, "examples-using-braindecode-augmentation-augmenteddataloader"]], "braindecode.augmentation.BandstopFilter": [[34, "braindecode-augmentation-bandstopfilter"]], "braindecode.augmentation.ChannelsDropout": [[35, "braindecode-augmentation-channelsdropout"]], "Examples using braindecode.augmentation.ChannelsDropout": [[35, "examples-using-braindecode-augmentation-channelsdropout"]], "braindecode.augmentation.ChannelsShuffle": [[36, "braindecode-augmentation-channelsshuffle"]], "braindecode.augmentation.ChannelsSymmetry": [[37, "braindecode-augmentation-channelssymmetry"]], "braindecode.augmentation.Compose": [[38, "braindecode-augmentation-compose"]], "Examples using braindecode.augmentation.Compose": [[38, "examples-using-braindecode-augmentation-compose"]], "braindecode.augmentation.FTSurrogate": [[39, "braindecode-augmentation-ftsurrogate"]], "Examples using braindecode.augmentation.FTSurrogate": [[39, "examples-using-braindecode-augmentation-ftsurrogate"]], "braindecode.augmentation.FrequencyShift": [[40, "braindecode-augmentation-frequencyshift"]], "Examples using braindecode.augmentation.FrequencyShift": [[40, "examples-using-braindecode-augmentation-frequencyshift"]], "braindecode.augmentation.GaussianNoise": [[41, "braindecode-augmentation-gaussiannoise"]], "braindecode.augmentation.IdentityTransform": [[42, "braindecode-augmentation-identitytransform"]], "braindecode.augmentation.Mixup": [[43, "braindecode-augmentation-mixup"]], "braindecode.augmentation.SensorsRotation": [[44, "braindecode-augmentation-sensorsrotation"]], "braindecode.augmentation.SensorsXRotation": [[45, "braindecode-augmentation-sensorsxrotation"]], "braindecode.augmentation.SensorsYRotation": [[46, "braindecode-augmentation-sensorsyrotation"]], "braindecode.augmentation.SensorsZRotation": [[47, "braindecode-augmentation-sensorszrotation"]], "braindecode.augmentation.SignFlip": [[48, "braindecode-augmentation-signflip"]], "Examples using braindecode.augmentation.SignFlip": [[48, "examples-using-braindecode-augmentation-signflip"]], "braindecode.augmentation.SmoothTimeMask": [[49, "braindecode-augmentation-smoothtimemask"]], "Examples using braindecode.augmentation.SmoothTimeMask": [[49, "examples-using-braindecode-augmentation-smoothtimemask"]], "braindecode.augmentation.TimeReverse": [[50, "braindecode-augmentation-timereverse"]], "braindecode.augmentation.Transform": [[51, "braindecode-augmentation-transform"]], "Examples using braindecode.augmentation.Transform": [[51, "examples-using-braindecode-augmentation-transform"]], "braindecode.augmentation.functional.bandstop_filter": [[52, "braindecode-augmentation-functional-bandstop-filter"]], "braindecode.augmentation.functional.channels_dropout": [[53, "braindecode-augmentation-functional-channels-dropout"]], "braindecode.augmentation.functional.channels_permute": [[54, "braindecode-augmentation-functional-channels-permute"]], "braindecode.augmentation.functional.channels_shuffle": [[55, "braindecode-augmentation-functional-channels-shuffle"]], "braindecode.augmentation.functional.frequency_shift": [[56, "braindecode-augmentation-functional-frequency-shift"]], "braindecode.augmentation.functional.ft_surrogate": [[57, "braindecode-augmentation-functional-ft-surrogate"]], "braindecode.augmentation.functional.gaussian_noise": [[58, "braindecode-augmentation-functional-gaussian-noise"]], "braindecode.augmentation.functional.identity": [[59, "braindecode-augmentation-functional-identity"]], "braindecode.augmentation.functional.mixup": [[60, "braindecode-augmentation-functional-mixup"]], "braindecode.augmentation.functional.sensors_rotation": [[61, "braindecode-augmentation-functional-sensors-rotation"]], "braindecode.augmentation.functional.sign_flip": [[62, "braindecode-augmentation-functional-sign-flip"]], "braindecode.augmentation.functional.smooth_time_mask": [[63, "braindecode-augmentation-functional-smooth-time-mask"]], "braindecode.augmentation.functional.time_reverse": [[64, "braindecode-augmentation-functional-time-reverse"]], "braindecode.classifier.EEGClassifier": [[65, "braindecode-classifier-eegclassifier"]], "braindecode.datasets.BCICompetitionIVDataset4": [[66, "braindecode-datasets-bcicompetitionivdataset4"]], "Examples using braindecode.datasets.BCICompetitionIVDataset4": [[66, "examples-using-braindecode-datasets-bcicompetitionivdataset4"]], "braindecode.datasets.BNCI2014001": [[67, "braindecode-datasets-bnci2014001"]], "Dataset summary": [[67, null], [70, null]], "braindecode.datasets.BaseConcatDataset": [[68, "braindecode-datasets-baseconcatdataset"]], "Examples using braindecode.datasets.BaseConcatDataset": [[68, "examples-using-braindecode-datasets-baseconcatdataset"]], "braindecode.datasets.BaseDataset": [[69, "braindecode-datasets-basedataset"]], "Examples using braindecode.datasets.BaseDataset": [[69, "examples-using-braindecode-datasets-basedataset"]], "braindecode.datasets.HGD": [[70, "braindecode-datasets-hgd"]], "braindecode.datasets.MOABBDataset": [[71, "braindecode-datasets-moabbdataset"]], "Examples using braindecode.datasets.MOABBDataset": [[71, "examples-using-braindecode-datasets-moabbdataset"]], "braindecode.datasets.SleepPhysionet": [[72, "braindecode-datasets-sleepphysionet"]], "Examples using braindecode.datasets.SleepPhysionet": [[72, "examples-using-braindecode-datasets-sleepphysionet"]], "braindecode.datasets.TUH": [[73, "braindecode-datasets-tuh"]], "Examples using braindecode.datasets.TUH": [[73, "examples-using-braindecode-datasets-tuh"]], "braindecode.datasets.TUHAbnormal": [[74, "braindecode-datasets-tuhabnormal"]], "Examples using braindecode.datasets.TUHAbnormal": [[74, "examples-using-braindecode-datasets-tuhabnormal"]], "braindecode.datasets.WindowsDataset": [[75, "braindecode-datasets-windowsdataset"]], "braindecode.datasets.create_from_X_y": [[76, "braindecode-datasets-create-from-x-y"]], "Examples using braindecode.datasets.create_from_X_y": [[76, "examples-using-braindecode-datasets-create-from-x-y"]], "braindecode.datasets.create_from_mne_epochs": [[77, "braindecode-datasets-create-from-mne-epochs"]], "Examples using braindecode.datasets.create_from_mne_epochs": [[77, "examples-using-braindecode-datasets-create-from-mne-epochs"]], "braindecode.datasets.create_from_mne_raw": [[78, "braindecode-datasets-create-from-mne-raw"]], "Examples using braindecode.datasets.create_from_mne_raw": [[78, "examples-using-braindecode-datasets-create-from-mne-raw"]], "braindecode.datautil.load_concat_dataset": [[79, "braindecode-datautil-load-concat-dataset"]], "Examples using braindecode.datautil.load_concat_dataset": [[79, "examples-using-braindecode-datautil-load-concat-dataset"]], "braindecode.datautil.save_concat_dataset": [[80, "braindecode-datautil-save-concat-dataset"]], "braindecode.models.ATCNet": [[81, "braindecode-models-atcnet"]], "braindecode.models.Deep4Net": [[82, "braindecode-models-deep4net"]], "Examples using braindecode.models.Deep4Net": [[82, "examples-using-braindecode-models-deep4net"]], "braindecode.models.DeepSleepNet": [[83, "braindecode-models-deepsleepnet"]], "braindecode.models.EEGConformer": [[84, "braindecode-models-eegconformer"]], "braindecode.models.EEGITNet": [[85, "braindecode-models-eegitnet"]], "braindecode.models.EEGInception": [[86, "braindecode-models-eeginception"]], "braindecode.models.EEGInceptionERP": [[87, "braindecode-models-eeginceptionerp"]], "braindecode.models.EEGInceptionMI": [[88, "braindecode-models-eeginceptionmi"]], "braindecode.models.EEGNetv1": [[89, "braindecode-models-eegnetv1"]], "braindecode.models.EEGNetv4": [[90, "braindecode-models-eegnetv4"]], "braindecode.models.EEGResNet": [[91, "braindecode-models-eegresnet"]], "braindecode.models.HybridNet": [[92, "braindecode-models-hybridnet"]], "braindecode.models.ShallowFBCSPNet": [[93, "braindecode-models-shallowfbcspnet"]], "Examples using braindecode.models.ShallowFBCSPNet": [[93, "examples-using-braindecode-models-shallowfbcspnet"]], "braindecode.models.SleepStagerBlanco2020": [[94, "braindecode-models-sleepstagerblanco2020"]], "braindecode.models.SleepStagerChambon2018": [[95, "braindecode-models-sleepstagerchambon2018"]], "Examples using braindecode.models.SleepStagerChambon2018": [[95, "examples-using-braindecode-models-sleepstagerchambon2018"]], "braindecode.models.SleepStagerEldele2021": [[96, "braindecode-models-sleepstagereldele2021"]], "Examples using braindecode.models.SleepStagerEldele2021": [[96, "examples-using-braindecode-models-sleepstagereldele2021"]], "braindecode.models.TCN": [[97, "braindecode-models-tcn"]], "braindecode.models.TIDNet": [[98, "braindecode-models-tidnet"]], "braindecode.models.TimeDistributed": [[99, "braindecode-models-timedistributed"]], "Examples using braindecode.models.TimeDistributed": [[99, "examples-using-braindecode-models-timedistributed"]], "braindecode.models.USleep": [[100, "braindecode-models-usleep"]], "Examples using braindecode.models.USleep": [[100, "examples-using-braindecode-models-usleep"]], "braindecode.models.get_output_shape": [[101, "braindecode-models-get-output-shape"]], "Examples using braindecode.models.get_output_shape": [[101, "examples-using-braindecode-models-get-output-shape"]], "braindecode.preprocessing.Crop": [[102, "braindecode-preprocessing-crop"]], "braindecode.preprocessing.DropChannels": [[103, "braindecode-preprocessing-dropchannels"]], "braindecode.preprocessing.Filter": [[104, "braindecode-preprocessing-filter"]], "braindecode.preprocessing.Pick": [[105, "braindecode-preprocessing-pick"]], "braindecode.preprocessing.Preprocessor": [[106, "braindecode-preprocessing-preprocessor"]], "Examples using braindecode.preprocessing.Preprocessor": [[106, "examples-using-braindecode-preprocessing-preprocessor"]], "braindecode.preprocessing.Resample": [[107, "braindecode-preprocessing-resample"]], "braindecode.preprocessing.SetEEGReference": [[108, "braindecode-preprocessing-seteegreference"]], "braindecode.preprocessing.create_fixed_length_windows": [[109, "braindecode-preprocessing-create-fixed-length-windows"]], "Examples using braindecode.preprocessing.create_fixed_length_windows": [[109, "examples-using-braindecode-preprocessing-create-fixed-length-windows"]], "braindecode.preprocessing.create_windows_from_events": [[110, "braindecode-preprocessing-create-windows-from-events"]], "Examples using braindecode.preprocessing.create_windows_from_events": [[110, "examples-using-braindecode-preprocessing-create-windows-from-events"]], "braindecode.preprocessing.create_windows_from_target_channels": [[111, "braindecode-preprocessing-create-windows-from-target-channels"]], "Examples using braindecode.preprocessing.create_windows_from_target_channels": [[111, "examples-using-braindecode-preprocessing-create-windows-from-target-channels"]], "braindecode.preprocessing.exponential_moving_demean": [[112, "braindecode-preprocessing-exponential-moving-demean"]], "braindecode.preprocessing.exponential_moving_standardize": [[113, "braindecode-preprocessing-exponential-moving-standardize"]], "Examples using braindecode.preprocessing.exponential_moving_standardize": [[113, "examples-using-braindecode-preprocessing-exponential-moving-standardize"]], "braindecode.preprocessing.filterbank": [[114, "braindecode-preprocessing-filterbank"]], "braindecode.preprocessing.preprocess": [[115, "braindecode-preprocessing-preprocess"]], "Examples using braindecode.preprocessing.preprocess": [[115, "examples-using-braindecode-preprocessing-preprocess"]], "braindecode.preprocessing.scale": [[116, "braindecode-preprocessing-scale"]], "Examples using braindecode.preprocessing.scale": [[116, "examples-using-braindecode-preprocessing-scale"]], "braindecode.regressor.EEGRegressor": [[117, "braindecode-regressor-eegregressor"]], "braindecode.samplers.BalancedSequenceSampler": [[118, "braindecode-samplers-balancedsequencesampler"]], "braindecode.samplers.RecordingSampler": [[119, "braindecode-samplers-recordingsampler"]], "Examples using braindecode.samplers.RecordingSampler": [[119, "examples-using-braindecode-samplers-recordingsampler"]], "braindecode.samplers.RelativePositioningSampler": [[120, "braindecode-samplers-relativepositioningsampler"]], "Examples using braindecode.samplers.RelativePositioningSampler": [[120, "examples-using-braindecode-samplers-relativepositioningsampler"]], "braindecode.samplers.SequenceSampler": [[121, "braindecode-samplers-sequencesampler"]], "Examples using braindecode.samplers.SequenceSampler": [[121, "examples-using-braindecode-samplers-sequencesampler"]], "braindecode.training.CroppedLoss": [[122, "braindecode-training-croppedloss"]], "Examples using braindecode.training.CroppedLoss": [[122, "examples-using-braindecode-training-croppedloss"]], "braindecode.training.CroppedTimeSeriesEpochScoring": [[123, "braindecode-training-croppedtimeseriesepochscoring"]], "Examples using braindecode.training.CroppedTimeSeriesEpochScoring": [[123, "examples-using-braindecode-training-croppedtimeseriesepochscoring"]], "braindecode.training.CroppedTrialEpochScoring": [[124, "braindecode-training-croppedtrialepochscoring"]], "Examples using braindecode.training.CroppedTrialEpochScoring": [[124, "examples-using-braindecode-training-croppedtrialepochscoring"]], "braindecode.training.PostEpochTrainScoring": [[125, "braindecode-training-postepochtrainscoring"]], "braindecode.training.TimeSeriesLoss": [[126, "braindecode-training-timeseriesloss"]], "Examples using braindecode.training.TimeSeriesLoss": [[126, "examples-using-braindecode-training-timeseriesloss"]], "braindecode.training.mixup_criterion": [[127, "braindecode-training-mixup-criterion"]], "braindecode.training.predict_trials": [[128, "braindecode-training-predict-trials"]], "braindecode.training.trial_preds_from_window_preds": [[129, "braindecode-training-trial-preds-from-window-preds"]], "braindecode.util.set_random_seeds": [[130, "braindecode-util-set-random-seeds"]], "Examples using braindecode.util.set_random_seeds": [[130, "examples-using-braindecode-util-set-random-seeds"]], "braindecode.visualization.compute_amplitude_gradients": [[131, "braindecode-visualization-compute-amplitude-gradients"]], "braindecode.visualization.plot_confusion_matrix": [[132, "braindecode-visualization-plot-confusion-matrix"]], "Examples using braindecode.visualization.plot_confusion_matrix": [[132, "examples-using-braindecode-visualization-plot-confusion-matrix"]], "Frequently Asked Questions (FAQ)": [[133, "frequently-asked-questions-faq"]], "How do I cite Braindecode?": [[133, "how-do-i-cite-braindecode"]], "Help! I can\u2019t get Python and Braindecode working!": [[133, "help-i-can-t-get-python-and-braindecode-working"]], "I still can\u2019t get it to work!": [[133, "i-still-can-t-get-it-to-work"]], "I think I found a bug, what do I do?": [[133, "i-think-i-found-a-bug-what-do-i-do"]], "Braindecode Homepage": [[134, "braindecode-homepage"]], "Installation": [[135, "installation"]], "Installing from PyPI": [[136, "installing-from-pypi"]], "Installing from sources": [[137, "installing-from-sources"]], "Clone the repository from GitHub": [[137, "clone-the-repository-from-github"]], "Installing Braindecode from the source": [[137, "installing-braindecode-from-the-source"]], "Testing if your installation is working": [[137, "testing-if-your-installation-is-working"]], "What\u2019s new": [[138, "what-s-new"]], "Current 0.8 (dev0)": [[138, "current-0-8-dev0"]], "Enhancements": [[138, "enhancements"], [138, "id5"], [138, "id8"], [138, "id11"], [138, "id14"]], "Bugs": [[138, "bugs"], [138, "id6"], [138, "id9"], [138, "id12"], [138, "id15"]], "API changes": [[138, "api-changes"], [138, "id7"], [138, "id10"], [138, "id13"], [138, "id16"]], "Current 0.8 ()": [[138, "current-0-8"]], "Current 0.7 (10-2022)": [[138, "current-0-7-10-2022"]], "Version 0.6 (2021-12-06)": [[138, "version-0-6-2021-12-06"]], "Version 0.5.1 (2021-07-14)": [[138, "version-0-5-1-2021-07-14"]], "Authors": [[138, "authors"]]}, "indexentries": {"braindecode": [[0, "module-braindecode"]], "module": [[0, "module-braindecode"]], "augmenteddataloader (class in braindecode.augmentation)": [[33, "braindecode.augmentation.AugmentedDataLoader"]], "bandstopfilter (class in braindecode.augmentation)": [[34, "braindecode.augmentation.BandstopFilter"]], "get_augmentation_params() (braindecode.augmentation.bandstopfilter method)": [[34, "braindecode.augmentation.BandstopFilter.get_augmentation_params"]], "operation() (braindecode.augmentation.bandstopfilter static method)": [[34, "braindecode.augmentation.BandstopFilter.operation"]], "channelsdropout (class in braindecode.augmentation)": [[35, "braindecode.augmentation.ChannelsDropout"]], "get_augmentation_params() (braindecode.augmentation.channelsdropout method)": [[35, "braindecode.augmentation.ChannelsDropout.get_augmentation_params"]], "operation() (braindecode.augmentation.channelsdropout static method)": [[35, "braindecode.augmentation.ChannelsDropout.operation"]], "channelsshuffle (class in braindecode.augmentation)": [[36, "braindecode.augmentation.ChannelsShuffle"]], "get_augmentation_params() (braindecode.augmentation.channelsshuffle method)": [[36, "braindecode.augmentation.ChannelsShuffle.get_augmentation_params"]], "operation() (braindecode.augmentation.channelsshuffle static method)": [[36, "braindecode.augmentation.ChannelsShuffle.operation"]], "channelssymmetry (class in braindecode.augmentation)": [[37, "braindecode.augmentation.ChannelsSymmetry"]], "get_augmentation_params() (braindecode.augmentation.channelssymmetry method)": [[37, "braindecode.augmentation.ChannelsSymmetry.get_augmentation_params"]], "operation() (braindecode.augmentation.channelssymmetry static method)": [[37, "braindecode.augmentation.ChannelsSymmetry.operation"]], "compose (class in braindecode.augmentation)": [[38, "braindecode.augmentation.Compose"]], "forward() (braindecode.augmentation.compose method)": [[38, "braindecode.augmentation.Compose.forward"]], "ftsurrogate (class in braindecode.augmentation)": [[39, "braindecode.augmentation.FTSurrogate"]], "get_augmentation_params() (braindecode.augmentation.ftsurrogate method)": [[39, "braindecode.augmentation.FTSurrogate.get_augmentation_params"]], "operation() (braindecode.augmentation.ftsurrogate static method)": [[39, "braindecode.augmentation.FTSurrogate.operation"]], "frequencyshift (class in braindecode.augmentation)": [[40, "braindecode.augmentation.FrequencyShift"]], "get_augmentation_params() (braindecode.augmentation.frequencyshift method)": [[40, "braindecode.augmentation.FrequencyShift.get_augmentation_params"]], "operation() (braindecode.augmentation.frequencyshift static method)": [[40, "braindecode.augmentation.FrequencyShift.operation"]], "gaussiannoise (class in braindecode.augmentation)": [[41, "braindecode.augmentation.GaussianNoise"]], "get_augmentation_params() (braindecode.augmentation.gaussiannoise method)": [[41, "braindecode.augmentation.GaussianNoise.get_augmentation_params"]], "operation() (braindecode.augmentation.gaussiannoise static method)": [[41, "braindecode.augmentation.GaussianNoise.operation"]], "identitytransform (class in braindecode.augmentation)": [[42, "braindecode.augmentation.IdentityTransform"]], "operation() (braindecode.augmentation.identitytransform static method)": [[42, "braindecode.augmentation.IdentityTransform.operation"]], "mixup (class in braindecode.augmentation)": [[43, "braindecode.augmentation.Mixup"]], "get_augmentation_params() (braindecode.augmentation.mixup method)": [[43, "braindecode.augmentation.Mixup.get_augmentation_params"]], "operation() (braindecode.augmentation.mixup static method)": [[43, "braindecode.augmentation.Mixup.operation"]], "sensorsrotation (class in braindecode.augmentation)": [[44, "braindecode.augmentation.SensorsRotation"]], "get_augmentation_params() (braindecode.augmentation.sensorsrotation method)": [[44, "braindecode.augmentation.SensorsRotation.get_augmentation_params"]], "operation() (braindecode.augmentation.sensorsrotation static method)": [[44, "braindecode.augmentation.SensorsRotation.operation"]], "sensorsxrotation (class in braindecode.augmentation)": [[45, "braindecode.augmentation.SensorsXRotation"]], "sensorsyrotation (class in braindecode.augmentation)": [[46, "braindecode.augmentation.SensorsYRotation"]], "sensorszrotation (class in braindecode.augmentation)": [[47, "braindecode.augmentation.SensorsZRotation"]], "signflip (class in braindecode.augmentation)": [[48, "braindecode.augmentation.SignFlip"]], "operation() (braindecode.augmentation.signflip static method)": [[48, "braindecode.augmentation.SignFlip.operation"]], "smoothtimemask (class in braindecode.augmentation)": [[49, "braindecode.augmentation.SmoothTimeMask"]], "get_augmentation_params() (braindecode.augmentation.smoothtimemask method)": [[49, "braindecode.augmentation.SmoothTimeMask.get_augmentation_params"]], "operation() (braindecode.augmentation.smoothtimemask static method)": [[49, "braindecode.augmentation.SmoothTimeMask.operation"]], "timereverse (class in braindecode.augmentation)": [[50, "braindecode.augmentation.TimeReverse"]], "operation() (braindecode.augmentation.timereverse static method)": [[50, "braindecode.augmentation.TimeReverse.operation"]], "transform (class in braindecode.augmentation)": [[51, "braindecode.augmentation.Transform"]], "forward() (braindecode.augmentation.transform method)": [[51, "braindecode.augmentation.Transform.forward"]], "get_augmentation_params() (braindecode.augmentation.transform method)": [[51, "braindecode.augmentation.Transform.get_augmentation_params"]], "bandstop_filter() (in module braindecode.augmentation.functional)": [[52, "braindecode.augmentation.functional.bandstop_filter"]], "channels_dropout() (in module braindecode.augmentation.functional)": [[53, "braindecode.augmentation.functional.channels_dropout"]], "channels_permute() (in module braindecode.augmentation.functional)": [[54, "braindecode.augmentation.functional.channels_permute"]], "channels_shuffle() (in module braindecode.augmentation.functional)": [[55, "braindecode.augmentation.functional.channels_shuffle"]], "frequency_shift() (in module braindecode.augmentation.functional)": [[56, "braindecode.augmentation.functional.frequency_shift"]], "ft_surrogate() (in module braindecode.augmentation.functional)": [[57, "braindecode.augmentation.functional.ft_surrogate"]], "gaussian_noise() (in module braindecode.augmentation.functional)": [[58, "braindecode.augmentation.functional.gaussian_noise"]], "identity() (in module braindecode.augmentation.functional)": [[59, "braindecode.augmentation.functional.identity"]], "mixup() (in module braindecode.augmentation.functional)": [[60, "braindecode.augmentation.functional.mixup"]], "sensors_rotation() (in module braindecode.augmentation.functional)": [[61, "braindecode.augmentation.functional.sensors_rotation"]], "sign_flip() (in module braindecode.augmentation.functional)": [[62, "braindecode.augmentation.functional.sign_flip"]], "smooth_time_mask() (in module braindecode.augmentation.functional)": [[63, "braindecode.augmentation.functional.smooth_time_mask"]], "time_reverse() (in module braindecode.augmentation.functional)": [[64, "braindecode.augmentation.functional.time_reverse"]], "eegclassifier (class in braindecode.classifier)": [[65, "braindecode.classifier.EEGClassifier"]], "_criteria (braindecode.classifier.eegclassifier attribute)": [[65, "braindecode.classifier.EEGClassifier._criteria"]], "_modules (braindecode.classifier.eegclassifier attribute)": [[65, "braindecode.classifier.EEGClassifier._modules"]], "_optimizers (braindecode.classifier.eegclassifier attribute)": [[65, "braindecode.classifier.EEGClassifier._optimizers"]], "callbacks_ (braindecode.classifier.eegclassifier attribute)": [[65, "braindecode.classifier.EEGClassifier.callbacks_"]], "classes_ (braindecode.classifier.eegclassifier attribute)": [[65, "braindecode.classifier.EEGClassifier.classes_"]], "criterion_ (braindecode.classifier.eegclassifier attribute)": [[65, "braindecode.classifier.EEGClassifier.criterion_"]], "cuda_dependent_attributes_ (braindecode.classifier.eegclassifier attribute)": [[65, "braindecode.classifier.EEGClassifier.cuda_dependent_attributes_"]], "get_iterator() (braindecode.classifier.eegclassifier method)": [[65, "braindecode.classifier.EEGClassifier.get_iterator"]], "get_loss() (braindecode.classifier.eegclassifier method)": [[65, "braindecode.classifier.EEGClassifier.get_loss"]], "initialized_ (braindecode.classifier.eegclassifier attribute)": [[65, "braindecode.classifier.EEGClassifier.initialized_"]], "module_ (braindecode.classifier.eegclassifier attribute)": [[65, "braindecode.classifier.EEGClassifier.module_"]], "predict() (braindecode.classifier.eegclassifier method)": [[65, "braindecode.classifier.EEGClassifier.predict"]], "predict_proba() (braindecode.classifier.eegclassifier method)": [[65, "braindecode.classifier.EEGClassifier.predict_proba"]], "predict_trials() (braindecode.classifier.eegclassifier method)": [[65, "braindecode.classifier.EEGClassifier.predict_trials"]], "prefixes_ (braindecode.classifier.eegclassifier attribute)": [[65, "braindecode.classifier.EEGClassifier.prefixes_"]], "bcicompetitionivdataset4 (class in braindecode.datasets)": [[66, "braindecode.datasets.BCICompetitionIVDataset4"]], "download() (braindecode.datasets.bcicompetitionivdataset4 static method)": [[66, "braindecode.datasets.BCICompetitionIVDataset4.download"]], "bnci2014001 (class in braindecode.datasets)": [[67, "braindecode.datasets.BNCI2014001"]], "baseconcatdataset (class in braindecode.datasets)": [[68, "braindecode.datasets.BaseConcatDataset"]], "get_metadata() (braindecode.datasets.baseconcatdataset method)": [[68, "braindecode.datasets.BaseConcatDataset.get_metadata"]], "save() (braindecode.datasets.baseconcatdataset method)": [[68, "braindecode.datasets.BaseConcatDataset.save"]], "set_description() (braindecode.datasets.baseconcatdataset method)": [[68, "braindecode.datasets.BaseConcatDataset.set_description"]], "split() (braindecode.datasets.baseconcatdataset method)": [[68, "braindecode.datasets.BaseConcatDataset.split"]], "basedataset (class in braindecode.datasets)": [[69, "braindecode.datasets.BaseDataset"]], "set_description() (braindecode.datasets.basedataset method)": [[69, "braindecode.datasets.BaseDataset.set_description"]], "hgd (class in braindecode.datasets)": [[70, "braindecode.datasets.HGD"]], "moabbdataset (class in braindecode.datasets)": [[71, "braindecode.datasets.MOABBDataset"]], "sleepphysionet (class in braindecode.datasets)": [[72, "braindecode.datasets.SleepPhysionet"]], "tuh (class in braindecode.datasets)": [[73, "braindecode.datasets.TUH"]], "tuhabnormal (class in braindecode.datasets)": [[74, "braindecode.datasets.TUHAbnormal"]], "windowsdataset (class in braindecode.datasets)": [[75, "braindecode.datasets.WindowsDataset"]], "set_description() (braindecode.datasets.windowsdataset method)": [[75, "braindecode.datasets.WindowsDataset.set_description"]], "create_from_x_y() (in module braindecode.datasets)": [[76, "braindecode.datasets.create_from_X_y"]], "create_from_mne_epochs() (in module braindecode.datasets)": [[77, "braindecode.datasets.create_from_mne_epochs"]], "create_from_mne_raw() (in module braindecode.datasets)": [[78, "braindecode.datasets.create_from_mne_raw"]], "load_concat_dataset() (in module braindecode.datautil)": [[79, "braindecode.datautil.load_concat_dataset"]], "save_concat_dataset() (in module braindecode.datautil)": [[80, "braindecode.datautil.save_concat_dataset"]], "atcnet (class in braindecode.models)": [[81, "braindecode.models.ATCNet"]], "forward() (braindecode.models.atcnet method)": [[81, "braindecode.models.ATCNet.forward"]], "deep4net (class in braindecode.models)": [[82, "braindecode.models.Deep4Net"]], "load_state_dict() (braindecode.models.deep4net method)": [[82, "braindecode.models.Deep4Net.load_state_dict"]], "deepsleepnet (class in braindecode.models)": [[83, "braindecode.models.DeepSleepNet"]], "forward() (braindecode.models.deepsleepnet method)": [[83, "braindecode.models.DeepSleepNet.forward"]], "eegconformer (class in braindecode.models)": [[84, "braindecode.models.EEGConformer"]], "forward() (braindecode.models.eegconformer method)": [[84, "braindecode.models.EEGConformer.forward"]], "get_fc_size() (braindecode.models.eegconformer method)": [[84, "braindecode.models.EEGConformer.get_fc_size"]], "eegitnet (class in braindecode.models)": [[85, "braindecode.models.EEGITNet"]], "eeginception (class in braindecode.models)": [[86, "braindecode.models.EEGInception"]], "eeginceptionerp (class in braindecode.models)": [[87, "braindecode.models.EEGInceptionERP"]], "eeginceptionmi (class in braindecode.models)": [[88, "braindecode.models.EEGInceptionMI"]], "forward() (braindecode.models.eeginceptionmi method)": [[88, "braindecode.models.EEGInceptionMI.forward"]], "eegnetv1 (class in braindecode.models)": [[89, "braindecode.models.EEGNetv1"]], "eegnetv4 (class in braindecode.models)": [[90, "braindecode.models.EEGNetv4"]], "eegresnet (class in braindecode.models)": [[91, "braindecode.models.EEGResNet"]], "hybridnet (class in braindecode.models)": [[92, "braindecode.models.HybridNet"]], "forward() (braindecode.models.hybridnet method)": [[92, "braindecode.models.HybridNet.forward"]], "shallowfbcspnet (class in braindecode.models)": [[93, "braindecode.models.ShallowFBCSPNet"]], "load_state_dict() (braindecode.models.shallowfbcspnet method)": [[93, "braindecode.models.ShallowFBCSPNet.load_state_dict"]], "sleepstagerblanco2020 (class in braindecode.models)": [[94, "braindecode.models.SleepStagerBlanco2020"]], "forward() (braindecode.models.sleepstagerblanco2020 method)": [[94, "braindecode.models.SleepStagerBlanco2020.forward"]], "sleepstagerchambon2018 (class in braindecode.models)": [[95, "braindecode.models.SleepStagerChambon2018"]], "forward() (braindecode.models.sleepstagerchambon2018 method)": [[95, "braindecode.models.SleepStagerChambon2018.forward"]], "sleepstagereldele2021 (class in braindecode.models)": [[96, "braindecode.models.SleepStagerEldele2021"]], "forward() (braindecode.models.sleepstagereldele2021 method)": [[96, "braindecode.models.SleepStagerEldele2021.forward"]], "tcn (class in braindecode.models)": [[97, "braindecode.models.TCN"]], "forward() (braindecode.models.tcn method)": [[97, "braindecode.models.TCN.forward"]], "tidnet (class in braindecode.models)": [[98, "braindecode.models.TIDNet"]], "forward() (braindecode.models.tidnet method)": [[98, "braindecode.models.TIDNet.forward"]], "timedistributed (class in braindecode.models)": [[99, "braindecode.models.TimeDistributed"]], "forward() (braindecode.models.timedistributed method)": [[99, "braindecode.models.TimeDistributed.forward"]], "usleep (class in braindecode.models)": [[100, "braindecode.models.USleep"]], "forward() (braindecode.models.usleep method)": [[100, "braindecode.models.USleep.forward"]], "get_output_shape() (in module braindecode.models)": [[101, "braindecode.models.get_output_shape"]], "crop (class in braindecode.preprocessing)": [[102, "braindecode.preprocessing.Crop"]], "dropchannels (class in braindecode.preprocessing)": [[103, "braindecode.preprocessing.DropChannels"]], "filter (class in braindecode.preprocessing)": [[104, "braindecode.preprocessing.Filter"]], "pick (class in braindecode.preprocessing)": [[105, "braindecode.preprocessing.Pick"]], "preprocessor (class in braindecode.preprocessing)": [[106, "braindecode.preprocessing.Preprocessor"]], "apply() (braindecode.preprocessing.preprocessor method)": [[106, "braindecode.preprocessing.Preprocessor.apply"]], "resample (class in braindecode.preprocessing)": [[107, "braindecode.preprocessing.Resample"]], "seteegreference (class in braindecode.preprocessing)": [[108, "braindecode.preprocessing.SetEEGReference"]], "create_fixed_length_windows() (in module braindecode.preprocessing)": [[109, "braindecode.preprocessing.create_fixed_length_windows"]], "create_windows_from_events() (in module braindecode.preprocessing)": [[110, "braindecode.preprocessing.create_windows_from_events"]], "create_windows_from_target_channels() (in module braindecode.preprocessing)": [[111, "braindecode.preprocessing.create_windows_from_target_channels"]], "exponential_moving_demean() (in module braindecode.preprocessing)": [[112, "braindecode.preprocessing.exponential_moving_demean"]], "exponential_moving_standardize() (in module braindecode.preprocessing)": [[113, "braindecode.preprocessing.exponential_moving_standardize"]], "filterbank() (in module braindecode.preprocessing)": [[114, "braindecode.preprocessing.filterbank"]], "preprocess() (in module braindecode.preprocessing)": [[115, "braindecode.preprocessing.preprocess"]], "scale() (in module braindecode.preprocessing)": [[116, "braindecode.preprocessing.scale"]], "eegregressor (class in braindecode.regressor)": [[117, "braindecode.regressor.EEGRegressor"]], "_criteria (braindecode.regressor.eegregressor attribute)": [[117, "braindecode.regressor.EEGRegressor._criteria"]], "_modules (braindecode.regressor.eegregressor attribute)": [[117, "braindecode.regressor.EEGRegressor._modules"]], "_optimizers (braindecode.regressor.eegregressor attribute)": [[117, "braindecode.regressor.EEGRegressor._optimizers"]], "callbacks_ (braindecode.regressor.eegregressor attribute)": [[117, "braindecode.regressor.EEGRegressor.callbacks_"]], "criterion_ (braindecode.regressor.eegregressor attribute)": [[117, "braindecode.regressor.EEGRegressor.criterion_"]], "cuda_dependent_attributes_ (braindecode.regressor.eegregressor attribute)": [[117, "braindecode.regressor.EEGRegressor.cuda_dependent_attributes_"]], "fit() (braindecode.regressor.eegregressor method)": [[117, "braindecode.regressor.EEGRegressor.fit"]], "get_iterator() (braindecode.regressor.eegregressor method)": [[117, "braindecode.regressor.EEGRegressor.get_iterator"]], "initialized_ (braindecode.regressor.eegregressor attribute)": [[117, "braindecode.regressor.EEGRegressor.initialized_"]], "module_ (braindecode.regressor.eegregressor attribute)": [[117, "braindecode.regressor.EEGRegressor.module_"]], "predict_proba() (braindecode.regressor.eegregressor method)": [[117, "braindecode.regressor.EEGRegressor.predict_proba"]], "predict_trials() (braindecode.regressor.eegregressor method)": [[117, "braindecode.regressor.EEGRegressor.predict_trials"]], "prefixes_ (braindecode.regressor.eegregressor attribute)": [[117, "braindecode.regressor.EEGRegressor.prefixes_"]], "balancedsequencesampler (class in braindecode.samplers)": [[118, "braindecode.samplers.BalancedSequenceSampler"]], "sample_class() (braindecode.samplers.balancedsequencesampler method)": [[118, "braindecode.samplers.BalancedSequenceSampler.sample_class"]], "recordingsampler (class in braindecode.samplers)": [[119, "braindecode.samplers.RecordingSampler"]], "info (braindecode.samplers.recordingsampler attribute)": [[119, "braindecode.samplers.RecordingSampler.info"]], "n_recordings (braindecode.samplers.recordingsampler attribute)": [[119, "braindecode.samplers.RecordingSampler.n_recordings"]], "sample_recording() (braindecode.samplers.recordingsampler method)": [[119, "braindecode.samplers.RecordingSampler.sample_recording"]], "sample_window() (braindecode.samplers.recordingsampler method)": [[119, "braindecode.samplers.RecordingSampler.sample_window"]], "relativepositioningsampler (class in braindecode.samplers)": [[120, "braindecode.samplers.RelativePositioningSampler"]], "presample() (braindecode.samplers.relativepositioningsampler method)": [[120, "braindecode.samplers.RelativePositioningSampler.presample"]], "sequencesampler (class in braindecode.samplers)": [[121, "braindecode.samplers.SequenceSampler"]], "file_ids (braindecode.samplers.sequencesampler attribute)": [[121, "braindecode.samplers.SequenceSampler.file_ids"]], "info (braindecode.samplers.sequencesampler attribute)": [[121, "braindecode.samplers.SequenceSampler.info"]], "croppedloss (class in braindecode.training)": [[122, "braindecode.training.CroppedLoss"]], "forward() (braindecode.training.croppedloss method)": [[122, "braindecode.training.CroppedLoss.forward"]], "croppedtimeseriesepochscoring (class in braindecode.training)": [[123, "braindecode.training.CroppedTimeSeriesEpochScoring"]], "on_epoch_end() (braindecode.training.croppedtimeseriesepochscoring method)": [[123, "braindecode.training.CroppedTimeSeriesEpochScoring.on_epoch_end"]], "croppedtrialepochscoring (class in braindecode.training)": [[124, "braindecode.training.CroppedTrialEpochScoring"]], "on_batch_end() (braindecode.training.croppedtrialepochscoring method)": [[124, "braindecode.training.CroppedTrialEpochScoring.on_batch_end"]], "on_epoch_end() (braindecode.training.croppedtrialepochscoring method)": [[124, "braindecode.training.CroppedTrialEpochScoring.on_epoch_end"]], "postepochtrainscoring (class in braindecode.training)": [[125, "braindecode.training.PostEpochTrainScoring"]], "on_epoch_end() (braindecode.training.postepochtrainscoring method)": [[125, "braindecode.training.PostEpochTrainScoring.on_epoch_end"]], "timeseriesloss (class in braindecode.training)": [[126, "braindecode.training.TimeSeriesLoss"]], "forward() (braindecode.training.timeseriesloss method)": [[126, "braindecode.training.TimeSeriesLoss.forward"]], "mixup_criterion() (in module braindecode.training)": [[127, "braindecode.training.mixup_criterion"]], "predict_trials() (in module braindecode.training)": [[128, "braindecode.training.predict_trials"]], "trial_preds_from_window_preds() (in module braindecode.training)": [[129, "braindecode.training.trial_preds_from_window_preds"]], "set_random_seeds() (in module braindecode.util)": [[130, "braindecode.util.set_random_seeds"]], "compute_amplitude_gradients() (in module braindecode.visualization)": [[131, "braindecode.visualization.compute_amplitude_gradients"]], "plot_confusion_matrix() (in module braindecode.visualization)": [[132, "braindecode.visualization.plot_confusion_matrix"]]}})