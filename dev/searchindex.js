Search.setIndex({"docnames": ["api", "auto_examples/advanced_training/index", "auto_examples/advanced_training/plot_bcic_iv_4_ecog_cropped", "auto_examples/advanced_training/plot_data_augmentation", "auto_examples/advanced_training/plot_data_augmentation_search", "auto_examples/advanced_training/plot_relative_positioning", "auto_examples/advanced_training/sg_execution_times", "auto_examples/applied_examples/index", "auto_examples/applied_examples/plot_bcic_iv_4_ecog_trial", "auto_examples/applied_examples/plot_sleep_staging_chambon2018", "auto_examples/applied_examples/plot_sleep_staging_eldele2021", "auto_examples/applied_examples/plot_sleep_staging_usleep", "auto_examples/applied_examples/plot_tuh_eeg_corpus", "auto_examples/applied_examples/sg_execution_times", "auto_examples/datasets_io/benchmark_lazy_eager_loading", "auto_examples/datasets_io/index", "auto_examples/datasets_io/plot_benchmark_preprocessing", "auto_examples/datasets_io/plot_custom_dataset_example", "auto_examples/datasets_io/plot_load_save_datasets", "auto_examples/datasets_io/plot_mne_dataset_example", "auto_examples/datasets_io/plot_moabb_dataset_example", "auto_examples/datasets_io/plot_split_dataset", "auto_examples/datasets_io/plot_tuh_discrete_multitarget", "auto_examples/datasets_io/sg_execution_times", "auto_examples/index", "auto_examples/model_building/index", "auto_examples/model_building/plot_basic_training_epochs", "auto_examples/model_building/plot_bcic_iv_2a_moabb_cropped", "auto_examples/model_building/plot_bcic_iv_2a_moabb_trial", "auto_examples/model_building/plot_how_train_test_and_tune", "auto_examples/model_building/plot_hyperparameter_tuning_with_scikit-learn", "auto_examples/model_building/plot_regression", "auto_examples/model_building/plot_train_in_pure_pytorch_and_pytorch_lightning", "auto_examples/model_building/sg_execution_times", "cite", "generated/braindecode.augmentation.AugmentedDataLoader", "generated/braindecode.augmentation.BandstopFilter", "generated/braindecode.augmentation.ChannelsDropout", "generated/braindecode.augmentation.ChannelsShuffle", "generated/braindecode.augmentation.ChannelsSymmetry", "generated/braindecode.augmentation.Compose", "generated/braindecode.augmentation.FTSurrogate", "generated/braindecode.augmentation.FrequencyShift", "generated/braindecode.augmentation.GaussianNoise", "generated/braindecode.augmentation.IdentityTransform", "generated/braindecode.augmentation.Mixup", "generated/braindecode.augmentation.SensorsRotation", "generated/braindecode.augmentation.SensorsXRotation", "generated/braindecode.augmentation.SensorsYRotation", "generated/braindecode.augmentation.SensorsZRotation", "generated/braindecode.augmentation.SignFlip", "generated/braindecode.augmentation.SmoothTimeMask", "generated/braindecode.augmentation.TimeReverse", "generated/braindecode.augmentation.Transform", "generated/braindecode.augmentation.functional.bandstop_filter", "generated/braindecode.augmentation.functional.channels_dropout", "generated/braindecode.augmentation.functional.channels_permute", "generated/braindecode.augmentation.functional.channels_shuffle", "generated/braindecode.augmentation.functional.frequency_shift", "generated/braindecode.augmentation.functional.ft_surrogate", "generated/braindecode.augmentation.functional.gaussian_noise", "generated/braindecode.augmentation.functional.identity", "generated/braindecode.augmentation.functional.mixup", "generated/braindecode.augmentation.functional.sensors_rotation", "generated/braindecode.augmentation.functional.sign_flip", "generated/braindecode.augmentation.functional.smooth_time_mask", "generated/braindecode.augmentation.functional.time_reverse", "generated/braindecode.classifier.EEGClassifier", "generated/braindecode.datasets.BCICompetitionIVDataset4", "generated/braindecode.datasets.BNCI2014001", "generated/braindecode.datasets.BaseConcatDataset", "generated/braindecode.datasets.BaseDataset", "generated/braindecode.datasets.HGD", "generated/braindecode.datasets.MOABBDataset", "generated/braindecode.datasets.SleepPhysionet", "generated/braindecode.datasets.TUH", "generated/braindecode.datasets.TUHAbnormal", "generated/braindecode.datasets.WindowsDataset", "generated/braindecode.datasets.create_from_X_y", "generated/braindecode.datasets.create_from_mne_epochs", "generated/braindecode.datasets.create_from_mne_raw", "generated/braindecode.datautil.load_concat_dataset", "generated/braindecode.datautil.save_concat_dataset", "generated/braindecode.models.ATCNet", "generated/braindecode.models.Deep4Net", "generated/braindecode.models.DeepSleepNet", "generated/braindecode.models.EEGConformer", "generated/braindecode.models.EEGITNet", "generated/braindecode.models.EEGInception", "generated/braindecode.models.EEGInceptionERP", "generated/braindecode.models.EEGInceptionMI", "generated/braindecode.models.EEGModuleMixin", "generated/braindecode.models.EEGNetv1", "generated/braindecode.models.EEGNetv4", "generated/braindecode.models.EEGResNet", "generated/braindecode.models.HybridNet", "generated/braindecode.models.ShallowFBCSPNet", "generated/braindecode.models.SleepStagerBlanco2020", "generated/braindecode.models.SleepStagerChambon2018", "generated/braindecode.models.SleepStagerEldele2021", "generated/braindecode.models.TCN", "generated/braindecode.models.TIDNet", "generated/braindecode.models.TimeDistributed", "generated/braindecode.models.USleep", "generated/braindecode.models.get_output_shape", "generated/braindecode.preprocessing.Crop", "generated/braindecode.preprocessing.DropChannels", "generated/braindecode.preprocessing.Filter", "generated/braindecode.preprocessing.Pick", "generated/braindecode.preprocessing.Preprocessor", "generated/braindecode.preprocessing.Resample", "generated/braindecode.preprocessing.SetEEGReference", "generated/braindecode.preprocessing.create_fixed_length_windows", "generated/braindecode.preprocessing.create_windows_from_events", "generated/braindecode.preprocessing.create_windows_from_target_channels", "generated/braindecode.preprocessing.exponential_moving_demean", "generated/braindecode.preprocessing.exponential_moving_standardize", "generated/braindecode.preprocessing.filterbank", "generated/braindecode.preprocessing.preprocess", "generated/braindecode.preprocessing.scale", "generated/braindecode.regressor.EEGRegressor", "generated/braindecode.samplers.BalancedSequenceSampler", "generated/braindecode.samplers.RecordingSampler", "generated/braindecode.samplers.RelativePositioningSampler", "generated/braindecode.samplers.SequenceSampler", "generated/braindecode.training.CroppedLoss", "generated/braindecode.training.CroppedTimeSeriesEpochScoring", "generated/braindecode.training.CroppedTrialEpochScoring", "generated/braindecode.training.PostEpochTrainScoring", "generated/braindecode.training.TimeSeriesLoss", "generated/braindecode.training.mixup_criterion", "generated/braindecode.training.predict_trials", "generated/braindecode.training.trial_preds_from_window_preds", "generated/braindecode.util.set_random_seeds", "generated/braindecode.visualization.compute_amplitude_gradients", "generated/braindecode.visualization.plot_confusion_matrix", "help", "index", "install/install", "install/install_pip", "install/install_source", "whats_new"], "filenames": ["api.rst", "auto_examples/advanced_training/index.rst", "auto_examples/advanced_training/plot_bcic_iv_4_ecog_cropped.rst", "auto_examples/advanced_training/plot_data_augmentation.rst", "auto_examples/advanced_training/plot_data_augmentation_search.rst", "auto_examples/advanced_training/plot_relative_positioning.rst", "auto_examples/advanced_training/sg_execution_times.rst", "auto_examples/applied_examples/index.rst", "auto_examples/applied_examples/plot_bcic_iv_4_ecog_trial.rst", "auto_examples/applied_examples/plot_sleep_staging_chambon2018.rst", "auto_examples/applied_examples/plot_sleep_staging_eldele2021.rst", "auto_examples/applied_examples/plot_sleep_staging_usleep.rst", "auto_examples/applied_examples/plot_tuh_eeg_corpus.rst", "auto_examples/applied_examples/sg_execution_times.rst", "auto_examples/datasets_io/benchmark_lazy_eager_loading.rst", "auto_examples/datasets_io/index.rst", "auto_examples/datasets_io/plot_benchmark_preprocessing.rst", "auto_examples/datasets_io/plot_custom_dataset_example.rst", "auto_examples/datasets_io/plot_load_save_datasets.rst", "auto_examples/datasets_io/plot_mne_dataset_example.rst", "auto_examples/datasets_io/plot_moabb_dataset_example.rst", "auto_examples/datasets_io/plot_split_dataset.rst", "auto_examples/datasets_io/plot_tuh_discrete_multitarget.rst", "auto_examples/datasets_io/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/model_building/index.rst", "auto_examples/model_building/plot_basic_training_epochs.rst", "auto_examples/model_building/plot_bcic_iv_2a_moabb_cropped.rst", "auto_examples/model_building/plot_bcic_iv_2a_moabb_trial.rst", "auto_examples/model_building/plot_how_train_test_and_tune.rst", "auto_examples/model_building/plot_hyperparameter_tuning_with_scikit-learn.rst", "auto_examples/model_building/plot_regression.rst", "auto_examples/model_building/plot_train_in_pure_pytorch_and_pytorch_lightning.rst", "auto_examples/model_building/sg_execution_times.rst", "cite.rst", "generated/braindecode.augmentation.AugmentedDataLoader.rst", "generated/braindecode.augmentation.BandstopFilter.rst", "generated/braindecode.augmentation.ChannelsDropout.rst", "generated/braindecode.augmentation.ChannelsShuffle.rst", "generated/braindecode.augmentation.ChannelsSymmetry.rst", "generated/braindecode.augmentation.Compose.rst", "generated/braindecode.augmentation.FTSurrogate.rst", "generated/braindecode.augmentation.FrequencyShift.rst", "generated/braindecode.augmentation.GaussianNoise.rst", "generated/braindecode.augmentation.IdentityTransform.rst", "generated/braindecode.augmentation.Mixup.rst", "generated/braindecode.augmentation.SensorsRotation.rst", "generated/braindecode.augmentation.SensorsXRotation.rst", "generated/braindecode.augmentation.SensorsYRotation.rst", "generated/braindecode.augmentation.SensorsZRotation.rst", "generated/braindecode.augmentation.SignFlip.rst", "generated/braindecode.augmentation.SmoothTimeMask.rst", "generated/braindecode.augmentation.TimeReverse.rst", "generated/braindecode.augmentation.Transform.rst", "generated/braindecode.augmentation.functional.bandstop_filter.rst", "generated/braindecode.augmentation.functional.channels_dropout.rst", "generated/braindecode.augmentation.functional.channels_permute.rst", "generated/braindecode.augmentation.functional.channels_shuffle.rst", "generated/braindecode.augmentation.functional.frequency_shift.rst", "generated/braindecode.augmentation.functional.ft_surrogate.rst", "generated/braindecode.augmentation.functional.gaussian_noise.rst", "generated/braindecode.augmentation.functional.identity.rst", "generated/braindecode.augmentation.functional.mixup.rst", "generated/braindecode.augmentation.functional.sensors_rotation.rst", "generated/braindecode.augmentation.functional.sign_flip.rst", "generated/braindecode.augmentation.functional.smooth_time_mask.rst", "generated/braindecode.augmentation.functional.time_reverse.rst", "generated/braindecode.classifier.EEGClassifier.rst", "generated/braindecode.datasets.BCICompetitionIVDataset4.rst", "generated/braindecode.datasets.BNCI2014001.rst", "generated/braindecode.datasets.BaseConcatDataset.rst", "generated/braindecode.datasets.BaseDataset.rst", "generated/braindecode.datasets.HGD.rst", "generated/braindecode.datasets.MOABBDataset.rst", "generated/braindecode.datasets.SleepPhysionet.rst", "generated/braindecode.datasets.TUH.rst", "generated/braindecode.datasets.TUHAbnormal.rst", "generated/braindecode.datasets.WindowsDataset.rst", "generated/braindecode.datasets.create_from_X_y.rst", "generated/braindecode.datasets.create_from_mne_epochs.rst", "generated/braindecode.datasets.create_from_mne_raw.rst", "generated/braindecode.datautil.load_concat_dataset.rst", "generated/braindecode.datautil.save_concat_dataset.rst", "generated/braindecode.models.ATCNet.rst", "generated/braindecode.models.Deep4Net.rst", "generated/braindecode.models.DeepSleepNet.rst", "generated/braindecode.models.EEGConformer.rst", "generated/braindecode.models.EEGITNet.rst", "generated/braindecode.models.EEGInception.rst", "generated/braindecode.models.EEGInceptionERP.rst", "generated/braindecode.models.EEGInceptionMI.rst", "generated/braindecode.models.EEGModuleMixin.rst", "generated/braindecode.models.EEGNetv1.rst", "generated/braindecode.models.EEGNetv4.rst", "generated/braindecode.models.EEGResNet.rst", "generated/braindecode.models.HybridNet.rst", "generated/braindecode.models.ShallowFBCSPNet.rst", "generated/braindecode.models.SleepStagerBlanco2020.rst", "generated/braindecode.models.SleepStagerChambon2018.rst", "generated/braindecode.models.SleepStagerEldele2021.rst", "generated/braindecode.models.TCN.rst", "generated/braindecode.models.TIDNet.rst", "generated/braindecode.models.TimeDistributed.rst", "generated/braindecode.models.USleep.rst", "generated/braindecode.models.get_output_shape.rst", "generated/braindecode.preprocessing.Crop.rst", "generated/braindecode.preprocessing.DropChannels.rst", "generated/braindecode.preprocessing.Filter.rst", "generated/braindecode.preprocessing.Pick.rst", "generated/braindecode.preprocessing.Preprocessor.rst", "generated/braindecode.preprocessing.Resample.rst", "generated/braindecode.preprocessing.SetEEGReference.rst", "generated/braindecode.preprocessing.create_fixed_length_windows.rst", "generated/braindecode.preprocessing.create_windows_from_events.rst", "generated/braindecode.preprocessing.create_windows_from_target_channels.rst", "generated/braindecode.preprocessing.exponential_moving_demean.rst", "generated/braindecode.preprocessing.exponential_moving_standardize.rst", "generated/braindecode.preprocessing.filterbank.rst", "generated/braindecode.preprocessing.preprocess.rst", "generated/braindecode.preprocessing.scale.rst", "generated/braindecode.regressor.EEGRegressor.rst", "generated/braindecode.samplers.BalancedSequenceSampler.rst", "generated/braindecode.samplers.RecordingSampler.rst", "generated/braindecode.samplers.RelativePositioningSampler.rst", "generated/braindecode.samplers.SequenceSampler.rst", "generated/braindecode.training.CroppedLoss.rst", "generated/braindecode.training.CroppedTimeSeriesEpochScoring.rst", "generated/braindecode.training.CroppedTrialEpochScoring.rst", "generated/braindecode.training.PostEpochTrainScoring.rst", "generated/braindecode.training.TimeSeriesLoss.rst", "generated/braindecode.training.mixup_criterion.rst", "generated/braindecode.training.predict_trials.rst", "generated/braindecode.training.trial_preds_from_window_preds.rst", "generated/braindecode.util.set_random_seeds.rst", "generated/braindecode.visualization.compute_amplitude_gradients.rst", "generated/braindecode.visualization.plot_confusion_matrix.rst", "help.rst", "index.rst", "install/install.rst", "install/install_pip.rst", "install/install_source.rst", "whats_new.rst"], "titles": ["API Reference", "Advanced neural network training strategies", "Fingers flexion cropped decoding on BCIC IV 4 ECoG Dataset", "Data Augmentation on BCIC IV 2a Dataset", "Searching the best data augmentation on BCIC IV 2a Dataset", "Self-supervised learning on EEG with relative positioning", "Computation times", "Applied examples on real-world datasets", "Fingers flexion decoding on BCIC IV 4 ECoG Dataset", "Sleep staging on the Sleep Physionet dataset using Chambon2018 network", "Sleep staging on the Sleep Physionet dataset using Eldele2021", "Sleep staging on the Sleep Physionet dataset using U-Sleep network", "Process a big data EEG resource (TUH EEG Corpus)", "Computation times", "Benchmarking eager and lazy loading", "Loading and organizing data", "Benchmarking preprocessing with parallelization and serialization", "Custom Dataset Example", "Load and save dataset example", "MNE Dataset Example", "MOABB Dataset Example", "Split Dataset Example", "Multiple discrete targets with the TUH EEG Corpus", "Computation times", "Examples", "Basic model building and training", "Simple training on MNE epochs", "Cropped Decoding on BCIC IV 2a Dataset", "Basic Brain Decoding on EEG Data", "How to train, test and tune your model?", "Hyperparameter tuning with scikit-learn", "Convolutional neural network regression model on fake data.", "Training a Braindecode model in PyTorch", "Computation times", "How to cite Braindecode", "braindecode.augmentation.AugmentedDataLoader", "braindecode.augmentation.BandstopFilter", "braindecode.augmentation.ChannelsDropout", "braindecode.augmentation.ChannelsShuffle", "braindecode.augmentation.ChannelsSymmetry", "braindecode.augmentation.Compose", "braindecode.augmentation.FTSurrogate", "braindecode.augmentation.FrequencyShift", "braindecode.augmentation.GaussianNoise", "braindecode.augmentation.IdentityTransform", "braindecode.augmentation.Mixup", "braindecode.augmentation.SensorsRotation", "braindecode.augmentation.SensorsXRotation", "braindecode.augmentation.SensorsYRotation", "braindecode.augmentation.SensorsZRotation", "braindecode.augmentation.SignFlip", "braindecode.augmentation.SmoothTimeMask", "braindecode.augmentation.TimeReverse", "braindecode.augmentation.Transform", "braindecode.augmentation.functional.bandstop_filter", "braindecode.augmentation.functional.channels_dropout", "braindecode.augmentation.functional.channels_permute", "braindecode.augmentation.functional.channels_shuffle", "braindecode.augmentation.functional.frequency_shift", "braindecode.augmentation.functional.ft_surrogate", "braindecode.augmentation.functional.gaussian_noise", "braindecode.augmentation.functional.identity", "braindecode.augmentation.functional.mixup", "braindecode.augmentation.functional.sensors_rotation", "braindecode.augmentation.functional.sign_flip", "braindecode.augmentation.functional.smooth_time_mask", "braindecode.augmentation.functional.time_reverse", "braindecode.classifier.EEGClassifier", "braindecode.datasets.BCICompetitionIVDataset4", "braindecode.datasets.BNCI2014001", "braindecode.datasets.BaseConcatDataset", "braindecode.datasets.BaseDataset", "braindecode.datasets.HGD", "braindecode.datasets.MOABBDataset", "braindecode.datasets.SleepPhysionet", "braindecode.datasets.TUH", "braindecode.datasets.TUHAbnormal", "braindecode.datasets.WindowsDataset", "braindecode.datasets.create_from_X_y", "braindecode.datasets.create_from_mne_epochs", "braindecode.datasets.create_from_mne_raw", "braindecode.datautil.load_concat_dataset", "braindecode.datautil.save_concat_dataset", "braindecode.models.ATCNet", "braindecode.models.Deep4Net", "braindecode.models.DeepSleepNet", "braindecode.models.EEGConformer", "braindecode.models.EEGITNet", "braindecode.models.EEGInception", "braindecode.models.EEGInceptionERP", "braindecode.models.EEGInceptionMI", "braindecode.models.EEGModuleMixin", "braindecode.models.EEGNetv1", "braindecode.models.EEGNetv4", "braindecode.models.EEGResNet", "braindecode.models.HybridNet", "braindecode.models.ShallowFBCSPNet", "braindecode.models.SleepStagerBlanco2020", "braindecode.models.SleepStagerChambon2018", "braindecode.models.SleepStagerEldele2021", "braindecode.models.TCN", "braindecode.models.TIDNet", "braindecode.models.TimeDistributed", "braindecode.models.USleep", "braindecode.models.get_output_shape", "braindecode.preprocessing.Crop", "braindecode.preprocessing.DropChannels", "braindecode.preprocessing.Filter", "braindecode.preprocessing.Pick", "braindecode.preprocessing.Preprocessor", "braindecode.preprocessing.Resample", "braindecode.preprocessing.SetEEGReference", "braindecode.preprocessing.create_fixed_length_windows", "braindecode.preprocessing.create_windows_from_events", "braindecode.preprocessing.create_windows_from_target_channels", "braindecode.preprocessing.exponential_moving_demean", "braindecode.preprocessing.exponential_moving_standardize", "braindecode.preprocessing.filterbank", "braindecode.preprocessing.preprocess", "braindecode.preprocessing.scale", "braindecode.regressor.EEGRegressor", "braindecode.samplers.BalancedSequenceSampler", "braindecode.samplers.RecordingSampler", "braindecode.samplers.RelativePositioningSampler", "braindecode.samplers.SequenceSampler", "braindecode.training.CroppedLoss", "braindecode.training.CroppedTimeSeriesEpochScoring", "braindecode.training.CroppedTrialEpochScoring", "braindecode.training.PostEpochTrainScoring", "braindecode.training.TimeSeriesLoss", "braindecode.training.mixup_criterion", "braindecode.training.predict_trials", "braindecode.training.trial_preds_from_window_preds", "braindecode.util.set_random_seeds", "braindecode.visualization.compute_amplitude_gradients", "braindecode.visualization.plot_confusion_matrix", "Frequently Asked Questions (FAQ)", "Braindecode", "Installation", "Installing from PyPI", "Installing from sources", "What\u2019s new"], "terms": {"thi": [0, 2, 8, 9, 10, 11, 14, 16, 17, 18, 19, 20, 22, 31, 47, 48, 49, 67, 68, 69, 70, 72, 74, 75, 76, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 107, 111, 112, 113, 115, 116, 119, 120, 122, 128, 133, 136, 140, 141], "i": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 26, 27, 28, 30, 31, 34, 36, 40, 41, 42, 45, 46, 51, 53, 54, 58, 59, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 109, 110, 111, 112, 113, 118, 119, 120, 123, 128, 132, 133, 137, 138, 139, 141], "class": [0, 3, 4, 5, 9, 10, 11, 12, 14, 21, 26, 27, 28, 29, 30, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 59, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 135, 141], "camelcas": 0, "name": [0, 2, 5, 8, 9, 10, 11, 12, 16, 17, 18, 21, 22, 26, 32, 39, 67, 69, 70, 71, 72, 73, 78, 81, 106, 107, 108, 109, 111, 120, 126, 127, 128, 141], "function": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 20, 22, 26, 27, 28, 30, 31, 32, 34, 41, 53, 67, 70, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 105, 109, 111, 113, 119, 120, 126, 127, 128, 133, 141], "underscore_cas": 0, "braindecod": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 138, 139, 141], "base": [0, 2, 3, 4, 5, 8, 9, 10, 12, 16, 18, 20, 21, 26, 27, 28, 29, 30, 31, 32, 35, 43, 45, 60, 62, 67, 69, 70, 83, 85, 86, 87, 88, 89, 90, 92, 93, 99, 105, 107, 108, 112, 113, 120, 122, 130, 141], "datautil": [0, 5, 18, 77, 141], "exampl": [1, 2, 8, 9, 10, 11, 14, 15, 16, 22, 23, 25, 31, 36, 38, 39, 43, 44, 45, 46, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 111, 136, 141], "explain": [1, 4, 24, 27, 87], "more": [1, 2, 3, 4, 5, 8, 9, 10, 11, 16, 22, 24, 26, 27, 28, 29, 30, 67, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 105, 106, 107, 108, 110, 111, 120, 133, 140, 141], "topic": [1, 24, 34], "finger": [1, 6, 7, 13, 24, 68, 70, 72, 91, 96, 104, 109, 112, 114, 116, 118, 126, 127, 129, 133, 141], "flexion": [1, 6, 7, 13, 24, 68, 70, 91, 96, 104, 109, 112, 114, 116, 118, 126, 127, 129, 133, 141], "crop": [1, 6, 8, 10, 11, 12, 16, 20, 24, 25, 29, 30, 31, 32, 33, 67, 68, 70, 73, 74, 77, 91, 96, 104, 109, 112, 113, 116, 118, 120, 125, 126, 127, 129, 131, 133, 135, 141], "decod": [1, 3, 4, 6, 7, 13, 20, 22, 24, 25, 26, 29, 30, 31, 32, 33, 34, 67, 68, 70, 73, 78, 84, 86, 91, 95, 96, 103, 104, 109, 112, 113, 114, 116, 118, 120, 125, 126, 127, 129, 131, 133, 135, 137, 141], "bcic": [1, 6, 7, 13, 20, 24, 25, 29, 32, 33, 35, 37, 40, 41, 42, 50, 51, 53, 68, 70, 73, 91, 96, 104, 109, 112, 113, 114, 116, 118, 125, 126, 127, 129, 133, 135, 141], "iv": [1, 6, 7, 13, 20, 21, 24, 25, 26, 28, 29, 30, 32, 33, 35, 37, 40, 41, 42, 50, 51, 53, 68, 70, 73, 83, 90, 91, 96, 104, 109, 112, 113, 114, 116, 118, 125, 126, 127, 129, 133, 135, 141], "4": [1, 3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 68, 69, 70, 72, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 101, 103, 104, 109, 112, 114, 116, 117, 118, 121, 122, 126, 127, 129, 133], "ecog": [1, 6, 7, 13, 24, 68, 70, 91, 96, 104, 109, 111, 112, 114, 116, 118, 126, 127, 129, 133, 137, 141], "dataset": [1, 6, 13, 14, 15, 16, 23, 25, 26, 33, 35, 37, 40, 41, 42, 50, 51, 53, 67, 81, 83, 90, 91, 96, 98, 99, 102, 103, 104, 109, 112, 113, 114, 116, 118, 119, 120, 122, 124, 125, 126, 127, 129, 131, 133, 134, 135, 136, 137, 139, 140, 141], "data": [1, 2, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 21, 25, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 57, 60, 62, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 81, 84, 86, 91, 96, 104, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 118, 119, 120, 125, 130, 133, 135, 136, 137, 141], "augment": [1, 6, 24, 70, 73, 86, 91, 96, 109, 113, 116, 118, 133, 137, 141], "2a": [1, 6, 20, 21, 24, 25, 26, 28, 29, 30, 32, 33, 35, 37, 40, 41, 42, 50, 51, 53, 70, 73, 83, 90, 91, 96, 109, 113, 116, 118, 125, 133, 135, 141], "search": [1, 6, 24, 29, 30, 35, 37, 41, 51, 53, 67, 70, 73, 91, 96, 109, 113, 116, 118, 120, 133, 136, 141], "best": [1, 6, 24, 32, 35, 37, 41, 51, 53, 70, 73, 91, 96, 109, 113, 116, 118, 133], "self": [1, 4, 6, 11, 24, 32, 67, 70, 74, 83, 86, 91, 98, 109, 113, 118, 120, 122, 123, 124, 133, 136, 141], "supervis": [1, 4, 6, 24, 29, 32, 70, 74, 91, 98, 109, 113, 118, 122, 123, 133, 141], "learn": [1, 2, 3, 4, 6, 8, 9, 10, 11, 24, 25, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 43, 45, 51, 54, 55, 56, 57, 60, 62, 65, 67, 70, 73, 74, 84, 88, 89, 91, 95, 96, 98, 99, 109, 113, 116, 118, 120, 122, 123, 133, 135, 137, 139, 141], "eeg": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 17, 20, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 72, 73, 74, 75, 76, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 107, 108, 109, 111, 112, 113, 116, 118, 119, 122, 123, 130, 133, 135, 137, 141], "rel": [1, 6, 24, 29, 30, 70, 74, 91, 98, 109, 113, 118, 122, 123, 133], "posit": [1, 6, 24, 27, 36, 46, 47, 48, 49, 51, 54, 63, 65, 70, 74, 91, 98, 109, 113, 118, 122, 123, 132, 133], "go": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 105], "end": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 34, 67, 90, 105, 110, 112, 113, 120, 126, 127, 128, 141], "download": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 68, 75, 76, 139], "full": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 133], "code": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 83, 86, 87, 88, 89, 99, 100, 101, 136, 138, 140, 141], "tutori": [2, 3, 4, 5, 8, 9, 10, 11, 22, 24, 26, 27, 28, 29, 30, 32, 140, 141], "show": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 21, 26, 28, 29, 30, 31, 32, 72, 91, 141], "you": [2, 3, 4, 5, 8, 9, 11, 12, 16, 17, 18, 19, 21, 22, 24, 27, 28, 29, 32, 34, 67, 120, 128, 136, 138, 139, 140], "how": [2, 3, 4, 5, 8, 9, 10, 11, 12, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 33, 67, 70, 73, 91, 96, 105, 109, 111, 113, 116, 118, 120, 133, 141], "deep": [2, 3, 4, 5, 8, 9, 10, 11, 14, 26, 27, 28, 29, 30, 31, 32, 34, 43, 60, 84, 88, 89, 95, 96, 98, 99, 101, 135, 137, 139], "bci": [2, 4, 8, 21, 26, 27, 28, 29, 30, 41, 59, 68, 69, 83, 90, 101], "competit": [2, 4, 8, 11, 14, 21, 26, 27, 28, 29, 30, 68, 69, 88, 89], "us": [2, 3, 4, 7, 8, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 34, 36, 38, 39, 43, 45, 46, 47, 48, 49, 52, 55, 57, 59, 60, 63, 67, 69, 72, 77, 83, 86, 87, 88, 89, 90, 92, 94, 95, 97, 100, 101, 105, 107, 108, 110, 111, 120, 128, 131, 136, 139, 140, 141], "mode": [2, 24, 32, 67, 84, 107, 110, 120, 128, 140, 141], "For": [2, 4, 5, 8, 14, 26, 27, 28, 29, 32, 67, 103, 107, 111, 120, 122, 128, 130, 133, 137, 138, 139, 140], "we": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 24, 26, 27, 28, 29, 30, 32, 34, 72, 86, 120, 133, 136, 139, 140], "predict": [2, 4, 5, 8, 9, 10, 11, 27, 28, 31, 67, 71, 91, 102, 120, 125, 126, 127, 128, 129, 130, 131, 132, 141], "5": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 67, 69, 83, 84, 85, 86, 88, 89, 90, 96, 97, 98, 99, 103, 120], "regress": [2, 5, 8, 24, 25, 30, 33, 70, 71, 84, 91, 96, 104, 112, 120, 125, 133, 141], "target": [2, 4, 5, 8, 9, 10, 15, 17, 18, 20, 23, 24, 27, 28, 29, 31, 45, 53, 62, 67, 68, 70, 71, 75, 77, 78, 80, 81, 112, 113, 120, 121, 122, 125, 126, 129, 130, 131, 135, 141], "correspond": [2, 5, 8, 12, 21, 29, 30, 31, 36, 39, 67, 68, 69, 70, 77, 78, 80, 111, 113, 118, 120, 121, 129], "each": [2, 4, 8, 9, 10, 11, 12, 14, 16, 17, 19, 21, 22, 26, 29, 30, 31, 35, 36, 37, 41, 46, 50, 52, 54, 55, 59, 63, 64, 66, 67, 68, 69, 70, 72, 74, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 107, 110, 112, 113, 120, 122, 124, 126, 127, 128, 132], "The": [2, 3, 4, 5, 8, 10, 11, 12, 14, 16, 18, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 51, 58, 67, 69, 71, 72, 77, 83, 86, 88, 89, 90, 92, 93, 94, 95, 97, 99, 103, 105, 106, 107, 108, 110, 111, 117, 120, 130, 131, 135, 138, 140], "were": [2, 8, 9, 11, 14, 19, 26, 30, 69, 70, 72, 86, 97, 107, 141], "record": [2, 4, 8, 9, 10, 11, 14, 16, 21, 22, 26, 31, 68, 69, 72, 74, 75, 76, 80, 84, 85, 86, 87, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100, 111, 112, 113, 121, 122, 123, 141], "time": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 52, 66, 67, 68, 70, 74, 77, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 115, 116, 120, 121, 125, 126, 129, 132, 141], "seri": [2, 4, 5, 8, 9, 10, 29, 30, 31, 67, 71, 77, 80, 97, 98, 120, 122, 126, 141], "25": [2, 5, 8, 9, 11, 12, 14, 23, 29, 31, 32, 69, 83, 84, 85, 86, 88, 89, 92, 93, 96, 98, 107], "hz": [2, 3, 4, 5, 8, 9, 11, 16, 27, 29, 30, 31, 36, 42, 54, 58, 69, 83, 86, 90, 103, 107], "so": [2, 5, 8, 9, 10, 11, 14, 16, 18, 26, 27, 28, 29, 30, 32, 36, 39, 67, 103, 112, 117, 120, 141], "an": [2, 5, 8, 10, 12, 14, 18, 22, 26, 27, 29, 30, 32, 40, 46, 47, 48, 49, 53, 67, 69, 71, 72, 77, 80, 83, 84, 85, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 102, 103, 106, 107, 109, 110, 111, 113, 120, 122, 128, 136, 137, 141], "author": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 31, 34, 86, 87, 88, 89, 90, 92, 93], "maciej": [2, 8, 141], "sliwowski": [2, 8], "maciek": [2, 8], "gmail": [2, 5, 8, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 31], "com": [2, 3, 5, 8, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 31, 75, 76, 140], "moham": [2, 8, 141], "fattouh": [2, 8, 141], "mo": [2, 8], "licens": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 31], "bsd": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 31], "3": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 30, 31, 32, 43, 45, 46, 60, 62, 63, 67, 68, 69, 72, 74, 83, 84, 88, 89, 90, 91, 94, 97, 101, 120, 121, 122, 131, 138, 141], "claus": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26], "first": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 26, 27, 28, 30, 39, 51, 65, 67, 70, 74, 75, 76, 83, 84, 86, 96, 99, 107, 110, 111, 113, 120, 136, 140], "In": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 18, 20, 21, 26, 27, 28, 29, 30, 32, 36, 43, 45, 46, 47, 48, 49, 51, 54, 60, 62, 63, 65, 67, 69, 107, 108, 111, 120, 133], "avail": [2, 3, 4, 8, 9, 10, 11, 12, 14, 16, 18, 19, 22, 26, 27, 28, 29, 30, 32, 68, 74, 86, 88, 89, 99, 112, 113, 121, 122], "part": [2, 8, 16, 17, 19, 28, 29, 32, 37, 38, 51, 55, 57, 65, 86, 88, 89], "librari": [2, 3, 8, 24, 26, 28, 29, 30, 34, 68, 140], "http": [2, 4, 5, 8, 12, 26, 27, 28, 29, 30, 34, 45, 62, 67, 68, 74, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 103, 120, 130, 133, 135, 140], "searchwork": [2, 8, 68], "stanford": [2, 8, 68], "edu": [2, 4, 8, 68], "view": [2, 4, 8, 22, 68], "zk881ps0522": [2, 8, 68], "contain": [2, 5, 8, 12, 14, 16, 18, 21, 22, 26, 31, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 51, 54, 62, 63, 65, 67, 68, 70, 73, 74, 77, 111, 112, 113, 120, 121, 122, 123, 129, 130, 136, 141], "signal": [2, 3, 4, 5, 8, 9, 10, 11, 12, 18, 20, 26, 28, 29, 30, 31, 35, 36, 37, 38, 41, 42, 46, 47, 48, 49, 51, 54, 55, 57, 58, 59, 63, 65, 69, 71, 74, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 107, 110, 111, 112, 113, 117, 119, 120, 123, 141], "differ": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 18, 21, 26, 27, 28, 29, 30, 69, 88, 89, 90, 103, 123, 138], "than": [2, 5, 8, 9, 10, 11, 12, 14, 16, 27, 32, 36, 54, 67, 80, 107, 113, 120, 141], "standard": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 32, 35, 43, 46, 47, 48, 49, 60, 63, 111, 116, 141], "setup": [2, 4, 8, 27, 138], "multipl": [2, 3, 4, 8, 9, 10, 14, 15, 16, 21, 23, 24, 27, 29, 30, 67, 70, 75, 90, 102, 103, 107, 111, 112, 117, 119, 120, 131, 141], "trial": [2, 3, 4, 8, 19, 21, 27, 28, 29, 30, 31, 32, 67, 69, 72, 78, 80, 113, 120, 126, 127, 131, 132, 141], "usual": [2, 3, 4, 8, 16, 29, 32, 67, 120], "one": [2, 4, 8, 9, 10, 11, 14, 16, 20, 26, 27, 29, 30, 32, 40, 45, 51, 65, 67, 69, 70, 83, 86, 90, 91, 103, 111, 112, 113, 120, 121, 122, 123, 136], "per": [2, 4, 5, 8, 9, 10, 11, 27, 45, 51, 65, 69, 72, 74, 90, 101, 111, 141], "here": [2, 3, 4, 5, 8, 10, 11, 12, 21, 22, 24, 26, 27, 28, 29, 30, 32, 42, 58, 80, 90, 112, 113], "chang": [2, 5, 8, 14, 18, 31, 44, 67, 111, 120, 128, 140], "ar": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 32, 34, 36, 45, 62, 67, 70, 77, 78, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 107, 108, 111, 112, 113, 117, 120, 123, 125, 129, 136, 138, 139, 140, 141], "sampl": [2, 3, 4, 5, 8, 9, 10, 14, 16, 17, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 41, 42, 45, 46, 47, 48, 49, 51, 54, 57, 58, 59, 65, 67, 69, 71, 72, 74, 78, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 107, 112, 113, 121, 122, 123, 124, 130, 136, 141], "frequenc": [2, 3, 4, 8, 11, 12, 16, 17, 26, 27, 28, 29, 30, 31, 32, 36, 42, 54, 58, 72, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 107, 110, 117, 121, 141], "equal": [2, 8, 32, 78, 79, 80, 91, 104, 112], "If": [2, 8, 14, 18, 19, 22, 26, 29, 30, 32, 34, 36, 45, 67, 68, 69, 70, 72, 73, 74, 75, 76, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 121, 123, 124, 128, 129, 130, 131, 136, 140], "pleas": [2, 3, 4, 5, 8, 11, 12, 22, 26, 27, 28, 29, 30, 32, 68, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 117, 140, 141], "cite": [2, 8, 68], "1": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 31, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 59, 60, 62, 63, 65, 67, 68, 69, 70, 72, 74, 75, 76, 81, 83, 84, 88, 89, 90, 91, 94, 96, 97, 99, 101, 103, 104, 107, 110, 111, 112, 113, 114, 115, 116, 120, 121, 122, 130, 131, 132, 135], "miller": [2, 8, 27, 28, 29, 30, 68], "kai": [2, 8, 68], "j": [2, 4, 5, 8, 26, 27, 28, 29, 30, 31, 36, 39, 41, 43, 51, 54, 56, 59, 60, 65, 68, 84, 87, 92, 93, 95, 96, 98, 100, 101, 135], "A": [2, 3, 4, 5, 8, 9, 10, 16, 27, 28, 29, 30, 31, 35, 37, 38, 41, 53, 55, 57, 59, 67, 68, 70, 73, 75, 76, 85, 88, 89, 90, 92, 93, 97, 98, 101, 107, 111, 112, 113, 118, 120, 123, 131, 135, 141], "human": [2, 8, 26, 31, 34, 39, 56, 68, 84, 95, 96, 107, 135], "electrocorticograph": [2, 8, 68], "analys": [2, 8, 29, 30, 68], "natur": [2, 8, 14, 68], "behaviour": [2, 8, 68], "11": [2, 3, 4, 5, 8, 10, 12, 17, 18, 19, 20, 21, 27, 28, 29, 31, 32, 68, 85], "2019": [2, 8, 31, 68], "1225": [2, 8, 68], "1235": [2, 8, 68], "doi": [2, 8, 10, 26, 27, 28, 29, 30, 34, 68, 83, 84, 87, 88, 89, 95, 96, 97, 99, 101, 135], "org": [2, 4, 5, 8, 26, 27, 28, 29, 30, 34, 45, 62, 67, 68, 74, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 103, 120, 130, 133, 135], "10": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 46, 47, 48, 49, 63, 67, 68, 69, 83, 84, 86, 87, 88, 89, 95, 96, 97, 99, 101, 107, 111, 120, 121, 135], "1038": [2, 8, 68], "s41562": [2, 8, 68], "019": [2, 8, 68, 97], "0678": [2, 8, 68], "import": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 41, 59, 136, 140], "copi": [2, 11, 16, 41, 59, 68, 105, 136], "numpi": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 17, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 63, 67, 107, 110, 120, 133, 135], "np": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 26, 29, 31, 32, 67, 115, 116, 119, 120, 121, 122, 123, 124, 131], "sklearn": [2, 4, 5, 8, 9, 10, 11, 16, 27, 28, 29, 30, 31, 67, 120, 128, 135, 141], "from": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 37, 38, 41, 45, 46, 47, 48, 49, 55, 57, 59, 63, 67, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 111, 112, 113, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 138, 141], "mne": [2, 3, 4, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 25, 28, 30, 33, 46, 63, 68, 70, 71, 74, 77, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 120, 136, 141], "set_log_level": [2, 8, 12, 14, 22], "bcicompetitionivdataset4": [2, 8, 141], "subject_id": [2, 3, 4, 5, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 27, 28, 29, 30, 32, 68, 69, 72, 73, 74, 141], "can": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 26, 27, 28, 29, 30, 32, 34, 42, 46, 63, 67, 70, 74, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 106, 107, 108, 110, 111, 120, 131, 138, 139, 141], "easili": [2, 8, 20, 26, 28, 29, 30, 32, 122], "addit": [2, 8, 12, 17, 20, 21, 26, 28, 29, 30, 32, 43, 60, 67, 69, 70, 71, 77, 80, 113, 120, 135], "info": [2, 3, 4, 8, 12, 14, 16, 17, 19, 20, 21, 26, 27, 28, 29, 30, 32, 70, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 107, 108, 111, 122, 124, 136, 141], "store": [2, 4, 8, 9, 10, 11, 12, 14, 18, 22, 28, 29, 30, 32, 68, 70, 81, 141], "descript": [2, 5, 8, 12, 17, 18, 19, 20, 22, 27, 28, 29, 30, 32, 68, 69, 70, 71, 75, 76, 77, 80, 81, 83, 86, 88, 90, 92, 93, 94, 95, 97, 103, 112, 113], "attribut": [2, 8, 26, 28, 29, 30, 32, 67, 71, 77, 109, 120, 141], "case": [2, 8, 16, 21, 26, 27, 28, 29, 30, 32, 67, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 111, 120, 133, 139, 141], "session": [2, 4, 8, 12, 18, 20, 21, 27, 28, 29, 30, 31, 32, 69, 72, 122], "column": [2, 8, 16, 18, 19, 21, 22, 27, 28, 29, 30, 32, 70, 77, 81, 91, 121, 122, 135], "select": [2, 4, 8, 9, 16, 20, 27, 28, 29, 30, 32, 36, 72, 111, 121], "valid": [2, 21, 26, 27, 31, 32, 67, 99, 111, 112, 113, 120, 128, 129, 141], "final": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 26, 27, 28, 29, 30, 32, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 116], "evalu": [2, 5, 8, 9, 10, 11, 14, 21, 30, 100], "train_set": [2, 3, 4, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32], "test_set": [2, 8, 29, 31, 32], "now": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 22, 26, 27, 28, 30, 111, 140, 141], "appli": [2, 3, 4, 5, 8, 9, 10, 12, 16, 18, 19, 20, 26, 27, 28, 29, 30, 32, 35, 36, 37, 38, 39, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 67, 71, 77, 97, 98, 102, 107, 109, 111, 117, 118, 120, 130, 141], "like": [2, 8, 16, 26, 28, 29, 30, 32, 36, 41, 46, 54, 59, 63, 67, 78, 79, 80, 99, 107, 108, 120, 122, 140, 141], "bandpass": [2, 3, 4, 8, 20, 27, 28, 29, 30, 32, 69, 107, 117], "filter": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 20, 26, 27, 28, 29, 30, 32, 36, 54, 69, 83, 84, 86, 88, 89, 90, 93, 96, 98, 100, 101, 103, 109, 110, 117, 141], "our": [2, 5, 8, 9, 10, 11, 12, 16, 20, 26, 27, 28, 30, 32, 72, 138], "either": [2, 8, 26, 28, 29, 30, 67, 69, 70, 72, 91, 107, 111, 120, 131], "provid": [2, 8, 9, 10, 11, 26, 28, 30, 32, 34, 67, 69, 70, 71, 75, 76, 102, 107, 108, 109, 118, 120, 136], "raw": [2, 3, 4, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 27, 28, 29, 30, 31, 70, 71, 74, 75, 76, 80, 85, 105, 106, 107, 108, 109, 111, 112, 113, 117, 119, 137, 141], "epoch": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 17, 18, 19, 21, 24, 25, 27, 28, 29, 30, 31, 32, 33, 67, 70, 77, 79, 80, 91, 96, 105, 106, 107, 108, 109, 111, 112, 113, 120, 123, 126, 127, 128, 141], "your": [2, 3, 4, 8, 14, 16, 21, 24, 25, 27, 28, 30, 33, 34, 67, 70, 73, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 109, 113, 116, 118, 120, 133, 136, 138], "own": [2, 8, 27, 28, 29, 30, 32, 72, 136], "object": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 18, 19, 21, 27, 28, 29, 30, 31, 32, 40, 71, 74, 75, 76, 77, 80, 105, 109, 112, 113, 118, 135, 141], "underli": [2, 5, 8, 28, 30, 109], "arrai": [2, 4, 8, 11, 17, 22, 26, 28, 29, 30, 36, 46, 53, 54, 63, 67, 78, 79, 80, 107, 108, 109, 110, 120, 124, 131, 135], "step": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 18, 22, 28, 29, 30, 32, 80, 112, 113, 136], "taken": [2, 5, 8, 14], "process": [2, 4, 5, 7, 8, 13, 14, 15, 16, 22, 24, 29, 30, 70, 75, 109, 112, 118, 119, 141], "pipelin": [2, 5, 8, 29, 32], "onli": [2, 4, 5, 8, 9, 10, 11, 12, 14, 18, 21, 26, 27, 29, 30, 32, 40, 53, 67, 72, 74, 80, 87, 88, 89, 90, 92, 93, 105, 107, 108, 110, 111, 113, 120, 129, 136, 140, 141], "cutoff": [2, 8, 16, 107], "proper": [2, 8], "other": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 18, 26, 29, 30, 32, 53, 67, 72, 74, 83, 84, 85, 91, 94, 95, 96, 97, 98, 99, 100, 103, 120], "mai": [2, 3, 4, 5, 8, 9, 11, 16, 18, 27, 28, 29, 34, 67, 120, 128, 133, 136], "need": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 26, 27, 28, 29, 32, 67, 83, 86, 90, 120, 133, 138, 141], "These": [2, 5, 8, 26, 27, 28, 30], "prepocess": [2, 8, 28, 30], "directli": [2, 3, 5, 8, 12, 22, 26, 27, 28, 30, 31, 67, 77, 109, 111, 120, 140], "fly": [2, 8, 28, 30, 71, 77, 141], "transform": [2, 5, 8, 9, 10, 11, 20, 27, 28, 29, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 71, 77, 78, 79, 80, 86, 91, 120, 141], "pytorch": [2, 8, 14, 22, 24, 25, 26, 27, 28, 30, 33, 67, 70, 73, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 109, 113, 116, 118, 120, 131, 133, 139, 141], "torchvis": [2, 8, 28, 30], "preprocessor": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 18, 20, 27, 28, 29, 30, 32, 118, 141], "exponential_moving_standard": [2, 3, 4, 8, 27, 28, 29, 30, 32], "low_cut_hz": [2, 3, 4, 8, 27, 28, 29, 30, 32], "low": [2, 3, 4, 5, 8, 9, 10, 11, 16, 27, 28, 29, 30, 32, 36, 54, 88, 89, 107], "high_cut_hz": [2, 3, 4, 5, 8, 9, 10, 27, 28, 29, 30, 32], "200": [2, 8, 10, 14, 84], "high": [2, 3, 4, 8, 11, 27, 28, 29, 30, 32, 36, 54, 72, 88, 89, 103, 107, 121], "higher": [2, 5, 8, 32, 99], "paramet": [2, 3, 4, 5, 8, 10, 14, 16, 17, 18, 19, 26, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 135, 141], "exponenti": [2, 3, 4, 8, 27, 28, 29, 30, 32, 103, 115, 116], "move": [2, 3, 4, 8, 14, 16, 27, 28, 29, 30, 32, 68, 91, 115, 116, 141], "factor_new": [2, 3, 4, 8, 27, 28, 29, 30, 32, 115, 116], "1e": [2, 3, 4, 8, 9, 10, 11, 27, 28, 29, 30, 32], "init_block_s": [2, 3, 4, 8, 27, 28, 29, 30, 32, 115, 116], "1000": [2, 3, 4, 8, 12, 21, 22, 26, 27, 28, 29, 30, 32, 72, 88, 89, 122], "30": [2, 5, 8, 9, 10, 11, 16, 27, 30, 31, 74, 96, 97, 98, 99, 103], "second": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 30, 31, 32, 39, 69, 72, 75, 76, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 105], "limit": [2, 5, 8, 11, 12, 16, 26, 105], "memori": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 67, 113, 120], "run": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 67, 69, 72, 80, 83, 86, 90, 97, 107, 109, 110, 112, 113, 120, 122, 133, 136, 140], "6": [2, 3, 4, 5, 6, 9, 10, 12, 16, 17, 18, 19, 20, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 69, 72, 86, 107], "To": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 17, 22, 26, 27, 28, 29, 30, 31, 32, 107, 139, 140], "obtain": [2, 3, 4, 5, 8, 9, 11, 27, 28, 46, 63, 67, 71, 72, 77, 120, 122], "whole": [2, 8, 9, 10], "should": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 20, 26, 27, 28, 30, 36, 39, 46, 51, 54, 63, 65, 67, 68, 70, 71, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 105, 107, 108, 110, 111, 119, 120, 128, 136, 140], "valid_set": [2, 3, 8, 9, 10, 11, 27, 28, 31], "deepcopi": 2, "tmin": [2, 8, 12, 16, 19, 105], "24": [2, 5, 6, 9, 10, 11, 12, 13, 32, 97, 101, 108], "tmax": [2, 8, 12, 105], "n_job": [2, 3, 4, 5, 12, 14, 16, 27, 28, 29, 30, 32, 75, 76, 81, 107, 110, 112, 113, 114, 118, 141], "0": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 41, 43, 44, 45, 53, 55, 57, 59, 62, 67, 69, 70, 74, 75, 76, 80, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 120, 122, 131, 135], "baseconcatdataset": [2, 5, 9, 10, 12, 14, 16, 21, 31, 67, 78, 79, 80, 81, 112, 113, 118, 120, 122, 131, 141], "0x7f7fc2dbca60": 2, "variabl": [2, 4, 8, 29, 30, 68, 133], "channel": [2, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 19, 26, 31, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 51, 55, 56, 57, 58, 59, 60, 62, 63, 65, 74, 77, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 106, 107, 108, 111, 112, 113, 117, 141], "type": [2, 3, 4, 8, 26, 27, 28, 29, 32, 36, 37, 38, 39, 41, 42, 43, 45, 46, 51, 62, 67, 70, 72, 78, 79, 80, 81, 90, 91, 102, 104, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 122, 124, 130, 132, 135], "misc": [2, 4, 8, 77], "thu": [2, 4, 8, 105], "those": [2, 4, 5, 8, 12, 67, 107, 108, 120], "have": [2, 4, 5, 8, 11, 12, 14, 16, 17, 19, 21, 26, 27, 28, 29, 30, 32, 46, 51, 63, 65, 67, 78, 79, 80, 90, 109, 111, 112, 120, 128, 136, 139, 140, 141], "further": [2, 4, 5, 8, 9, 10, 11, 27, 29, 32, 67, 120], "howev": [2, 3, 4, 5, 8, 11, 14, 16, 21, 26, 27, 28, 29, 113], "mani": [2, 4, 5, 8, 16, 26, 27, 29, 32, 70], "ignor": [2, 4, 8, 51, 67, 83, 86, 90, 106, 109, 112, 113, 120, 123], "perform": [2, 4, 8, 9, 10, 11, 26, 27, 28, 29, 30, 32, 69, 70, 72, 83, 86, 90, 99, 115, 116, 141], "oper": [2, 3, 4, 8, 16, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 61, 105, 110], "see": [2, 3, 4, 5, 8, 9, 10, 11, 16, 20, 24, 26, 27, 28, 29, 30, 32, 45, 62, 67, 68, 69, 72, 74, 76, 77, 87, 91, 92, 93, 95, 100, 101, 105, 106, 107, 108, 110, 111, 112, 113, 120, 121, 123, 124, 130, 133, 136, 139, 140], "tool": [2, 4, 8, 74, 137, 140], "stabl": [2, 4, 5, 8, 16, 26, 67, 74, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 120, 133, 135], "glossari": [2, 4, 8], "html": [2, 4, 5, 8, 12, 26, 67, 74, 75, 76, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 120, 133, 135], "term": [2, 4, 8, 85, 91], "todo": 2, "ensur": [2, 103, 133, 139], "remov": [2, 3, 4, 5, 8, 9, 11, 26, 27, 28, 29, 30, 31, 32, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 106, 111, 132, 141], "pick_typ": [2, 3, 4, 8, 20, 27, 28, 29, 30, 32, 106], "true": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 26, 27, 28, 29, 30, 31, 32, 45, 46, 47, 48, 49, 67, 70, 71, 74, 75, 76, 77, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 109, 111, 112, 113, 114, 117, 120, 123, 124, 126, 127, 128, 131, 133, 141], "lambda": [2, 3, 4, 5, 8, 9, 10, 27, 28, 29, 30, 32, 67, 94, 120], "x": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 20, 22, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 79, 80, 83, 85, 86, 90, 95, 97, 98, 99, 100, 101, 102, 103, 110, 115, 116, 119, 120, 125, 128, 129, 131], "1e6": [2, 3, 4, 5, 8, 9, 10, 12, 27, 28, 29, 30, 32], "pick": [2, 8, 10, 12, 20, 107, 112, 113, 114, 141], "convert": [2, 3, 4, 5, 8, 9, 10, 17, 19, 27, 28, 29, 30, 31, 32, 107], "v": [2, 3, 4, 5, 8, 10, 16, 27, 28, 29, 30, 32, 88, 89, 92, 93, 100], "uv": [2, 3, 4, 5, 8, 10, 27, 28, 29, 30, 32], "l_freq": [2, 3, 4, 5, 8, 9, 10, 16, 27, 28, 29, 30, 32, 107], "h_freq": [2, 3, 4, 5, 8, 9, 10, 16, 27, 28, 29, 30, 32, 107], "extract": [2, 8, 12, 14, 16, 17, 19, 22, 27, 32, 77, 88, 89, 90, 97, 99, 112, 113, 121, 123], "check": [2, 3, 4, 8, 9, 10, 11, 26, 27, 28, 29, 30, 32, 34, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 103, 136, 139, 141], "thei": [2, 3, 4, 8, 14, 16, 26, 27, 28, 29, 30, 32, 111, 141], "same": [2, 3, 4, 5, 8, 9, 10, 11, 14, 18, 21, 27, 28, 29, 30, 32, 42, 51, 58, 65, 67, 72, 74, 99, 120, 123], "all": [2, 3, 4, 8, 12, 14, 16, 24, 26, 27, 28, 29, 30, 32, 42, 43, 51, 58, 60, 65, 67, 68, 69, 72, 73, 74, 83, 86, 88, 89, 90, 91, 105, 107, 108, 110, 111, 112, 113, 120, 128, 141], "sfreq": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 26, 27, 28, 29, 30, 31, 32, 36, 42, 54, 58, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 107, 120, 141], "assert": [2, 3, 4, 8, 12, 14, 27, 28, 29, 30, 32], "d": [2, 3, 4, 5, 8, 12, 14, 22, 26, 27, 28, 29, 30, 31, 32, 37, 38, 41, 55, 57, 59, 83, 84, 93, 95, 96, 97, 101, 123, 135, 141], "target_sfreq": [2, 8], "temp": [2, 8], "home": [2, 3, 4, 5, 8, 9, 10, 11, 16, 17, 18, 19, 26, 27, 28, 29, 30, 31, 32], "runner": [2, 3, 4, 5, 8, 9, 10, 11, 16, 17, 18, 19, 26, 27, 28, 29, 30, 31, 32], "work": [2, 3, 4, 5, 8, 10, 12, 16, 18, 20, 22, 24, 26, 27, 28, 29, 30, 31, 32, 67, 91, 103, 105, 120, 128, 137, 139, 141], "py": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33], "55": [2, 3, 4, 5, 8, 10, 13, 27, 28, 29, 30, 32, 33], "userwarn": [2, 3, 4, 5, 8, 10, 11, 16, 18, 26, 27, 28, 29, 30, 31, 32], "choic": [2, 3, 4, 5, 8, 10, 27, 28, 29, 30, 32, 86, 141], "cannot": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 32, 67, 105, 120], "save": [2, 3, 4, 5, 8, 10, 14, 15, 16, 23, 24, 27, 28, 29, 30, 32, 67, 70, 73, 81, 109, 113, 118, 120, 141], "warn": [2, 3, 4, 5, 8, 9, 10, 14, 16, 18, 26, 27, 28, 29, 30, 31, 32, 69, 99, 106, 112, 113, 133, 141], "contrast": [2, 4, 5, 27, 36, 43, 51, 54, 60, 65], "trialwis": [2, 4, 8, 20, 27, 28, 30, 67, 120, 131, 141], "befor": [2, 11, 16, 27, 28, 29, 30, 32, 67, 70, 71, 74, 77, 83, 84, 85, 86, 97, 98, 99, 115, 116, 120, 128, 133, 139, 141], "becaus": [2, 16, 26, 27, 29, 30, 136], "know": [2, 3, 4, 26, 27], "recept": [2, 27, 67, 120, 131], "field": [2, 27, 67, 111, 120, 131], "network": [2, 4, 5, 7, 8, 10, 13, 14, 25, 26, 27, 28, 29, 32, 33, 34, 43, 60, 67, 70, 71, 74, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 109, 112, 113, 118, 119, 120, 122, 124, 125, 131, 133, 135, 141], "larg": [2, 5, 14, 16, 26, 27, 70, 113], "stride": [2, 9, 10, 11, 26, 27, 78, 79, 80, 84, 86, 91, 96, 101, 112, 113], "choos": [2, 3, 4, 8, 18, 27, 28, 29, 30, 32], "input": [2, 3, 4, 8, 10, 11, 14, 21, 26, 27, 28, 29, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 120, 141], "size": [2, 3, 4, 5, 14, 16, 26, 27, 28, 29, 30, 31, 32, 36, 51, 54, 65, 67, 78, 79, 80, 83, 86, 88, 89, 90, 91, 97, 98, 100, 101, 103, 104, 107, 110, 112, 113, 120, 123, 125, 129, 131, 135], "fed": [2, 27, 47, 48, 49], "dure": [2, 4, 5, 8, 9, 10, 11, 12, 14, 27, 28, 29, 30, 32, 67, 68, 107, 111, 120, 141], "ha": [2, 3, 4, 5, 8, 10, 12, 20, 21, 22, 27, 28, 29, 30, 31, 32, 47, 48, 49, 67, 70, 71, 74, 77, 80, 87, 88, 89, 90, 92, 93, 103, 107, 112, 113, 120, 130, 136, 141], "larger": [2, 5, 27, 88, 89], "otherwis": [2, 14, 27, 29, 31, 80, 112, 113], "chosen": [2, 16, 18, 27, 32, 51, 67, 107, 120, 131], "effici": [2, 3, 16, 27], "explan": [2, 27, 117], "begin": [2, 27, 29, 30, 69, 97, 107, 112], "which": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 20, 21, 24, 26, 27, 29, 30, 32, 34, 35, 38, 41, 46, 57, 59, 63, 67, 70, 71, 72, 77, 91, 99, 102, 107, 110, 111, 120, 122, 123, 124, 136], "rate": [2, 5, 14, 27, 28, 29, 30, 31, 32, 67, 69, 72, 86, 88, 89, 97, 98, 99, 103, 120, 141], "input_window_sampl": [2, 3, 4, 8, 14, 26, 27, 28, 29, 30, 31, 32, 84, 86, 87, 88, 89, 92, 93, 94, 95, 96, 101, 104], "come": [2, 8, 14, 28, 30, 32, 124, 133], "some": [2, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 22, 26, 27, 28, 30, 34, 67, 70, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 111, 120, 133], "predefin": [2, 8, 28, 30], "convolut": [2, 5, 8, 9, 11, 24, 25, 26, 27, 28, 29, 30, 33, 34, 41, 43, 59, 60, 70, 71, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 103, 104, 112, 125, 133, 135, 141], "neural": [2, 4, 5, 8, 9, 10, 11, 14, 25, 26, 27, 28, 29, 33, 34, 43, 60, 70, 71, 84, 85, 86, 88, 89, 90, 91, 95, 96, 97, 98, 99, 101, 104, 112, 125, 133, 135, 141], "architectur": [2, 5, 8, 9, 10, 11, 26, 27, 28, 30, 67, 85, 86, 97, 98, 99, 103, 120, 137], "domain": [2, 4, 8, 16, 28, 30, 42, 58, 103, 107, 110], "shallow": [2, 8, 14, 26, 27, 28, 31, 96], "convnet": [2, 8, 26, 27, 28, 84, 95, 96], "visual": [2, 8, 9, 10, 11, 12, 26, 27, 28, 30, 31, 34, 72, 84, 86, 95, 96, 137, 141], "pure": [2, 5, 8, 28, 30, 141], "therefor": [2, 8, 12, 16, 27, 28, 29, 30, 32, 128], "just": [2, 4, 8, 22, 26, 28, 29, 30, 67, 84, 96, 120], "normal": [2, 5, 8, 9, 10, 28, 30, 97, 98, 119, 122, 135, 141], "nn": [2, 3, 4, 5, 8, 9, 10, 11, 14, 26, 27, 28, 29, 30, 31, 32, 67, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 120, 131], "modul": [2, 4, 5, 8, 9, 10, 11, 14, 26, 28, 30, 32, 67, 83, 86, 88, 89, 90, 99, 102, 120, 131, 133, 135, 139, 141], "torch": [2, 3, 4, 5, 8, 9, 10, 11, 14, 22, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 120, 125, 129, 130, 131, 133, 141], "shallowfbcspnet": [2, 3, 4, 8, 14, 26, 27, 28, 29, 30, 31, 32], "util": [2, 3, 4, 5, 8, 9, 10, 11, 14, 18, 22, 26, 27, 28, 30, 31, 32, 67, 120, 141], "set_random_se": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32, 141], "cuda": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32, 67, 107, 110, 120, 133, 139], "is_avail": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32], "gpu": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 32, 67, 120, 139, 141], "devic": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32, 35, 67, 120, 141], "els": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 27, 28, 29, 30, 31, 32, 67, 120], "cpu": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 32, 67, 120], "backend": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32, 133, 141], "cudnn": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32, 133, 141], "benchmark": [2, 3, 4, 5, 8, 9, 10, 11, 15, 23, 24, 27, 28, 29, 30, 31, 32, 70, 74, 76, 84, 96, 109, 112, 118, 133, 141], "set": [2, 4, 8, 9, 10, 11, 12, 14, 16, 17, 19, 22, 26, 27, 29, 30, 31, 32, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 62, 67, 69, 70, 72, 84, 88, 89, 90, 96, 97, 98, 101, 103, 105, 108, 111, 112, 113, 120, 133, 139, 141], "random": [2, 3, 4, 5, 8, 9, 10, 11, 26, 27, 28, 30, 31, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 72, 121, 122, 123, 124, 128, 133, 141], "seed": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 60, 133], "abl": [2, 3, 4, 5, 8, 9, 10, 11, 12, 27, 28, 30, 67, 120, 136], "roughli": [2, 3, 4, 5, 8, 9, 11, 27, 28, 72], "reproduc": [2, 3, 4, 5, 8, 9, 10, 11, 24, 27, 28, 30, 133, 141], "note": [2, 3, 4, 5, 8, 9, 11, 17, 20, 26, 27, 28, 42, 58, 67, 68, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 108, 111, 119, 120, 128, 133], "indetermin": [2, 3, 4, 5, 8, 9, 11, 27, 28], "still": [2, 3, 4, 5, 8, 9, 11, 27, 28, 29, 72], "make": [2, 3, 4, 5, 8, 9, 11, 12, 27, 28, 29, 30, 32, 99, 107, 136, 141], "substanti": [2, 3, 4, 5, 8, 9, 11, 14, 27, 28], "between": [2, 3, 4, 5, 8, 9, 11, 26, 27, 28, 29, 36, 37, 38, 41, 42, 45, 46, 47, 48, 49, 53, 54, 55, 57, 59, 62, 69, 78, 79, 80, 84, 86, 96, 97, 105, 112, 113, 124, 129], "consist": [2, 3, 4, 5, 8, 9, 11, 27, 28, 47, 48, 49, 69, 72], "cost": [2, 3, 4, 5, 8, 9, 11, 27, 28], "increas": [2, 3, 4, 5, 8, 9, 10, 11, 16, 27, 28, 29, 90, 99], "cudnn_benchmark": [2, 3, 4, 5, 8, 9, 11, 27, 28, 133], "fals": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 26, 27, 28, 29, 30, 31, 32, 41, 45, 46, 47, 48, 49, 59, 63, 67, 68, 70, 71, 74, 75, 76, 77, 80, 82, 83, 84, 85, 86, 91, 96, 97, 98, 99, 100, 103, 105, 109, 111, 112, 113, 114, 117, 118, 120, 123, 124, 126, 127, 133, 135, 141], "20200220": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "n_class": [2, 3, 4, 9, 10, 11, 14, 26, 27, 28, 29, 30, 31, 32, 67, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 120, 125, 129, 131], "number": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 22, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 60, 63, 65, 67, 70, 74, 75, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 107, 110, 112, 113, 117, 118, 120, 121, 122, 123, 124, 131, 132], "chan": [2, 3, 4, 8, 27, 28, 29, 30, 32, 69, 72], "n_chan": [2, 8, 11, 26, 27, 28, 30, 31, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 120], "shape": [2, 3, 4, 5, 8, 9, 10, 11, 17, 20, 22, 26, 27, 28, 29, 30, 32, 46, 63, 67, 85, 86, 91, 95, 97, 98, 99, 100, 101, 102, 103, 104, 124, 125, 129], "final_conv_length": [2, 3, 4, 8, 14, 26, 27, 28, 29, 30, 31, 32, 84, 92, 93, 96, 141], "2": [2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 30, 31, 36, 37, 38, 41, 42, 43, 45, 51, 54, 59, 60, 62, 65, 67, 69, 72, 74, 83, 84, 88, 89, 91, 92, 93, 94, 97, 99, 101, 103, 107, 111, 116, 120, 121, 122, 130, 131], "add_log_softmax": [2, 8, 26, 31, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103], "send": [2, 3, 4, 8, 9, 10, 11, 16, 27, 28, 29, 30, 32], "get_output_shap": [2, 27, 31, 91, 141], "to_dense_prediction_model": [2, 27, 31, 91, 141], "local": [2, 5, 9, 10, 11, 14, 27, 31, 32, 68, 111, 136, 140], "lib": [2, 5, 9, 10, 11, 27, 31, 32], "python3": [2, 5, 9, 10, 11, 27, 31, 32], "site": [2, 5, 9, 10, 11, 27, 31, 32], "packag": [2, 5, 9, 10, 11, 27, 31, 32, 34, 138, 139], "deprec": [2, 5, 9, 31, 88, 141], "86": [2, 9, 31], "futurewarn": [2, 9, 26, 30, 31, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103], "version": [2, 5, 9, 10, 18, 22, 30, 31, 67, 86, 91, 105, 106, 107, 108, 110, 111, 120, 136, 138, 139, 140], "eegmodulemixin": [2, 31, 141], "method": [2, 4, 5, 8, 12, 16, 21, 26, 29, 31, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 67, 68, 70, 71, 77, 83, 85, 86, 90, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 111, 120, 121, 122, 123, 125, 126, 127, 128, 129, 141], "msg": [2, 9, 31], "categori": [2, 4, 9, 31], "calcul": [2, 3, 4, 27, 28, 29, 30, 32, 67, 101, 120], "output": [2, 3, 4, 5, 12, 14, 21, 26, 27, 28, 29, 30, 31, 32, 67, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 111, 112, 113, 120], "dummi": [2, 27], "n_preds_per_input": [2, 27, 31], "create_fixed_length_window": [2, 5, 12, 14, 16, 22, 31, 141], "It": [2, 3, 4, 8, 9, 10, 11, 18, 27, 28, 29, 30, 32, 41, 59, 67, 70, 77, 80, 99, 112, 113, 120, 137], "defin": [2, 5, 9, 10, 11, 12, 14, 20, 21, 27, 28, 30, 39, 53, 56, 67, 77, 83, 86, 90, 101, 113, 120, 123], "start_offset_sampl": [2, 14, 22, 31, 112], "stop_offset_sampl": [2, 14, 22, 31, 112, 141], "none": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 18, 19, 20, 22, 26, 27, 28, 29, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 120, 121, 122, 123, 124, 126, 127, 128, 133, 135, 141], "window_size_sampl": [2, 5, 8, 9, 10, 11, 12, 14, 17, 19, 22, 27, 31, 78, 79, 80, 112, 113, 114], "window_stride_sampl": [2, 5, 9, 10, 11, 12, 14, 17, 19, 22, 27, 31, 78, 79, 80, 112, 113], "drop_last_window": [2, 12, 14, 17, 19, 22, 27, 31, 78, 79, 80, 112, 113], "targets_from": [2, 77, 112, 120], "last_target_onli": [2, 8, 77, 112, 114], "preload": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 21, 22, 27, 28, 29, 30, 31, 32, 74, 75, 76, 80, 81, 111, 112, 113, 114, 118, 141], "thumb": [2, 8, 27], "": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 21, 22, 26, 28, 30, 31, 32, 39, 41, 43, 46, 47, 48, 49, 56, 59, 60, 63, 67, 68, 69, 71, 72, 73, 74, 75, 76, 83, 89, 90, 92, 93, 98, 100, 103, 106, 107, 109, 111, 120, 121, 125, 128, 129], "consid": [2, 4, 29, 32, 47, 48, 49, 67, 120, 128], "well": [2, 5, 8, 12, 26, 27, 28, 29, 32, 80, 112, 113, 137, 141], "encourag": [2, 8, 24, 27, 28], "find": [2, 4, 8, 30], "wai": [2, 5, 8, 16, 21, 24, 26, 29, 99, 138, 140], "target_transform": [2, 8, 9, 10, 70, 141], "suppli": [2, 3, 5, 8, 9, 10, 11, 27, 28, 29], "eegclassifi": [2, 5, 9, 10, 11, 26, 27, 28, 29, 30, 141], "croppedloss": [2, 27, 31], "criterion": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 67, 120], "criterion__loss_funct": [2, 27, 31], "loss": [2, 3, 4, 5, 8, 9, 10, 11, 14, 26, 27, 28, 29, 30, 31, 32, 67, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 120, 125, 129, 130], "mean": [2, 3, 4, 8, 12, 14, 16, 26, 27, 29, 30, 31, 32, 72, 84, 93, 96, 111, 115, 116, 120, 136], "default": [2, 8, 12, 27, 28, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 67, 68, 74, 75, 76, 77, 80, 83, 84, 86, 88, 89, 90, 91, 105, 106, 107, 108, 110, 111, 113, 120, 128, 133, 141], "found": [2, 8, 10, 12, 16, 18, 19, 20, 21, 26, 27, 28, 29, 30, 32, 68, 111, 112, 113], "motor": [2, 4, 8, 27, 28, 69, 72, 83, 87, 90, 141], "strongli": [2, 8, 27, 28, 88, 89, 90], "hyperparamet": [2, 5, 8, 9, 10, 11, 14, 24, 25, 27, 28, 32, 33, 45, 67, 70, 73, 91, 96, 109, 113, 116, 118, 120, 133, 141], "optim": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32, 67, 72, 120], "cross": [2, 8, 16, 27, 28, 69], "skorch": [2, 3, 4, 5, 8, 9, 10, 11, 17, 26, 27, 28, 29, 30, 31, 67, 78, 79, 80, 120, 141], "callback": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32, 67, 120, 128], "lrschedul": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "helper": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31], "predefined_split": [2, 3, 5, 8, 9, 10, 11, 27, 28, 29, 31], "eegregressor": [2, 8, 26, 31, 141], "croppedtimeseriesepochscor": 2, "timeseriesloss": 2, "valu": [2, 4, 5, 8, 9, 10, 11, 12, 26, 27, 28, 30, 31, 32, 42, 45, 62, 67, 70, 71, 77, 80, 90, 101, 107, 108, 110, 111, 112, 113, 120, 129, 130, 131, 141], "good": [2, 8, 26, 27, 28], "mi": [2, 8], "lr": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32, 67, 120], "0625": [2, 3, 4, 8, 27, 28, 29, 30, 32], "01": [2, 3, 4, 6, 8, 12, 23, 26, 27, 28, 29, 32, 33, 67, 88, 89, 120], "weight_decai": [2, 3, 4, 8, 27, 28, 29, 32], "batch_siz": [2, 3, 4, 5, 8, 9, 10, 11, 14, 22, 27, 28, 29, 30, 31, 32, 36, 45, 46, 54, 62, 63, 67, 85, 86, 91, 95, 97, 98, 99, 100, 101, 102, 104, 120, 125, 129, 131, 134], "27": [2, 4, 5, 9, 29, 72], "64": [2, 3, 4, 5, 8, 10, 11, 14, 17, 19, 27, 28, 29, 32, 83, 93, 98], "n_epoch": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32], "8": [2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 17, 18, 19, 20, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 83, 86, 88, 89, 92, 93, 98, 117, 138], "regressor": [2, 8, 26, 31, 141], "aggregate_predict": [2, 67, 120], "mse_loss": [2, 31], "adamw": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "train_split": [2, 3, 4, 5, 8, 9, 10, 11, 26, 27, 28, 29, 30, 31, 67, 120], "optimizer__lr": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 67, 120], "optimizer__weight_decai": [2, 3, 4, 8, 27, 28, 29, 31], "iterator_train__shuffl": [2, 5, 9, 10, 11, 27, 31, 67, 120], "lr_schedul": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "cosineannealinglr": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "t_max": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "r2_train": 2, "metric": [2, 5, 9, 10, 11, 27, 28, 32, 135], "r2_score": 2, "lower_is_bett": [2, 5, 8, 9, 10, 11, 126, 127, 128], "on_train": [2, 5, 8, 9, 10, 11, 126, 127], "r2_valid": 2, "verbos": [2, 3, 4, 8, 29, 30, 67, 68, 105, 107, 108, 110, 111, 112, 113, 114, 120, 141], "specifi": [2, 3, 5, 8, 9, 10, 11, 12, 18, 21, 22, 26, 27, 28, 29, 67, 68, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 107, 111, 118, 120], "y": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 20, 22, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 79, 80, 85, 86, 90, 110, 120, 128], "alreadi": [2, 3, 5, 8, 9, 10, 11, 14, 19, 27, 28, 29, 70, 71, 77, 118, 120, 136, 138], "fit": [2, 3, 5, 8, 9, 10, 11, 14, 24, 26, 27, 28, 29, 30, 31, 32, 67, 113, 120], "train_loss": [2, 3, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32, 67, 120], "valid_loss": [2, 3, 5, 8, 9, 10, 11, 26, 27, 28, 29, 30, 31], "dur": [2, 3, 5, 8, 9, 10, 11, 26, 27, 28, 29, 30, 31], "16": [2, 5, 10, 30, 83, 93, 98, 107], "9029": 2, "3094": 2, "5378": 2, "20": [2, 5, 9, 10, 11, 12, 26, 29, 31, 32, 39, 46, 47, 48, 49, 63, 97, 111], "7336": 2, "0006": [2, 3, 8, 27, 28, 29, 30], "9380": 2, "13": [2, 5, 9, 10, 11, 13, 17, 19, 26, 72, 74, 107, 117], "7521": 2, "7": [2, 3, 4, 5, 6, 9, 10, 11, 16, 17, 18, 19, 20, 21, 23, 26, 27, 28, 29, 30, 31, 32, 34, 72, 83, 90, 91, 97], "1261": 2, "9596": 2, "18": [2, 4, 5, 11, 12, 29, 90], "0756": 2, "8474": 2, "12": [2, 4, 5, 8, 11, 13, 17, 18, 19, 29, 30, 69, 103, 135], "7751": 2, "7418": 2, "6787": 2, "17": [2, 5, 11, 101], "1905": 2, "0005": [2, 3, 22, 28, 30, 31], "8254": 2, "7951": 2, "3922": 2, "5638": 2, "4438": 2, "0004": 2, "8655": 2, "2694": 2, "1849": 2, "4237": 2, "0117": 2, "0002": [2, 3, 28, 30], "8458": 2, "5718": 2, "9210": 2, "3549": 2, "15": [2, 5, 9, 10, 11, 12, 14, 26, 27, 28, 29, 30, 46, 47, 48, 49, 86, 96, 101, 107, 110], "4452": 2, "0001": [2, 30, 94, 116], "8660": 2, "9": [2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 32, 33, 69, 72, 88, 90, 103, 111], "8213": 2, "6187": 2, "3132": 2, "14": [2, 5, 8, 17, 19, 27, 28, 72, 107, 133], "7814": 2, "0000": [2, 3, 8, 27, 28, 29, 30, 31], "8206": [2, 22], "0630": 2, "3052": 2, "3316": 2, "0897": 2, "8164": 2, "def": [2, 3, 5, 8, 9, 10, 11, 12, 14, 16, 29, 31, 32], "pad_and_select_predict": 2, "pred": [2, 8, 32, 125, 129, 130, 132], "pad": [2, 9, 10, 11, 27, 98, 107, 110, 141], "constant": 2, "constant_valu": 2, "mask": [2, 5, 51, 65, 129], "isnan": 2, "squeez": [2, 3, 4, 26, 27, 28, 29, 30, 32], "return": [2, 5, 8, 9, 10, 11, 12, 14, 17, 19, 21, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 75, 76, 77, 78, 79, 80, 81, 85, 86, 91, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 128, 130, 131, 132, 135, 141], "t": [2, 4, 5, 11, 16, 17, 18, 19, 26, 27, 28, 29, 30, 31, 32, 41, 59, 67, 68, 69, 84, 95, 96, 103, 105, 115, 116, 120, 133, 135], "preds_train": [2, 8], "y_train": [2, 8, 9, 10, 11, 29], "predict_tri": [2, 67, 120, 141], "return_target": [2, 67, 120, 131], "preds_valid": [2, 8], "y_valid": [2, 8], "preds_test": [2, 8], "y_test": [2, 8, 29], "adn": [2, 8], "decreas": [2, 8, 11], "nede": [2, 8], "doe": [2, 8, 14, 16, 18, 27, 29, 32, 44, 67, 83, 91, 113, 120, 136], "divers": [2, 4, 8], "caus": [2, 8], "overfit": [2, 8, 9, 10, 11, 29], "better": [2, 5, 8, 10, 14, 16, 27, 28, 29, 32, 86, 128], "improv": [2, 3, 5, 8, 9, 10, 11, 107, 136, 141], "matplotlib": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 30, 31, 135], "pyplot": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 30, 31], "plt": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 30, 31], "panda": [2, 4, 5, 8, 9, 10, 11, 14, 16, 20, 21, 27, 28, 29, 30, 31, 67, 70, 71, 77, 80, 120], "pd": [2, 4, 5, 8, 9, 10, 11, 14, 16, 27, 28, 29, 30, 31, 70, 71, 77, 121, 122, 123, 124], "line": [2, 8, 14, 27, 28, 31, 69, 136], "line2d": [2, 8, 27, 28], "fig": [2, 4, 5, 8, 9, 10, 11, 16, 27, 28, 29, 30, 31, 135], "ax": [2, 3, 4, 5, 8, 9, 10, 11, 16, 27, 28, 29, 30, 31, 91], "subplot": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 30, 31], "figsiz": [2, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 31, 135], "set_titl": [2, 8, 16, 31], "arang": [2, 8], "label": [2, 3, 5, 8, 9, 10, 11, 12, 16, 22, 26, 27, 28, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 102, 120, 123, 125, 129, 131, 135], "set_ylabel": [2, 5, 8, 9, 10, 11, 16, 27, 28, 31], "legend": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 31], "set_xlabel": [2, 4, 5, 8, 9, 10, 11, 16, 27, 28, 31], "tight_layout": [2, 4, 5, 8, 9, 10, 11, 27, 28, 30], "correl": [2, 8, 27, 29], "coeffici": [2, 8, 45, 62, 130], "corr_coeff": [2, 8], "dim": [2, 8], "rang": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 26, 27, 28, 29, 31, 32, 41, 59, 68, 117, 135], "append": [2, 8, 12, 14, 16, 27, 28, 31, 67, 107, 120], "corrcoef": [2, 8], "print": [2, 4, 5, 8, 9, 10, 11, 14, 17, 20, 21, 22, 26, 27, 28, 29, 30, 32, 67, 120, 136], "dimens": [2, 5, 8, 51, 65, 83, 86, 99, 103, 110, 141], "round": [2, 8], "histori": [2, 5, 8, 9, 10, 11, 27, 28, 31, 67, 120], "throughout": [2, 8, 9, 10, 11, 28, 29, 32], "accuraci": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 32, 128], "curv": [2, 8, 28], "results_column": [2, 8, 27, 28], "df": [2, 5, 8, 9, 10, 11, 12, 16, 27, 28], "datafram": [2, 4, 5, 8, 9, 10, 11, 14, 16, 20, 21, 22, 27, 28, 29, 30, 67, 70, 120, 121, 122, 123, 124], "index": [2, 5, 8, 9, 10, 11, 17, 27, 28, 30, 31, 71, 105, 115, 116, 121, 122, 132, 138], "ax1": [2, 5, 8, 9, 10, 11, 27, 28], "loc": [2, 8, 12, 26, 27, 28, 29], "style": [2, 5, 8, 27, 28, 47, 48, 49, 101], "marker": [2, 5, 8, 16, 27, 28], "o": [2, 4, 5, 8, 16, 27, 28, 36, 37, 38, 39, 43, 51, 54, 55, 56, 57, 60, 65, 123], "color": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 135], "tab": [2, 5, 8, 16, 27, 28], "blue": [2, 5, 8, 16, 27, 28], "fontsiz": [2, 8, 12, 27, 28], "tick_param": [2, 5, 8, 12, 27, 28], "axi": [2, 3, 5, 8, 27, 28, 31, 46, 47, 48, 49, 50, 52, 63, 64, 66, 91, 110, 132], "labelcolor": [2, 5, 8, 27, 28], "labels": [2, 8, 12, 27, 28], "ax2": [2, 5, 8, 9, 10, 11, 27, 28], "twinx": [2, 5, 8, 27, 28], "instanti": [2, 3, 4, 8, 14, 26, 27, 28, 32, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 60, 67, 73, 120, 141], "share": [2, 8, 14, 27, 28], "red": [2, 8, 27, 28], "r2": [2, 8], "score": [2, 4, 5, 9, 10, 11, 29, 30, 67, 85, 97, 120, 126, 127, 128, 141], "where": [2, 4, 8, 9, 10, 22, 27, 28, 29, 36, 45, 46, 51, 54, 62, 63, 65, 67, 68, 70, 78, 120, 131, 133, 141], "been": [2, 3, 4, 8, 10, 14, 16, 27, 28, 32, 87, 88, 89, 90, 91, 92, 93, 130, 136, 140, 141], "handl": [2, 3, 4, 8, 27, 28, 30, 111], "black": [2, 8, 12, 27, 28, 69, 72, 135], "linewidth": [2, 8, 27, 28], "linestyl": [2, 8, 12, 27, 28], "h": [2, 4, 5, 8, 27, 28, 36, 39, 43, 51, 54, 56, 60, 65, 83, 85, 87, 123], "get_label": [2, 8, 27, 28], "center": [2, 8, 9, 10, 29, 36, 54], "right": [2, 4, 8, 12, 27, 28, 29, 32, 39, 69, 72, 140], "total": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 69], "script": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 133], "minut": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 74], "694": [2, 6], "estim": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32], "usag": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 136, 141], "759": 2, "mb": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33], "python": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 34, 105, 133, 137, 138, 140, 141], "sourc": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138], "plot_bcic_iv_4_ecog_crop": [2, 6], "jupyt": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32], "notebook": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32], "ipynb": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32], "galleri": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32], "gener": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 67, 91, 97, 100, 107, 120, 128, 135, 141], "sphinx": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32], "follow": [3, 4, 5, 9, 10, 11, 14, 26, 29, 32, 88, 89, 107, 110, 113, 120, 138, 139, 140, 141], "wise": [3, 4, 5, 9, 10, 11], "also": [3, 4, 5, 9, 10, 11, 12, 14, 18, 21, 26, 28, 34, 67, 77, 86, 88, 89, 99, 107, 108, 110, 120, 131, 136, 139, 140], "illustr": [3, 29], "effect": 3, "simon": [3, 20, 141], "brandt": [3, 20, 141], "simonbrandt": [3, 20], "protonmail": [3, 20], "c\u00e9dric": [3, 4], "rommel": [3, 4, 141], "cedric": [3, 4, 141], "inria": [3, 4, 11], "fr": [3, 4, 11], "moabbdataset": [3, 4, 18, 20, 21, 27, 28, 29, 30, 32, 141], "dataset_nam": [3, 4, 18, 20, 21, 27, 28, 29, 30, 32, 73], "bnci2014001": [3, 4, 18, 20, 21, 27, 28, 29, 30, 32], "multipli": [3, 4, 5, 9, 10, 12, 27, 28, 29, 30, 32, 83, 88, 89], "cut": [3, 4, 19, 28, 29, 30, 36, 54, 78, 107], "38": [3, 4, 27, 28, 29, 30, 31, 32], "factor": [3, 4, 5, 9, 10, 12, 27, 28, 29, 30, 32, 99, 101, 103, 110, 119], "meg": [3, 4, 20, 27, 28, 29, 30, 32, 34, 107, 108, 137], "stim": [3, 4, 20, 27, 28, 29, 30, 32], "keep": [3, 4, 10, 11, 16, 27, 28, 29, 30, 32, 72, 74], "sensor": [3, 4, 27, 28, 29, 30, 32, 39, 46, 47, 48, 49, 63, 72], "moabb": [3, 4, 15, 18, 21, 23, 24, 27, 28, 29, 30, 32, 69, 70, 72, 73, 109, 118, 139, 140, 141], "0x7f7fc347d8a0": 3, "create_windows_from_ev": [3, 4, 5, 9, 10, 11, 18, 21, 27, 28, 29, 30, 32, 141], "trial_start_offset_second": [3, 4, 27, 28, 29, 30, 32], "start": [3, 4, 12, 14, 16, 22, 27, 28, 29, 30, 32, 51, 65, 67, 80, 105, 110, 112, 113, 120, 138], "offset": [3, 4, 16, 18, 27, 28, 29, 30, 32, 70, 80, 112, 113], "trial_start_offset_sampl": [3, 4, 5, 9, 10, 11, 18, 19, 21, 27, 28, 29, 30, 32, 80, 113], "int": [3, 4, 5, 9, 10, 14, 16, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 131, 133, 135], "windows_dataset": [3, 4, 5, 8, 9, 10, 11, 17, 18, 19, 27, 28, 29, 30, 31, 32, 78, 79, 80, 112, 113], "trial_stop_offset_sampl": [3, 4, 5, 9, 10, 11, 18, 19, 21, 27, 28, 29, 30, 31, 32, 80, 113, 141], "session_t": [3, 4, 18, 20, 21, 27, 28, 29, 30, 32, 122], "session_": [3, 4, 20, 21, 27, 28, 29, 30, 32], "callabl": [3, 26, 40, 53, 67, 70, 71, 77, 84, 96, 109, 120, 128], "custom": [3, 4, 15, 23, 24, 35, 70, 78], "loader": [3, 4, 5, 14, 32], "call": [3, 16, 26, 27, 29, 32, 67, 70, 77, 80, 83, 86, 90, 105, 109, 112, 113, 120, 126, 127, 128], "demonstr": [3, 4, 7, 22, 24, 26, 32], "below": [3, 5, 34, 36, 136, 139, 141], "illutr": 3, "purpos": [3, 14, 16, 32], "chose": 3, "frequencyshift": 3, "randomli": [3, 5, 27, 36, 37, 38, 43, 51, 55, 57, 60, 124], "translat": 3, "within": [3, 4, 72, 83, 86, 90, 101, 123, 141], "given": [3, 4, 5, 21, 32, 37, 38, 39, 41, 50, 52, 53, 67, 68, 81, 107, 108, 111, 119, 120, 131, 141], "probabl": [3, 4, 26, 30, 32, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 67, 83, 84, 87, 96, 100, 101, 120], "actual": [3, 5, 12, 14, 22], "modifi": [3, 5, 10, 12, 41, 59, 67, 91, 105, 106, 108, 109, 117, 120, 133], "max_delta_freq": [3, 42], "shift": [3, 29, 42, 58], "next": [3, 4, 5, 9, 10, 11, 12, 14, 16, 18, 22], "let": [3, 4, 22, 26], "u": [3, 5, 7, 13, 24, 30, 70, 74, 91, 103, 109, 113, 118, 121, 122, 124, 133, 135, 140, 141], "result": [3, 12, 14, 16, 29, 32, 67, 80, 110, 112, 113, 120, 128, 133, 136], "origin": [3, 11, 16, 17, 18, 19, 21, 26, 29, 45, 46, 47, 48, 49, 51, 62, 63, 65, 70, 80, 86, 87, 88, 89, 90, 92, 93, 113, 117], "get_data": [3, 17], "allow": [3, 5, 14, 26, 29, 30, 32, 40, 67, 80, 88, 89, 112, 113, 120, 141], "fix": [3, 39, 56, 136, 141], "instead": [3, 4, 5, 8, 9, 22, 27, 28, 29, 30, 31, 32, 67, 83, 86, 88, 90, 91, 111, 120, 141], "x_tr": 3, "_": [3, 5, 14, 16, 17, 26, 27, 28, 31, 32, 141], "as_tensor": 3, "float": [3, 5, 26, 31, 32, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 63, 67, 74, 78, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 105, 107, 110, 113, 115, 116, 119, 120, 130, 135], "psd": 3, "plot": [3, 5, 12, 14, 16, 29, 31, 141], "plot_psd": 3, "freq": 3, "time_frequ": 3, "psd_array_multitap": 3, "fmin": 3, "fmax": 3, "100": [3, 4, 5, 8, 9, 10, 11, 12, 14, 20, 26, 27, 28, 29, 30, 31, 32, 36, 51, 69, 84, 103, 110], "log10": 3, "psds_mean": 3, "k": [3, 5, 9, 10, 11, 26, 27, 28, 30, 31, 32, 36, 43, 46, 47, 48, 49, 51, 54, 60, 63, 65, 84, 90, 95, 96, 135], "r": [3, 5, 9, 10, 11, 26, 27, 28, 29, 30, 31, 36, 43, 51, 54, 60, 65, 84, 88, 89, 92, 93, 95, 96, 135], "titl": [3, 12, 29, 30, 34], "multitap": 3, "gradiomet": 3, "xlabel": [3, 12, 29, 30], "ylabel": [3, 12, 30], "power": [3, 5, 30, 107, 110], "spectral": 3, "densiti": 3, "db": [3, 16, 111], "them": [3, 4, 5, 12, 14, 16, 17, 19, 26, 27, 29, 32, 67, 70, 83, 84, 85, 86, 90, 91, 94, 95, 96, 97, 98, 99, 100, 103, 120, 140], "try": [3, 4, 12, 18, 22, 24, 30, 136, 140], "its": [3, 9, 10, 16, 20, 21, 26, 29, 30, 31, 67, 70, 109, 120], "comput": [3, 4, 5, 9, 10, 11, 18, 22, 34, 47, 48, 49, 67, 69, 80, 83, 86, 88, 89, 90, 92, 93, 97, 111, 113, 115, 116, 120, 125, 126, 127, 129, 133, 136, 140, 141], "list": [3, 5, 11, 14, 16, 21, 22, 26, 27, 28, 29, 31, 32, 34, 35, 39, 40, 47, 48, 49, 56, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 106, 107, 108, 111, 112, 113, 117, 118, 120, 130, 132, 135, 141], "n_channel": [3, 4, 5, 9, 10, 14, 17, 19, 22, 29, 31, 32, 45, 46, 62, 63, 78, 83, 85, 86, 95, 97, 98, 99, 100, 101, 102, 115, 116, 119], "auto": [3, 4, 8, 14, 17, 19, 26, 28, 29, 30, 32, 67, 84, 92, 93, 96, 107, 110, 111, 120, 141], "23": [3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32, 33, 106], "depreci": [3, 4, 8, 27, 28, 29, 30, 31, 32], "n_time": [3, 4, 5, 8, 9, 10, 11, 12, 14, 17, 19, 26, 27, 28, 29, 30, 31, 32, 45, 62, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 115, 116, 119, 120, 125, 129], "180": [3, 4, 26, 27, 28, 29, 30, 32], "logsoftmax": [3, 4, 26, 27, 28, 29, 30, 32, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 141], "layer": [3, 4, 5, 9, 10, 26, 27, 28, 29, 30, 31, 32, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 141], "adjust": [3, 4, 26, 27, 28, 29, 30, 32, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103], "accordingli": [3, 4, 9, 26, 27, 28, 29, 30, 32, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 105], "e": [3, 4, 5, 9, 10, 11, 14, 16, 26, 27, 28, 29, 30, 32, 36, 39, 43, 51, 53, 54, 56, 60, 65, 67, 71, 74, 75, 76, 77, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 112, 113, 117, 120, 124, 128, 135, 140, 141], "g": [3, 4, 5, 9, 10, 11, 14, 16, 26, 27, 28, 29, 30, 32, 36, 39, 41, 43, 51, 53, 54, 56, 59, 60, 67, 71, 74, 75, 76, 77, 80, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 112, 113, 117, 120, 124, 128, 135, 141], "crossentropyloss": [3, 4, 9, 10, 11, 26, 27, 28, 29, 30, 32, 67, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 120], "order": [3, 4, 12, 21, 26, 39, 47, 48, 49, 56, 67, 72, 75, 76, 107, 111, 117, 120, 124, 141], "pass": [3, 4, 9, 10, 16, 22, 26, 27, 28, 29, 30, 32, 35, 40, 53, 67, 73, 83, 85, 86, 90, 95, 97, 98, 99, 100, 101, 105, 107, 108, 110, 111, 120, 125, 128, 129, 141], "sequenti": [3, 4, 5, 9, 10, 16, 26, 27, 28, 29, 30, 32, 72, 91], "batch": [3, 4, 5, 26, 30, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 84, 85, 91, 95, 96, 97, 98, 99, 100, 101, 104, 120, 127, 131, 141], "augmenteddataload": [3, 4, 141], "signflip": 3, "freq_shift": 3, "sign_flip": 3, "iter": [3, 4, 5, 20, 22, 45, 67, 91, 106, 120, 131], "argument": [3, 4, 16, 26, 29, 35, 37, 38, 39, 41, 50, 52, 53, 67, 73, 105, 107, 108, 109, 110, 111, 117, 120, 128, 141], "clf": [3, 4, 5, 9, 10, 11, 27, 28, 29, 30], "iterator_train": [3, 4, 67, 120], "tell": [3, 4, 136], "dataload": [3, 4, 5, 14, 32, 35, 67, 120, 131], "iterator_train__transform": [3, 4], "nllloss": [3, 4, 14, 28, 29, 30, 32, 67], "train_accuraci": [3, 27, 28, 29, 30, 32], "valid_accuraci": [3, 27, 28, 29, 30], "2535": 3, "6458": 3, "1252": 3, "4011": 3, "2639": 3, "3297": 3, "2500": [3, 22, 27, 28, 29, 122], "7606": 3, "8793": 3, "1539": 3, "1230": 3, "0558": 3, "2708": 3, "1567": 3, "2554": 3, "1003": [3, 11], "classifi": [3, 4, 5, 9, 10, 26, 29, 31, 141], "initi": [3, 5, 9, 10, 26, 29, 30, 32, 67, 86, 88, 89, 103, 120], "module_": [3, 9, 10, 26, 67, 120], "var_nam": [3, 4, 26, 27, 28, 29, 32, 91], "depth": [3, 4, 11, 26, 27, 28, 29, 30, 32, 83, 88, 89, 91, 103], "idx": [3, 4, 9, 10, 11, 26, 27, 28, 29, 30, 32], "param": [3, 4, 5, 26, 27, 28, 29, 30, 32, 36, 37, 38, 39, 41, 42, 43, 45, 46, 51], "kernel": [3, 4, 11, 26, 27, 28, 29, 30, 32, 46, 47, 48, 49, 63, 83, 89, 90, 97, 98, 100, 103], "22": [3, 4, 5, 11, 13, 17, 19, 27, 28, 29, 32, 69], "1125": [3, 4, 28, 29, 32], "ensure4d": [3, 4, 26, 27, 28, 29, 32], "ensuredim": [3, 4, 26, 27, 28, 29, 32], "rearrang": [3, 4, 26, 27, 28, 29, 32, 141], "dimshuffl": [3, 4, 26, 27, 28, 29, 32], "combinedconv": [3, 4, 26, 27, 28, 29, 32], "conv_time_spat": [3, 4, 26, 27, 28, 29, 32], "40": [3, 4, 9, 14, 17, 18, 26, 27, 28, 29, 31, 32, 86, 96], "1101": [3, 4, 28, 29, 32], "36": [3, 4, 5, 9, 13, 27, 28, 29, 32], "240": [3, 4, 17, 26, 27, 28, 29, 32], "batchnorm2d": [3, 4, 26, 27, 28, 29, 32, 84, 88, 89, 96], "bnorm": [3, 4, 26, 27, 28, 29, 32], "80": [3, 4, 5, 10, 19, 26, 27, 28, 29, 32, 72, 99], "express": [3, 4, 26, 27, 28, 29, 32], "conv_nonlin_exp": [3, 4, 26, 27, 28, 29, 32], "avgpool2d": [3, 4, 26, 27, 28, 29, 32], "pool": [3, 4, 26, 27, 28, 29, 32, 83, 84, 86, 88, 89, 91, 96, 98, 101, 103], "69": [3, 4, 5, 28, 29, 32], "75": [3, 4, 5, 9, 14, 16, 26, 27, 28, 29, 32, 86, 96, 101], "pool_nonlin_exp": [3, 4, 26, 27, 28, 29, 32], "dropout": [3, 4, 5, 9, 10, 26, 27, 28, 29, 30, 32, 83, 84, 86, 87, 88, 89, 96, 97, 98, 99, 100, 101], "drop": [3, 4, 14, 16, 17, 18, 19, 21, 26, 27, 28, 29, 32, 37, 55, 80, 106, 113, 117], "final_lay": [3, 4, 26, 27, 28, 29, 32], "conv2d": [3, 4, 9, 26, 27, 28, 29, 32], "conv_classifi": [3, 4, 26, 27, 28, 29, 32], "044": [3, 4, 28, 29, 32], "47": [3, 4, 5, 9, 10, 11, 13, 26, 28, 29, 32, 33], "364": [3, 4, 28, 29, 32], "trainabl": [3, 4, 26, 27, 28, 29, 32], "non": [3, 4, 11, 16, 22, 26, 27, 28, 29, 30, 32, 67, 72, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 107, 120], "mult": [3, 4, 26, 27, 28, 29, 32], "add": [3, 4, 5, 26, 27, 28, 29, 32, 42, 43, 58, 60, 67, 70, 71, 77, 107, 120, 128, 141], "m": [3, 4, 5, 9, 10, 11, 12, 16, 18, 22, 26, 27, 28, 29, 30, 31, 32, 36, 39, 43, 46, 47, 48, 49, 51, 54, 56, 60, 63, 65, 83, 84, 92, 93, 95, 96, 98, 103, 107, 121, 135, 140], "forward": [3, 4, 5, 26, 27, 28, 29, 32, 40, 53, 67, 83, 85, 86, 90, 95, 97, 98, 99, 100, 101, 102, 103, 107, 109, 111, 120, 125, 129, 131], "backward": [3, 4, 14, 26, 27, 28, 29, 32, 91, 107, 141], "35": [3, 4, 5, 11, 28, 29, 31, 32], "04": [3, 4, 11, 26, 28, 29, 32], "50": [3, 4, 5, 9, 10, 14, 16, 19, 28, 29, 32, 69, 84], "would": [3, 26, 27, 29, 32, 67, 84, 96, 120], "equival": 3, "although": [3, 67, 83, 86, 90, 120], "composit": [3, 40], "composed_transform": 3, "possibl": [3, 4, 11, 12, 16, 18, 26, 67, 69, 112, 120, 133, 136, 141], "most": [3, 9, 10, 11, 14, 123, 136, 139], "windowsdataset": [3, 18, 26, 70, 78, 79, 80, 81, 112, 113, 118, 120, 141], "through": [3, 4, 11, 12, 14, 16, 20, 22, 27, 46, 63, 71, 77, 85, 97, 98, 99, 141], "commonli": 3, "done": [3, 11, 16, 18, 26, 27, 83, 112, 113], "advis": [3, 30, 41, 59, 120], "abov": [3, 14, 16, 22, 27, 29, 136, 138], "compat": [3, 14, 17, 19, 30, 67, 78, 120, 141], "28": [3, 6, 9, 11, 29, 88, 89], "212": [3, 6], "457": 3, "plot_data_augment": [3, 6], "inde": 4, "known": [4, 67], "often": [4, 9, 10, 11, 28, 30], "depend": [4, 5, 9, 10, 11, 12, 14, 16, 26, 29, 30, 32, 34, 67, 72, 99, 120, 131, 138, 140, 141], "task": [4, 9, 10, 11, 26, 30, 41, 59, 69, 71, 123], "phenomenon": 4, "studi": [4, 5, 7, 24], "methodologi": 4, "propos": [4, 37, 38, 41, 51, 55, 57, 59, 65, 90, 141], "openli": [4, 5, 9, 10, 11], "could": [4, 5, 14, 29, 32, 91, 140], "brain": [4, 24, 25, 26, 27, 29, 30, 31, 33, 34, 70, 73, 84, 88, 89, 91, 92, 93, 95, 96, 109, 113, 116, 118, 133, 135, 137], "recent": [4, 26, 136], "shown": [4, 5, 9, 11, 16, 29, 32, 69, 72], "artifici": 4, "cast": [4, 40], "paradigm": [4, 5, 67, 69, 120, 131], "present": [4, 12, 29, 32, 69, 72, 106], "both": [4, 5, 16, 22, 30, 69, 72, 97, 98, 103], "pretext": 4, "approach": [4, 5, 9, 10, 11, 16, 24, 30, 99, 121], "demand": 4, "intens": 4, "comparison": [4, 14, 27, 28], "strength": 4, "context": [4, 5, 29, 34, 99, 123], "bruno": [4, 141], "aristimunha": [4, 141], "ufabc": 4, "br": 4, "bnci": [4, 69], "websit": 4, "There": [4, 24, 26, 84, 96, 138, 140], "subject": [4, 5, 9, 10, 11, 12, 14, 18, 19, 20, 21, 22, 29, 36, 43, 51, 54, 60, 65, 68, 69, 71, 72, 73, 74, 122], "electrod": [4, 20, 69, 72, 111], "while": [4, 5, 14, 29, 32, 72, 83, 86, 90, 97, 132], "do": [4, 12, 14, 26, 27, 29, 32, 67, 78, 79, 80, 103, 112, 113, 120, 124, 133, 140], "imageri": [4, 69, 83, 87, 90, 141], "144": [4, 69], "librairi": 4, "focu": 4, "relat": [4, 5, 26, 27, 34, 72, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 120, 141], "activ": [4, 16, 18, 19, 26, 67, 72, 83, 84, 88, 89, 90], "0x7f7fe1140670": 4, "out": [4, 8, 9, 10, 26, 36, 51, 54, 65, 67, 69, 120, 121, 129, 136], "provind": 4, "slicedataset": [4, 29, 30], "eval_set": [4, 30], "three": [4, 16, 29, 32, 67, 68, 86, 88, 89, 120, 136], "categor": [4, 121], "aggreg": [4, 86], "sever": [4, 12, 18, 24, 112, 113, 137], "being": [4, 10, 14, 67, 72, 120], "spatial": [4, 26, 41, 59, 84, 96, 103, 141], "paper": [4, 11, 34, 46, 47, 48, 49, 63, 83, 86, 87, 88, 89, 90, 92, 93, 99, 141], "ftsurrog": 4, "smoothtimemask": 4, "channelsdropout": 4, "respect": [4, 5, 30], "two": [4, 5, 9, 10, 11, 12, 14, 16, 18, 27, 29, 32, 45, 51, 62, 69, 72, 74, 90, 97, 107, 110, 111, 123, 124, 130], "insid": [4, 9, 29, 30, 88, 89, 140], "rememb": [4, 29, 32], "\u03c6max": 4, "2\u03c0": 4, "p_drop": [4, 37, 55], "linspac": [4, 12], "transforms_freq": 4, "phase_noise_magnitud": [4, 41, 59], "phase_freq": 4, "random_st": [4, 5, 8, 30, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 121, 122, 123, 124], "transforms_tim": 4, "mask_len_sampl": [4, 51, 65], "transforms_spati": 4, "prob": 4, "gridsearchcv": [4, 29, 30, 128, 141], "control": [4, 5, 10, 29, 67, 97, 105, 107, 108, 110, 111, 112, 113, 118, 120, 141], "over": [4, 10, 16, 29, 31, 32, 41, 46, 47, 48, 49, 59, 63, 67, 120, 141], "framework": 4, "necessari": [4, 67, 111, 120], "slicedata": 4, "mandatori": 4, "eval": [4, 30, 32, 141], "train_x": [4, 30], "train_i": [4, 30], "kfold": [4, 29, 30], "model_select": [4, 5, 8, 29, 30], "cv": [4, 29, 30], "n_split": [4, 29, 30], "shuffl": [4, 8, 14, 29, 30, 32, 38, 45, 57, 67, 120], "fit_param": [4, 30, 120], "param_grid": [4, 29, 30], "return_train_scor": [4, 29, 30], "refit": [4, 29, 30], "error_scor": [4, 29, 30], "rais": [4, 14, 26, 29, 30, 31, 67, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 106, 113, 118, 141], "fold": [4, 30, 32], "candid": [4, 29, 30], "x27": 4, "lt": 4, "gt": 4, "uniniti": [4, 67, 120], "ou": 4, "environ": [4, 68, 133], "rerun": 4, "cell": 4, "represent": [4, 36, 43, 45, 51, 54, 60, 62, 65, 141], "trust": 4, "On": [4, 27, 30, 31, 71, 77], "github": [4, 30, 136, 138, 141], "unabl": 4, "render": 4, "page": [4, 29, 32, 34, 136, 141], "nbviewer": 4, "gridsearchcvgridsearchcv": 4, "analysi": [4, 5, 9, 10, 11, 26, 34, 137], "wa": [4, 5, 9, 10, 11, 27, 28, 29, 32, 67, 69, 72, 86, 99, 120, 121, 141], "search_result": [4, 29, 30], "cv_results_": [4, 29, 30], "best_run": [4, 29, 30], "rank_test_scor": [4, 29, 30], "best_aug": 4, "validation_scor": 4, "around": [4, 10, 32, 46, 47, 48, 49, 63, 113, 121], "mean_test_scor": [4, 30], "training_scor": 4, "mean_train_scor": [4, 30], "report_messag": 4, "gave": [4, 30], "format": [4, 14, 17, 19, 26, 78, 79, 80], "eval_x": [4, 30], "eval_i": [4, 30], "f": [4, 5, 10, 11, 12, 14, 16, 17, 18, 22, 26, 27, 28, 29, 30, 31, 32, 43, 60, 84, 88, 89, 95, 96, 101, 135], "2f": [4, 29, 30, 32], "accuracyof": 4, "08": [4, 9, 23, 29], "26": [4, 5, 9, 10, 11, 20, 98], "39": [4, 22], "bar": 4, "param_iterator_train__transform": 4, "yerr": 4, "std_train_scor": 4, "rot": 4, "45": [4, 16, 29, 32], "c0": 4, "c1": 4, "c2": 4, "strategi": [4, 25, 29, 30], "set_ylim": [4, 27, 28], "32": [4, 9, 10, 11, 26, 27, 83, 92, 101], "c": [4, 5, 9, 10, 11, 20, 27, 28, 29, 30, 41, 59, 85, 90, 92, 93, 103, 121, 136], "paillard": 4, "moreau": [4, 141], "gramfort": [4, 5, 9, 10, 34, 98, 123, 141], "2022": [4, 30, 83, 86, 87, 88, 89], "systemat": 4, "arxiv": [4, 5, 31, 36, 37, 38, 39, 41, 43, 45, 51, 54, 55, 56, 57, 59, 60, 62, 65, 92, 93, 100, 123, 130], "ab": [4, 5, 45, 62, 130], "2206": 4, "14483": 4, "banvil": [4, 5, 9, 14, 16, 20, 123, 141], "chehab": [4, 5, 11, 123, 141], "hyv\u00e4rinen": [4, 5, 123], "engemann": [4, 5, 34, 123, 141], "2021": [4, 10, 11, 88, 89, 90, 99, 103, 121], "uncov": [4, 5, 123], "structur": [4, 5, 16, 17, 19, 122, 123, 141], "clinic": [4, 5, 7, 24, 123], "journal": [4, 28, 29, 30, 34, 90], "engin": [4, 5, 9, 10, 28, 29, 30, 46, 47, 48, 49, 63, 85, 86, 88, 89, 90, 98, 99], "046020": 4, "622": [4, 6], "130": 4, "plot_data_augmentation_search": [4, 6], "access": [5, 9, 10, 11, 12, 14, 26, 87, 122, 138], "physionet": [5, 7, 13, 16, 24, 70, 74, 91, 98, 99, 102, 103, 109, 113, 118, 119, 122, 124, 133, 135, 141], "ssl": 5, "leverag": [5, 99], "unlabel": 5, "design": [5, 16, 99, 107], "prior": [5, 91], "understand": [5, 24, 29], "under": [5, 14, 68, 118, 140, 141], "autocorrel": 5, "strutur": [5, 32], "requir": [5, 11, 12, 14, 16, 17, 22, 53, 67, 72, 77, 120, 141], "anoth": [5, 21, 29, 32, 123], "interest": [5, 12, 16, 18, 22, 26], "onc": [5, 16, 29, 107, 112, 123, 140], "reus": [5, 9, 11], "featur": [5, 9, 10, 26, 29, 85, 86, 88, 89, 90, 91, 97, 98, 99, 103, 136, 140, 141], "extractor": [5, 9, 10, 85, 97, 98, 99, 103], "weight": [5, 9, 10, 11, 29, 30, 32, 83, 135], "downstream": 5, "help": [5, 9, 10, 21, 111], "reduc": [5, 10, 14, 16, 74, 113], "quantiti": 5, "compar": [5, 14, 16, 22, 27, 29, 32], "strictli": 5, "rp": 5, "simpl": [5, 12, 16, 24, 25, 32, 33, 91, 96], "whether": [5, 14, 26, 37, 38, 39, 41, 46, 47, 48, 49, 50, 52, 53, 59, 63, 67, 70, 77, 78, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 112, 117, 118, 120, 123, 128, 133, 136], "close": [5, 16, 18, 123, 136], "far": [5, 123], "apart": 5, "yield": [5, 14, 20, 69, 101, 136], "physiolog": [5, 9, 10, 11], "relev": [5, 29, 34, 67, 120], "boost": 5, "classif": [5, 9, 10, 11, 26, 27, 30, 36, 41, 43, 51, 54, 59, 60, 65, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "regim": 5, "hubert": [5, 9, 14, 16, 20, 141], "jbanvil": [5, 9, 14, 16, 20], "87": 5, "few": [5, 9, 10, 11, 14, 16, 26, 141], "sleep_physionet": [5, 9, 10, 11], "sleepphysionet": [5, 9, 10, 11, 16, 141], "recording_id": [5, 9, 10, 11, 12, 14, 16, 22, 74, 75, 76], "crop_wake_min": [5, 9, 10, 11, 16, 74], "microvolt": [5, 9, 10], "lowpass": [5, 9, 10, 16], "sinc": [5, 9, 10, 11, 12, 22, 26, 30, 67, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 120, 136], "don": [5, 11, 17, 19, 67, 120], "resampl": [5, 12, 14, 18, 20, 74, 107, 141], "0x7f7fe782cbb0": 5, "As": [5, 16, 26, 27, 29, 67, 120], "conveni": [5, 111], "later": [5, 12, 22, 71, 72, 75, 76, 84], "window_size_": [5, 9, 10, 11], "map": [5, 9, 10, 11, 12, 22, 26, 31, 34, 67, 80, 83, 84, 95, 96, 102, 112, 113, 120, 135], "merg": [5, 9, 10, 11, 141], "aasm": [5, 9, 10, 11], "w": [5, 9, 10, 11, 12, 27, 28, 29, 30], "z": [5, 9, 10, 31, 46, 49, 63, 100], "scale": [5, 9, 10, 11, 12, 16, 86, 88, 89, 90, 141], "standard_scal": [5, 9, 10], "channel_wis": [5, 9, 10, 11, 16], "0x7f7fbb1b9b40": 5, "new": [5, 9, 10, 11, 20, 39, 56, 67, 86, 105, 106, 107, 108, 110, 111, 120, 136, 140], "receiv": 5, "pair": [5, 123], "indic": [5, 9, 10, 21, 31, 45, 62, 70, 107, 108, 111, 122, 123, 124, 141], "when": [5, 9, 10, 11, 14, 16, 22, 27, 29, 30, 32, 34, 40, 41, 46, 47, 48, 49, 53, 59, 63, 67, 68, 73, 78, 79, 80, 83, 86, 103, 106, 107, 108, 111, 112, 113, 118, 120, 133, 136, 141], "train_test_split": [5, 8, 29], "uniqu": [5, 9, 10, 11, 21, 67, 71, 120], "subj_train": 5, "subj_test": 5, "test_siz": [5, 8, 29], "subj_valid": 5, "relativepositioningdataset": 5, "__getitem__": [5, 67, 120], "expect": [5, 14, 26, 32, 67, 120], "__init__": [5, 32], "list_of_d": [5, 70], "super": [5, 32, 126, 127], "return_pair": 5, "ind1": 5, "ind2": 5, "properti": [5, 70, 141], "_return_pair": 5, "setter": 5, "split_id": [5, 9, 10, 11, 12, 70, 141], "dict": [5, 9, 10, 11, 21, 26, 27, 28, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 51, 70, 71, 73, 77, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 107, 112, 113, 117, 120, 141], "item": [5, 14, 16, 18, 19, 20, 26, 27, 28, 32], "main": [5, 88, 89, 90], "tau_po": [5, 123], "tau_neg": [5, 123], "neg": [5, 27, 31, 67, 123], "separ": [5, 29, 32, 69, 107, 113, 123], "less": [5, 27, 29, 32], "min": [5, 12, 29, 74, 107], "n_exampl": [5, 123], "regular": [5, 115, 116], "instanc": [5, 32, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 60, 67, 83, 86, 90, 105, 106, 107, 108, 111, 120, 122, 141], "000": [5, 14, 16, 17, 18, 19, 22, 23, 31], "lower": [5, 9, 12, 29, 32, 36, 54, 107, 128], "250": [5, 20, 27, 69, 83, 86, 90], "relativepositioningsampl": 5, "60": [5, 10, 12, 19, 32], "n_examples_train": 5, "len": [5, 8, 9, 10, 11, 12, 14, 17, 20, 22, 29, 32, 69, 72, 117], "n_examples_valid": 5, "n_examples_test": 5, "train_sampl": [5, 9, 10, 11], "get_metadata": [5, 9, 10, 11, 27, 28, 29, 31, 70, 122], "same_rec_neg": [5, 123], "valid_sampl": [5, 9, 10, 11], "presampl": [5, 123], "test_sampl": 5, "introduc": [5, 9, 10, 11, 14, 15, 24, 25, 27, 31], "four": [5, 9, 46, 69, 72], "embedd": 5, "dimension": [5, 67, 86, 120, 131], "last": [5, 22, 27, 31, 32, 51, 65, 72, 74, 78, 79, 80, 83, 86, 107, 110, 112, 113, 141], "embed": [5, 9, 10, 83, 86], "after": [5, 12, 16, 21, 26, 28, 29, 32, 69, 74, 84, 96, 97, 98, 125, 128, 141], "tempor": [5, 9, 10, 14, 26, 83, 84, 86, 87, 89, 96, 97, 98, 99, 100, 101, 103, 141], "wrap": [5, 26, 32, 70], "siames": 5, "contrastivenet": 5, "sleepstagerchambon2018": [5, 9, 26], "input_size_sampl": [5, 9, 10, 11], "emb_siz": 5, "emb": 5, "n_output": [5, 9, 10, 11, 26, 31, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 120], "n_conv_ch": [5, 98], "apply_batch_norm": [5, 97, 98], "linear": [5, 9, 10, 26, 30, 45, 62, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 107], "top": [5, 9, 10, 11, 34], "x1": [5, 123], "x2": [5, 123], "z1": 5, "z2": 5, "flatten": [5, 9, 10, 11], "similar": [5, 27, 105], "account": [5, 70, 112], "smaller": [5, 27, 32, 80, 88, 89, 113], "checkpoint": [5, 32], "earlystop": [5, 29, 32], "epochscor": [5, 8, 9, 10, 11, 67, 120], "5e": 5, "128": [5, 10, 11, 67, 72, 88, 89, 98, 103, 120], "512": 5, "enough": [5, 72], "num_work": [5, 14, 131], "cp": 5, "dirnam": 5, "f_criterion": 5, "f_optim": 5, "f_histori": 5, "early_stop": 5, "patienc": 5, "train_acc": 5, "valid_acc": 5, "bcewithlogitsloss": [5, 67, 120], "adam": [5, 9, 10, 11, 14, 31], "max_epoch": [5, 29, 32, 67, 120], "iterator_train__sampl": [5, 9, 10, 11], "iterator_valid__sampl": [5, 9, 10, 11], "iterator_train__num_work": 5, "iterator_valid__num_work": 5, "load_param": 5, "lowest": 5, "pt": [5, 83], "delet": [5, 22, 70, 118], "file": [5, 6, 12, 13, 14, 16, 17, 18, 19, 23, 26, 33, 70, 74, 75, 81, 105, 124, 136, 141], "5547": 5, "7113": 5, "6040": 5, "6843": 5, "1177": 5, "6328": 5, "6624": 5, "5600": 5, "6505": 5, "6591": 5, "4922": 5, "8274": 5, "5520": 5, "6834": 5, "5731": 5, "5078": 5, "7217": 5, "5320": 5, "7066": 5, "6770": [5, 30], "5859": 5, "6870": 5, "6240": 5, "6800": 5, "5882": 5, "6016": 5, "6799": 5, "6760": 5, "6374": 5, "5875": 5, "6642": 5, "6560": 5, "6085": 5, "5657": 5, "5469": 5, "6655": 5, "5988": 5, "6333": 5, "6287": 5, "6520": 5, "5978": 5, "6179": 5, "6094": 5, "6392": 5, "5869": 5, "5948": 5, "6527": 5, "5717": 5, "6002": 5, "6562": 5, "6493": 5, "6720": 5, "5593": 5, "6243": 5, "6815": 5, "7160": 5, "5470": 5, "5683": 5, "6065": 5, "7280": 5, "5357": 5, "6063": 5, "6797": 5, "6099": 5, "7320": 5, "5279": 5, "5692": 5, "7031": 5, "5865": 5, "7480": 5, "5253": 5, "5990": 5, "6406": [5, 30], "6095": 5, "5315": 5, "5934": 5, "6719": 5, "5854": 5, "7360": 5, "5321": 5, "6407": 5, "19": [5, 10, 11, 105, 111], "7344": 5, "5543": 5, "7400": 5, "5261": 5, "5833": 5, "6172": 5, "6114": 5, "5221": 5, "6036": 5, "21": [5, 9, 10, 31, 111], "5514": 5, "5257": 5, "5398": 5, "7109": 5, "5510": [5, 22], "5293": 5, "5899": 5, "6641": 5, "5857": 5, "7240": 5, "5896": 5, "6338": 5, "7200": [5, 10], "5294": 5, "5815": 5, "5711": 5, "5496": 5, "balanc": [5, 9, 10, 11, 121, 141], "to_list": [5, 9, 10, 11], "ys1": 5, "ys2": 5, "y1": 5, "y2": 5, "zip": [5, 12, 16, 24], "l": [5, 9, 10, 11, 12, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 83, 84, 95, 96, 103, 121, 135], "orang": [5, 12, 16], "lines1": 5, "labels1": 5, "get_legend_handles_label": 5, "lines2": 5, "labels2": 5, "displai": [5, 9, 10, 11, 27, 28, 29, 32, 72, 133], "confus": [5, 9, 10, 11, 135, 141], "matrix": [5, 9, 10, 11, 38, 39, 46, 56, 57, 63, 86, 135, 141], "report": [5, 9, 10, 11, 14, 29, 32, 75, 76, 83, 136], "confusion_matrix": [5, 9, 10, 11, 27, 28, 135], "classification_report": [5, 9, 10, 11], "switch": [5, 32], "y_pred": [5, 9, 10, 11, 27, 28, 67, 103, 127], "y_true": [5, 9, 10, 11, 27, 28, 67], "68": 5, "53": [5, 16, 22], "94": 5, "precis": [5, 9, 10, 11, 135], "recal": [5, 9, 10, 11], "f1": [5, 9, 10, 11, 83, 93, 128], "support": [5, 9, 10, 11, 18, 27, 32, 67, 107, 110, 111, 117, 120, 141], "66": 5, "56": 5, "61": [5, 9, 26, 27], "121": [5, 12, 21, 23], "73": [5, 26], "129": [5, 6], "65": 5, "macro": [5, 9, 10, 11], "avg": [5, 9, 10, 11], "logist": 5, "balanced_accuracy_scor": [5, 11], "linear_model": 5, "logisticregress": 5, "standardscal": 5, "make_pipelin": 5, "singl": [5, 9, 10, 27, 30, 40, 41, 42, 58, 59, 67, 85, 99, 111, 120, 131, 141], "no_grad": [5, 32], "feat": 5, "batch_x": [5, 22], "concaten": [5, 9, 10, 70, 83, 102, 107, 112, 113], "log_reg": 5, "penalti": 5, "l2": [5, 83], "class_weight": [5, 9, 10, 11], "solver": 5, "lbfg": 5, "multi_class": 5, "multinomi": 5, "clf_pipe": 5, "train_y_pr": 5, "valid_y_pr": 5, "test_y_pr": 5, "train_bal_acc": [5, 9, 10, 11], "valid_bal_acc": [5, 9, 10, 11], "test_bal_acc": 5, "bal": 5, "acc": [5, 29, 32], "4f": 5, "_logist": 5, "460": [5, 141], "convergencewarn": 5, "fail": [5, 12], "converg": [5, 29, 31], "statu": 5, "stop": [5, 32, 36, 54, 80, 107, 112, 113, 132, 141], "NO": 5, "reach": [5, 9, 10, 32], "max_it": 5, "scikit": [5, 24, 25, 33, 67, 70, 73, 91, 96, 109, 113, 116, 118, 120, 133, 135, 141], "document": [5, 10, 12, 34, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 105, 107, 108, 110, 111, 136, 140, 141], "altern": [5, 26, 32, 67, 120], "option": [5, 10, 18, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 67, 70, 73, 80, 83, 89, 90, 91, 107, 110, 113, 120, 131, 135, 140, 141], "n_iter_i": 5, "_check_optimize_result": 5, "9041": 5, "5724": 5, "5685": 5, "105": 5, "54": [5, 27], "344": [5, 23], "160": [5, 72], "111": 5, "88": 5, "74": 5, "142": [5, 141], "42": [5, 9, 27, 30], "109": 5, "67": [5, 9, 32, 103], "562": 5, "84": [5, 11], "34": [5, 11, 30], "49": 5, "46": [5, 26, 33], "170": [5, 141], "1088": [5, 101], "57": [5, 14, 26], "much": [5, 27, 67, 110, 120], "chanc": [5, 9, 10], "level": [5, 9, 10, 22, 68, 105, 107, 108, 110, 111, 141], "problem": [5, 26, 41, 59, 136, 139], "quick": [5, 122], "2d": [5, 135], "space": [5, 16], "pca": 5, "decomposit": 5, "cm": [5, 69, 135], "n_compon": 5, "tsne": 5, "compon": [5, 9, 10, 11, 72, 88, 89], "fit_transform": 5, "get_cmap": 5, "viridi": 5, "enumer": [5, 12, 29, 32], "n1": [5, 9, 10, 11], "n2": [5, 9, 10, 11], "n3": [5, 9, 10, 11], "scatter": [5, 16, 31], "alpha": [5, 9, 10, 11, 12, 45, 83, 88, 89], "advanced_train": 5, "plot_relative_posit": [5, 6], "476": 5, "matplotlibdeprecationwarn": 5, "minor": 5, "releas": [5, 88, 136, 140], "colormap": [5, 135], "obj": 5, "0x7f7fc0b728f0": 5, "nonlinear": [5, 29, 67, 83, 94, 120], "project": [5, 12, 14, 16, 18, 19, 26, 75, 76, 111], "umap": 5, "might": [5, 14, 16, 26, 29, 30, 32, 113, 122], "insight": 5, "explor": [5, 29], "ag": [5, 12, 18, 22, 69, 72, 75, 76], "sex": 5, "specif": [5, 9, 10, 11, 16, 18, 30, 67, 81, 97, 105, 120, 122, 138], "subset": [5, 8, 20, 29, 31, 70, 107, 108, 141], "achiev": [5, 9, 10, 11], "reason": [5, 10, 29, 32, 67, 120, 128], "avenu": 5, "entir": [5, 14, 20, 29, 32, 141], "describ": [5, 11, 26, 27, 28, 29, 32, 84, 85, 88, 89, 90, 91, 96, 97, 98, 99, 103], "discov": 5, "2020": [5, 36, 37, 38, 43, 51, 54, 55, 57, 60, 65, 88, 89, 97, 101, 123], "preprint": [5, 31, 36, 37, 38, 39, 41, 43, 51, 54, 55, 56, 57, 59, 60, 65, 92, 93, 100, 123], "2007": [5, 36, 43, 51, 54, 60, 65, 123], "16104": [5, 123], "kemp": [5, 9, 10, 11], "b": [5, 9, 10, 11, 39, 56, 86, 92, 93, 103], "zwinderman": [5, 9, 10, 11], "tuk": [5, 9, 10, 11], "kamphuisen": [5, 9, 10, 11], "obery": 5, "2000": [5, 9, 10, 11, 22, 30, 122], "neuron": [5, 9, 10, 11], "feedback": [5, 9, 10, 11, 69], "loop": [5, 9, 10, 11, 14, 67, 120], "slow": [5, 9, 10, 11, 16, 133, 141], "wave": [5, 9, 10, 11], "microcontinu": [5, 9, 10, 11], "ieee": [5, 9, 10, 11, 46, 47, 48, 49, 63, 83, 85, 86, 87, 88, 89, 98, 99], "transact": [5, 10, 83, 85, 86, 88, 89, 98, 99], "biomed": 5, "1185": [5, 9, 10, 11, 22], "1194": [5, 9, 10, 11], "goldberg": [5, 9, 10, 11], "amar": [5, 9, 10, 11], "glass": [5, 9, 10, 11], "hausdorff": [5, 9, 10, 11], "ivanov": [5, 9, 10, 11], "p": [5, 9, 10, 27, 28, 29, 30, 31, 36, 43, 51, 54, 60, 65, 92, 93, 98], "mark": [5, 9, 10, 11], "stanlei": [5, 9, 10, 11], "physiobank": [5, 9, 10, 11], "physiotoolkit": [5, 9, 10, 11], "research": [5, 9, 10, 11, 30, 34, 137], "resourc": [5, 7, 9, 10, 11, 13, 16, 24, 70, 75, 109, 112, 118, 119, 141], "complex": [5, 9, 10, 11, 29, 32, 72, 97], "circul": [5, 9, 10, 11], "101": [5, 9, 10, 11, 12], "e215": [5, 9, 10, 11], "e220": [5, 9, 10, 11], "chambon": [5, 9, 10, 98], "galtier": [5, 9, 10, 98], "arnal": [5, 9, 10, 98], "wainrib": [5, 9, 10, 98], "2018": [5, 9, 10, 28, 29, 30, 39, 41, 43, 45, 56, 59, 60, 62, 93, 98, 100], "multivari": [5, 9, 10, 98], "multimod": [5, 9, 10, 98], "tran": [5, 9, 10], "system": [5, 9, 10, 46, 63, 85, 86, 88, 89, 98, 99, 139], "rehabilit": [5, 9, 10, 85, 86, 88, 89, 98, 99], "758": [5, 6, 9, 10, 98], "769": [5, 9, 10, 98], "152": [5, 6, 141], "190": [5, 6], "03": [6, 10, 11, 23, 33], "06": [6, 10, 11], "680": 6, "execut": [6, 12, 13, 14, 16, 17, 19, 23, 33, 72, 118], "auto_examples_advanced_train": 6, "07": [6, 10, 29], "00": [6, 9, 10, 13, 16, 18, 23, 26, 29, 32, 33], "456": 6, "analaysi": [7, 24], "sleep": [7, 13, 16, 24, 30, 41, 59, 70, 74, 85, 91, 97, 98, 99, 102, 103, 109, 113, 118, 119, 121, 122, 124, 133, 135, 141], "cognit": [7, 24], "experi": [7, 14, 24, 29, 32, 68, 72], "stage": [7, 13, 24, 29, 30, 32, 70, 74, 85, 91, 97, 98, 99, 102, 103, 109, 113, 118, 119, 121, 122, 124, 133, 135, 141], "chambon2018": [7, 13, 24, 70, 74, 91, 98, 102, 109, 113, 118, 119, 122, 124, 133, 135], "eldele2021": [7, 13, 24, 70, 74, 91, 99, 102, 109, 113, 118, 122, 124, 133, 135], "big": [7, 13, 24, 70, 75, 109, 112, 118, 119, 141], "tuh": [7, 13, 14, 15, 23, 24, 70, 76, 109, 112, 118, 119, 141], "corpu": [7, 13, 14, 15, 23, 24, 70, 75, 76, 109, 112, 118, 119, 141], "bcicomp": 8, "0x7f7fe0dad300": 8, "decid": [8, 28, 37, 38, 39, 41, 50, 52, 53], "about": [8, 9, 10, 12, 26, 30, 71, 77, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 133, 136], "length": [8, 9, 11, 12, 14, 16, 26, 27, 30, 45, 62, 70, 80, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 107, 112, 113, 141], "preced": 8, "create_windows_from_target_channel": [8, 141], "cnosid": 8, "finer": [8, 141], "fexion": 8, "idx_train": 8, "idx_valid": 8, "n_out_chan": 8, "long": [8, 14, 29, 30, 72, 85], "respons": [8, 9, 10, 11, 28, 30], "manag": [8, 9, 10, 11, 28, 30, 31], "inherit": [8, 9, 10, 11, 26, 28, 30, 67, 120], "neuralnetregressor": 8, "logic": [8, 9, 10, 11, 28, 30, 32], "pearson": 8, "pearson_r_scor": 8, "net": [8, 26, 67, 99, 103, 120, 126, 127, 128], "mseloss": [8, 120], "valid_pearson_r": 8, "train_pearson_r": 8, "train_r2": 8, "valid_r2": 8, "5083": 8, "1251": [8, 22], "5582": 8, "7010": 8, "1478": 8, "6075": 8, "9956": 8, "7986": 8, "3712": 8, "3157": 8, "2264": 8, "1481": 8, "3904": 8, "6021": 8, "stack": 8, "09": [8, 9, 23, 27], "899": [8, 13], "213": [8, 13], "plot_bcic_iv_4_ecog_tri": [8, 13], "test": [9, 10, 11, 16, 21, 24, 25, 27, 28, 30, 33, 67, 70, 72, 73, 91, 96, 109, 113, 116, 118, 120, 133, 141], "adapt": [9, 11, 16, 87, 88, 89, 99, 100, 101], "distribut": [9, 10, 29, 45, 138], "individu": [9, 10, 11, 12, 26, 27, 67, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 120, 141], "integr": [9, 10, 32], "omit": [9, 36], "downsampl": [9, 10, 110], "apply_on_arrai": [9, 12, 109], "0x7f7fe0ff7ca0": 9, "0x7f7fc2dfc9a0": 9, "take": [9, 10, 11, 16, 17, 29, 31, 53, 81, 83, 86, 90, 99], "everi": [9, 10, 11, 14, 18, 29, 32, 72, 83, 86, 90], "consecut": [9, 10, 11, 51, 65, 102, 113, 121, 124], "simplifi": [9, 10, 122, 141], "rather": [9, 10], "freez": [9, 10, 141], "sequencesampl": [9, 10, 11, 141], "n_window": [9, 10, 11, 22, 83, 119, 121, 124], "n_windows_strid": [9, 10, 11, 124], "maxim": [9, 10, 30, 36], "overlap": [9, 10, 11, 78, 79, 80, 107, 112, 113], "372": 9, "383": 9, "implement": [9, 10, 14, 16, 26, 29, 45, 53, 62, 67, 83, 87, 88, 89, 90, 92, 93, 120, 130, 131, 137, 141], "get_center_label": [9, 10], "isinst": [9, 10], "ceil": [9, 10, 101], "astyp": [9, 10], "appear": [9, 10, 11, 69], "lot": [9, 10, 11, 67, 120], "night": [9, 10, 11], "spent": [9, 10, 11], "imbalanc": [9, 10, 11], "avoid": [9, 10, 11, 12, 14, 16, 22, 27, 29, 74, 141], "frequent": [9, 10, 11], "compute_class_weight": [9, 10, 11], "vector": [9, 10, 107, 110], "timedistribut": [9, 10, 141], "31": [9, 10, 11, 26, 27, 32, 86], "feat_extractor": [9, 10], "return_feat": [9, 10, 85, 97, 98, 99], "start_dim": [9, 10], "len_last_lay": [9, 10], "neuralnetclassifi": [9, 10, 11, 28, 30], "mass": 9, "ss3": 9, "speak": [9, 11, 14], "recommend": [9, 11, 16, 29, 30, 34, 86, 139, 140], "balanced_accuraci": [9, 10], "criterion__weight": [9, 10, 11], "tensor": [9, 10, 11, 22, 26, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 85, 86, 90, 95, 97, 98, 99, 100, 101, 102, 120, 125, 129, 130], "2107": 9, "6178": 9, "2066": 9, "6041": 9, "9642": 9, "2280": 9, "5977": 9, "6133": 9, "8641": 9, "2202": 9, "5796": 9, "2128": 9, "6148": 9, "7726": [9, 30], "3645": 9, "4959": 9, "3315": 9, "5805": 9, "7962": 9, "4404": 9, "3250": 9, "2195": 9, "7602": 9, "8394": 9, "5275": [9, 30], "0835": 9, "3624": 9, "6435": 9, "8763": 9, "5630": 9, "9404": 9, "4096": 9, "4615": 9, "7819": 9, "6798": 9, "8261": 9, "3784": 9, "8723": 9, "7885": 9, "6880": 9, "7703": 9, "3984": 9, "8295": 9, "7702": 9, "7335": 9, "6548": 9, "5521": 9, "2594": 9, "7970": 9, "spatial_conv": 9, "kernel_s": [9, 10, 91, 100], "feature_extractor": [9, 10], "ident": [9, 32, 44, 67, 84, 120], "relu": [9, 10, 90], "maxpool2d": 9, "dilat": [9, 10, 11, 27, 91], "ceil_mod": [9, 10], "end_dim": [9, 10], "inplac": [9, 10, 16], "in_featur": [9, 10], "816": 9, "out_featur": [9, 10], "bia": [9, 10, 11], "sharex": [9, 10, 11], "plot_confusion_matrix": [9, 10, 11, 27, 28, 141], "confusion_mat": [9, 10, 11, 27, 28, 135], "class_nam": [9, 10, 11, 27, 28, 135], "wake": [9, 10, 11, 74], "rem": [9, 10, 11], "58": 9, "62": [9, 14, 26], "194": 9, "33": [9, 16], "44": [9, 27, 30, 33, 72], "hypnogram": [9, 10, 11], "overlaid": [9, 10, 11], "correctli": [9, 10, 11, 91, 140, 141], "identifi": [9, 10, 11, 80, 112, 113], "amount": [9, 10, 11, 16, 110], "expert": [9, 10, 11], "annot": [9, 10, 11, 18, 19, 21, 27, 28, 29, 30, 32, 107], "text": [9, 10, 11, 29, 135], "150": [9, 10, 11, 72], "22222222222223": [9, 10, 11], "despit": [9, 10, 11], "held": [9, 10], "includ": [9, 11, 12, 14, 28, 29, 30, 32, 38, 57, 73, 105, 107, 108, 112, 113, 136, 137], "especi": [9, 30, 32], "ah": [9, 10, 11], "hac": [9, 10, 11], "jjl": [9, 10, 11], "obery\u00e9": [9, 10, 11], "bme": [9, 10, 11], "al": [9, 10, 11, 26, 72, 84, 85, 87, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 128], "lan": [9, 10, 11], "jm": [9, 10, 11], "pch": [9, 10, 11], "rg": [9, 10, 11], "mietu": [9, 10, 11], "je": [9, 10, 11], "moodi": [9, 10, 11], "gb": [9, 10, 11], "peng": [9, 10, 11, 43, 60], "he": [9, 10, 11], "976": [9, 13, 26, 27], "plot_sleep_staging_chambon2018": [9, 13], "attent": [10, 83, 86, 99], "divyesh": [10, 141], "narayanan": [10, 141], "400": [10, 11, 141], "speed": [10, 11, 16, 141], "0x7f7fc09e9b70": 10, "fpz": 10, "cz": [10, 12, 26, 111, 117], "give": [10, 12, 22, 26, 46, 63, 107, 136], "pz": [10, 12], "oz": 10, "0x7f7fc0a104c0": 10, "133": [10, 11], "sleepstagereldele2021": [10, 26, 141], "1471": 10, "1800": 10, "1706": 10, "4832": 10, "1178": 10, "2712": [10, 27], "8700": 10, "2255": 10, "1804": 10, "5504": [10, 22], "4664": [10, 22], "2295": 10, "2044": 10, "5689": 10, "_mrcnn": 10, "gelu": 10, "approxim": [10, 47, 48, 49], "features1": 10, "conv1d": [10, 11, 103], "batchnorm1d": 10, "ep": [10, 116], "05": [10, 11, 12, 13, 23, 101], "momentum": [10, 26, 84, 88, 89, 96], "affin": 10, "track_running_stat": 10, "maxpool1d": 10, "features2": 10, "afr": [10, 99], "_sebasicblock": 10, "conv1": 10, "bn1": 10, "conv2": 10, "bn2": 10, "se": 10, "_selay": 10, "avg_pool": 10, "adaptiveavgpool1d": [10, 101], "output_s": [10, 91, 102], "fc": [10, 99], "sigmoid": [10, 67, 120], "_tce": 10, "modulelist": 10, "_encoderlay": 10, "self_attn": 10, "_multiheadedattent": 10, "conv": [10, 11, 103], "_causalconv1d": 10, "feed_forward": 10, "_positionwisefeedforward": 10, "w_1": 10, "120": [10, 72, 99], "w_2": 10, "sublayer_output": 10, "_sublayeroutput": 10, "norm": [10, 83], "layernorm": 10, "elementwise_affin": 10, "n4": 10, "_classif": 10, "1469": 10, "undefinedmetricwarn": 10, "ill": 10, "zero_divis": 10, "behavior": [10, 30, 32, 67, 120, 141], "_warn_prf": 10, "averag": [10, 12, 27, 29, 31, 32, 67, 83, 91, 111, 120, 125], "msg_start": 10, "48": [10, 16, 18, 20, 21, 23, 27, 28, 29, 30, 32, 69, 90], "43": 10, "faster": [10, 16, 27, 67, 110, 120], "89": 10, "eldel": [10, 99], "et": [10, 26, 72, 84, 85, 87, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 128], "With": [10, 99], "vol": [10, 99], "29": [10, 31, 99], "pp": [10, 36, 43, 46, 47, 48, 49, 51, 54, 60, 63, 65, 86, 99], "809": [10, 99], "818": [10, 99], "1109": [10, 83, 87, 88, 89, 99], "tnsre": [10, 88, 89, 99], "3076234": [10, 99], "228": [10, 13], "plot_sleep_staging_eldele2021": [10, 13], "look": [11, 12, 17, 22, 26, 29, 68, 122], "simpler": 11, "current": [11, 67, 111, 120, 136], "seq2seq": 11, "written": [11, 118, 138], "veri": [11, 29, 32, 70, 113], "short": [11, 12, 29, 32, 69, 85], "excecut": 11, "too": 11, "small": [11, 12, 27, 29, 136], "theo": [11, 141], "gnassoun": [11, 141], "omar": [11, 141], "emir": 11, "zero": [11, 16, 51, 65, 107, 110, 113, 116], "median": 11, "unit": [11, 26, 107, 140], "interquartil": 11, "upsampl": [11, 103, 110], "light": [11, 135], "No": [11, 16, 18, 19, 26, 29, 32, 69], "robust_scal": 11, "0x7f7fe0dbe4a0": 11, "shorter": [11, 141], "fulli": [11, 29, 30, 83, 86, 88, 89, 90], "usleep": [11, 26, 141], "in_chan": [11, 26, 31, 84, 92, 93, 94, 95, 96, 101, 103, 104], "with_skip_connect": [11, 103], "balanced_accuracy_multi": 11, "309": 11, "even": [11, 26, 29, 32, 67, 68, 103, 120], "odd": [11, 90, 103], "trigger": 11, "intern": [11, 14, 16, 20, 21, 43, 45, 46, 47, 48, 49, 60, 62, 63, 109], "aten": 11, "src": 11, "nativ": 11, "cpp": 11, "2040": 11, "6129": 11, "1707": 11, "5807": 11, "7747": 11, "2224": 11, "5430": 11, "1594": 11, "5866": 11, "8756": 11, "3464": 11, "4928": 11, "1853": 11, "6026": 11, "7298": 11, "52": [11, 26], "41": [11, 27, 33], "197": [11, 141], "399": 11, "perslev": [11, 103, 121], "darkner": [11, 103, 121], "kempfner": [11, 103, 121], "nikol": [11, 103, 121], "jennum": [11, 103, 121], "pj": [11, 103, 121], "igel": [11, 103, 121], "resili": [11, 103, 121], "npj": [11, 103, 121], "digit": [11, 22, 103, 121], "med": [11, 103, 121], "72": [11, 30, 103, 121], "842": [11, 13], "plot_sleep_staging_usleep": [11, 13], "showcas": [12, 29, 32], "templ": [12, 75, 76, 141], "univers": [12, 72, 75, 76, 141], "hospit": [12, 75, 76, 141], "www": [12, 14, 34, 68, 75, 76], "isip": [12, 14, 75, 76], "piconepress": [12, 14, 75, 76], "tuh_eeg": [12, 14, 22, 75, 76], "shtml": [12, 75, 76], "c_tueg": [12, 75], "luka": [12, 17, 18, 19, 20, 21, 22, 31, 34, 141], "gemein": [12, 17, 18, 19, 20, 21, 22, 31, 141], "tempfil": [12, 16, 18], "error": [12, 22, 27, 30, 31, 80, 106, 112, 113, 114, 120, 136, 141], "messag": [12, 14, 22, 136], "everytim": [12, 14, 22], "creation": [12, 22], "mock": [12, 22], "want": [12, 14, 18, 21, 22, 24, 28, 29, 30, 32, 67, 120, 137, 140], "disconsid": 12, "section": [12, 22, 72, 139], "_tuhmock": [12, 22], "noqa": [12, 22], "f811": [12, 22], "firstli": [12, 21], "complet": [12, 14, 27, 67, 120], "read": [12, 14, 16, 17, 18, 19, 75, 76, 81, 113], "tuh_path": [12, 14, 22], "pars": 12, "inform": [12, 14, 17, 26, 29, 41, 59, 67, 70, 77, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 107, 120, 122, 140], "path": [12, 14, 16, 17, 18, 19, 22, 32, 68, 70, 75, 76, 81, 82], "patient": [12, 68], "id": [12, 18, 20, 21, 27, 28, 29, 30, 32, 70, 75, 76, 81, 112, 113, 141], "sort": [12, 27, 28, 141], "chronolog": [12, 75, 76], "year": [12, 34], "month": [12, 34], "dai": [12, 69], "segment": [12, 16, 29, 32, 107], "regard": 12, "gender": [12, 18, 22, 75, 76], "insert": [12, 22, 91], "job": [12, 67, 75, 81, 107, 110, 112, 113, 118, 120], "load": [12, 16, 17, 19, 22, 23, 68, 70, 73, 74, 76, 81, 84, 96, 109, 112, 113, 118, 141], "target_nam": [12, 14, 18, 22, 31, 70, 71, 75, 76, 81, 141], "add_physician_report": [12, 22, 75, 76], "__name__": 12, "statist": 12, "plt_histogram": 12, "df_of_ages_gend": 12, "ylim": 12, "show_titl": 12, "dafaram": 12, "male_df": 12, "female_df": 12, "figur": [12, 27, 28, 29, 69, 83, 135], "suptitl": 12, "95": [12, 67, 120], "male": 12, "hist": 12, "bin": 12, "green": 12, "orient": 12, "horizont": 12, "axhlin": 12, "1f": [12, 32], "std": [12, 29, 43, 60, 72], "barh": [12, 29], "height": [12, 29], "width": [12, 30, 101, 107], "xlim": 12, "upper": [12, 16, 107], "left": [12, 27, 28, 29, 39, 67, 69, 72, 120], "ytick": 12, "gca": 12, "invert_xaxi": 12, "femal": [12, 72], "122": 12, "subplots_adjust": 12, "wspace": 12, "hspace": 12, "count": [12, 67, 120], "labelpad": 12, "durat": [12, 29, 30, 31, 105, 107, 113], "least": [12, 107, 122, 123], "five": [12, 68], "select_by_dur": 12, "inf": 12, "determin": [12, 30, 67, 89, 120], "d_i": 12, "ones": [12, 26, 121, 141], "split": [12, 15, 20, 23, 24, 26, 31, 67, 70, 73, 84, 96, 113, 120, 141], "discard": [12, 74], "incomplet": 12, "configur": [12, 16, 27, 29, 32], "subdivis": 12, "le": 12, "repres": [12, 21, 47, 48, 49, 86], "re": [12, 21, 67, 111, 120, 136], "referenc": [12, 111], "short_ch_nam": 12, "a1": 12, "a2": 12, "fp1": 12, "fp2": 12, "f3": 12, "f4": 12, "c3": [12, 26], "c4": [12, 26], "p3": 12, "p4": 12, "o1": [12, 117], "o2": 12, "f7": 12, "f8": 12, "t3": 12, "t4": 12, "t5": 12, "t6": 12, "fz": 12, "subdivid": 12, "refer": [12, 34, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 49, 51, 54, 55, 56, 57, 59, 60, 62, 63, 65, 68, 69, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 111, 117, 121, 123, 130, 135], "ar_ch_nam": 12, "ref": 12, "le_ch_nam": 12, "ar_ch_map": 12, "ch_name": [12, 14, 17, 26, 78, 106, 117], "le_ch_map": 12, "ch_map": 12, "select_by_channel": 12, "endswith": 12, "seta": 12, "kei": [12, 21, 26, 27, 28, 70, 71, 77, 112, 113], "recod": 12, "setb": 12, "issubset": 12, "region": [12, 107], "renam": [12, 141], "micro": 12, "volt": 12, "clip": 12, "outlier": 12, "800": [12, 18], "common": [12, 14, 111, 139, 141], "custom_rename_channel": 12, "unexpect": [12, 136], "rename_channel": 12, "custom_crop": 12, "include_tmax": [12, 105], "bigger": 12, "set_eeg_refer": [12, 111], "ref_channel": [12, 111], "ch_type": [12, 26, 111], "pick_channel": [12, 106, 109], "a_min": 12, "a_max": 12, "parallel": [12, 14, 15, 23, 24, 70, 74, 75, 81, 88, 89, 90, 107, 109, 110, 112, 113, 118, 141], "addition": [12, 18, 26, 34, 67, 120, 131], "serial": [12, 15, 18, 23, 24, 70, 74, 109, 112, 118, 141], "must": [12, 14, 16, 26, 77, 84, 96, 97, 102, 105, 109, 111, 112, 121, 139, 141], "lazi": [12, 15, 16, 23, 24, 76, 84, 96, 112, 141], "capabl": [12, 16, 29, 32, 67, 120], "automat": [12, 14, 26, 68, 85, 101, 111, 141], "reload": [12, 16, 118], "machin": [12, 14, 16, 29, 32, 34, 36, 39, 43, 51, 54, 56, 60, 65, 67, 120], "build": [12, 27, 32, 138, 140], "core": [12, 16, 32], "out_path": 12, "mkdtemp": [12, 18], "directori": [12, 16, 18, 27, 68, 70, 75, 76, 81, 118, 140], "tuh_preproc": 12, "concat_d": [12, 16, 18, 112, 113, 114, 118], "save_dir": [12, 16, 118], "readi": [12, 16, 17, 18, 19, 31], "model": [12, 14, 21, 33, 34, 43, 60, 67, 70, 71, 73, 109, 112, 113, 116, 118, 120, 125, 126, 127, 128, 129, 130, 131, 133, 134, 137, 141], "train": [12, 14, 20, 21, 33, 67, 70, 72, 73, 77, 91, 96, 109, 113, 116, 118, 120, 133, 141], "disk": [12, 14, 16, 75, 76, 113], "tuh_window": [12, 22], "719": [12, 13, 86], "plot_tuh_eeg_corpu": [12, 13], "02": [13, 23, 26, 27, 32, 33], "664": 13, "auto_examples_applied_exampl": 13, "sake": 14, "etc": [14, 28, 30, 109], "preprocess": [14, 15, 18, 20, 21, 22, 23, 24, 26, 31, 70, 74, 137, 141], "continu": [14, 16, 20, 71, 72, 78, 79, 80, 112, 113, 119, 139, 141], "fast": [14, 16, 32, 133], "expens": [14, 67, 120], "ultim": 14, "becom": [14, 16, 29], "imposs": 14, "tb": 14, "potenti": [14, 16, 32, 139], "issu": [14, 16, 136, 141], "overhead": [14, 113], "accomod": 14, "window": [14, 16, 18, 21, 26, 67, 70, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 110, 112, 113, 119, 120, 121, 122, 123, 124, 131, 132, 141], "overal": 14, "though": [14, 16, 29, 32], "impact": [14, 27, 30], "dispatch": 14, "enabl": [14, 16, 27, 32, 67, 69, 101, 120, 141], "fif": [14, 16, 18, 70, 81, 141], "edf": [14, 16, 17, 19, 22], "itertool": [14, 16], "product": [14, 16], "seaborn": [14, 29, 30], "sn": [14, 29, 30], "tuhabnorm": [14, 18, 141], "deep4net": [14, 26, 31, 141], "affect": [14, 27, 128], "algorithm": [14, 26, 28, 29, 30, 32], "set_num_thread": 14, "thread": 14, "autom": [14, 29], "abnorm": [14, 76], "slide": [14, 31, 83, 112], "bundl": 14, "prepar": [14, 16, 20, 32], "load_example_data": 14, "window_len_": 14, "n_record": [14, 122], "creat": [14, 16, 17, 18, 19, 20, 21, 31, 67, 70, 77, 78, 79, 80, 111, 112, 113, 120, 131, 141], "bool": [14, 26, 41, 45, 46, 47, 48, 49, 59, 63, 67, 68, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 123, 124, 128, 131, 133, 135], "windows_d": [14, 16], "assum": [14, 26, 67, 105, 120, 125, 129, 141], "patholog": [14, 18, 76], "window_len_sampl": 14, "drop_bad_window": [14, 31, 80, 112, 113, 114], "bad": [14, 16, 17, 18, 19, 21, 107, 108, 111, 136], "xxx": [14, 94], "itself": [14, 29, 30, 136], "drop_bad": [14, 80, 112, 113], "create_example_model": 14, "kind": [14, 26], "str": [14, 22, 26, 27, 28, 29, 35, 67, 68, 70, 71, 73, 75, 76, 77, 80, 81, 84, 86, 91, 96, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 120, 128, 135], "n_filters_tim": [14, 26, 31, 84, 86, 96], "filter_time_length": [14, 26, 84, 86, 96], "n_filters_spat": [14, 26, 31, 84, 96], "pool_time_length": [14, 26, 84, 86, 96], "pool_time_strid": [14, 26, 84, 86, 96], "split_first_lay": [14, 26, 84, 94, 96], "batch_norm": [14, 26, 84, 96], "batch_norm_alpha": [14, 26, 84, 88, 89, 94, 96], "drop_prob": [14, 26, 30, 84, 86, 87, 88, 89, 92, 93, 96, 100, 101], "elif": [14, 31], "n_filters_2": [14, 31, 84], "filter_length_2": [14, 84], "n_filters_3": [14, 31, 84], "filter_length_3": [14, 84], "n_filters_4": [14, 31, 84], "filter_length_4": [14, 84], "first_pool_mod": [14, 84], "max": [14, 16, 26, 29, 84, 92, 96, 98, 101, 103, 107, 116], "later_pool_mod": [14, 84], "double_time_conv": 14, "stride_before_pool": [14, 31, 84], "valueerror": [14, 26, 31, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103], "run_train": 14, "serv": [14, 69, 71, 77], "loss_val": 14, "zero_grad": [14, 32], "256": [14, 26, 141], "minibatch": 14, "pin_memori": 14, "pin": 14, "n_repetit": 14, "repeat": [14, 136], "get": [14, 16, 17, 22, 27, 28, 29, 32, 67, 120], "folder": [14, 68], "storag": 14, "tuh_eeg_abnorm": 14, "v2": 14, "cycl": 14, "combin": [14, 16, 70], "all_result": 14, "win_len_": 14, "model_kind": 14, "repetit": [14, 16, 72], "nrepetit": 14, "n": [14, 16, 22, 26, 27, 28, 29, 30, 32, 36, 37, 38, 43, 45, 51, 54, 55, 57, 60, 62, 65, 83, 92, 93, 98, 130], "data_loading_start": 14, "data_loading_end": 14, "training_setup_start": 14, "worker_init_fn": 14, "training_setup_end": 14, "model_training_start": 14, "trained_model": 14, "model_training_end": 14, "del": 14, "data_prepar": 14, "training_setup": 14, "model_train": 14, "csv": 14, "results_df": 14, "fname": 14, "lazy_vs_eager_loading_result": 14, "to_csv": 14, "summar": 14, "catplot": 14, "row": [14, 22, 39, 70, 91, 135], "hue": 14, "col": 14, "strip": 14, "hardwar": [14, 16], "slower": 14, "pretti": [14, 136], "worker": [14, 131, 141], "speedup": 14, "benchmark_lazy_eager_load": [14, 23], "basic": [15, 27, 29, 32, 33, 53, 70, 73, 90, 91, 96, 109, 113, 116, 118, 133, 135, 141], "eager": [15, 23, 24, 76, 84, 96, 112], "discret": [15, 23, 24, 70, 75, 112, 141], "simplest": 16, "scenario": [16, 113], "act": [16, 111], "stai": [16, 27, 69], "aris": 16, "bottleneck": [16, 88, 89, 101], "consider": 16, "solut": [16, 111], "clear": 16, "downsid": 16, "write": [16, 18], "cours": [16, 68], "whenev": 16, "up": [16, 17, 69, 103, 110, 141], "significantli": 16, "joblib": 16, "made": [16, 90, 141], "remain": [16, 29, 32], "tradeoff": 16, "memory_profil": 16, "memory_usag": 16, "goe": 16, "prepare_data": 16, "n_rec": 16, "tmp_dir": 16, "temporarydirectori": 16, "overwrit": [16, 18, 67, 70, 71, 75, 76, 77, 82, 118, 120], "measur": 16, "peak": [16, 112, 113], "character": 16, "n_repet": 16, "all_n_rec": 16, "all_n_job": 16, "mem": 16, "proc": 16, "time_taken": 16, "max_mem": 16, "mne_data": [16, 17, 19, 27, 68], "sc4001e0": 16, "psg": 16, "detect": [16, 17, 19, 30, 72], "sc4011e0": 16, "2507000": 16, "25070": 16, "sec": [16, 17, 18, 19, 31], "contigu": [16, 51, 65], "fir": [16, 107], "phase": [16, 41, 59, 107], "causal": [16, 107], "firwin": [16, 107], "ham": [16, 107], "0194": 16, "passband": 16, "rippl": 16, "stopband": 16, "attenu": [16, 107], "edg": [16, 107], "transit": [16, 36, 54, 107], "bandwidth": [16, 36, 54], "450": 16, "tmp": [16, 18], "tmpl8y5j1uc": 16, "3260000": 16, "32600": 16, "574": [16, 18], "subdirectori": [16, 18, 70, 118], "open": [16, 18, 136, 137, 139], "isotrak": 16, "2884000": 16, "5391000": 16, "28840": 16, "53910": 16, "1975000": 16, "5235000": 16, "19750": 16, "52350": 16, "835": 16, "event": [16, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 32, 74, 80, 112, 113], "3000": [16, 22, 31], "point": [16, 17, 18, 19, 20, 21, 26, 69, 111, 115, 116], "1086": 16, "566": [16, 18], "match": [16, 18, 19, 26, 30, 70, 83], "exist": [16, 18, 22, 29, 31, 68, 70, 71, 77, 111, 118], "encount": [16, 18, 136], "mix": [16, 18, 45, 62, 130], "i_d": [16, 18], "epo": [16, 18, 70, 81], "29990": 16, "ctf": [16, 18], "compens": [16, 18, 29, 107], "matric": [16, 18, 27, 28, 47, 48, 49, 67, 120], "ad": [16, 18, 19, 70, 75, 76, 101, 103, 111, 141], "metadata": [16, 18, 19, 26, 70, 77, 112, 120, 121, 122, 123, 124], "baselin": [16, 18, 19, 26], "correct": [16, 18, 19, 26, 32, 67, 87, 88, 89, 90, 92, 93, 120, 141], "tmpsb0qjvv6": 16, "tmpbh1plfo1": 16, "tmp0a8r_p4_": 16, "sub_df": 16, "groupbi": 16, "mib": 16, "without": [16, 26, 27, 29, 30, 32, 67, 120, 130, 141], "circl": 16, "advantag": [16, 29, 88, 89], "togeth": [16, 27, 141], "812": [16, 23], "345": 16, "plot_benchmark_preprocess": [16, 23], "create_from_x_i": 17, "fetch": [17, 19, 20, 21, 69, 72, 73], "imagin": [17, 19], "hand": [17, 19, 24, 28, 30, 69, 72], "feet": [17, 18, 19, 21, 27, 28, 29, 30, 32, 69, 72], "event_cod": [17, 19], "yet": [17, 19, 91, 140], "physionet_path": [17, 19], "eegbci": [17, 19], "load_data": [17, 19], "update_path": [17, 19], "io": [17, 19, 71, 105, 107, 117], "read_raw_edf": [17, 19], "stim_channel": [17, 19], "eegmmidb": [17, 19], "s022": [17, 19], "s022r05": [17, 19], "19999": [17, 19], "124": [17, 19, 27], "994": [17, 19], "s022r06": [17, 19], "s022r09": [17, 19], "s022r10": [17, 19], "s022r13": [17, 19], "s022r14": [17, 19], "ani": [17, 18, 26, 27, 29, 32, 67, 99, 107, 111, 120, 140], "500": [17, 19, 28, 122, 141], "rawarrai": [17, 19, 31, 80], "float64": [17, 19, 31], "20000": 17, "manipul": 17, "x_i": 17, "y_i": 17, "window_ind": 17, "start_ind": 17, "stop_ind": 17, "550": [17, 23], "plot_custom_dataset_exampl": [17, 23], "load_concat_dataset": [18, 141], "skip": [18, 22, 29, 32, 90, 103], "fn": [18, 109], "0x7f7fe1024340": 18, "concat": [18, 70, 83, 112, 113, 118], "json": [18, 70, 81, 141], "hold": [18, 70, 71, 77, 112, 113], "due": [18, 32, 141], "tmpdir": 18, "temporari": [18, 141], "tmpp11gidob": 18, "complianc": 18, "upon": [18, 26], "dataset_load": 18, "ids_to_load": [18, 81], "3868": 18, "386": [18, 26, 33], "left_hand": [18, 21, 27, 28, 29, 30, 32], "right_hand": [18, 21, 27, 28, 29, 30, 32], "tongu": [18, 21, 27, 28, 29, 30, 32, 69], "run_1": [18, 20, 21], "run_3": [18, 20, 21], "again": [18, 22, 29], "windows_dataset_load": 18, "3900": 18, "135": [18, 23], "plot_load_save_dataset": [18, 23], "create_from_mne_raw": 19, "create_from_mne_epoch": 19, "t0": 19, "t1": 19, "t2": 19, "beforehand": 19, "list_of_epoch": [19, 79], "Not": [19, 26], "81": 19, "161": [19, 23, 141], "plot_mne_dataset_exampl": [19, 23], "daniel": [20, 34, 141], "wilson": [20, 141], "dan": [20, 141], "wil": 20, "run_0": [20, 21, 122], "run_2": [20, 21], "run_4": [20, 21], "run_5": [20, 21], "break": [20, 69], "place": [20, 31, 91, 105, 117, 119], "legaci": 20, "inst": [20, 106, 107, 108, 111], "criteria": [20, 67, 120], "subset_nam": 20, "232164": 20, "797": [20, 23], "plot_moabb_dataset_exampl": [20, 23], "aim": [21, 22], "dictionari": [21, 26, 67, 70, 73, 107, 120], "string": [21, 22, 26, 34, 39, 47, 48, 49, 67, 70, 107, 108, 109, 118, 120, 128], "entri": [21, 106], "0x7f7fc308e380": 21, "0x7f7fc308dab0": 21, "0x7f7fc2f59bd0": 21, "0x7f7fe79e0df0": 21, "0x7f7fde893790": 21, "0x7f7fde893d90": 21, "integ": [21, 22, 27, 28, 39, 51, 56, 65, 70, 107, 108], "0x7f7fc2d940d0": 21, "0x7f7fe79e1390": 21, "0x7f7fe79e1000": 21, "0x7f7fc2d94f70": 21, "0x7f7fe79e1ae0": 21, "0x7f7fe79e2a40": 21, "similarli": [21, 32], "0x7f7fe00240d0": 21, "0x7f7fddf1c400": 21, "0x7f7fcd7a7370": 21, "0x7f7fcd7a6800": 21, "0x7f7fe79cb640": 21, "0x7f7fe79c9b10": 21, "0x7f7fe0fd7b20": 21, "0x7f7fe79cb430": 21, "0x7f7fe79ca0b0": 21, "0x7f7fe79c89d0": 21, "plot_split_dataset": [21, 23], "welcom": 22, "ll": 22, "guid": [22, 29, 139], "log": [22, 26, 27, 32, 67, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 105, 107, 108, 110, 111, 112, 113, 120], "excess": 22, "v1": [22, 32], "02_tcp_le": 22, "00000058": 22, "s001": 22, "01_tcp_ar": 22, "099": 22, "00009932": 22, "s004": 22, "03_tcp_ar_a": 22, "123": 22, "00012331": 22, "s0": 22, "00000000": 22, "37": [22, 26], "149": [22, 32], "00014928": 22, "83": [22, 32], "ndarrai": [22, 46, 63, 67, 110, 115, 116, 119, 120, 124, 131, 132], "92922518": 22, "22477157": 22, "12493701": 22, "28417889": 22, "13578887": 22, "56835277": 22, "25153176": 22, "7638324": 22, "14345092": 22, "30167542": 22, "68056549": 22, "70380673": 22, "70052629": 22, "21543634": 22, "96330007": 22, "02736802": 22, "65902848": 22, "15756383": 22, "38658058": 22, "04194231": 22, "15447331": 22, "set_descript": [22, 32, 70, 71, 77], "ind": 22, "16017832": 22, "11754766": 22, "6515615": 22, "50407195": 22, "7429778": 22, "9292252": 22, "86039335": 22, "5169721": 22, "0308012": 22, "1209397": 22, "5210943": 22, "2247716": 22, "373041": 22, "14827406": 22, "25829056": 22, "1486133": 22, "15352039": 22, "30362263": 22, "939559": 22, "5686462": 22, "5503989": 22, "3299779": 22, "3865806": 22, "7443461": 22, "1792846": 22, "25878426": 22, "5670986": 22, "2997373": 22, "0537782": 22, "4429058": 22, "05458383": 22, "000525": 22, "66521484": 22, "15447332": 22, "dtype": [22, 30], "float32": 22, "2600": 22, "3600": [22, 74], "dl": 22, "batch_i": 22, "batch_ind": 22, "simpli": [22, 26], "8024": 22, "4564": 22, "4433": 22, "7404": 22, "2522": [22, 30], "0508": 22, "4418": 22, "5201": 22, "2037": 22, "0273": [22, 30], "0506": 22, "1677": 22, "1145": 22, "7075": 22, "1768": 22, "0260": 22, "7216": 22, "2742": 22, "3986": 22, "3912": 22, "8000": 22, "0593": 22, "8097": 22, "1729": 22, "6267": 22, "8419": 22, "3996": 22, "6685": 22, "9266": 22, "1319": 22, "1409": 22, "6246": 22, "6229": 22, "5953": 22, "3169": 22, "4604": 22, "2885": 22, "0168": 22, "6279": 22, "6533": 22, "7673": 22, "6671": [22, 31], "0448": 22, "1422": 22, "5395": 22, "1882": 22, "2031": 22, "6282": 22, "4535": 22, "8585": 22, "2657": 22, "9942": 22, "3878": 22, "1360": 22, "9132": 22, "9481": 22, "5033": 22, "3406": 22, "6089": 22, "9883": 22, "2919": 22, "3796": 22, "8036": 22, "7666": 22, "8174": 22, "3829": 22, "1508": 22, "8516": 22, "0426": 22, "1322": 22, "4122": 22, "2526": 22, "9711": 22, "6890": 22, "4660": 22, "3613": 22, "0280": 22, "1350": 22, "2249": 22, "9406": 22, "7754": 22, "7664": 22, "1807": 22, "1281": 22, "1607": 22, "9353": 22, "0165": [22, 29], "6509": 22, "7276": 22, "2137": 22, "5619": 22, "0408": 22, "9825": 22, "3648": 22, "6978": 22, "8943": 22, "2374": 22, "4398": 22, "8218": 22, "5172": 22, "2975": 22, "0311": 22, "1602": 22, "1175": 22, "6516": 22, "5041": 22, "7430": 22, "9292": 22, "8604": 22, "5170": 22, "0308": 22, "1209": 22, "5211": 22, "2248": 22, "3730": 22, "1483": 22, "2583": 22, "1486": 22, "1535": 22, "1249": 22, "3036": 22, "9396": 22, "5686": 22, "3300": 22, "3866": 22, "7443": 22, "1793": 22, "2588": 22, "5671": 22, "2997": 22, "0419": 22, "0538": 22, "4429": 22, "0546": 22, "6652": 22, "1545": 22, "086": [22, 23], "plot_tuh_discrete_multitarget": [22, 23], "663": 23, "auto_examples_datasets_io": 23, "fundament": [24, 25], "tune": [24, 25, 32, 33, 70, 73, 86, 91, 96, 109, 113, 116, 118, 133, 141], "fake": [24, 25, 26, 33, 70, 71, 84, 91, 96, 104, 112, 125, 133, 141], "auto_examples_python": 24, "auto_examples_jupyt": 24, "develop": [26, 29, 32, 136, 140], "particular": 26, "pierr": [26, 141], "guetschel": [26, 141], "suppos": [26, 119], "stumbl": 26, "schirrmeist": [26, 27, 28, 29, 30, 31, 34, 72, 84, 95, 96, 135, 141], "2017": [26, 27, 28, 29, 30, 31, 34, 46, 47, 48, 49, 63, 72, 84, 85, 95, 96, 135], "articl": [26, 34], "mention": [26, 29], "novel": [26, 88, 89], "shallowconvnet": [26, 31], "fortun": 26, "publish": 26, "what": [26, 29, 67, 83, 112, 113, 120], "exact": 26, "visit": [26, 29], "api": [26, 140], "models_dict": [26, 67, 120, 141], "atcnet": [26, 141], "deepsleepnet": [26, 141], "eegconform": [26, 141], "eegitnet": [26, 141], "eegincept": [26, 89, 141], "eeginceptionerp": [26, 88, 141], "eeginceptionmi": [26, 141], "eegnetv1": 26, "eegnetv4": 26, "eegresnet": [26, 141], "hybridnet": 26, "sleepstagerblanco2020": [26, 141], "tcn": [26, 83, 141], "tidnet": [26, 141], "investig": 26, "docstr": [26, 141], "__doc__": 26, "schirrmeister2017": [26, 72, 84, 95, 96], "conv_nonlin": [26, 96], "pool_mod": [26, 92, 93, 96], "pool_nonlin": [26, 96], "normalis": [26, 84, 96], "chs_info": [26, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 120], "fill": [26, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103], "ch": [26, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103], "detail": [26, 29, 32, 45, 62, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 107, 108, 110, 111, 117, 133, 140], "input_window_second": [26, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 120], "alia": [26, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103], "softmax": [26, 27, 31, 67, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 120], "futur": [26, 30, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103], "doc": [26, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 133, 140, 141], "infer": [26, 29, 30, 67, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 113, 120, 128], "attempt": [26, 83, 84, 85, 91, 94, 95, 96, 97, 98, 99, 100, 103, 111], "springenberg": [26, 27, 28, 29, 30, 31, 34, 84, 95, 96, 135], "fieder": [26, 27, 28, 29, 30, 31, 34, 84, 95, 96, 135], "glasstett": [26, 27, 28, 29, 30, 31, 34, 84, 95, 96, 135], "eggensperg": [26, 27, 28, 29, 30, 31, 34, 84, 95, 96, 135], "tangermann": [26, 27, 28, 29, 30, 31, 34, 84, 95, 96, 135], "hutter": [26, 27, 28, 29, 30, 34, 84, 95, 96, 135], "ball": [26, 27, 28, 29, 30, 31, 34, 72, 84, 95, 96, 135], "aug": [26, 34, 84, 95, 96, 135], "dx": [26, 34, 84, 88, 89, 95, 96, 135], "1002": [26, 27, 28, 29, 30, 34, 84, 95, 96, 135], "hbm": [26, 27, 28, 29, 30, 34, 84, 95, 96, 135], "23730": [26, 27, 28, 29, 30, 34, 84, 95, 96, 135], "__str__": 26, "882": 26, "202": 26, "quit": [26, 29], "popular": 26, "collect": [26, 67, 72, 120], "1024": 26, "simul": 26, "create_info": 26, "randn": 26, "256hz": 26, "epochsarrai": 26, "randint": [26, 31], "99609": 26, "off": [26, 29, 30, 107], "wrapp": 26, "wrapper": [26, 28, 29], "form": [26, 45, 62, 69, 70, 71, 77], "facilit": [26, 141], "easiest": [26, 29], "former": [26, 67, 83, 86, 90, 120], "prefix": [26, 67, 120], "module__": 26, "validsplit": [26, 30, 67, 120], "module__final_conv_length": 26, "along": [26, 71, 77, 110, 139, 141], "7523": 26, "0244": 26, "0164": 26, "0138": 26, "0123": 26, "0121": 26, "0124": 26, "0120": 26, "840": 26, "924": 26, "844": 26, "pre": [26, 78, 111], "via": [26, 28, 29, 30, 103, 107, 138, 139, 141], "And": [26, 27], "nan": [26, 129], "unit_mul": 26, "fiff_unitm_non": 26, "cal": 26, "fiffv_eeg_ch": 26, "coil_typ": 26, "fiffv_coil_eeg": 26, "107": 26, "fiff_unit_v": 26, "coord_fram": 26, "fiffv_coord_head": 26, "scanno": 26, "logno": 26, "target_from": 26, "miss": [26, 83, 86, 88, 90, 92, 93, 94, 95, 97, 103, 141], "manual": [26, 27, 29, 139], "plot_basic_training_epoch": [26, 33], "push": [27, 67, 120], "produc": [27, 29, 32, 99], "neighbour": 27, "simultan": [27, 88, 89], "sub": [27, 141], "afterward": [27, 29, 83, 86, 90, 111], "implicitli": [27, 29, 32], "timestep": 27, "user": [27, 67, 120, 136, 138, 139, 141], "mostli": 27, "runtim": 27, "rule": [27, 67, 120], "mathemat": 27, "neighbourhood": 27, "At": [27, 69], "redund": 27, "lead": [27, 29, 67, 111, 120], "gradient": [27, 141], "likelihood": [27, 67], "typic": [27, 67, 105, 120], "locat": [27, 68], "anyth": [27, 67], "runtimewarn": 27, "config": [27, 68], "mne_datasets_bnci_path": 27, "set_config": 27, "get_config": 27, "0x7f7fe0dad2a0": 27, "definit": [27, 67, 120], "torchinfo": [27, 28, 29, 32, 91, 141], "tabl": [27, 28, 29, 30, 32, 83, 91, 141], "804": 27, "dens": [27, 91, 97, 98], "explicit": [27, 128], "deep4": [27, 28, 141], "001": [27, 28, 31, 69, 115, 116], "nll_loss": 27, "4632": 27, "9341": 27, "3331": 27, "2539": 27, "3082": 27, "percent": [27, 28], "misclass": [27, 28], "assign": [27, 28, 132], "train_misclass": [27, 28], "valid_misclass": [27, 28], "misclassif": [27, 28], "get_ylim": [27, 28], "85": [27, 28], "room": [27, 28], "label_dict": [27, 28], "i_class": [27, 28], "event_id": [27, 28], "kv": [27, 28], "conf": [27, 28], "640x480": [27, 28], "m\u00fcller": [27, 28, 29, 30], "aertsen": [27, 28, 29, 30], "birbaum": [27, 28, 29, 30], "braun": [27, 28, 29, 30], "brunner": [27, 28, 29, 30], "leeb": [27, 28, 29, 30], "mehr": [27, 28, 29, 30], "mueller": [27, 28, 29, 30], "putz": [27, 28, 29, 30], "nolt": [27, 28, 29, 30], "2012": [27, 28, 29, 30], "review": [27, 28, 29, 30], "frontier": [27, 28, 29, 30, 34], "neurosci": [27, 28, 29, 30, 34], "burgard": [27, 28, 29, 30, 34], "hum": [27, 28, 29, 30], "mapp": [27, 28, 29, 30], "5391": [27, 28, 29, 30, 31], "5420": [27, 28, 29, 30, 31], "990": [27, 31, 33], "993": 27, "plot_bcic_iv_2a_moabb_crop": [27, 33], "classic": 28, "0x7f7fdee85b70": 28, "benefici": 28, "6001": [28, 29], "6722": 28, "8728": 28, "2570": 28, "9809": 28, "6025": 28, "2569": [28, 29], "1473": 28, "0233": 28, "6513": 28, "0680": 28, "2431": 28, "9947": 28, "7333": 28, "jayaram": [28, 29, 30], "vinai": [28, 29, 30], "alexandr": [28, 29, 30, 34], "barach": [28, 29, 30], "trustworthi": [28, 29, 30], "066011": [28, 29, 30], "794": [28, 33], "502": 28, "plot_bcic_iv_2a_moabb_tri": [28, 33], "properli": [29, 107, 110, 111], "exclus": [29, 32], "elabor": [29, 32], "feel": [29, 32], "free": [29, 32], "distinguish": 29, "scheme": [29, 32, 111], "answer": [29, 32], "reliabl": [29, 32], "sound": [29, 32], "divis": [29, 32, 97, 99, 116], "But": [29, 32], "stori": [29, 32], "learnabl": 29, "connect": [29, 30, 83, 86, 90, 97, 103], "bias": 29, "capac": [29, 30], "ml": [29, 32], "degre": [29, 32, 46, 47, 48, 49, 63], "freedom": [29, 32], "kept": [29, 32], "leakag": [29, 32], "memor": [29, 32], "longer": [29, 32, 67, 120], "independ": [29, 32, 41, 59, 107, 141], "never": [29, 32], "explicitli": [29, 32, 107, 108, 111], "recogn": [29, 32], "behind": [29, 32], "alwai": [29, 32, 34, 53, 67, 120], "paramt": [29, 32], "readabl": [29, 32, 107], "reiniti": [29, 32], "rescal": [29, 30], "varianc": [29, 30, 116], "0x7f7fe10633d0": 29, "One": [29, 30, 69, 88, 89], "demarc": [29, 30], "stimulu": [29, 30], "trial_stop_offset_second": [29, 30], "matter": [29, 32, 75, 76], "distinct": [29, 32], "previous": [29, 32], "credibl": [29, 32], "test_acc": [29, 32], "1667": 29, "2351": 29, "0248": 29, "patch": 29, "font_scal": 29, "plot_simple_train_test": 29, "all_dataset": 29, "bd_cmap": 29, "3a6190": 29, "683e00": 29, "ddf2ff": 29, "2196f3": 29, "ndataset": 29, "nsplit": 29, "invert_yaxi": 29, "ncol": 29, "bbox_to_anchor": 29, "set_xlim": 29, "risk": [29, 45, 62, 130], "tweak": 29, "until": [29, 69], "realli": 29, "unreli": 29, "ratio": 29, "leav": [29, 141], "empti": [29, 67, 107, 111], "x_train": 29, "train_indic": 29, "val_indic": 29, "indices_": 29, "train_subset": 29, "val_subset": 29, "meaning": 29, "3348": 29, "2877": 29, "3448": [29, 30], "0759": 29, "8411": 29, "3522": 29, "0681": 29, "3621": 29, "5751": 29, "6846": 29, "82": [29, 43, 60], "compact": [29, 92, 93], "plot_train_valid_test": 29, "n_train": 29, "n_val": 29, "n_test": 29, "suffici": 29, "unseen": 29, "holdout": 29, "highli": 29, "cross_val_scor": 29, "splitter": 29, "train_val_split": 29, "By": [29, 30, 31, 45, 67, 120], "processor": [29, 30], "cv_result": 29, "2565": 29, "2217": 29, "6378": 29, "2609": 29, "5206": 29, "2171": 29, "5210": 29, "2652": 29, "0127": 29, "4964": 29, "2870": [29, 30], "1441": 29, "4801": 29, "0173": 29, "4703": 29, "2641": 29, "1313": 29, "5223": 29, "2727": 29, "0366": 29, "5021": 29, "3853": 29, "0511": 29, "4858": 29, "9833": 29, "4997": 29, "plot_k_fold": 29, "fraction": [29, 31], "ii": 29, "tr_idx": 29, "val_idx": 29, "n_train2": 29, "rotat": [29, 46, 47, 48, 49, 63, 135], "90": [29, 30, 135], "verticalalign": 29, "horizontalalign": 29, "transax": 29, "earli": 29, "rough": 29, "quickli": 29, "messi": 29, "jointli": 29, "sould": 29, "analog": [29, 128], "grid": [29, 30], "tupl": [29, 30, 45, 53, 62, 67, 71, 74, 91, 104, 110, 117, 120, 123, 135], "00625": [29, 30], "000625": 29, "best_paramet": 29, "3565": 29, "4721": 29, "0063": [29, 30], "7243": 29, "3913": [29, 30], "1627": 29, "7796": 29, "4000": 29, "1149": 29, "9486": 29, "5060": 29, "2016": [29, 92], "0338": 29, "2847": 29, "0208": 29, "9837": 29, "replac": [29, 51, 65, 141], "482": [29, 33], "plot_how_train_test_and_tun": [29, 33], "sensit": [30, 69, 135], "hyeperparamet": 30, "signific": 30, "discrimin": 30, "pathologi": 30, "playbook": 30, "googl": 30, "0x7f7fe10711b0": 30, "functool": 30, "partial": 30, "analyz": 30, "initialis": [30, 120], "slice": [30, 107, 108, 112, 113], "fine": 30, "learning_r": 30, "0000625": 30, "module__drop_prob": 30, "got": 30, "3130": 30, "8104": 30, "3793": 30, "1279": 30, "1132": 30, "7925": 30, "5862": 30, "7024": 30, "0155": 30, "1558": 30, "0272": 30, "9986": 30, "4522": 30, "0370": 30, "4483": 30, "7049": 30, "2348": 30, "6052": 30, "2759": 30, "2581": 30, "5181": 30, "0268": 30, "5301": 30, "3103": 30, "4240": 30, "0148": 30, "4076": 30, "2916": 30, "6926": 30, "9886": 30, "4957": 30, "1572": 30, "4138": 30, "7132": 30, "0210": 30, "9938": 30, "1889": 30, "0126": 30, "3739": 30, "4401": 30, "4828": 30, "8596": 30, "2174": 30, "0672": 30, "9818": 30, "6373": 30, "8733": 30, "9887": 30, "2783": 30, "6966": 30, "2069": 30, "8291": 30, "9741": 30, "5263": 30, "3642": 30, "0017": 30, "4261": 30, "3976": 30, "8916": 30, "0339": 30, "5304": 30, "6155": 30, "7985": 30, "9941": 30, "2435": 30, "2416": 30, "0747": 30, "6460": 30, "2790": 30, "9845": 30, "9100": 30, "9077": 30, "9830": 30, "0091": 30, "3657": 30, "9767": 30, "0078": 30, "5285": 30, "0027": 30, "7658": 30, "0842": 30, "2957": 30, "2414": 30, "4206": 30, "1170": 30, "5000": 30, "9042": 30, "3966": 30, "0491": 30, "0025": 30, "pivot": 30, "heatmap": 30, "pivot_t": 30, "param_optimizer__lr": 30, "param_module__drop_prob": 30, "fmt": 30, "3f": 30, "cmap": 30, "ylgnbu": 30, "cbar": 30, "model_build": [30, 32], "plot_hyperparameter_tuning_with_scikit": [30, 33], "332": 30, "constructor": 30, "numer": [30, 113], "sequenc": [30, 35, 40, 67, 100, 102, 120, 121, 124, 131, 139, 141], "varun": 30, "godbol": 30, "georg": 30, "dahl": 30, "justin": 30, "gilmer": 30, "christoph": 30, "shallu": 30, "zachari": 30, "nado": 30, "tuning_playbook": 30, "868": [30, 33], "163": 30, "sara": [31, 141], "sedlar": [31, 141], "n_fake_rec": 31, "sinusoid": 31, "gaussian": [31, 43, 60], "nois": [31, 43, 60, 69], "n_fake_ch": 31, "fake_dur": 31, "fake_sfreq": 31, "basedataset": [31, 35, 70, 77, 81, 118, 141], "create_mne_dummy_raw": 31, "fake_regression_dataset": 31, "n_fake_target": 31, "fake_data_split": 31, "target_subset": 31, "sin": 31, "pi": [31, 41, 59], "_data": 31, "expand_dim": 31, "fake_descript": 31, "n_fake_chan": 31, "2999": 31, "model_nam": 31, "deepconvnet": 31, "unknown": [31, 128], "602": 31, "minim": [31, 45, 62, 130, 136], "mse": 31, "ground": [31, 69, 72], "truth": 31, "period": 31, "schedul": [31, 32], "optimizer_lr": 31, "optimizer_weight_decai": 31, "neg_root_mean_squared_error": 31, "train_neg_root_mean_squared_error": 31, "valid_neg_root_mean_squared_error": 31, "2505": 31, "1733": 31, "0457": 31, "0227": 31, "0010": 31, "9601": 31, "1586": 31, "3064": 31, "5462": 31, "5425": 31, "3129": 31, "0412": 31, "2604": 31, "4996": 31, "6005": 31, "root": [31, 140], "squar": [31, 96, 120], "rmse": 31, "0x7f7fe0dbedd0": 31, "versu": 31, "trend": 31, "y_estim": 31, "ravel": 31, "y_gt": 31, "to_numpi": [31, 126, 127, 128], "polyfit": 31, "poly1d": 31, "kingma": 31, "diederik": 31, "jimmi": 31, "ba": 31, "stochast": 31, "1412": 31, "6980": 31, "2014": [31, 69], "reddi": 31, "sashank": 31, "satyen": 31, "kale": 31, "sanjiv": 31, "kumar": 31, "beyond": [31, 45, 62, 130], "1904": 31, "09237": 31, "326": [31, 33], "plot_regress": [31, 33], "goal": [32, 88, 89, 90], "perpect": 32, "adjustmenty": 32, "third": 32, "0x7f7fe0aa6ef0": 32, "real": 32, "world": 32, "updat": [32, 67, 68, 70, 71, 77, 80, 112, 113, 117, 120, 139, 141], "tqdm": 32, "train_one_epoch": 32, "loss_fn": 32, "print_batch_stat": 32, "progress_bar": 32, "disabl": [32, 67, 107, 120], "batch_idx": 32, "argmax": 32, "sum": [32, 141], "6f": 32, "accumul": 32, "doesn": [32, 67, 68, 120], "test_model": 32, "n_batch": [32, 125, 129], "test_loss": 32, "batch_loss": 32, "nnloss": 32, "seamlessli": 32, "train_load": 32, "test_load": 32, "test_accuraci": 32, "590727": 32, "51it": 32, "602779": 32, "78it": 32, "717662": 32, "85it": 32, "489191": 32, "86it": 32, "812099": 32, "20it": 32, "99it": 32, "819486": 32, "40it": 32, "713374": 32, "26it": 32, "059334": 32, "284056": 32, "95it": 32, "808058": 32, "82it": 32, "336862": 32, "642491": 32, "217304": 32, "259046": 32, "88it": 32, "252112": 32, "90it": 32, "289975": 32, "96it": 32, "948479": 32, "34it": 32, "13it": 32, "607929": 32, "37it": 32, "350364": 32, "812340": 32, "045515": 32, "33it": 32, "459130": 32, "055055": 32, "193383": 32, "nice": 32, "interfac": [32, 34, 88, 89, 92, 93], "previou": [32, 141], "torchmetr": 32, "litmodul": 32, "lightningmodul": 32, "training_step": 32, "y_hat": 32, "test_step": 32, "multiclass": 32, "num_class": 32, "log_dict": 32, "configure_optim": 32, "trainer": 32, "lit_model": 32, "tpu": 32, "ipu": 32, "hpu": 32, "connector": 32, "logger_connector": 32, "tensorboardx": 32, "conflict": [32, 67, 120], "ecosystem": 32, "logger": 32, "csvlogger": 32, "unless": [32, 120], "tensorboard": 32, "pip": [32, 138, 139, 140, 141], "instal": [32, 67, 107, 110, 120, 141], "extra": [32, 141], "warning_cach": 32, "189": 32, "fit_loop": 32, "281": 32, "possibleuserwarn": 32, "interv": [32, 72, 113], "log_every_n_step": 32, "rank_zero_warn": 32, "0it": 32, "49it": 32, "v_num": 32, "68it": 32, "74it": 32, "77it": 32, "94it": 32, "02it": 32, "01it": 32, "00it": 32, "19it": 32, "18it": 32, "checkpoint_connector": 32, "ckpt_path": 32, "silenc": 32, "restor": [32, 67], "state": [32, 121, 122, 123, 124], "lightning_log": 32, "version_0": 32, "ckpt": 32, "75it": 32, "67it": 32, "10it": 32, "84it": 32, "81it": 32, "2534722089767456": 32, "9935145378112793": 32, "723": [32, 33], "207": [32, 33], "plot_train_in_pure_pytorch_and_pytorch_lightn": [32, 33], "568": 33, "auto_examples_model_build": 33, "162": 33, "992": 33, "501": 33, "scientif": 34, "softwar": [34, 136], "canon": 34, "hbm23730": 34, "robin": [34, 141], "tibor": [34, 141], "jost": 34, "tobia": 34, "dominiqu": 34, "josef": 34, "martin": [34, 141], "katharina": 34, "michael": 34, "frank": 34, "wolfram": 34, "tonio": 34, "issn": 34, "1097": 34, "0193": 34, "url": 34, "keyword": [34, 35, 73, 105, 107, 108, 109, 110, 111, 117], "electroencephalographi": 34, "interpret": [34, 39, 56, 107, 108, 120], "built": [34, 136], "zenodo": 34, "ask": [34, 69], "3389": 34, "fnin": 34, "2013": 34, "00267": 34, "luessi": 34, "larson": 34, "eric": 34, "deni": [34, 141], "strohmeier": 34, "brodbeck": 34, "christian": 34, "goj": 34, "roman": 34, "ja": 34, "mainak": 34, "brook": 34, "teon": 34, "parkkonen": 34, "lauri": 34, "h\u00e4m\u00e4l\u00e4inen": 34, "matti": 34, "volum": 34, "267": 34, "frontiersin": 34, "1662": 34, "453x": 34, "appropri": [34, 139], "kwarg": [35, 67, 91, 109, 120, 126, 127, 128], "max_freq": 36, "band": [36, 54, 107, 117, 141], "desir": [36, 46, 54, 63, 69, 105, 111], "suggest": [36, 39, 43, 46, 47, 48, 49, 51, 54, 56, 60, 63, 80, 112, 113], "distanc": [36, 54, 69], "admiss": 36, "1hz": 36, "nyquist": 36, "cheng": [36, 43, 51, 54, 60, 65], "goh": [36, 43, 51, 54, 60, 65], "dogrusoz": [36, 43, 51, 54, 60, 65], "tuzel": [36, 43, 51, 54, 60, 65], "azemi": [36, 43, 51, 54, 60, 65], "awar": [36, 43, 51, 54, 60, 65], "biosign": [36, 43, 51, 54, 60, 65], "04871": [36, 43, 51, 54, 60, 65], "mohsenvand": [36, 43, 51, 54, 60, 65], "izadi": [36, 43, 51, 54, 60, 65], "mae": [36, 43, 51, 54, 60, 65], "electroencephalogram": [36, 43, 51, 54, 60, 65], "health": [36, 43, 51, 54, 60, 65], "238": [36, 43, 51, 54, 60, 65], "253": [36, 43, 51, 54, 60, 65], "pmlr": [36, 43, 51, 54, 60, 65], "get_augmentation_param": [36, 37, 38, 39, 41, 42, 43, 45, 46, 51, 53, 141], "freqs_to_notch": [36, 54], "greater": [36, 54], "static": [36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 50, 51, 52, 68], "flat": [37, 55, 112, 113, 114], "cmsaugment": [37, 38, 55, 57], "polici": [37, 38, 55, 57], "proba_drop": 37, "eras": 37, "saeed": [37, 38, 55, 57], "grangier": [37, 38, 55, 57], "pietquin": [37, 38, 55, 57], "zeghidour": [37, 38, 55, 57], "heterogen": [37, 38, 55, 57], "differenti": [37, 38, 55, 57], "reorder": [37, 38, 55, 57], "2010": [37, 38, 55, 57, 72], "13694": [37, 38, 55, 57], "p_shuffl": [38, 57], "permut": [38, 39, 45, 56, 57, 62], "carri": [38, 57, 69], "ordered_ch_nam": [39, 47, 48, 49], "invert": 39, "side": [39, 107], "nomenclatur": 39, "deiss": [39, 56], "biswal": [39, 56], "jin": [39, 56], "sun": [39, 56], "westov": [39, 56], "hamlet": [39, 56], "co": [39, 56], "techniqu": [39, 56, 107, 111], "1803": [39, 56, 100], "09702": [39, 56], "accord": [39, 56, 111], "channel_indep": [41, 59], "ft": [41, 59, 83], "surrog": [41, 59], "pertub": [41, 59], "uniformli": [41, 45, 46, 47, 48, 49, 59, 121], "perturb": [41, 59], "schwabed": [41, 59], "snyder": [41, 59], "cakmak": [41, 59], "nemati": [41, 59], "clifford": [41, 59], "address": [41, 59], "imbal": [41, 59, 74], "noisi": [41, 59], "fourier": [41, 59], "1806": [41, 59], "08675": [41, 59], "magnitud": [41, 51], "cliffordlab": [41, 59], "tf": [41, 59], "draw": [41, 59], "maximum": [42, 46, 47, 48, 49, 83, 112], "absolut": 42, "delta_freq": [42, 58], "amplitud": [42, 58, 112, 113, 141], "white": [43, 60], "deviat": [43, 60], "wang": [43, 60], "zhong": [43, 60], "jiang": [43, 60], "liu": [43, 60, 86], "emot": [43, 60], "recognit": [43, 60], "confer": [43, 45, 46, 47, 48, 49, 60, 62, 63], "multimedia": [43, 60], "93": [43, 60], "beta_per_sampl": 45, "drawn": 45, "beta": 45, "hongyi": [45, 62, 130], "zhang": [45, 62, 90, 130], "moustapha": [45, 62, 130], "ciss": [45, 62, 130], "yann": [45, 62, 130], "dauphin": [45, 62, 130], "david": [45, 62, 130], "lopez": [45, 62, 130], "paz": [45, 62, 130], "empir": [45, 62, 100, 130], "iclr": [45, 62], "onlin": [45, 62, 84, 88, 89, 95, 96, 130, 135], "1710": [45, 62, 130], "09412": [45, 62, 130], "facebookresearch": [45, 62, 130], "cifar10": [45, 62, 130], "interpol": [45, 46, 47, 48, 49, 62, 63], "lam": [45, 62], "idx_perm": [45, 62], "sensors_positions_matrix": [46, 63], "max_degre": [46, 47, 48, 49], "spherical_splin": [46, 47, 48, 49, 63], "angl": [46, 47, 48, 49, 63, 135], "3d": [46, 63, 141], "cartesian": [46, 63], "coordin": [46, 63], "ten_twenty_montag": [46, 63], "make_standard_montag": [46, 63], "standard_1020": [46, 63], "get_posit": [46, 63], "ch_po": [46, 63], "spheric": [46, 47, 48, 49, 63], "spline": [46, 47, 48, 49, 63], "scipi": [46, 47, 48, 49, 63, 67, 107, 110, 120], "rbf": [46, 47, 48, 49, 63], "quadrat": [46, 47, 48, 49, 63], "krell": [46, 47, 48, 49, 63], "kim": [46, 47, 48, 49, 63, 90], "electroencephalograph": [46, 47, 48, 49, 63], "39th": [46, 47, 48, 49, 63], "annual": [46, 47, 48, 49, 63], "medicin": [46, 47, 48, 49, 63], "biologi": [46, 47, 48, 49, 63], "societi": [46, 47, 48, 49, 63], "embc": [46, 47, 48, 49, 63], "471": [46, 47, 48, 49, 63], "474": [46, 47, 48, 49, 63], "element": [46, 51, 63], "montag": [47, 48, 49, 69], "flip": [50, 52, 64, 66], "sign": [50, 64], "smoothli": [51, 65], "Will": 51, "mask_start_per_sampl": [51, 65], "resp": 53, "uniform": 53, "instati": 53, "arg": [67, 91, 120], "iterator_train__drop_last": [67, 120, 141], "uninstanti": [67, 120], "get_loss": 67, "classes_": 67, "attributeerror": 67, "sgd": [67, 120], "outcom": [67, 120], "keyboard": [67, 120], "interrupt": [67, 120], "mini": [67, 120], "iterator_train__batch_s": [67, 120], "iterator_test__batch_s": [67, 120], "iterator_valid": [67, 120], "incom": [67, 120], "__len__": [67, 120], "deal": [67, 120], "box": [67, 120], "dataset__": [67, 120], "initialz": [67, 120], "dataset_train": [67, 120, 126, 127, 128], "dataset_valid": [67, 120, 126, 127, 128], "get_default_callback": [67, 120], "resolv": [67, 120], "suffix": [67, 120], "epochscoring_1": [67, 120], "print_log": [67, 120], "set_param": [67, 120], "callbacks__print_log__keys_ignor": [67, 120], "predict_nonlinear": [67, 120], "pickleabl": [67, 120], "accept": [67, 80, 102, 113, 120], "predict_proba": [67, 120, 141], "whatev": [67, 120], "anywher": [67, 120], "notabl": [67, 120], "unaffect": [67, 120], "warm_start": [67, 120], "cold": [67, 120], "warm": [67, 120], "summari": [67, 91, 101, 120], "regardless": [67, 120], "acceler": [67, 120], "sent": [67, 120], "unmodifi": [67, 120], "compil": [67, 120], "volta": [67, 120], "amper": [67, 120], "dunder": [67, 120], "notat": [67, 120], "compile__dynam": [67, 120], "dynam": [67, 120], "use_cach": [67, 120, 126, 127], "overrid": [67, 68, 120], "cach": [67, 120], "batchscor": [67, 120], "certain": [67, 120], "situat": [67, 120], "tight": [67, 120], "cumbersom": [67, 120], "global": [67, 120, 128], "honor": [67, 120], "prefer": [67, 120], "model_evalu": [67, 120], "prefixes_": [67, 120], "special": [67, 120], "neuralnet": [67, 120], "optimizer__momentum": [67, 120], "popul": [67, 120, 141], "cuda_dependent_attributes_": [67, 120], "whose": [67, 80, 113, 120], "unpickl": [67, 120], "expand": [67, 103, 120], "initialized_": [67, 120], "criterion_": [67, 120], "callbacks_": [67, 120], "_modul": [67, 120], "_criteria": [67, 120], "_optim": [67, 120], "get_iter": [67, 120], "drop_index": [67, 120], "iterator_test": [67, 120], "spars": [67, 120], "csr": [67, 120], "y_proba": [67, 120], "trial_predict": [67, 120, 131], "n_trial": [67, 78, 120, 131], "n_predict": [67, 120, 125, 129, 131], "trial_label": [67, 120, 131], "n_target": [67, 120, 131], "bbci": 68, "de": 68, "desc_4": 68, "pdf": 68, "force_upd": 68, "mne_datasets_": 68, "_path": 68, "forc": 68, "subj": [69, 72], "250hz": 69, "iia": 69, "r382d436f3223": 69, "cue": [69, 72], "imag": [69, 88, 89], "inat": 69, "movement": [69, 72], "compris": 69, "288": [69, 141], "sit": 69, "comfort": 69, "armchair": 69, "front": 69, "screen": 69, "fixat": 69, "acoust": 69, "tone": 69, "arrow": [69, 72], "down": [69, 97, 103, 110, 133], "foot": 69, "prompt": [69, 136], "disappear": 69, "twenti": 69, "agcl": 69, "inter": [69, 72], "monopolarli": 69, "mastoid": [69, 111], "amplifi": 69, "\u03bcv": 69, "notch": 69, "suppress": [69, 107], "raw_preproc_kwarg": 70, "window_kwarg": 70, "window_preproc_kwarg": 70, "old": [70, 118, 141], "datapoint": 70, "gamma": 72, "discrib": 72, "500hz": 72, "r5e478952091a": 72, "cover": [72, 135], "cortex": 72, "healthi": [72, 74], "963": 72, "divid": [72, 78, 79, 80, 112], "rest": [72, 111], "approx": 72, "880": 72, "except": [72, 74], "acquir": 72, "lab": 72, "invas": 72, "2008": [72, 85], "darva": 72, "direct": [72, 136], "grai": 72, "back": 72, "had": [72, 88, 89, 91], "clench": 72, "toe": 72, "downward": 72, "tap": 72, "leftward": 72, "rightward": 72, "relax": 72, "upward": 72, "littl": 72, "proxim": 72, "muscular": 72, "volv": 72, "pace": 72, "maintain": 72, "pseudo": 72, "ideal": 72, "260": 72, "stimuli": 72, "bci2000": 72, "schalk": 72, "2004": 72, "approv": 72, "ethic": 72, "committe": 72, "freiburg": 72, "dataset_kwarg": 73, "load_eeg_onli": 74, "content": 74, "edfx": 74, "overnight": 74, "78": 74, "auto_tutori": 74, "plot_sleep": 74, "eog": [74, 103], "emg": 74, "temperatur": 74, "respir": 74, "3h": 74, "parent": [75, 76], "ascend": [75, 76], "preserv": [75, 76], "physician": [75, 76], "c_tuab": 76, "i_window_in_tri": [77, 122, 132], "i_start_in_tri": [77, 122], "i_stop_in_tri": [77, 122, 132], "applic": [77, 107], "compativl": [79, 80], "accepted_bads_ratio": [80, 113], "onset": [80, 113], "fall": [80, 112, 113], "outsid": [80, 112, 113], "proport": [80, 88, 89, 113], "withinconsist": 80, "exceed": [80, 113], "pathlib": 81, "concat_dataset": [81, 82], "conv_block_n_filt": 83, "conv_block_kernel_length_1": 83, "conv_block_kernel_length_2": 83, "conv_block_pool_size_1": 83, "conv_block_pool_size_2": 83, "conv_block_depth_mult": 83, "conv_block_dropout": 83, "att_head_dim": 83, "att_num_head": 83, "att_dropout": 83, "tcn_depth": 83, "tcn_kernel_s": 83, "tcn_n_filter": 83, "tcn_dropout": 83, "tcn_activ": 83, "elu": [83, 84, 88, 89, 94], "max_norm_const": 83, "input_size_": [83, 97, 98, 99, 103], "offici": [83, 139], "tensorflow": 83, "secod": 83, "block": [83, 88, 89, 90, 100, 103], "denot": 83, "kc": 83, "p2": 83, "depthwis": [83, 88, 89], "pc": 83, "head": [83, 86, 99, 122], "dh": 83, "1_": 83, "pa": 83, "residu": [83, 94], "kt": 83, "slid": 83, "feed": [83, 99], "logit": 83, "contrari": 83, "constraint": 83, "impos": 83, "altaheri": 83, "muhammad": 83, "alsulaiman": 83, "physic": 83, "industri": 83, "informat": 83, "tii": 83, "3197419": 83, "overridden": [83, 86, 90], "subclass": [83, 86, 90], "recip": [83, 86, 90], "care": [83, 86, 90], "regist": [83, 86, 90], "hook": [83, 86, 90], "latter": [83, 86, 90], "silent": [83, 86, 90], "first_conv_nonlin": 84, "first_pool_nonlin": 84, "later_conv_nonlin": 84, "later_pool_nonlin": 84, "supratak": 85, "bidirect": 85, "supratak2017": 85, "dong": 85, "wu": 85, "guo": 85, "1998": 85, "att_depth": 86, "att_head": 86, "att_drop_prob": 86, "final_fc_length": 86, "2440": 86, "return_featur": 86, "conform": 86, "methodolog": 86, "song2022": 86, "conformercod": 86, "reciev": 86, "tradit": 86, "n_timestep": 86, "compos": 86, "patchembed": 86, "transformerencod": 86, "classificationhead": 86, "sement": 86, "recombin": 86, "song": [86, 141], "zheng": 86, "q": 86, "gao": 86, "710": 86, "ieeexplor": 86, "9991178": 86, "eeyhsong": 86, "get_fc_siz": 86, "in_channel": [87, 88, 89, 90], "itnet": [87, 141], "incept": [87, 88, 89, 90, 141], "salami": 87, "salami2022": 87, "abbassalami": 87, "guarante": [87, 88, 89, 90, 92, 93], "reimplement": [87, 88, 89, 90, 92, 93], "andreu": 87, "perez": 87, "gillmeist": 87, "3161489": 87, "scales_samples_": [88, 89], "125": [88, 89, 98], "n_filter": [88, 89, 90, 100], "depth_multipli": [88, 89], "pooling_s": [88, 89], "erp": [88, 89], "deperec": 88, "AND": 88, "WILL": 88, "BE": 88, "IN": 88, "THE": 88, "OF": 88, "santamaria2020": [88, 89], "inceptionnet": [88, 89, 90], "largest": [88, 89], "associ": [88, 89], "winner": [88, 89], "beetl": [88, 89], "neurip": [88, 89], "r15fdf33b022f": 88, "santamaria": [88, 89], "vazquez": [88, 89], "martinez": [88, 89], "cagig": [88, 89], "vaquerizo": [88, 89], "villar": [88, 89], "hornero": [88, 89], "assist": [88, 89], "3048106": [88, 89], "grifcc": [88, 89], "r37c4761d4e92": 89, "sampel": 89, "n_conv": 90, "kernel_unit_": 90, "input_window_": 90, "vision": 90, "wide": 90, "branch": 90, "1d": 90, "bose": 90, "eskandarian": 90, "accur": 90, "robust": 90, "046014": 90, "mixin": 91, "output_shap": [91, 104], "get_torchinfo_statist": 91, "col_nam": 91, "input_s": 91, "num_param": 91, "row_set": 91, "modelstatist": 91, "load_state_dict": 91, "state_dict": 91, "intermedi": 91, "bug": 91, "second_kernel_s": 92, "third_kernel_s": [92, 93], "eegnet": [92, 93], "lawhern": [92, 93], "solon": [92, 93], "waytowich": [92, 93], "gordon": [92, 93], "hung": [92, 93], "lanc": [92, 93], "1611": [92, 93], "08024": [92, 93], "f2": 93, "kernel_length": 93, "v4": 93, "eegnet4": 93, "final_pool_length": [94, 141], "n_first_filt": 94, "n_layers_per_block": 94, "first_filter_length": 94, "batch_norm_epsilon": 94, "conv_weight_init_fn": 94, "hybrid": 95, "safe_log": 96, "n_conv_chan": 97, "n_group": 97, "max_pool_s": 97, "blanco": 97, "blanco2020": 97, "seven": 97, "group": 97, "fernandez": 97, "rivero": 97, "pazo": 97, "soft": 97, "4067": 97, "4079": 97, "1007": 97, "s00500": 97, "04174": 97, "time_conv_size_": [98, 103], "max_pool_size_": 98, "pad_size_": 98, "half": [98, 107], "n_tce": 99, "d_model": 99, "d_ff": 99, "n_attn_head": 99, "after_reduced_cnn_s": 99, "multi": 99, "resolut": 99, "mrcnn": 99, "recalibr": 99, "encod": [99, 103], "tce": 99, "mechan": [99, 141], "captur": 99, "among": 99, "100hz": 99, "125hz": 99, "shh": 99, "unintend": 99, "clone": [99, 141], "positionwisefeedforward": 99, "emadeldeen24": 99, "attnsleep": 99, "sleepdata": 99, "n_block": 100, "n_in_chan": 100, "bai": 100, "bai2018": 100, "locuslab": 100, "kolter": 100, "koltun": 100, "recurr": 100, "01271": 100, "s_growth": 101, "t_filter": 101, "temp_lay": 101, "spat_lay": 101, "temp_span": 101, "thinker": [101, 141], "invari": [101, 141], "densenet": 101, "kosta": 101, "growth": 101, "densefilt": 101, "percentag": 101, "temp_len": 101, "1500": [101, 122], "spoclab": 101, "ca": 101, "thinkerinvari": 101, "rudzicz": 101, "across": [101, 111, 121, 125], "peopl": 101, "eng": 101, "056008": 101, "1741": 101, "2552": 101, "abb7a7": 101, "stager": 102, "middl": 102, "seq_len": 102, "n_time_filt": 103, "complexity_factor": 103, "0703125": 103, "ensure_odd_conv_s": 103, "autoencod": 103, "shrink": 103, "maxpool": 103, "fewer": [103, 107], "2x2": 103, "halv": 103, "ne": 103, "subsequ": 105, "time_as_index": 105, "first_samp": 105, "last_samp": 105, "exce": 105, "exclud": [105, 107, 108, 111], "on_miss": [106, 112, 113], "emit": 106, "evok": [106, 107, 108, 111], "reorder_channel": 106, "drop_channel": 106, "filter_length": 107, "l_trans_bandwidth": 107, "h_trans_bandwidth": 107, "iir_param": 107, "fir_window": 107, "fir_design": 107, "skip_by_annot": 107, "bad_acq_skip": 107, "reflect_limit": [107, 110], "iir": 107, "meg0111": [107, 108], "meg2623": [107, 108], "reciproc": 107, "shortest": 107, "firwin2": 107, "5500m": 107, "doubl": 107, "cupi": [107, 110], "filtfilt": 107, "4th": 107, "butterworth": 107, "construct_iir_filt": 107, "symmetr": 107, "construct": [107, 111], "delai": [107, 141], "twice": 107, "minimum": 107, "weaker": 107, "lfilter": 107, "hann": 107, "blackman": 107, "concatenate_raw": 107, "acquisit": 107, "reflect": [107, 110], "mirror": [107, 110], "create_filt": 107, "savgol_filt": 107, "notch_filt": 107, "filter_data": 107, "apply_funct": [109, 119], "raw_or_epoch": 109, "npad": 110, "boxcar": 110, "joint": 111, "virtual": 111, "infin": 111, "footcit": 111, "yao2001": 111, "apply_proj": 111, "seeg": 111, "projector": 111, "set_bipolar_refer": 111, "bipolar": 111, "m1": 111, "m2": 111, "request": [111, 136], "reject": [112, 113, 114], "concatdataset": 112, "ie": 112, "winddow_size_sampl": 112, "exactli": 113, "inconsist": 113, "demeanin": 115, "exponent": [115, 116], "m_t": [115, 116], "mathrm": [115, 116], "factornew": [115, 116], "cdot": [115, 116], "x_t": [115, 116], "m_": [115, 116], "deman": 115, "_t": [115, 116], "demean": 115, "Then": 116, "v_t": 116, "v_": 116, "sqrt": 116, "stabil": 116, "frequency_band": 117, "drop_original_sign": 117, "order_by_frequency_band": 117, "mne_filter_kwarg": 117, "unfilt": 117, "oder": 117, "cz_4": 117, "o1_4": 117, "cz_8": 117, "o1_8": 117, "fileexistserror": 118, "n_sequenc": [121, 124], "inspir": 121, "perslev2021": 121, "recordingsampl": [121, 123, 124], "randomst": [121, 122, 123, 124], "sample_class": 121, "rec_ind": [121, 122], "multiindex": 122, "sample_record": 122, "sample_window": 122, "tau_max": 123, "banville2020": 123, "file_id": 124, "ensembl": [124, 141], "loss_funct": [125, 129], "target_extractor": [126, 127, 128], "on_epoch_end": [126, 127, 128], "on_batch_end": 127, "recomput": 128, "slightli": 128, "scorer": 128, "signatur": 128, "scalar": 128, "wors": 128, "tri": 128, "timeseri": 129, "window_len": 129, "mixup": [130, 141], "duplic": [132, 141], "atleast": 132, "2darrai": 132, "preds_per_tri": 132, "lack": 133, "pythonhashse": 133, "forum": 133, "ai": 133, "solv": [133, 141], "31628": 133, "use_deterministic_algorithm": 133, "linearsegmentedcolormap": 135, "textcolor": 135, "vmin": 135, "vmax": 135, "fontweight": 135, "rotate_row_label": 135, "rotate_col_label": 135, "with_f1_scor": 135, "norm_ax": 135, "rotate_precis": 135, "class_names_fonts": 135, "font": 135, "bold": 135, "heavi": 135, "ultrabold": 135, "ultralight": 135, "hard": 136, "happen": [136, 141], "mistak": 136, "corrupt": 136, "irregular": 136, "chat": 136, "bear": 136, "tracker": 136, "sure": 136, "ve": 136, "shell": 136, "__version__": [136, 140], "latest": [136, 139, 140], "replic": 136, "link": [136, 141], "anonym": 136, "portion": 136, "persist": 136, "smallest": 136, "past": 136, "backtick": 136, "contributor": [136, 140], "snippet": 136, "toolbox": 137, "electrophysiolog": 137, "fetcher": 137, "neuroscientist": 137, "who": 137, "neurophysiolog": 137, "pypi": 138, "repositori": 138, "beginn": 138, "advanc": 138, "familiar": 138, "instruct": 138, "contribut": [138, 140], "braincod": 139, "command": [139, 140], "nvidia": 139, "driver": 139, "cuda_path": 139, "troubleshoot": 139, "thing": 140, "enter": 140, "git": 140, "cd": 140, "repo": 140, "zipbal": 140, "master": 140, "egg": 140, "edit": 140, "verifi": 140, "guidelin": 140, "whats_new": 141, "incompat": 141, "einop": 141, "466": 141, "467": 141, "marco": 141, "zamboni": 141, "468": 141, "refactor": 141, "470": 141, "conda": 141, "yml": 141, "ci": 141, "479": 141, "action": 141, "472": 141, "489": 141, "485": 141, "490": 141, "487": 141, "473": 141, "488": 141, "495": 141, "sylvain": 141, "chevalli": 141, "494": 141, "bruna": 141, "lope": 141, "491": 141, "enforc": 141, "fuction": 141, "497": 141, "env": 141, "505": 141, "friendli": 141, "\u015bliwowski": 141, "shallowfbcsp": 141, "503": 141, "sampler": 141, "504": 141, "th\u00e9o": 141, "dropchannel": 141, "seteegrefer": 141, "514": 141, "517": 141, "523": 141, "remi": 141, "delboui": 141, "524": 141, "535": 141, "529": 141, "528": 141, "520": 141, "539": 141, "451": 141, "465": 141, "397": 141, "flag": 141, "513": 141, "428": 141, "429": 141, "431": 141, "mohammad": 141, "javad": 141, "oskar": 141, "st\u00f8rmer": 141, "417": 141, "454": 141, "yonghao": 141, "461": 141, "e231": 141, "whitespac": 141, "untrac": 141, "flake8": 141, "transposit": 141, "_frequency_shift": 141, "446": 141, "matthieu": 141, "terri": 141, "390": 141, "ghaith": 141, "bouallegu": 141, "371": 141, "389": 141, "exemplifi": 141, "349": 141, "unifi": 141, "sheme": 141, "378": 141, "wimpff": 141, "391": 141, "406": 141, "recoding_id": 141, "402": 141, "ft_surrog": 141, "409": 141, "get_param": 141, "388": 141, "alex": 141, "413": 141, "zscore": 141, "mnepreproc": 141, "numpypreproc": 141, "415": 141, "411": 141, "263": 141, "ann": 141, "kathrin": 141, "kiessner": 141, "henrik": 141, "bonsmann": 141, "vytauta": 141, "jankauska": 141, "274": 141, "254": 141, "thoma": 141, "287": 141, "aggregate_proba": 141, "294": 141, "312": 141, "balancedsequencesampl": 141, "295": 141, "277": 141, "318": 141, "261": 141, "cloneabl": 141, "347": 141, "353": 141, "333": 141, "365": 141, "367": 141, "304": 141, "mismatch": 141, "327": 141, "propag": 141, "269": 141, "favour": 141, "292": 141, "199": 141, "198": 141, "178": 141, "138": 141, "147": 141, "realiz": 141, "filterbank": 141, "158": 141, "159": 141, "timecrop": 141, "164": 141, "185": 141, "282": 141, "341": 141, "accident": 141, "167": 141, "compute_amplitude_gradi": 141, "4d": 141, "166": 141, "incorrect": 141, "146": 141, "169": 141, "window_s": 141, "148": 141, "171": 141, "155": 141, "223": 141, "favor": 141}, "objects": {"": [[0, 0, 0, "-", "braindecode"]], "braindecode.augmentation": [[35, 1, 1, "", "AugmentedDataLoader"], [36, 1, 1, "", "BandstopFilter"], [37, 1, 1, "", "ChannelsDropout"], [38, 1, 1, "", "ChannelsShuffle"], [39, 1, 1, "", "ChannelsSymmetry"], [40, 1, 1, "", "Compose"], [41, 1, 1, "", "FTSurrogate"], [42, 1, 1, "", "FrequencyShift"], [43, 1, 1, "", "GaussianNoise"], [44, 1, 1, "", "IdentityTransform"], [45, 1, 1, "", "Mixup"], [46, 1, 1, "", "SensorsRotation"], [47, 1, 1, "", "SensorsXRotation"], [48, 1, 1, "", "SensorsYRotation"], [49, 1, 1, "", "SensorsZRotation"], [50, 1, 1, "", "SignFlip"], [51, 1, 1, "", "SmoothTimeMask"], [52, 1, 1, "", "TimeReverse"], [53, 1, 1, "", "Transform"]], "braindecode.augmentation.BandstopFilter": [[36, 2, 1, "", "get_augmentation_params"], [36, 2, 1, "", "operation"]], "braindecode.augmentation.ChannelsDropout": [[37, 2, 1, "", "get_augmentation_params"], [37, 2, 1, "", "operation"]], "braindecode.augmentation.ChannelsShuffle": [[38, 2, 1, "", "get_augmentation_params"], [38, 2, 1, "", "operation"]], "braindecode.augmentation.ChannelsSymmetry": [[39, 2, 1, "", "get_augmentation_params"], [39, 2, 1, "", "operation"]], "braindecode.augmentation.Compose": [[40, 2, 1, "", "forward"]], "braindecode.augmentation.FTSurrogate": [[41, 2, 1, "", "get_augmentation_params"], [41, 2, 1, "", "operation"]], "braindecode.augmentation.FrequencyShift": [[42, 2, 1, "", "get_augmentation_params"], [42, 2, 1, "", "operation"]], "braindecode.augmentation.GaussianNoise": [[43, 2, 1, "", "get_augmentation_params"], [43, 2, 1, "", "operation"]], "braindecode.augmentation.IdentityTransform": [[44, 2, 1, "", "operation"]], "braindecode.augmentation.Mixup": [[45, 2, 1, "", "get_augmentation_params"], [45, 2, 1, "", "operation"]], "braindecode.augmentation.SensorsRotation": [[46, 2, 1, "", "get_augmentation_params"], [46, 2, 1, "", "operation"]], "braindecode.augmentation.SignFlip": [[50, 2, 1, "", "operation"]], "braindecode.augmentation.SmoothTimeMask": [[51, 2, 1, "", "get_augmentation_params"], [51, 2, 1, "", "operation"]], "braindecode.augmentation.TimeReverse": [[52, 2, 1, "", "operation"]], "braindecode.augmentation.Transform": [[53, 2, 1, "", "forward"], [53, 2, 1, "", "get_augmentation_params"]], "braindecode.augmentation.functional": [[54, 3, 1, "", "bandstop_filter"], [55, 3, 1, "", "channels_dropout"], [56, 3, 1, "", "channels_permute"], [57, 3, 1, "", "channels_shuffle"], [58, 3, 1, "", "frequency_shift"], [59, 3, 1, "", "ft_surrogate"], [60, 3, 1, "", "gaussian_noise"], [61, 3, 1, "", "identity"], [62, 3, 1, "", "mixup"], [63, 3, 1, "", "sensors_rotation"], [64, 3, 1, "", "sign_flip"], [65, 3, 1, "", "smooth_time_mask"], [66, 3, 1, "", "time_reverse"]], "braindecode.classifier": [[67, 1, 1, "", "EEGClassifier"]], "braindecode.classifier.EEGClassifier": [[67, 4, 1, "", "_criteria"], [67, 4, 1, "", "_modules"], [67, 4, 1, "", "_optimizers"], [67, 4, 1, "", "callbacks_"], [67, 4, 1, "", "classes_"], [67, 4, 1, "", "criterion_"], [67, 4, 1, "", "cuda_dependent_attributes_"], [67, 2, 1, "", "get_iterator"], [67, 2, 1, "", "get_loss"], [67, 4, 1, "", "initialized_"], [67, 4, 1, "", "module_"], [67, 2, 1, "", "predict"], [67, 2, 1, "", "predict_proba"], [67, 2, 1, "", "predict_trials"], [67, 4, 1, "", "prefixes_"]], "braindecode.datasets": [[68, 1, 1, "", "BCICompetitionIVDataset4"], [69, 1, 1, "", "BNCI2014001"], [70, 1, 1, "", "BaseConcatDataset"], [71, 1, 1, "", "BaseDataset"], [72, 1, 1, "", "HGD"], [73, 1, 1, "", "MOABBDataset"], [74, 1, 1, "", "SleepPhysionet"], [75, 1, 1, "", "TUH"], [76, 1, 1, "", "TUHAbnormal"], [77, 1, 1, "", "WindowsDataset"], [78, 3, 1, "", "create_from_X_y"], [79, 3, 1, "", "create_from_mne_epochs"], [80, 3, 1, "", "create_from_mne_raw"]], "braindecode.datasets.BCICompetitionIVDataset4": [[68, 2, 1, "", "download"]], "braindecode.datasets.BaseConcatDataset": [[70, 2, 1, "", "get_metadata"], [70, 2, 1, "", "save"], [70, 2, 1, "", "set_description"], [70, 2, 1, "", "split"]], "braindecode.datasets.BaseDataset": [[71, 2, 1, "", "set_description"]], "braindecode.datasets.WindowsDataset": [[77, 2, 1, "", "set_description"]], "braindecode.datautil": [[81, 3, 1, "", "load_concat_dataset"], [82, 3, 1, "", "save_concat_dataset"]], "braindecode.models": [[83, 1, 1, "", "ATCNet"], [84, 1, 1, "", "Deep4Net"], [85, 1, 1, "", "DeepSleepNet"], [86, 1, 1, "", "EEGConformer"], [87, 1, 1, "", "EEGITNet"], [88, 1, 1, "", "EEGInception"], [89, 1, 1, "", "EEGInceptionERP"], [90, 1, 1, "", "EEGInceptionMI"], [91, 1, 1, "", "EEGModuleMixin"], [92, 1, 1, "", "EEGNetv1"], [93, 1, 1, "", "EEGNetv4"], [94, 1, 1, "", "EEGResNet"], [95, 1, 1, "", "HybridNet"], [96, 1, 1, "", "ShallowFBCSPNet"], [97, 1, 1, "", "SleepStagerBlanco2020"], [98, 1, 1, "", "SleepStagerChambon2018"], [99, 1, 1, "", "SleepStagerEldele2021"], [100, 1, 1, "", "TCN"], [101, 1, 1, "", "TIDNet"], [102, 1, 1, "", "TimeDistributed"], [103, 1, 1, "", "USleep"], [104, 3, 1, "", "get_output_shape"]], "braindecode.models.ATCNet": [[83, 2, 1, "", "forward"]], "braindecode.models.DeepSleepNet": [[85, 2, 1, "", "forward"]], "braindecode.models.EEGConformer": [[86, 2, 1, "", "forward"], [86, 2, 1, "", "get_fc_size"]], "braindecode.models.EEGInceptionMI": [[90, 2, 1, "", "forward"]], "braindecode.models.EEGModuleMixin": [[91, 2, 1, "", "get_output_shape"], [91, 2, 1, "", "get_torchinfo_statistics"], [91, 2, 1, "", "load_state_dict"], [91, 2, 1, "", "to_dense_prediction_model"]], "braindecode.models.HybridNet": [[95, 2, 1, "", "forward"]], "braindecode.models.SleepStagerBlanco2020": [[97, 2, 1, "", "forward"]], "braindecode.models.SleepStagerChambon2018": [[98, 2, 1, "", "forward"]], "braindecode.models.SleepStagerEldele2021": [[99, 2, 1, "", "forward"]], "braindecode.models.TCN": [[100, 2, 1, "", "forward"]], "braindecode.models.TIDNet": [[101, 2, 1, "", "forward"]], "braindecode.models.TimeDistributed": [[102, 2, 1, "", "forward"]], "braindecode.models.USleep": [[103, 2, 1, "", "forward"]], "braindecode.preprocessing": [[105, 1, 1, "", "Crop"], [106, 1, 1, "", "DropChannels"], [107, 1, 1, "", "Filter"], [108, 1, 1, "", "Pick"], [109, 1, 1, "", "Preprocessor"], [110, 1, 1, "", "Resample"], [111, 1, 1, "", "SetEEGReference"], [112, 3, 1, "", "create_fixed_length_windows"], [113, 3, 1, "", "create_windows_from_events"], [114, 3, 1, "", "create_windows_from_target_channels"], [115, 3, 1, "", "exponential_moving_demean"], [116, 3, 1, "", "exponential_moving_standardize"], [117, 3, 1, "", "filterbank"], [118, 3, 1, "", "preprocess"], [119, 3, 1, "", "scale"]], "braindecode.preprocessing.Preprocessor": [[109, 2, 1, "", "apply"]], "braindecode.regressor": [[120, 1, 1, "", "EEGRegressor"]], "braindecode.regressor.EEGRegressor": [[120, 4, 1, "", "_criteria"], [120, 4, 1, "", "_modules"], [120, 4, 1, "", "_optimizers"], [120, 4, 1, "", "callbacks_"], [120, 4, 1, "", "criterion_"], [120, 4, 1, "", "cuda_dependent_attributes_"], [120, 2, 1, "", "fit"], [120, 2, 1, "", "get_iterator"], [120, 4, 1, "", "initialized_"], [120, 4, 1, "", "module_"], [120, 2, 1, "", "predict_proba"], [120, 2, 1, "", "predict_trials"], [120, 4, 1, "", "prefixes_"]], "braindecode.samplers": [[121, 1, 1, "", "BalancedSequenceSampler"], [122, 1, 1, "", "RecordingSampler"], [123, 1, 1, "", "RelativePositioningSampler"], [124, 1, 1, "", "SequenceSampler"]], "braindecode.samplers.BalancedSequenceSampler": [[121, 2, 1, "", "sample_class"]], "braindecode.samplers.RecordingSampler": [[122, 4, 1, "", "info"], [122, 4, 1, "", "n_recordings"], [122, 2, 1, "", "sample_recording"], [122, 2, 1, "", "sample_window"]], "braindecode.samplers.RelativePositioningSampler": [[123, 2, 1, "", "presample"]], "braindecode.samplers.SequenceSampler": [[124, 4, 1, "", "file_ids"], [124, 4, 1, "", "info"]], "braindecode.training": [[125, 1, 1, "", "CroppedLoss"], [126, 1, 1, "", "CroppedTimeSeriesEpochScoring"], [127, 1, 1, "", "CroppedTrialEpochScoring"], [128, 1, 1, "", "PostEpochTrainScoring"], [129, 1, 1, "", "TimeSeriesLoss"], [130, 3, 1, "", "mixup_criterion"], [131, 3, 1, "", "predict_trials"], [132, 3, 1, "", "trial_preds_from_window_preds"]], "braindecode.training.CroppedLoss": [[125, 2, 1, "", "forward"]], "braindecode.training.CroppedTimeSeriesEpochScoring": [[126, 2, 1, "", "on_epoch_end"]], "braindecode.training.CroppedTrialEpochScoring": [[127, 2, 1, "", "on_batch_end"], [127, 2, 1, "", "on_epoch_end"]], "braindecode.training.PostEpochTrainScoring": [[128, 2, 1, "", "on_epoch_end"]], "braindecode.training.TimeSeriesLoss": [[129, 2, 1, "", "forward"]], "braindecode.util": [[133, 3, 1, "", "set_random_seeds"]], "braindecode.visualization": [[134, 3, 1, "", "compute_amplitude_gradients"], [135, 3, 1, "", "plot_confusion_matrix"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"]}, "titleterms": {"api": [0, 141], "refer": [0, 4, 5, 9, 10, 11, 26, 27, 28, 29, 30, 31, 136], "classifi": [0, 67], "regressor": [0, 120], "model": [0, 2, 3, 4, 5, 8, 9, 10, 11, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "train": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 125, 126, 127, 128, 129, 130, 131, 132], "dataset": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], "preprocess": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 30, 32, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119], "data": [0, 3, 4, 12, 15, 22, 24, 26, 27, 28, 29, 31], "util": [0, 29, 133], "sampler": [0, 5, 9, 10, 11, 121, 122, 123, 124], "augment": [0, 3, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "visual": [0, 3, 5, 29, 134, 135], "advanc": [1, 24], "neural": [1, 24, 30, 31], "network": [1, 9, 11, 24, 30, 31], "strategi": [1, 24], "finger": [2, 8], "flexion": [2, 8], "crop": [2, 27, 105], "decod": [2, 8, 27, 28], "bcic": [2, 3, 4, 8, 27], "iv": [2, 3, 4, 8, 27], "4": [2, 8], "ecog": [2, 8], "load": [2, 3, 4, 5, 8, 9, 10, 11, 14, 15, 18, 21, 24, 26, 27, 28, 29, 30, 32], "prepar": [2, 8, 28], "split": [2, 3, 4, 5, 8, 9, 10, 11, 21, 27, 28, 29, 30, 32], "test": [2, 5, 8, 29, 31, 32, 140], "creat": [2, 3, 4, 5, 8, 9, 10, 11, 12, 22, 27, 28, 29, 30, 32], "cut": [2, 8, 12, 27, 32], "comput": [2, 6, 8, 12, 13, 23, 27, 28, 30, 32, 33], "window": [2, 3, 4, 5, 8, 9, 10, 11, 12, 22, 27, 28, 29, 30, 31, 32], "plot": [2, 4, 8, 9, 10, 11, 27, 28, 30], "result": [2, 4, 5, 8, 9, 10, 11, 27, 28, 30], "2a": [3, 4, 27], "thi": [3, 4, 5, 12, 21, 26, 27, 28, 29, 30, 32], "exampl": [3, 4, 5, 7, 12, 17, 18, 19, 20, 21, 24, 26, 27, 28, 29, 30, 32, 35, 37, 40, 41, 42, 50, 51, 53, 68, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 84, 91, 96, 98, 99, 102, 103, 104, 109, 112, 113, 114, 116, 118, 119, 122, 123, 124, 125, 126, 127, 129, 133, 135], "cover": [3, 4, 5, 12, 21, 26, 27, 28, 29, 30, 32], "extract": [3, 4, 5, 9, 10, 11, 28, 29, 30], "valid": [3, 4, 5, 8, 9, 10, 11, 28, 29, 30], "defin": [3, 4, 29, 31, 32], "transform": [3, 4, 32, 53], "manipul": 3, "one": 3, "session": 3, "an": [3, 4], "eegclassifi": [3, 4, 67], "desir": [3, 4], "manual": 3, "compos": [3, 40], "set": [3, 5, 28], "level": 3, "search": 4, "best": [4, 30], "list": 4, "analys": 4, "fit": 4, "self": 5, "supervis": 5, "learn": [5, 26, 30], "eeg": [5, 12, 22, 28], "rel": 5, "posit": 5, "raw": [5, 32], "record": [5, 12], "inspect": 5, "pretext": 5, "task": 5, "perform": 5, "us": [5, 9, 10, 11, 12, 35, 37, 40, 41, 42, 50, 51, 53, 68, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 84, 91, 96, 98, 99, 102, 103, 104, 109, 112, 113, 114, 116, 118, 119, 122, 123, 124, 125, 126, 127, 129, 133, 135], "represent": 5, "sleep": [5, 9, 10, 11], "stage": [5, 9, 10, 11], "conclus": 5, "time": [6, 13, 23, 33], "appli": [7, 24], "real": [7, 24], "world": [7, 24], "physionet": [9, 10, 11], "chambon2018": 9, "sequenc": [9, 10, 11], "eldele2021": 10, "u": 11, "process": 12, "big": 12, "resourc": 12, "tuh": [12, 22, 75], "corpu": [12, 22], "tuhmock": 12, "select": 12, "combin": 12, "step": 12, "benchmark": [14, 16], "eager": 14, "lazi": 14, "organ": [15, 24], "parallel": 16, "serial": 16, "custom": 17, "save": 18, "mne": [19, 26, 34], "moabb": 20, "By": 21, "descript": 21, "inform": 21, "row": 21, "index": 21, "observ": 21, "multipl": 22, "discret": 22, "target": 22, "templ": 22, "univers": 22, "hospit": 22, "explor": [22, 26], "dataload": 22, "basic": [24, 25, 28], "build": [24, 25], "simpl": [26, 29], "epoch": 26, "find": 26, "you": [26, 30], "want": 26, "braindecod": [26, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140], "onlin": 26, "document": 26, "examin": 26, "your": [26, 29, 32, 140], "own": 26, "scikit": [26, 30], "compat": 26, "paramet": 27, "confus": [27, 28], "matrix": [27, 28], "brain": 28, "how": [29, 32, 34, 136], "tune": [29, 30], "why": [29, 30, 32], "should": [29, 32], "i": [29, 32, 136, 140], "care": [29, 32], "about": [29, 32], "evalu": [29, 31, 32], "etc": [29, 32], "option": [29, 32], "1": [29, 32, 141], "let": 29, "": [29, 141], "first": 29, "function": [29, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "2": [29, 32], "val": 29, "second": 29, "3": 29, "k": 29, "fold": 29, "cross": 29, "third": 29, "hyperparamet": [29, 30], "do": [30, 136], "need": 30, "get": [30, 136], "convolut": 31, "regress": 31, "fake": 31, "gener": 31, "cnn": 31, "choos": 31, "between": 31, "gpu": 31, "cpu": 31, "processor": 31, "pytorch": 32, "structur": 32, "offlin": 32, "pure": 32, "loop": 32, "lightn": 32, "cite": [34, 136], "other": 34, "algorithm": 34, "augmenteddataload": 35, "bandstopfilt": 36, "channelsdropout": 37, "channelsshuffl": 38, "channelssymmetri": 39, "ftsurrog": 41, "frequencyshift": 42, "gaussiannois": 43, "identitytransform": 44, "mixup": [45, 62], "sensorsrot": 46, "sensorsxrot": 47, "sensorsyrot": 48, "sensorszrot": 49, "signflip": 50, "smoothtimemask": 51, "timerevers": 52, "bandstop_filt": 54, "channels_dropout": 55, "channels_permut": 56, "channels_shuffl": 57, "frequency_shift": 58, "ft_surrog": 59, "gaussian_nois": 60, "ident": 61, "sensors_rot": 63, "sign_flip": 64, "smooth_time_mask": 65, "time_revers": 66, "bcicompetitionivdataset4": 68, "bnci2014001": 69, "summari": [69, 72], "baseconcatdataset": 70, "basedataset": 71, "hgd": 72, "moabbdataset": 73, "sleepphysionet": 74, "tuhabnorm": 76, "windowsdataset": 77, "create_from_x_i": 78, "create_from_mne_epoch": 79, "create_from_mne_raw": 80, "datautil": [81, 82], "load_concat_dataset": 81, "save_concat_dataset": 82, "atcnet": 83, "deep4net": 84, "deepsleepnet": 85, "eegconform": 86, "eegitnet": 87, "eegincept": 88, "eeginceptionerp": 89, "eeginceptionmi": 90, "eegmodulemixin": 91, "eegnetv1": 92, "eegnetv4": 93, "eegresnet": 94, "hybridnet": 95, "shallowfbcspnet": 96, "sleepstagerblanco2020": 97, "sleepstagerchambon2018": 98, "sleepstagereldele2021": 99, "tcn": 100, "tidnet": 101, "timedistribut": 102, "usleep": 103, "get_output_shap": 104, "dropchannel": 106, "filter": 107, "pick": 108, "preprocessor": 109, "resampl": 110, "seteegrefer": 111, "create_fixed_length_window": 112, "create_windows_from_ev": 113, "create_windows_from_target_channel": 114, "exponential_moving_demean": 115, "exponential_moving_standard": 116, "filterbank": 117, "scale": 119, "eegregressor": 120, "balancedsequencesampl": 121, "recordingsampl": 122, "relativepositioningsampl": 123, "sequencesampl": 124, "croppedloss": 125, "croppedtimeseriesepochscor": 126, "croppedtrialepochscor": 127, "postepochtrainscor": 128, "timeseriesloss": 129, "mixup_criterion": 130, "predict_tri": 131, "trial_preds_from_window_pr": 132, "set_random_se": 133, "compute_amplitude_gradi": 134, "plot_confusion_matrix": 135, "frequent": 136, "ask": 136, "question": 136, "faq": 136, "help": 136, "can": 136, "t": 136, "python": 136, "work": [136, 140], "still": 136, "think": 136, "found": 136, "bug": [136, 141], "what": [136, 141], "homepag": 137, "instal": [138, 139, 140], "from": [139, 140], "pypi": 139, "sourc": 140, "clone": 140, "repositori": 140, "github": 140, "new": 141, "current": 141, "0": 141, "8": 141, "dev0": 141, "enhanc": 141, "chang": 141, "7": 141, "10": 141, "2022": 141, "version": 141, "6": 141, "2021": 141, "12": 141, "06": 141, "5": 141, "07": 141, "14": 141, "author": 141}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"API Reference": [[0, "api-reference"]], "Classifier": [[0, "classifier"]], "Regressor": [[0, "regressor"]], "Models": [[0, "models"]], "Training": [[0, "training"], [2, "training"], [5, "training"], [8, "training"], [9, "training"], [10, "training"], [11, "training"], [27, "training"], [30, "training"]], "Datasets": [[0, "datasets"]], "Preprocessing": [[0, "preprocessing"], [2, "preprocessing"], [3, "preprocessing"], [4, "preprocessing"], [5, "preprocessing"], [8, "preprocessing"], [9, "preprocessing"], [10, "preprocessing"], [11, "preprocessing"], [12, "preprocessing"], [28, "preprocessing"], [30, "preprocessing"]], "Data Utils": [[0, "data-utils"]], "Samplers": [[0, "samplers"]], "Augmentation": [[0, "augmentation"]], "Utils": [[0, "utils"]], "Visualization": [[0, "visualization"]], "Advanced neural network training strategies": [[1, "advanced-neural-network-training-strategies"], [24, "advanced-neural-network-training-strategies"]], "Fingers flexion cropped decoding on BCIC IV 4 ECoG Dataset": [[2, "fingers-flexion-cropped-decoding-on-bcic-iv-4-ecog-dataset"]], "Loading and preparing the dataset": [[2, "loading-and-preparing-the-dataset"], [8, "loading-and-preparing-the-dataset"]], "Loading": [[2, "loading"], [3, "loading"], [4, "loading"], [8, "loading"], [9, "loading"], [10, "loading"], [11, "loading"], [30, "loading"]], "Split dataset into train and test": [[2, "split-dataset-into-train-and-test"], [29, "split-dataset-into-train-and-test"], [32, "split-dataset-into-train-and-test"]], "Create model": [[2, "create-model"], [3, "create-model"], [4, "create-model"], [8, "create-model"], [9, "create-model"], [10, "create-model"], [11, "create-model"], [29, "create-model"], [30, "create-model"]], "Cut Compute Windows": [[2, "cut-compute-windows"], [8, "cut-compute-windows"], [12, "cut-compute-windows"], [32, "cut-compute-windows"]], "Plot Results": [[2, "plot-results"], [8, "plot-results"], [27, "plot-results"]], "Data Augmentation on BCIC IV 2a Dataset": [[3, "data-augmentation-on-bcic-iv-2a-dataset"]], "This example covers:": [[3, "this-example-covers"], [4, "this-example-covers"], [5, "this-example-covers"], [12, "this-example-covers"], [21, "this-example-covers"], [26, "this-example-covers"], [27, "this-example-covers"], [28, "this-example-covers"], [29, "this-example-covers"], [30, "this-example-covers"], [32, "this-example-covers"]], "Loading and preprocessing the dataset": [[3, "loading-and-preprocessing-the-dataset"], [4, "loading-and-preprocessing-the-dataset"], [5, "loading-and-preprocessing-the-dataset"], [9, "loading-and-preprocessing-the-dataset"], [10, "loading-and-preprocessing-the-dataset"], [11, "loading-and-preprocessing-the-dataset"], [27, "loading-and-preprocessing-the-dataset"], [30, "loading-and-preprocessing-the-dataset"]], "Extracting windows": [[3, "extracting-windows"], [4, "extracting-windows"], [5, "extracting-windows"]], "Split dataset into train and valid": [[3, "split-dataset-into-train-and-valid"], [4, "split-dataset-into-train-and-valid"], [9, "split-dataset-into-train-and-valid"], [10, "split-dataset-into-train-and-valid"], [11, "split-dataset-into-train-and-valid"], [30, "split-dataset-into-train-and-valid"]], "Defining a Transform": [[3, "defining-a-transform"]], "Manipulating one session and visualizing the transformed data": [[3, "manipulating-one-session-and-visualizing-the-transformed-data"]], "Training a model with data augmentation": [[3, "training-a-model-with-data-augmentation"], [4, "training-a-model-with-data-augmentation"]], "Create an EEGClassifier with the desired augmentation": [[3, "create-an-eegclassifier-with-the-desired-augmentation"], [4, "create-an-eegclassifier-with-the-desired-augmentation"]], "Manually composing Transforms": [[3, "manually-composing-transforms"]], "Setting the data augmentation at the Dataset level": [[3, "setting-the-data-augmentation-at-the-dataset-level"]], "Searching the best data augmentation on BCIC IV 2a Dataset": [[4, "searching-the-best-data-augmentation-on-bcic-iv-2a-dataset"]], "Data Augmentation": [[4, null]], "Defining a list of transforms": [[4, "defining-a-list-of-transforms"]], "Analysing the best fit": [[4, "analysing-the-best-fit"]], "Plot results": [[4, "plot-results"], [9, "plot-results"], [10, "plot-results"], [11, "plot-results"]], "References": [[4, "references"], [5, "references"], [9, "references"], [10, "references"], [11, "references"], [26, "references"], [27, "references"], [28, "references"], [29, "references"], [30, "references"], [31, "references"], [136, "references"]], "Self-supervised learning on EEG with relative positioning": [[5, "self-supervised-learning-on-eeg-with-relative-positioning"]], "Self-supervised learning": [[5, null]], "Loading the raw recordings": [[5, "loading-the-raw-recordings"]], "Preprocessing windows": [[5, "preprocessing-windows"]], "Splitting dataset into train, valid and test sets": [[5, "splitting-dataset-into-train-valid-and-test-sets"]], "Creating samplers": [[5, "creating-samplers"]], "Creating the model": [[5, "creating-the-model"]], "Visualizing the results": [[5, "visualizing-the-results"]], "Inspecting pretext task performance": [[5, "inspecting-pretext-task-performance"]], "Using the learned representation for sleep staging": [[5, "using-the-learned-representation-for-sleep-staging"]], "Conclusion": [[5, "conclusion"]], "Computation times": [[6, "computation-times"], [13, "computation-times"], [23, "computation-times"], [33, "computation-times"]], "Applied examples on real-world datasets": [[7, "applied-examples-on-real-world-datasets"], [24, "applied-examples-on-real-world-datasets"]], "Fingers flexion decoding on BCIC IV 4 ECoG Dataset": [[8, "fingers-flexion-decoding-on-bcic-iv-4-ecog-dataset"]], "Split dataset into train, valid, and test": [[8, "split-dataset-into-train-valid-and-test"]], "Sleep staging on the Sleep Physionet dataset using Chambon2018 network": [[9, "sleep-staging-on-the-sleep-physionet-dataset-using-chambon2018-network"]], "Extract windows": [[9, "extract-windows"], [10, "extract-windows"], [11, "extract-windows"]], "Window preprocessing": [[9, "window-preprocessing"], [10, "window-preprocessing"]], "Create sequence samplers": [[9, "create-sequence-samplers"], [10, "create-sequence-samplers"], [11, "create-sequence-samplers"]], "Sleep staging on the Sleep Physionet dataset using Eldele2021": [[10, "sleep-staging-on-the-sleep-physionet-dataset-using-eldele2021"]], "Sleep staging on the Sleep Physionet dataset using U-Sleep network": [[11, "sleep-staging-on-the-sleep-physionet-dataset-using-u-sleep-network"]], "Process a big data EEG resource (TUH EEG Corpus)": [[12, "process-a-big-data-eeg-resource-tuh-eeg-corpus"]], "Creating the dataset using TUHMock": [[12, "creating-the-dataset-using-tuhmock"]], "Selecting recordings": [[12, "selecting-recordings"]], "Combining preprocessing steps": [[12, "combining-preprocessing-steps"]], "Benchmarking eager and lazy loading": [[14, "benchmarking-eager-and-lazy-loading"]], "Loading and organizing data": [[15, "loading-and-organizing-data"], [24, "loading-and-organizing-data"]], "Benchmarking preprocessing with parallelization and serialization": [[16, "benchmarking-preprocessing-with-parallelization-and-serialization"]], "Custom Dataset Example": [[17, "custom-dataset-example"]], "Load and save dataset example": [[18, "load-and-save-dataset-example"]], "MNE Dataset Example": [[19, "mne-dataset-example"]], "MOABB Dataset Example": [[20, "moabb-dataset-example"]], "Split Dataset Example": [[21, "split-dataset-example"]], "Loading the dataset": [[21, "loading-the-dataset"], [28, "loading-the-dataset"]], "Splitting": [[21, "splitting"]], "By description information": [[21, "by-description-information"]], "By row index": [[21, "by-row-index"]], "Observation": [[21, "observation"]], "Multiple discrete targets with the TUH EEG Corpus": [[22, "multiple-discrete-targets-with-the-tuh-eeg-corpus"]], "Creating Temple University Hospital (TUH) EEG Corpus Dataset": [[22, "creating-temple-university-hospital-tuh-eeg-corpus-dataset"]], "Exploring Data": [[22, "exploring-data"]], "Creating Windows": [[22, "creating-windows"]], "Exploring Windows": [[22, "exploring-windows"]], "DataLoader for Model Training": [[22, "dataloader-for-model-training"]], "Exploring DataLoader": [[22, "exploring-dataloader"]], "Examples": [[24, "examples"]], "Basic model building and training": [[24, "basic-model-building-and-training"], [25, "basic-model-building-and-training"]], "Simple training on MNE epochs": [[26, "simple-training-on-mne-epochs"]], "Finding the model you want": [[26, "finding-the-model-you-want"]], "Exploring the braindecode online documentation": [[26, "exploring-the-braindecode-online-documentation"]], "Examining the model": [[26, "examining-the-model"]], "Loading your own data with MNE": [[26, "loading-your-own-data-with-mne"]], "Training your model (scikit-learn compatible)": [[26, "training-your-model-scikit-learn-compatible"]], "Cropped Decoding on BCIC IV 2a Dataset": [[27, "cropped-decoding-on-bcic-iv-2a-dataset"]], "Create model and compute windowing parameters": [[27, "create-model-and-compute-windowing-parameters"]], "Cut the data into windows": [[27, "cut-the-data-into-windows"]], "Split the dataset": [[27, "split-the-dataset"]], "Plot Confusion Matrix": [[27, "plot-confusion-matrix"]], "Basic Brain Decoding on EEG Data": [[28, "basic-brain-decoding-on-eeg-data"]], "Loading and preparing the data": [[28, "loading-and-preparing-the-data"]], "Extracting Compute Windows": [[28, "extracting-compute-windows"]], "Splitting the dataset into training and validation sets": [[28, "splitting-the-dataset-into-training-and-validation-sets"]], "Creating a model": [[28, "creating-a-model"]], "Model Training": [[28, "model-training"]], "Plotting Results": [[28, "plotting-results"]], "Plotting a  Confusion Matrix": [[28, "plotting-a-confusion-matrix"]], "How to train, test and tune your model?": [[29, "how-to-train-test-and-tune-your-model"]], "Why should I care about model evaluation?": [[29, "why-should-i-care-about-model-evaluation"], [32, "why-should-i-care-about-model-evaluation"]], "Loading and preprocessing of data, defining a model, etc.": [[29, "loading-and-preprocessing-of-data-defining-a-model-etc"]], "Loading data": [[29, "loading-data"]], "Preprocessing data": [[29, "preprocessing-data"]], "Extraction of the Windows": [[29, "extraction-of-the-windows"], [30, "extraction-of-the-windows"]], "How to train and evaluate your model": [[29, "how-to-train-and-evaluate-your-model"], [32, "how-to-train-and-evaluate-your-model"]], "Option 1: Simple Train-Test Split": [[29, "option-1-simple-train-test-split"]], "Let\u2019s visualize the first option with a util function.": [[29, "let-s-visualize-the-first-option-with-a-util-function"]], "Option 2: Train-Val-Test Split": [[29, "option-2-train-val-test-split"]], "Let\u2019s visualize the second option with a util function.": [[29, "let-s-visualize-the-second-option-with-a-util-function"]], "Option 3: k-Fold Cross Validation": [[29, "option-3-k-fold-cross-validation"]], "Let\u2019s visualize the third option with a util function.": [[29, "let-s-visualize-the-third-option-with-a-util-function"]], "How to tune your hyperparameters": [[29, "how-to-tune-your-hyperparameters"]], "Option 1: Train-Val-Test Split": [[29, "option-1-train-val-test-split"]], "Option 2: k-Fold Cross Validation": [[29, "option-2-k-fold-cross-validation"]], "Hyperparameter tuning with scikit-learn": [[30, "hyperparameter-tuning-with-scikit-learn"]], "Why do you need to tune the neural networks model?": [[30, null]], "Extraction of the Compute Windows": [[30, "extraction-of-the-compute-windows"]], "Plotting the results": [[30, "plotting-the-results"]], "Get the best hyperparameters": [[30, "get-the-best-hyperparameters"]], "Convolutional neural network regression model on fake data.": [[31, "convolutional-neural-network-regression-model-on-fake-data"]], "Fake regression data": [[31, "fake-regression-data"]], "Generating fake regression dataset": [[31, "generating-fake-regression-dataset"]], "Defining a CNN regression model": [[31, "defining-a-cnn-regression-model"]], "Choosing between GPU and CPU processors": [[31, "choosing-between-gpu-and-cpu-processors"]], "Data windowing": [[31, "data-windowing"]], "Model training": [[31, "model-training"]], "Model evaluation": [[31, "model-evaluation"]], "Model testing": [[31, "model-testing"]], "Training a Braindecode model in PyTorch": [[32, "training-a-braindecode-model-in-pytorch"]], "Loading, preprocessing, defining a model, etc.": [[32, "loading-preprocessing-defining-a-model-etc"]], "Loading the Dataset Structure": [[32, "loading-the-dataset-structure"]], "Preprocessing, the offline transformation of the raw dataset": [[32, "preprocessing-the-offline-transformation-of-the-raw-dataset"]], "Create Pytorch model": [[32, "create-pytorch-model"]], "Option 1: Pure PyTorch training loop": [[32, "option-1-pure-pytorch-training-loop"]], "Option 2: Train it with PyTorch Lightning": [[32, "option-2-train-it-with-pytorch-lightning"]], "How to cite Braindecode": [[34, "how-to-cite-braindecode"]], "Citing the Braindecode": [[34, "citing-the-braindecode"]], "Citing the MNE": [[34, "citing-the-mne"]], "Citing other algorithms": [[34, "citing-other-algorithms"]], "braindecode.augmentation.AugmentedDataLoader": [[35, "braindecode-augmentation-augmenteddataloader"]], "Examples using braindecode.augmentation.AugmentedDataLoader": [[35, "examples-using-braindecode-augmentation-augmenteddataloader"]], "braindecode.augmentation.BandstopFilter": [[36, "braindecode-augmentation-bandstopfilter"]], "braindecode.augmentation.ChannelsDropout": [[37, "braindecode-augmentation-channelsdropout"]], "Examples using braindecode.augmentation.ChannelsDropout": [[37, "examples-using-braindecode-augmentation-channelsdropout"]], "braindecode.augmentation.ChannelsShuffle": [[38, "braindecode-augmentation-channelsshuffle"]], "braindecode.augmentation.ChannelsSymmetry": [[39, "braindecode-augmentation-channelssymmetry"]], "braindecode.augmentation.Compose": [[40, "braindecode-augmentation-compose"]], "Examples using braindecode.augmentation.Compose": [[40, "examples-using-braindecode-augmentation-compose"]], "braindecode.augmentation.FTSurrogate": [[41, "braindecode-augmentation-ftsurrogate"]], "Examples using braindecode.augmentation.FTSurrogate": [[41, "examples-using-braindecode-augmentation-ftsurrogate"]], "braindecode.augmentation.FrequencyShift": [[42, "braindecode-augmentation-frequencyshift"]], "Examples using braindecode.augmentation.FrequencyShift": [[42, "examples-using-braindecode-augmentation-frequencyshift"]], "braindecode.augmentation.GaussianNoise": [[43, "braindecode-augmentation-gaussiannoise"]], "braindecode.augmentation.IdentityTransform": [[44, "braindecode-augmentation-identitytransform"]], "braindecode.augmentation.Mixup": [[45, "braindecode-augmentation-mixup"]], "braindecode.augmentation.SensorsRotation": [[46, "braindecode-augmentation-sensorsrotation"]], "braindecode.augmentation.SensorsXRotation": [[47, "braindecode-augmentation-sensorsxrotation"]], "braindecode.augmentation.SensorsYRotation": [[48, "braindecode-augmentation-sensorsyrotation"]], "braindecode.augmentation.SensorsZRotation": [[49, "braindecode-augmentation-sensorszrotation"]], "braindecode.augmentation.SignFlip": [[50, "braindecode-augmentation-signflip"]], "Examples using braindecode.augmentation.SignFlip": [[50, "examples-using-braindecode-augmentation-signflip"]], "braindecode.augmentation.SmoothTimeMask": [[51, "braindecode-augmentation-smoothtimemask"]], "Examples using braindecode.augmentation.SmoothTimeMask": [[51, "examples-using-braindecode-augmentation-smoothtimemask"]], "braindecode.augmentation.TimeReverse": [[52, "braindecode-augmentation-timereverse"]], "braindecode.augmentation.Transform": [[53, "braindecode-augmentation-transform"]], "Examples using braindecode.augmentation.Transform": [[53, "examples-using-braindecode-augmentation-transform"]], "braindecode.augmentation.functional.bandstop_filter": [[54, "braindecode-augmentation-functional-bandstop-filter"]], "braindecode.augmentation.functional.channels_dropout": [[55, "braindecode-augmentation-functional-channels-dropout"]], "braindecode.augmentation.functional.channels_permute": [[56, "braindecode-augmentation-functional-channels-permute"]], "braindecode.augmentation.functional.channels_shuffle": [[57, "braindecode-augmentation-functional-channels-shuffle"]], "braindecode.augmentation.functional.frequency_shift": [[58, "braindecode-augmentation-functional-frequency-shift"]], "braindecode.augmentation.functional.ft_surrogate": [[59, "braindecode-augmentation-functional-ft-surrogate"]], "braindecode.augmentation.functional.gaussian_noise": [[60, "braindecode-augmentation-functional-gaussian-noise"]], "braindecode.augmentation.functional.identity": [[61, "braindecode-augmentation-functional-identity"]], "braindecode.augmentation.functional.mixup": [[62, "braindecode-augmentation-functional-mixup"]], "braindecode.augmentation.functional.sensors_rotation": [[63, "braindecode-augmentation-functional-sensors-rotation"]], "braindecode.augmentation.functional.sign_flip": [[64, "braindecode-augmentation-functional-sign-flip"]], "braindecode.augmentation.functional.smooth_time_mask": [[65, "braindecode-augmentation-functional-smooth-time-mask"]], "braindecode.augmentation.functional.time_reverse": [[66, "braindecode-augmentation-functional-time-reverse"]], "braindecode.classifier.EEGClassifier": [[67, "braindecode-classifier-eegclassifier"]], "braindecode.datasets.BCICompetitionIVDataset4": [[68, "braindecode-datasets-bcicompetitionivdataset4"]], "Examples using braindecode.datasets.BCICompetitionIVDataset4": [[68, "examples-using-braindecode-datasets-bcicompetitionivdataset4"]], "braindecode.datasets.BNCI2014001": [[69, "braindecode-datasets-bnci2014001"]], "Dataset summary": [[69, null], [72, null]], "braindecode.datasets.BaseConcatDataset": [[70, "braindecode-datasets-baseconcatdataset"]], "Examples using braindecode.datasets.BaseConcatDataset": [[70, "examples-using-braindecode-datasets-baseconcatdataset"]], "braindecode.datasets.BaseDataset": [[71, "braindecode-datasets-basedataset"]], "Examples using braindecode.datasets.BaseDataset": [[71, "examples-using-braindecode-datasets-basedataset"]], "braindecode.datasets.HGD": [[72, "braindecode-datasets-hgd"]], "braindecode.datasets.MOABBDataset": [[73, "braindecode-datasets-moabbdataset"]], "Examples using braindecode.datasets.MOABBDataset": [[73, "examples-using-braindecode-datasets-moabbdataset"]], "braindecode.datasets.SleepPhysionet": [[74, "braindecode-datasets-sleepphysionet"]], "Examples using braindecode.datasets.SleepPhysionet": [[74, "examples-using-braindecode-datasets-sleepphysionet"]], "braindecode.datasets.TUH": [[75, "braindecode-datasets-tuh"]], "Examples using braindecode.datasets.TUH": [[75, "examples-using-braindecode-datasets-tuh"]], "braindecode.datasets.TUHAbnormal": [[76, "braindecode-datasets-tuhabnormal"]], "Examples using braindecode.datasets.TUHAbnormal": [[76, "examples-using-braindecode-datasets-tuhabnormal"]], "braindecode.datasets.WindowsDataset": [[77, "braindecode-datasets-windowsdataset"]], "braindecode.datasets.create_from_X_y": [[78, "braindecode-datasets-create-from-x-y"]], "Examples using braindecode.datasets.create_from_X_y": [[78, "examples-using-braindecode-datasets-create-from-x-y"]], "braindecode.datasets.create_from_mne_epochs": [[79, "braindecode-datasets-create-from-mne-epochs"]], "Examples using braindecode.datasets.create_from_mne_epochs": [[79, "examples-using-braindecode-datasets-create-from-mne-epochs"]], "braindecode.datasets.create_from_mne_raw": [[80, "braindecode-datasets-create-from-mne-raw"]], "Examples using braindecode.datasets.create_from_mne_raw": [[80, "examples-using-braindecode-datasets-create-from-mne-raw"]], "braindecode.datautil.load_concat_dataset": [[81, "braindecode-datautil-load-concat-dataset"]], "Examples using braindecode.datautil.load_concat_dataset": [[81, "examples-using-braindecode-datautil-load-concat-dataset"]], "braindecode.datautil.save_concat_dataset": [[82, "braindecode-datautil-save-concat-dataset"]], "braindecode.models.ATCNet": [[83, "braindecode-models-atcnet"]], "braindecode.models.Deep4Net": [[84, "braindecode-models-deep4net"]], "Examples using braindecode.models.Deep4Net": [[84, "examples-using-braindecode-models-deep4net"]], "braindecode.models.DeepSleepNet": [[85, "braindecode-models-deepsleepnet"]], "braindecode.models.EEGConformer": [[86, "braindecode-models-eegconformer"]], "braindecode.models.EEGITNet": [[87, "braindecode-models-eegitnet"]], "braindecode.models.EEGInception": [[88, "braindecode-models-eeginception"]], "braindecode.models.EEGInceptionERP": [[89, "braindecode-models-eeginceptionerp"]], "braindecode.models.EEGInceptionMI": [[90, "braindecode-models-eeginceptionmi"]], "braindecode.models.EEGModuleMixin": [[91, "braindecode-models-eegmodulemixin"]], "Examples using braindecode.models.EEGModuleMixin": [[91, "examples-using-braindecode-models-eegmodulemixin"]], "braindecode.models.EEGNetv1": [[92, "braindecode-models-eegnetv1"]], "braindecode.models.EEGNetv4": [[93, "braindecode-models-eegnetv4"]], "braindecode.models.EEGResNet": [[94, "braindecode-models-eegresnet"]], "braindecode.models.HybridNet": [[95, "braindecode-models-hybridnet"]], "braindecode.models.ShallowFBCSPNet": [[96, "braindecode-models-shallowfbcspnet"]], "Examples using braindecode.models.ShallowFBCSPNet": [[96, "examples-using-braindecode-models-shallowfbcspnet"]], "braindecode.models.SleepStagerBlanco2020": [[97, "braindecode-models-sleepstagerblanco2020"]], "braindecode.models.SleepStagerChambon2018": [[98, "braindecode-models-sleepstagerchambon2018"]], "Examples using braindecode.models.SleepStagerChambon2018": [[98, "examples-using-braindecode-models-sleepstagerchambon2018"]], "braindecode.models.SleepStagerEldele2021": [[99, "braindecode-models-sleepstagereldele2021"]], "Examples using braindecode.models.SleepStagerEldele2021": [[99, "examples-using-braindecode-models-sleepstagereldele2021"]], "braindecode.models.TCN": [[100, "braindecode-models-tcn"]], "braindecode.models.TIDNet": [[101, "braindecode-models-tidnet"]], "braindecode.models.TimeDistributed": [[102, "braindecode-models-timedistributed"]], "Examples using braindecode.models.TimeDistributed": [[102, "examples-using-braindecode-models-timedistributed"]], "braindecode.models.USleep": [[103, "braindecode-models-usleep"]], "Examples using braindecode.models.USleep": [[103, "examples-using-braindecode-models-usleep"]], "braindecode.models.get_output_shape": [[104, "braindecode-models-get-output-shape"]], "Examples using braindecode.models.get_output_shape": [[104, "examples-using-braindecode-models-get-output-shape"]], "braindecode.preprocessing.Crop": [[105, "braindecode-preprocessing-crop"]], "braindecode.preprocessing.DropChannels": [[106, "braindecode-preprocessing-dropchannels"]], "braindecode.preprocessing.Filter": [[107, "braindecode-preprocessing-filter"]], "braindecode.preprocessing.Pick": [[108, "braindecode-preprocessing-pick"]], "braindecode.preprocessing.Preprocessor": [[109, "braindecode-preprocessing-preprocessor"]], "Examples using braindecode.preprocessing.Preprocessor": [[109, "examples-using-braindecode-preprocessing-preprocessor"]], "braindecode.preprocessing.Resample": [[110, "braindecode-preprocessing-resample"]], "braindecode.preprocessing.SetEEGReference": [[111, "braindecode-preprocessing-seteegreference"]], "braindecode.preprocessing.create_fixed_length_windows": [[112, "braindecode-preprocessing-create-fixed-length-windows"]], "Examples using braindecode.preprocessing.create_fixed_length_windows": [[112, "examples-using-braindecode-preprocessing-create-fixed-length-windows"]], "braindecode.preprocessing.create_windows_from_events": [[113, "braindecode-preprocessing-create-windows-from-events"]], "Examples using braindecode.preprocessing.create_windows_from_events": [[113, "examples-using-braindecode-preprocessing-create-windows-from-events"]], "braindecode.preprocessing.create_windows_from_target_channels": [[114, "braindecode-preprocessing-create-windows-from-target-channels"]], "Examples using braindecode.preprocessing.create_windows_from_target_channels": [[114, "examples-using-braindecode-preprocessing-create-windows-from-target-channels"]], "braindecode.preprocessing.exponential_moving_demean": [[115, "braindecode-preprocessing-exponential-moving-demean"]], "braindecode.preprocessing.exponential_moving_standardize": [[116, "braindecode-preprocessing-exponential-moving-standardize"]], "Examples using braindecode.preprocessing.exponential_moving_standardize": [[116, "examples-using-braindecode-preprocessing-exponential-moving-standardize"]], "braindecode.preprocessing.filterbank": [[117, "braindecode-preprocessing-filterbank"]], "braindecode.preprocessing.preprocess": [[118, "braindecode-preprocessing-preprocess"]], "Examples using braindecode.preprocessing.preprocess": [[118, "examples-using-braindecode-preprocessing-preprocess"]], "braindecode.preprocessing.scale": [[119, "braindecode-preprocessing-scale"]], "Examples using braindecode.preprocessing.scale": [[119, "examples-using-braindecode-preprocessing-scale"]], "braindecode.regressor.EEGRegressor": [[120, "braindecode-regressor-eegregressor"]], "braindecode.samplers.BalancedSequenceSampler": [[121, "braindecode-samplers-balancedsequencesampler"]], "braindecode.samplers.RecordingSampler": [[122, "braindecode-samplers-recordingsampler"]], "Examples using braindecode.samplers.RecordingSampler": [[122, "examples-using-braindecode-samplers-recordingsampler"]], "braindecode.samplers.RelativePositioningSampler": [[123, "braindecode-samplers-relativepositioningsampler"]], "Examples using braindecode.samplers.RelativePositioningSampler": [[123, "examples-using-braindecode-samplers-relativepositioningsampler"]], "braindecode.samplers.SequenceSampler": [[124, "braindecode-samplers-sequencesampler"]], "Examples using braindecode.samplers.SequenceSampler": [[124, "examples-using-braindecode-samplers-sequencesampler"]], "braindecode.training.CroppedLoss": [[125, "braindecode-training-croppedloss"]], "Examples using braindecode.training.CroppedLoss": [[125, "examples-using-braindecode-training-croppedloss"]], "braindecode.training.CroppedTimeSeriesEpochScoring": [[126, "braindecode-training-croppedtimeseriesepochscoring"]], "Examples using braindecode.training.CroppedTimeSeriesEpochScoring": [[126, "examples-using-braindecode-training-croppedtimeseriesepochscoring"]], "braindecode.training.CroppedTrialEpochScoring": [[127, "braindecode-training-croppedtrialepochscoring"]], "Examples using braindecode.training.CroppedTrialEpochScoring": [[127, "examples-using-braindecode-training-croppedtrialepochscoring"]], "braindecode.training.PostEpochTrainScoring": [[128, "braindecode-training-postepochtrainscoring"]], "braindecode.training.TimeSeriesLoss": [[129, "braindecode-training-timeseriesloss"]], "Examples using braindecode.training.TimeSeriesLoss": [[129, "examples-using-braindecode-training-timeseriesloss"]], "braindecode.training.mixup_criterion": [[130, "braindecode-training-mixup-criterion"]], "braindecode.training.predict_trials": [[131, "braindecode-training-predict-trials"]], "braindecode.training.trial_preds_from_window_preds": [[132, "braindecode-training-trial-preds-from-window-preds"]], "braindecode.util.set_random_seeds": [[133, "braindecode-util-set-random-seeds"]], "Examples using braindecode.util.set_random_seeds": [[133, "examples-using-braindecode-util-set-random-seeds"]], "braindecode.visualization.compute_amplitude_gradients": [[134, "braindecode-visualization-compute-amplitude-gradients"]], "braindecode.visualization.plot_confusion_matrix": [[135, "braindecode-visualization-plot-confusion-matrix"]], "Examples using braindecode.visualization.plot_confusion_matrix": [[135, "examples-using-braindecode-visualization-plot-confusion-matrix"]], "Frequently Asked Questions (FAQ)": [[136, "frequently-asked-questions-faq"]], "How do I cite Braindecode?": [[136, "how-do-i-cite-braindecode"]], "Help! I can\u2019t get Python and Braindecode working!": [[136, "help-i-can-t-get-python-and-braindecode-working"]], "I still can\u2019t get it to work!": [[136, "i-still-can-t-get-it-to-work"]], "I think I found a bug, what do I do?": [[136, "i-think-i-found-a-bug-what-do-i-do"]], "Braindecode Homepage": [[137, "braindecode-homepage"]], "Installation": [[138, "installation"]], "Installing from PyPI": [[139, "installing-from-pypi"]], "Installing from sources": [[140, "installing-from-sources"]], "Clone the repository from GitHub": [[140, "clone-the-repository-from-github"]], "Installing Braindecode from the source": [[140, "installing-braindecode-from-the-source"]], "Testing if your installation is working": [[140, "testing-if-your-installation-is-working"]], "What\u2019s new": [[141, "what-s-new"]], "Current 0.8 (dev0)": [[141, "current-0-8-dev0"]], "Enhancements": [[141, "enhancements"], [141, "id5"], [141, "id8"], [141, "id11"], [141, "id14"]], "Bugs": [[141, "bugs"], [141, "id6"], [141, "id9"], [141, "id12"], [141, "id15"]], "API changes": [[141, "api-changes"], [141, "id7"], [141, "id10"], [141, "id13"], [141, "id16"]], "Current 0.8 ()": [[141, "current-0-8"]], "Current 0.7 (10-2022)": [[141, "current-0-7-10-2022"]], "Version 0.6 (2021-12-06)": [[141, "version-0-6-2021-12-06"]], "Version 0.5.1 (2021-07-14)": [[141, "version-0-5-1-2021-07-14"]], "Authors": [[141, "authors"]]}, "indexentries": {"braindecode": [[0, "module-braindecode"]], "module": [[0, "module-braindecode"]], "augmenteddataloader (class in braindecode.augmentation)": [[35, "braindecode.augmentation.AugmentedDataLoader"]], "bandstopfilter (class in braindecode.augmentation)": [[36, "braindecode.augmentation.BandstopFilter"]], "get_augmentation_params() (braindecode.augmentation.bandstopfilter method)": [[36, "braindecode.augmentation.BandstopFilter.get_augmentation_params"]], "operation() (braindecode.augmentation.bandstopfilter static method)": [[36, "braindecode.augmentation.BandstopFilter.operation"]], "channelsdropout (class in braindecode.augmentation)": [[37, "braindecode.augmentation.ChannelsDropout"]], "get_augmentation_params() (braindecode.augmentation.channelsdropout method)": [[37, "braindecode.augmentation.ChannelsDropout.get_augmentation_params"]], "operation() (braindecode.augmentation.channelsdropout static method)": [[37, "braindecode.augmentation.ChannelsDropout.operation"]], "channelsshuffle (class in braindecode.augmentation)": [[38, "braindecode.augmentation.ChannelsShuffle"]], "get_augmentation_params() (braindecode.augmentation.channelsshuffle method)": [[38, "braindecode.augmentation.ChannelsShuffle.get_augmentation_params"]], "operation() (braindecode.augmentation.channelsshuffle static method)": [[38, "braindecode.augmentation.ChannelsShuffle.operation"]], "channelssymmetry (class in braindecode.augmentation)": [[39, "braindecode.augmentation.ChannelsSymmetry"]], "get_augmentation_params() (braindecode.augmentation.channelssymmetry method)": [[39, "braindecode.augmentation.ChannelsSymmetry.get_augmentation_params"]], "operation() (braindecode.augmentation.channelssymmetry static method)": [[39, "braindecode.augmentation.ChannelsSymmetry.operation"]], "compose (class in braindecode.augmentation)": [[40, "braindecode.augmentation.Compose"]], "forward() (braindecode.augmentation.compose method)": [[40, "braindecode.augmentation.Compose.forward"]], "ftsurrogate (class in braindecode.augmentation)": [[41, "braindecode.augmentation.FTSurrogate"]], "get_augmentation_params() (braindecode.augmentation.ftsurrogate method)": [[41, "braindecode.augmentation.FTSurrogate.get_augmentation_params"]], "operation() (braindecode.augmentation.ftsurrogate static method)": [[41, "braindecode.augmentation.FTSurrogate.operation"]], "frequencyshift (class in braindecode.augmentation)": [[42, "braindecode.augmentation.FrequencyShift"]], "get_augmentation_params() (braindecode.augmentation.frequencyshift method)": [[42, "braindecode.augmentation.FrequencyShift.get_augmentation_params"]], "operation() (braindecode.augmentation.frequencyshift static method)": [[42, "braindecode.augmentation.FrequencyShift.operation"]], "gaussiannoise (class in braindecode.augmentation)": [[43, "braindecode.augmentation.GaussianNoise"]], "get_augmentation_params() (braindecode.augmentation.gaussiannoise method)": [[43, "braindecode.augmentation.GaussianNoise.get_augmentation_params"]], "operation() (braindecode.augmentation.gaussiannoise static method)": [[43, "braindecode.augmentation.GaussianNoise.operation"]], "identitytransform (class in braindecode.augmentation)": [[44, "braindecode.augmentation.IdentityTransform"]], "operation() (braindecode.augmentation.identitytransform static method)": [[44, "braindecode.augmentation.IdentityTransform.operation"]], "mixup (class in braindecode.augmentation)": [[45, "braindecode.augmentation.Mixup"]], "get_augmentation_params() (braindecode.augmentation.mixup method)": [[45, "braindecode.augmentation.Mixup.get_augmentation_params"]], "operation() (braindecode.augmentation.mixup static method)": [[45, "braindecode.augmentation.Mixup.operation"]], "sensorsrotation (class in braindecode.augmentation)": [[46, "braindecode.augmentation.SensorsRotation"]], "get_augmentation_params() (braindecode.augmentation.sensorsrotation method)": [[46, "braindecode.augmentation.SensorsRotation.get_augmentation_params"]], "operation() (braindecode.augmentation.sensorsrotation static method)": [[46, "braindecode.augmentation.SensorsRotation.operation"]], "sensorsxrotation (class in braindecode.augmentation)": [[47, "braindecode.augmentation.SensorsXRotation"]], "sensorsyrotation (class in braindecode.augmentation)": [[48, "braindecode.augmentation.SensorsYRotation"]], "sensorszrotation (class in braindecode.augmentation)": [[49, "braindecode.augmentation.SensorsZRotation"]], "signflip (class in braindecode.augmentation)": [[50, "braindecode.augmentation.SignFlip"]], "operation() (braindecode.augmentation.signflip static method)": [[50, "braindecode.augmentation.SignFlip.operation"]], "smoothtimemask (class in braindecode.augmentation)": [[51, "braindecode.augmentation.SmoothTimeMask"]], "get_augmentation_params() (braindecode.augmentation.smoothtimemask method)": [[51, "braindecode.augmentation.SmoothTimeMask.get_augmentation_params"]], "operation() (braindecode.augmentation.smoothtimemask static method)": [[51, "braindecode.augmentation.SmoothTimeMask.operation"]], "timereverse (class in braindecode.augmentation)": [[52, "braindecode.augmentation.TimeReverse"]], "operation() (braindecode.augmentation.timereverse static method)": [[52, "braindecode.augmentation.TimeReverse.operation"]], "transform (class in braindecode.augmentation)": [[53, "braindecode.augmentation.Transform"]], "forward() (braindecode.augmentation.transform method)": [[53, "braindecode.augmentation.Transform.forward"]], "get_augmentation_params() (braindecode.augmentation.transform method)": [[53, "braindecode.augmentation.Transform.get_augmentation_params"]], "bandstop_filter() (in module braindecode.augmentation.functional)": [[54, "braindecode.augmentation.functional.bandstop_filter"]], "channels_dropout() (in module braindecode.augmentation.functional)": [[55, "braindecode.augmentation.functional.channels_dropout"]], "channels_permute() (in module braindecode.augmentation.functional)": [[56, "braindecode.augmentation.functional.channels_permute"]], "channels_shuffle() (in module braindecode.augmentation.functional)": [[57, "braindecode.augmentation.functional.channels_shuffle"]], "frequency_shift() (in module braindecode.augmentation.functional)": [[58, "braindecode.augmentation.functional.frequency_shift"]], "ft_surrogate() (in module braindecode.augmentation.functional)": [[59, "braindecode.augmentation.functional.ft_surrogate"]], "gaussian_noise() (in module braindecode.augmentation.functional)": [[60, "braindecode.augmentation.functional.gaussian_noise"]], "identity() (in module braindecode.augmentation.functional)": [[61, "braindecode.augmentation.functional.identity"]], "mixup() (in module braindecode.augmentation.functional)": [[62, "braindecode.augmentation.functional.mixup"]], "sensors_rotation() (in module braindecode.augmentation.functional)": [[63, "braindecode.augmentation.functional.sensors_rotation"]], "sign_flip() (in module braindecode.augmentation.functional)": [[64, "braindecode.augmentation.functional.sign_flip"]], "smooth_time_mask() (in module braindecode.augmentation.functional)": [[65, "braindecode.augmentation.functional.smooth_time_mask"]], "time_reverse() (in module braindecode.augmentation.functional)": [[66, "braindecode.augmentation.functional.time_reverse"]], "eegclassifier (class in braindecode.classifier)": [[67, "braindecode.classifier.EEGClassifier"]], "_criteria (braindecode.classifier.eegclassifier attribute)": [[67, "braindecode.classifier.EEGClassifier._criteria"]], "_modules (braindecode.classifier.eegclassifier attribute)": [[67, "braindecode.classifier.EEGClassifier._modules"]], "_optimizers (braindecode.classifier.eegclassifier attribute)": [[67, "braindecode.classifier.EEGClassifier._optimizers"]], "callbacks_ (braindecode.classifier.eegclassifier attribute)": [[67, "braindecode.classifier.EEGClassifier.callbacks_"]], "classes_ (braindecode.classifier.eegclassifier attribute)": [[67, "braindecode.classifier.EEGClassifier.classes_"]], "criterion_ (braindecode.classifier.eegclassifier attribute)": [[67, "braindecode.classifier.EEGClassifier.criterion_"]], "cuda_dependent_attributes_ (braindecode.classifier.eegclassifier attribute)": [[67, "braindecode.classifier.EEGClassifier.cuda_dependent_attributes_"]], "get_iterator() (braindecode.classifier.eegclassifier method)": [[67, "braindecode.classifier.EEGClassifier.get_iterator"]], "get_loss() (braindecode.classifier.eegclassifier method)": [[67, "braindecode.classifier.EEGClassifier.get_loss"]], "initialized_ (braindecode.classifier.eegclassifier attribute)": [[67, "braindecode.classifier.EEGClassifier.initialized_"]], "module_ (braindecode.classifier.eegclassifier attribute)": [[67, "braindecode.classifier.EEGClassifier.module_"]], "predict() (braindecode.classifier.eegclassifier method)": [[67, "braindecode.classifier.EEGClassifier.predict"]], "predict_proba() (braindecode.classifier.eegclassifier method)": [[67, "braindecode.classifier.EEGClassifier.predict_proba"]], "predict_trials() (braindecode.classifier.eegclassifier method)": [[67, "braindecode.classifier.EEGClassifier.predict_trials"]], "prefixes_ (braindecode.classifier.eegclassifier attribute)": [[67, "braindecode.classifier.EEGClassifier.prefixes_"]], "bcicompetitionivdataset4 (class in braindecode.datasets)": [[68, "braindecode.datasets.BCICompetitionIVDataset4"]], "download() (braindecode.datasets.bcicompetitionivdataset4 static method)": [[68, "braindecode.datasets.BCICompetitionIVDataset4.download"]], "bnci2014001 (class in braindecode.datasets)": [[69, "braindecode.datasets.BNCI2014001"]], "baseconcatdataset (class in braindecode.datasets)": [[70, "braindecode.datasets.BaseConcatDataset"]], "get_metadata() (braindecode.datasets.baseconcatdataset method)": [[70, "braindecode.datasets.BaseConcatDataset.get_metadata"]], "save() (braindecode.datasets.baseconcatdataset method)": [[70, "braindecode.datasets.BaseConcatDataset.save"]], "set_description() (braindecode.datasets.baseconcatdataset method)": [[70, "braindecode.datasets.BaseConcatDataset.set_description"]], "split() (braindecode.datasets.baseconcatdataset method)": [[70, "braindecode.datasets.BaseConcatDataset.split"]], "basedataset (class in braindecode.datasets)": [[71, "braindecode.datasets.BaseDataset"]], "set_description() (braindecode.datasets.basedataset method)": [[71, "braindecode.datasets.BaseDataset.set_description"]], "hgd (class in braindecode.datasets)": [[72, "braindecode.datasets.HGD"]], "moabbdataset (class in braindecode.datasets)": [[73, "braindecode.datasets.MOABBDataset"]], "sleepphysionet (class in braindecode.datasets)": [[74, "braindecode.datasets.SleepPhysionet"]], "tuh (class in braindecode.datasets)": [[75, "braindecode.datasets.TUH"]], "tuhabnormal (class in braindecode.datasets)": [[76, "braindecode.datasets.TUHAbnormal"]], "windowsdataset (class in braindecode.datasets)": [[77, "braindecode.datasets.WindowsDataset"]], "set_description() (braindecode.datasets.windowsdataset method)": [[77, "braindecode.datasets.WindowsDataset.set_description"]], "create_from_x_y() (in module braindecode.datasets)": [[78, "braindecode.datasets.create_from_X_y"]], "create_from_mne_epochs() (in module braindecode.datasets)": [[79, "braindecode.datasets.create_from_mne_epochs"]], "create_from_mne_raw() (in module braindecode.datasets)": [[80, "braindecode.datasets.create_from_mne_raw"]], "load_concat_dataset() (in module braindecode.datautil)": [[81, "braindecode.datautil.load_concat_dataset"]], "save_concat_dataset() (in module braindecode.datautil)": [[82, "braindecode.datautil.save_concat_dataset"]], "atcnet (class in braindecode.models)": [[83, "braindecode.models.ATCNet"]], "forward() (braindecode.models.atcnet method)": [[83, "braindecode.models.ATCNet.forward"]], "deep4net (class in braindecode.models)": [[84, "braindecode.models.Deep4Net"]], "deepsleepnet (class in braindecode.models)": [[85, "braindecode.models.DeepSleepNet"]], "forward() (braindecode.models.deepsleepnet method)": [[85, "braindecode.models.DeepSleepNet.forward"]], "eegconformer (class in braindecode.models)": [[86, "braindecode.models.EEGConformer"]], "forward() (braindecode.models.eegconformer method)": [[86, "braindecode.models.EEGConformer.forward"]], "get_fc_size() (braindecode.models.eegconformer method)": [[86, "braindecode.models.EEGConformer.get_fc_size"]], "eegitnet (class in braindecode.models)": [[87, "braindecode.models.EEGITNet"]], "eeginception (class in braindecode.models)": [[88, "braindecode.models.EEGInception"]], "eeginceptionerp (class in braindecode.models)": [[89, "braindecode.models.EEGInceptionERP"]], "eeginceptionmi (class in braindecode.models)": [[90, "braindecode.models.EEGInceptionMI"]], "forward() (braindecode.models.eeginceptionmi method)": [[90, "braindecode.models.EEGInceptionMI.forward"]], "eegmodulemixin (class in braindecode.models)": [[91, "braindecode.models.EEGModuleMixin"]], "get_output_shape() (braindecode.models.eegmodulemixin method)": [[91, "braindecode.models.EEGModuleMixin.get_output_shape"]], "get_torchinfo_statistics() (braindecode.models.eegmodulemixin method)": [[91, "braindecode.models.EEGModuleMixin.get_torchinfo_statistics"]], "load_state_dict() (braindecode.models.eegmodulemixin method)": [[91, "braindecode.models.EEGModuleMixin.load_state_dict"]], "to_dense_prediction_model() (braindecode.models.eegmodulemixin method)": [[91, "braindecode.models.EEGModuleMixin.to_dense_prediction_model"]], "eegnetv1 (class in braindecode.models)": [[92, "braindecode.models.EEGNetv1"]], "eegnetv4 (class in braindecode.models)": [[93, "braindecode.models.EEGNetv4"]], "eegresnet (class in braindecode.models)": [[94, "braindecode.models.EEGResNet"]], "hybridnet (class in braindecode.models)": [[95, "braindecode.models.HybridNet"]], "forward() (braindecode.models.hybridnet method)": [[95, "braindecode.models.HybridNet.forward"]], "shallowfbcspnet (class in braindecode.models)": [[96, "braindecode.models.ShallowFBCSPNet"]], "sleepstagerblanco2020 (class in braindecode.models)": [[97, "braindecode.models.SleepStagerBlanco2020"]], "forward() (braindecode.models.sleepstagerblanco2020 method)": [[97, "braindecode.models.SleepStagerBlanco2020.forward"]], "sleepstagerchambon2018 (class in braindecode.models)": [[98, "braindecode.models.SleepStagerChambon2018"]], "forward() (braindecode.models.sleepstagerchambon2018 method)": [[98, "braindecode.models.SleepStagerChambon2018.forward"]], "sleepstagereldele2021 (class in braindecode.models)": [[99, "braindecode.models.SleepStagerEldele2021"]], "forward() (braindecode.models.sleepstagereldele2021 method)": [[99, "braindecode.models.SleepStagerEldele2021.forward"]], "tcn (class in braindecode.models)": [[100, "braindecode.models.TCN"]], "forward() (braindecode.models.tcn method)": [[100, "braindecode.models.TCN.forward"]], "tidnet (class in braindecode.models)": [[101, "braindecode.models.TIDNet"]], "forward() (braindecode.models.tidnet method)": [[101, "braindecode.models.TIDNet.forward"]], "timedistributed (class in braindecode.models)": [[102, "braindecode.models.TimeDistributed"]], "forward() (braindecode.models.timedistributed method)": [[102, "braindecode.models.TimeDistributed.forward"]], "usleep (class in braindecode.models)": [[103, "braindecode.models.USleep"]], "forward() (braindecode.models.usleep method)": [[103, "braindecode.models.USleep.forward"]], "get_output_shape() (in module braindecode.models)": [[104, "braindecode.models.get_output_shape"]], "crop (class in braindecode.preprocessing)": [[105, "braindecode.preprocessing.Crop"]], "dropchannels (class in braindecode.preprocessing)": [[106, "braindecode.preprocessing.DropChannels"]], "filter (class in braindecode.preprocessing)": [[107, "braindecode.preprocessing.Filter"]], "pick (class in braindecode.preprocessing)": [[108, "braindecode.preprocessing.Pick"]], "preprocessor (class in braindecode.preprocessing)": [[109, "braindecode.preprocessing.Preprocessor"]], "apply() (braindecode.preprocessing.preprocessor method)": [[109, "braindecode.preprocessing.Preprocessor.apply"]], "resample (class in braindecode.preprocessing)": [[110, "braindecode.preprocessing.Resample"]], "seteegreference (class in braindecode.preprocessing)": [[111, "braindecode.preprocessing.SetEEGReference"]], "create_fixed_length_windows() (in module braindecode.preprocessing)": [[112, "braindecode.preprocessing.create_fixed_length_windows"]], "create_windows_from_events() (in module braindecode.preprocessing)": [[113, "braindecode.preprocessing.create_windows_from_events"]], "create_windows_from_target_channels() (in module braindecode.preprocessing)": [[114, "braindecode.preprocessing.create_windows_from_target_channels"]], "exponential_moving_demean() (in module braindecode.preprocessing)": [[115, "braindecode.preprocessing.exponential_moving_demean"]], "exponential_moving_standardize() (in module braindecode.preprocessing)": [[116, "braindecode.preprocessing.exponential_moving_standardize"]], "filterbank() (in module braindecode.preprocessing)": [[117, "braindecode.preprocessing.filterbank"]], "preprocess() (in module braindecode.preprocessing)": [[118, "braindecode.preprocessing.preprocess"]], "scale() (in module braindecode.preprocessing)": [[119, "braindecode.preprocessing.scale"]], "eegregressor (class in braindecode.regressor)": [[120, "braindecode.regressor.EEGRegressor"]], "_criteria (braindecode.regressor.eegregressor attribute)": [[120, "braindecode.regressor.EEGRegressor._criteria"]], "_modules (braindecode.regressor.eegregressor attribute)": [[120, "braindecode.regressor.EEGRegressor._modules"]], "_optimizers (braindecode.regressor.eegregressor attribute)": [[120, "braindecode.regressor.EEGRegressor._optimizers"]], "callbacks_ (braindecode.regressor.eegregressor attribute)": [[120, "braindecode.regressor.EEGRegressor.callbacks_"]], "criterion_ (braindecode.regressor.eegregressor attribute)": [[120, "braindecode.regressor.EEGRegressor.criterion_"]], "cuda_dependent_attributes_ (braindecode.regressor.eegregressor attribute)": [[120, "braindecode.regressor.EEGRegressor.cuda_dependent_attributes_"]], "fit() (braindecode.regressor.eegregressor method)": [[120, "braindecode.regressor.EEGRegressor.fit"]], "get_iterator() (braindecode.regressor.eegregressor method)": [[120, "braindecode.regressor.EEGRegressor.get_iterator"]], "initialized_ (braindecode.regressor.eegregressor attribute)": [[120, "braindecode.regressor.EEGRegressor.initialized_"]], "module_ (braindecode.regressor.eegregressor attribute)": [[120, "braindecode.regressor.EEGRegressor.module_"]], "predict_proba() (braindecode.regressor.eegregressor method)": [[120, "braindecode.regressor.EEGRegressor.predict_proba"]], "predict_trials() (braindecode.regressor.eegregressor method)": [[120, "braindecode.regressor.EEGRegressor.predict_trials"]], "prefixes_ (braindecode.regressor.eegregressor attribute)": [[120, "braindecode.regressor.EEGRegressor.prefixes_"]], "balancedsequencesampler (class in braindecode.samplers)": [[121, "braindecode.samplers.BalancedSequenceSampler"]], "sample_class() (braindecode.samplers.balancedsequencesampler method)": [[121, "braindecode.samplers.BalancedSequenceSampler.sample_class"]], "recordingsampler (class in braindecode.samplers)": [[122, "braindecode.samplers.RecordingSampler"]], "info (braindecode.samplers.recordingsampler attribute)": [[122, "braindecode.samplers.RecordingSampler.info"]], "n_recordings (braindecode.samplers.recordingsampler attribute)": [[122, "braindecode.samplers.RecordingSampler.n_recordings"]], "sample_recording() (braindecode.samplers.recordingsampler method)": [[122, "braindecode.samplers.RecordingSampler.sample_recording"]], "sample_window() (braindecode.samplers.recordingsampler method)": [[122, "braindecode.samplers.RecordingSampler.sample_window"]], "relativepositioningsampler (class in braindecode.samplers)": [[123, "braindecode.samplers.RelativePositioningSampler"]], "presample() (braindecode.samplers.relativepositioningsampler method)": [[123, "braindecode.samplers.RelativePositioningSampler.presample"]], "sequencesampler (class in braindecode.samplers)": [[124, "braindecode.samplers.SequenceSampler"]], "file_ids (braindecode.samplers.sequencesampler attribute)": [[124, "braindecode.samplers.SequenceSampler.file_ids"]], "info (braindecode.samplers.sequencesampler attribute)": [[124, "braindecode.samplers.SequenceSampler.info"]], "croppedloss (class in braindecode.training)": [[125, "braindecode.training.CroppedLoss"]], "forward() (braindecode.training.croppedloss method)": [[125, "braindecode.training.CroppedLoss.forward"]], "croppedtimeseriesepochscoring (class in braindecode.training)": [[126, "braindecode.training.CroppedTimeSeriesEpochScoring"]], "on_epoch_end() (braindecode.training.croppedtimeseriesepochscoring method)": [[126, "braindecode.training.CroppedTimeSeriesEpochScoring.on_epoch_end"]], "croppedtrialepochscoring (class in braindecode.training)": [[127, "braindecode.training.CroppedTrialEpochScoring"]], "on_batch_end() (braindecode.training.croppedtrialepochscoring method)": [[127, "braindecode.training.CroppedTrialEpochScoring.on_batch_end"]], "on_epoch_end() (braindecode.training.croppedtrialepochscoring method)": [[127, "braindecode.training.CroppedTrialEpochScoring.on_epoch_end"]], "postepochtrainscoring (class in braindecode.training)": [[128, "braindecode.training.PostEpochTrainScoring"]], "on_epoch_end() (braindecode.training.postepochtrainscoring method)": [[128, "braindecode.training.PostEpochTrainScoring.on_epoch_end"]], "timeseriesloss (class in braindecode.training)": [[129, "braindecode.training.TimeSeriesLoss"]], "forward() (braindecode.training.timeseriesloss method)": [[129, "braindecode.training.TimeSeriesLoss.forward"]], "mixup_criterion() (in module braindecode.training)": [[130, "braindecode.training.mixup_criterion"]], "predict_trials() (in module braindecode.training)": [[131, "braindecode.training.predict_trials"]], "trial_preds_from_window_preds() (in module braindecode.training)": [[132, "braindecode.training.trial_preds_from_window_preds"]], "set_random_seeds() (in module braindecode.util)": [[133, "braindecode.util.set_random_seeds"]], "compute_amplitude_gradients() (in module braindecode.visualization)": [[134, "braindecode.visualization.compute_amplitude_gradients"]], "plot_confusion_matrix() (in module braindecode.visualization)": [[135, "braindecode.visualization.plot_confusion_matrix"]]}})