Search.setIndex({"docnames": ["api", "auto_examples/advanced_training/index", "auto_examples/advanced_training/plot_bcic_iv_4_ecog_cropped", "auto_examples/advanced_training/plot_data_augmentation", "auto_examples/advanced_training/plot_data_augmentation_search", "auto_examples/advanced_training/plot_relative_positioning", "auto_examples/advanced_training/sg_execution_times", "auto_examples/applied_examples/index", "auto_examples/applied_examples/plot_bcic_iv_4_ecog_trial", "auto_examples/applied_examples/plot_sleep_staging_chambon2018", "auto_examples/applied_examples/plot_sleep_staging_eldele2021", "auto_examples/applied_examples/plot_sleep_staging_usleep", "auto_examples/applied_examples/plot_tuh_eeg_corpus", "auto_examples/applied_examples/sg_execution_times", "auto_examples/datasets_io/benchmark_lazy_eager_loading", "auto_examples/datasets_io/index", "auto_examples/datasets_io/plot_benchmark_preprocessing", "auto_examples/datasets_io/plot_custom_dataset_example", "auto_examples/datasets_io/plot_load_save_datasets", "auto_examples/datasets_io/plot_mne_dataset_example", "auto_examples/datasets_io/plot_moabb_dataset_example", "auto_examples/datasets_io/plot_split_dataset", "auto_examples/datasets_io/plot_tuh_discrete_multitarget", "auto_examples/datasets_io/sg_execution_times", "auto_examples/index", "auto_examples/model_building/index", "auto_examples/model_building/plot_basic_training_epochs", "auto_examples/model_building/plot_bcic_iv_2a_moabb_cropped", "auto_examples/model_building/plot_bcic_iv_2a_moabb_trial", "auto_examples/model_building/plot_how_train_test_and_tune", "auto_examples/model_building/plot_hyperparameter_tuning_with_scikit-learn", "auto_examples/model_building/plot_regression", "auto_examples/model_building/plot_train_in_pure_pytorch_and_pytorch_lightning", "auto_examples/model_building/sg_execution_times", "auto_examples/sg_execution_times", "cite", "generated/braindecode.augmentation.AugmentedDataLoader", "generated/braindecode.augmentation.BandstopFilter", "generated/braindecode.augmentation.ChannelsDropout", "generated/braindecode.augmentation.ChannelsShuffle", "generated/braindecode.augmentation.ChannelsSymmetry", "generated/braindecode.augmentation.Compose", "generated/braindecode.augmentation.FTSurrogate", "generated/braindecode.augmentation.FrequencyShift", "generated/braindecode.augmentation.GaussianNoise", "generated/braindecode.augmentation.IdentityTransform", "generated/braindecode.augmentation.Mixup", "generated/braindecode.augmentation.SensorsRotation", "generated/braindecode.augmentation.SensorsXRotation", "generated/braindecode.augmentation.SensorsYRotation", "generated/braindecode.augmentation.SensorsZRotation", "generated/braindecode.augmentation.SignFlip", "generated/braindecode.augmentation.SmoothTimeMask", "generated/braindecode.augmentation.TimeReverse", "generated/braindecode.augmentation.Transform", "generated/braindecode.augmentation.functional.bandstop_filter", "generated/braindecode.augmentation.functional.channels_dropout", "generated/braindecode.augmentation.functional.channels_permute", "generated/braindecode.augmentation.functional.channels_shuffle", "generated/braindecode.augmentation.functional.frequency_shift", "generated/braindecode.augmentation.functional.ft_surrogate", "generated/braindecode.augmentation.functional.gaussian_noise", "generated/braindecode.augmentation.functional.identity", "generated/braindecode.augmentation.functional.mixup", "generated/braindecode.augmentation.functional.sensors_rotation", "generated/braindecode.augmentation.functional.sign_flip", "generated/braindecode.augmentation.functional.smooth_time_mask", "generated/braindecode.augmentation.functional.time_reverse", "generated/braindecode.classifier.EEGClassifier", "generated/braindecode.datasets.BCICompetitionIVDataset4", "generated/braindecode.datasets.BNCI2014001", "generated/braindecode.datasets.BaseConcatDataset", "generated/braindecode.datasets.BaseDataset", "generated/braindecode.datasets.HGD", "generated/braindecode.datasets.MOABBDataset", "generated/braindecode.datasets.NMT", "generated/braindecode.datasets.SleepPhysionet", "generated/braindecode.datasets.TUH", "generated/braindecode.datasets.TUHAbnormal", "generated/braindecode.datasets.WindowsDataset", "generated/braindecode.datasets.create_from_X_y", "generated/braindecode.datasets.create_from_mne_epochs", "generated/braindecode.datasets.create_from_mne_raw", "generated/braindecode.datautil.load_concat_dataset", "generated/braindecode.datautil.save_concat_dataset", "generated/braindecode.models.ATCNet", "generated/braindecode.models.BIOT", "generated/braindecode.models.Deep4Net", "generated/braindecode.models.DeepSleepNet", "generated/braindecode.models.EEGConformer", "generated/braindecode.models.EEGITNet", "generated/braindecode.models.EEGInception", "generated/braindecode.models.EEGInceptionERP", "generated/braindecode.models.EEGInceptionMI", "generated/braindecode.models.EEGModuleMixin", "generated/braindecode.models.EEGNetv1", "generated/braindecode.models.EEGNetv4", "generated/braindecode.models.EEGResNet", "generated/braindecode.models.EEGSimpleConv", "generated/braindecode.models.HybridNet", "generated/braindecode.models.Labram", "generated/braindecode.models.ShallowFBCSPNet", "generated/braindecode.models.SleepStagerBlanco2020", "generated/braindecode.models.SleepStagerChambon2018", "generated/braindecode.models.SleepStagerEldele2021", "generated/braindecode.models.TCN", "generated/braindecode.models.TIDNet", "generated/braindecode.models.TimeDistributed", "generated/braindecode.models.USleep", "generated/braindecode.models.get_output_shape", "generated/braindecode.preprocessing.Crop", "generated/braindecode.preprocessing.DropChannels", "generated/braindecode.preprocessing.Filter", "generated/braindecode.preprocessing.Pick", "generated/braindecode.preprocessing.Preprocessor", "generated/braindecode.preprocessing.Resample", "generated/braindecode.preprocessing.SetEEGReference", "generated/braindecode.preprocessing.create_fixed_length_windows", "generated/braindecode.preprocessing.create_windows_from_events", "generated/braindecode.preprocessing.create_windows_from_target_channels", "generated/braindecode.preprocessing.exponential_moving_demean", "generated/braindecode.preprocessing.exponential_moving_standardize", "generated/braindecode.preprocessing.filterbank", "generated/braindecode.preprocessing.preprocess", "generated/braindecode.regressor.EEGRegressor", "generated/braindecode.samplers.BalancedSequenceSampler", "generated/braindecode.samplers.RecordingSampler", "generated/braindecode.samplers.RelativePositioningSampler", "generated/braindecode.samplers.SequenceSampler", "generated/braindecode.training.CroppedLoss", "generated/braindecode.training.CroppedTimeSeriesEpochScoring", "generated/braindecode.training.CroppedTrialEpochScoring", "generated/braindecode.training.PostEpochTrainScoring", "generated/braindecode.training.TimeSeriesLoss", "generated/braindecode.training.mixup_criterion", "generated/braindecode.training.predict_trials", "generated/braindecode.training.trial_preds_from_window_preds", "generated/braindecode.util.set_random_seeds", "generated/braindecode.visualization.compute_amplitude_gradients", "generated/braindecode.visualization.plot_confusion_matrix", "help", "index", "install/install", "install/install_pip", "install/install_source", "sg_execution_times", "whats_new"], "filenames": ["api.rst", "auto_examples/advanced_training/index.rst", "auto_examples/advanced_training/plot_bcic_iv_4_ecog_cropped.rst", "auto_examples/advanced_training/plot_data_augmentation.rst", "auto_examples/advanced_training/plot_data_augmentation_search.rst", "auto_examples/advanced_training/plot_relative_positioning.rst", "auto_examples/advanced_training/sg_execution_times.rst", "auto_examples/applied_examples/index.rst", "auto_examples/applied_examples/plot_bcic_iv_4_ecog_trial.rst", "auto_examples/applied_examples/plot_sleep_staging_chambon2018.rst", "auto_examples/applied_examples/plot_sleep_staging_eldele2021.rst", "auto_examples/applied_examples/plot_sleep_staging_usleep.rst", "auto_examples/applied_examples/plot_tuh_eeg_corpus.rst", "auto_examples/applied_examples/sg_execution_times.rst", "auto_examples/datasets_io/benchmark_lazy_eager_loading.rst", "auto_examples/datasets_io/index.rst", "auto_examples/datasets_io/plot_benchmark_preprocessing.rst", "auto_examples/datasets_io/plot_custom_dataset_example.rst", "auto_examples/datasets_io/plot_load_save_datasets.rst", "auto_examples/datasets_io/plot_mne_dataset_example.rst", "auto_examples/datasets_io/plot_moabb_dataset_example.rst", "auto_examples/datasets_io/plot_split_dataset.rst", "auto_examples/datasets_io/plot_tuh_discrete_multitarget.rst", "auto_examples/datasets_io/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/model_building/index.rst", "auto_examples/model_building/plot_basic_training_epochs.rst", "auto_examples/model_building/plot_bcic_iv_2a_moabb_cropped.rst", "auto_examples/model_building/plot_bcic_iv_2a_moabb_trial.rst", "auto_examples/model_building/plot_how_train_test_and_tune.rst", "auto_examples/model_building/plot_hyperparameter_tuning_with_scikit-learn.rst", "auto_examples/model_building/plot_regression.rst", "auto_examples/model_building/plot_train_in_pure_pytorch_and_pytorch_lightning.rst", "auto_examples/model_building/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "cite.rst", "generated/braindecode.augmentation.AugmentedDataLoader.rst", "generated/braindecode.augmentation.BandstopFilter.rst", "generated/braindecode.augmentation.ChannelsDropout.rst", "generated/braindecode.augmentation.ChannelsShuffle.rst", "generated/braindecode.augmentation.ChannelsSymmetry.rst", "generated/braindecode.augmentation.Compose.rst", "generated/braindecode.augmentation.FTSurrogate.rst", "generated/braindecode.augmentation.FrequencyShift.rst", "generated/braindecode.augmentation.GaussianNoise.rst", "generated/braindecode.augmentation.IdentityTransform.rst", "generated/braindecode.augmentation.Mixup.rst", "generated/braindecode.augmentation.SensorsRotation.rst", "generated/braindecode.augmentation.SensorsXRotation.rst", "generated/braindecode.augmentation.SensorsYRotation.rst", "generated/braindecode.augmentation.SensorsZRotation.rst", "generated/braindecode.augmentation.SignFlip.rst", "generated/braindecode.augmentation.SmoothTimeMask.rst", "generated/braindecode.augmentation.TimeReverse.rst", "generated/braindecode.augmentation.Transform.rst", "generated/braindecode.augmentation.functional.bandstop_filter.rst", "generated/braindecode.augmentation.functional.channels_dropout.rst", "generated/braindecode.augmentation.functional.channels_permute.rst", "generated/braindecode.augmentation.functional.channels_shuffle.rst", "generated/braindecode.augmentation.functional.frequency_shift.rst", "generated/braindecode.augmentation.functional.ft_surrogate.rst", "generated/braindecode.augmentation.functional.gaussian_noise.rst", "generated/braindecode.augmentation.functional.identity.rst", "generated/braindecode.augmentation.functional.mixup.rst", "generated/braindecode.augmentation.functional.sensors_rotation.rst", "generated/braindecode.augmentation.functional.sign_flip.rst", "generated/braindecode.augmentation.functional.smooth_time_mask.rst", "generated/braindecode.augmentation.functional.time_reverse.rst", "generated/braindecode.classifier.EEGClassifier.rst", "generated/braindecode.datasets.BCICompetitionIVDataset4.rst", "generated/braindecode.datasets.BNCI2014001.rst", "generated/braindecode.datasets.BaseConcatDataset.rst", "generated/braindecode.datasets.BaseDataset.rst", "generated/braindecode.datasets.HGD.rst", "generated/braindecode.datasets.MOABBDataset.rst", "generated/braindecode.datasets.NMT.rst", "generated/braindecode.datasets.SleepPhysionet.rst", "generated/braindecode.datasets.TUH.rst", "generated/braindecode.datasets.TUHAbnormal.rst", "generated/braindecode.datasets.WindowsDataset.rst", "generated/braindecode.datasets.create_from_X_y.rst", "generated/braindecode.datasets.create_from_mne_epochs.rst", "generated/braindecode.datasets.create_from_mne_raw.rst", "generated/braindecode.datautil.load_concat_dataset.rst", "generated/braindecode.datautil.save_concat_dataset.rst", "generated/braindecode.models.ATCNet.rst", "generated/braindecode.models.BIOT.rst", "generated/braindecode.models.Deep4Net.rst", "generated/braindecode.models.DeepSleepNet.rst", "generated/braindecode.models.EEGConformer.rst", "generated/braindecode.models.EEGITNet.rst", "generated/braindecode.models.EEGInception.rst", "generated/braindecode.models.EEGInceptionERP.rst", "generated/braindecode.models.EEGInceptionMI.rst", "generated/braindecode.models.EEGModuleMixin.rst", "generated/braindecode.models.EEGNetv1.rst", "generated/braindecode.models.EEGNetv4.rst", "generated/braindecode.models.EEGResNet.rst", "generated/braindecode.models.EEGSimpleConv.rst", "generated/braindecode.models.HybridNet.rst", "generated/braindecode.models.Labram.rst", "generated/braindecode.models.ShallowFBCSPNet.rst", "generated/braindecode.models.SleepStagerBlanco2020.rst", "generated/braindecode.models.SleepStagerChambon2018.rst", "generated/braindecode.models.SleepStagerEldele2021.rst", "generated/braindecode.models.TCN.rst", "generated/braindecode.models.TIDNet.rst", "generated/braindecode.models.TimeDistributed.rst", "generated/braindecode.models.USleep.rst", "generated/braindecode.models.get_output_shape.rst", "generated/braindecode.preprocessing.Crop.rst", "generated/braindecode.preprocessing.DropChannels.rst", "generated/braindecode.preprocessing.Filter.rst", "generated/braindecode.preprocessing.Pick.rst", "generated/braindecode.preprocessing.Preprocessor.rst", "generated/braindecode.preprocessing.Resample.rst", "generated/braindecode.preprocessing.SetEEGReference.rst", "generated/braindecode.preprocessing.create_fixed_length_windows.rst", "generated/braindecode.preprocessing.create_windows_from_events.rst", "generated/braindecode.preprocessing.create_windows_from_target_channels.rst", "generated/braindecode.preprocessing.exponential_moving_demean.rst", "generated/braindecode.preprocessing.exponential_moving_standardize.rst", "generated/braindecode.preprocessing.filterbank.rst", "generated/braindecode.preprocessing.preprocess.rst", "generated/braindecode.regressor.EEGRegressor.rst", "generated/braindecode.samplers.BalancedSequenceSampler.rst", "generated/braindecode.samplers.RecordingSampler.rst", "generated/braindecode.samplers.RelativePositioningSampler.rst", "generated/braindecode.samplers.SequenceSampler.rst", "generated/braindecode.training.CroppedLoss.rst", "generated/braindecode.training.CroppedTimeSeriesEpochScoring.rst", "generated/braindecode.training.CroppedTrialEpochScoring.rst", "generated/braindecode.training.PostEpochTrainScoring.rst", "generated/braindecode.training.TimeSeriesLoss.rst", "generated/braindecode.training.mixup_criterion.rst", "generated/braindecode.training.predict_trials.rst", "generated/braindecode.training.trial_preds_from_window_preds.rst", "generated/braindecode.util.set_random_seeds.rst", "generated/braindecode.visualization.compute_amplitude_gradients.rst", "generated/braindecode.visualization.plot_confusion_matrix.rst", "help.rst", "index.rst", "install/install.rst", "install/install_pip.rst", "install/install_source.rst", "sg_execution_times.rst", "whats_new.rst"], "titles": ["API Reference", "Advanced neural network training strategies", "Fingers flexion cropped decoding on BCIC IV 4 ECoG Dataset", "Data Augmentation on BCIC IV 2a Dataset", "Searching the best data augmentation on BCIC IV 2a Dataset", "Self-supervised learning on EEG with relative positioning", "Computation times", "Applied examples on real-world datasets", "Fingers flexion decoding on BCIC IV 4 ECoG Dataset", "Sleep staging on the Sleep Physionet dataset using Chambon2018 network", "Sleep staging on the Sleep Physionet dataset using Eldele2021", "Sleep staging on the Sleep Physionet dataset using U-Sleep network", "Process a big data EEG resource (TUH EEG Corpus)", "Computation times", "Benchmarking eager and lazy loading", "Loading and organizing data", "Benchmarking preprocessing with parallelization and serialization", "Custom Dataset Example", "Load and save dataset example", "MNE Dataset Example", "MOABB Dataset Example", "Split Dataset Example", "Multiple discrete targets with the TUH EEG Corpus", "Computation times", "Examples", "Basic model building and training", "Simple training on MNE epochs", "Cropped Decoding on BCIC IV 2a Dataset", "Basic Brain Decoding on EEG Data", "How to train, test and tune your model?", "Hyperparameter tuning with scikit-learn", "Convolutional neural network regression model on fake data.", "Training a Braindecode model in PyTorch", "Computation times", "Computation times", "How to cite Braindecode", "braindecode.augmentation.AugmentedDataLoader", "braindecode.augmentation.BandstopFilter", "braindecode.augmentation.ChannelsDropout", "braindecode.augmentation.ChannelsShuffle", "braindecode.augmentation.ChannelsSymmetry", "braindecode.augmentation.Compose", "braindecode.augmentation.FTSurrogate", "braindecode.augmentation.FrequencyShift", "braindecode.augmentation.GaussianNoise", "braindecode.augmentation.IdentityTransform", "braindecode.augmentation.Mixup", "braindecode.augmentation.SensorsRotation", "braindecode.augmentation.SensorsXRotation", "braindecode.augmentation.SensorsYRotation", "braindecode.augmentation.SensorsZRotation", "braindecode.augmentation.SignFlip", "braindecode.augmentation.SmoothTimeMask", "braindecode.augmentation.TimeReverse", "braindecode.augmentation.Transform", "braindecode.augmentation.functional.bandstop_filter", "braindecode.augmentation.functional.channels_dropout", "braindecode.augmentation.functional.channels_permute", "braindecode.augmentation.functional.channels_shuffle", "braindecode.augmentation.functional.frequency_shift", "braindecode.augmentation.functional.ft_surrogate", "braindecode.augmentation.functional.gaussian_noise", "braindecode.augmentation.functional.identity", "braindecode.augmentation.functional.mixup", "braindecode.augmentation.functional.sensors_rotation", "braindecode.augmentation.functional.sign_flip", "braindecode.augmentation.functional.smooth_time_mask", "braindecode.augmentation.functional.time_reverse", "braindecode.classifier.EEGClassifier", "braindecode.datasets.BCICompetitionIVDataset4", "braindecode.datasets.BNCI2014001", "braindecode.datasets.BaseConcatDataset", "braindecode.datasets.BaseDataset", "braindecode.datasets.HGD", "braindecode.datasets.MOABBDataset", "braindecode.datasets.NMT", "braindecode.datasets.SleepPhysionet", "braindecode.datasets.TUH", "braindecode.datasets.TUHAbnormal", "braindecode.datasets.WindowsDataset", "braindecode.datasets.create_from_X_y", "braindecode.datasets.create_from_mne_epochs", "braindecode.datasets.create_from_mne_raw", "braindecode.datautil.load_concat_dataset", "braindecode.datautil.save_concat_dataset", "braindecode.models.ATCNet", "braindecode.models.BIOT", "braindecode.models.Deep4Net", "braindecode.models.DeepSleepNet", "braindecode.models.EEGConformer", "braindecode.models.EEGITNet", "braindecode.models.EEGInception", "braindecode.models.EEGInceptionERP", "braindecode.models.EEGInceptionMI", "braindecode.models.EEGModuleMixin", "braindecode.models.EEGNetv1", "braindecode.models.EEGNetv4", "braindecode.models.EEGResNet", "braindecode.models.EEGSimpleConv", "braindecode.models.HybridNet", "braindecode.models.Labram", "braindecode.models.ShallowFBCSPNet", "braindecode.models.SleepStagerBlanco2020", "braindecode.models.SleepStagerChambon2018", "braindecode.models.SleepStagerEldele2021", "braindecode.models.TCN", "braindecode.models.TIDNet", "braindecode.models.TimeDistributed", "braindecode.models.USleep", "braindecode.models.get_output_shape", "braindecode.preprocessing.Crop", "braindecode.preprocessing.DropChannels", "braindecode.preprocessing.Filter", "braindecode.preprocessing.Pick", "braindecode.preprocessing.Preprocessor", "braindecode.preprocessing.Resample", "braindecode.preprocessing.SetEEGReference", "braindecode.preprocessing.create_fixed_length_windows", "braindecode.preprocessing.create_windows_from_events", "braindecode.preprocessing.create_windows_from_target_channels", "braindecode.preprocessing.exponential_moving_demean", "braindecode.preprocessing.exponential_moving_standardize", "braindecode.preprocessing.filterbank", "braindecode.preprocessing.preprocess", "braindecode.regressor.EEGRegressor", "braindecode.samplers.BalancedSequenceSampler", "braindecode.samplers.RecordingSampler", "braindecode.samplers.RelativePositioningSampler", "braindecode.samplers.SequenceSampler", "braindecode.training.CroppedLoss", "braindecode.training.CroppedTimeSeriesEpochScoring", "braindecode.training.CroppedTrialEpochScoring", "braindecode.training.PostEpochTrainScoring", "braindecode.training.TimeSeriesLoss", "braindecode.training.mixup_criterion", "braindecode.training.predict_trials", "braindecode.training.trial_preds_from_window_preds", "braindecode.util.set_random_seeds", "braindecode.visualization.compute_amplitude_gradients", "braindecode.visualization.plot_confusion_matrix", "Frequently Asked Questions (FAQ)", "Braindecode", "Installation", "Installing from PyPI", "Installing from sources", "Computation times", "What\u2019s new"], "terms": {"thi": [0, 2, 8, 9, 10, 11, 14, 16, 17, 18, 19, 20, 22, 31, 48, 49, 50, 68, 69, 70, 71, 73, 75, 76, 77, 78, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 112, 116, 118, 120, 121, 124, 126, 132, 137, 140, 144, 146], "i": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 26, 27, 28, 30, 31, 35, 37, 41, 42, 43, 46, 47, 52, 54, 55, 59, 60, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 114, 115, 116, 117, 118, 123, 124, 127, 132, 136, 137, 141, 142, 143, 146], "class": [0, 3, 4, 5, 9, 10, 11, 12, 14, 18, 20, 21, 26, 27, 28, 29, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 60, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 139, 146], "camelcas": 0, "name": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 20, 21, 22, 26, 29, 30, 32, 40, 68, 70, 71, 72, 73, 74, 80, 83, 111, 112, 113, 114, 116, 124, 130, 131, 132, 146], "function": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 20, 22, 26, 27, 28, 30, 31, 32, 35, 42, 54, 68, 71, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 105, 106, 108, 110, 114, 116, 118, 124, 130, 131, 132, 137, 146], "underscore_cas": 0, "braindecod": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 142, 143, 145, 146], "base": [0, 2, 3, 4, 5, 8, 9, 10, 12, 16, 18, 20, 21, 26, 27, 28, 29, 30, 31, 32, 36, 44, 46, 61, 63, 68, 70, 71, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 104, 110, 112, 113, 117, 118, 124, 126, 134, 146], "datautil": [0, 5, 18, 79, 146], "exampl": [1, 2, 6, 8, 9, 10, 11, 13, 14, 15, 16, 22, 23, 25, 31, 33, 34, 37, 39, 40, 44, 45, 46, 47, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 116, 140, 145, 146], "explain": [1, 4, 24, 27, 90], "more": [1, 2, 3, 4, 5, 8, 9, 10, 11, 16, 18, 20, 21, 22, 24, 26, 27, 28, 29, 30, 68, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 115, 116, 123, 124, 137, 144, 146], "topic": [1, 24, 35], "finger": [1, 6, 7, 13, 24, 69, 71, 73, 94, 101, 109, 114, 117, 119, 121, 123, 130, 131, 133, 137, 145, 146], "flexion": [1, 6, 7, 13, 24, 69, 71, 94, 101, 109, 114, 117, 119, 121, 123, 130, 131, 133, 137, 145, 146], "crop": [1, 6, 8, 10, 11, 12, 16, 20, 24, 25, 29, 30, 31, 32, 33, 68, 69, 71, 74, 76, 79, 94, 101, 109, 114, 117, 118, 121, 123, 124, 129, 130, 131, 133, 135, 137, 139, 145, 146], "decod": [1, 3, 4, 6, 7, 11, 13, 20, 22, 24, 25, 26, 29, 30, 31, 32, 33, 35, 68, 69, 71, 74, 80, 87, 89, 94, 97, 98, 99, 100, 101, 108, 109, 114, 117, 118, 119, 121, 123, 124, 129, 130, 131, 133, 135, 137, 139, 141, 145, 146], "bcic": [1, 6, 7, 13, 20, 24, 25, 29, 32, 33, 36, 38, 41, 42, 43, 51, 52, 54, 69, 71, 74, 94, 101, 109, 114, 117, 118, 119, 121, 123, 129, 130, 131, 133, 137, 139, 145, 146], "iv": [1, 6, 7, 13, 20, 21, 24, 25, 26, 28, 29, 30, 32, 33, 36, 38, 41, 42, 43, 51, 52, 54, 69, 71, 74, 85, 93, 94, 101, 109, 114, 117, 118, 119, 121, 123, 129, 130, 131, 133, 137, 139, 145, 146], "4": [1, 3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 69, 70, 71, 73, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 103, 106, 108, 109, 114, 117, 119, 121, 122, 123, 125, 126, 130, 131, 133, 137, 145], "ecog": [1, 6, 7, 13, 24, 69, 71, 94, 101, 109, 114, 116, 117, 119, 121, 123, 130, 131, 133, 137, 141, 145, 146], "dataset": [1, 6, 13, 14, 15, 16, 23, 25, 26, 33, 36, 38, 41, 42, 43, 51, 52, 54, 68, 83, 85, 86, 93, 94, 101, 103, 104, 107, 108, 109, 114, 117, 118, 119, 121, 123, 124, 126, 128, 129, 130, 131, 133, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146], "data": [1, 2, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 21, 25, 30, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 58, 61, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 86, 87, 89, 94, 98, 100, 101, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 124, 129, 134, 137, 139, 140, 141, 145, 146], "augment": [1, 6, 24, 71, 74, 89, 94, 101, 114, 118, 121, 123, 137, 141, 145, 146], "2a": [1, 6, 20, 21, 24, 25, 26, 28, 29, 30, 32, 33, 36, 38, 41, 42, 43, 51, 52, 54, 71, 74, 85, 93, 94, 101, 114, 118, 121, 123, 129, 137, 139, 145, 146], "search": [1, 6, 24, 29, 30, 36, 38, 42, 52, 54, 68, 71, 74, 94, 101, 114, 118, 121, 123, 124, 137, 140, 145, 146], "best": [1, 6, 24, 32, 36, 38, 42, 52, 54, 71, 74, 94, 101, 114, 118, 121, 123, 137, 145], "self": [1, 4, 6, 11, 24, 32, 68, 71, 76, 85, 89, 94, 103, 114, 118, 123, 124, 126, 127, 128, 137, 140, 145, 146], "supervis": [1, 4, 6, 24, 29, 32, 71, 76, 94, 103, 114, 118, 123, 126, 127, 137, 145, 146], "learn": [1, 2, 3, 4, 6, 8, 9, 10, 11, 24, 25, 27, 28, 29, 31, 32, 33, 35, 37, 38, 39, 40, 44, 46, 52, 55, 56, 57, 58, 61, 63, 66, 68, 71, 74, 76, 86, 87, 91, 92, 94, 97, 98, 99, 100, 101, 103, 104, 114, 118, 121, 123, 124, 126, 127, 137, 139, 141, 143, 145, 146], "eeg": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 17, 20, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 73, 74, 75, 76, 77, 78, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 112, 113, 114, 116, 117, 118, 121, 123, 126, 127, 134, 137, 139, 141, 145, 146], "rel": [1, 6, 24, 29, 30, 71, 76, 94, 103, 114, 118, 123, 126, 127, 137, 145], "posit": [1, 6, 24, 27, 37, 47, 48, 49, 50, 52, 55, 64, 66, 71, 76, 94, 100, 103, 114, 118, 123, 126, 127, 136, 137, 145], "go": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 110], "end": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 35, 68, 93, 110, 115, 117, 118, 124, 130, 131, 132, 146], "download": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 69, 77, 78, 143], "full": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 137], "code": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 85, 86, 89, 90, 91, 92, 98, 100, 104, 105, 106, 140, 142, 144, 146], "tutori": [2, 3, 4, 5, 8, 9, 10, 11, 22, 24, 26, 27, 28, 29, 30, 32, 144, 146], "show": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 21, 26, 28, 29, 30, 31, 32, 73, 94, 146], "you": [2, 3, 4, 5, 8, 9, 11, 12, 16, 17, 18, 19, 21, 22, 24, 27, 28, 29, 32, 35, 68, 124, 132, 140, 142, 143, 144], "how": [2, 3, 4, 5, 8, 9, 10, 11, 12, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 33, 68, 71, 74, 94, 101, 110, 114, 116, 118, 121, 123, 124, 137, 145, 146], "deep": [2, 3, 4, 5, 8, 9, 10, 11, 14, 26, 27, 28, 29, 30, 31, 32, 35, 44, 61, 87, 91, 92, 97, 98, 99, 101, 103, 104, 106, 139, 141, 143], "bci": [2, 4, 8, 21, 26, 27, 28, 29, 30, 42, 60, 69, 70, 85, 93, 98, 100, 106], "competit": [2, 4, 8, 11, 14, 21, 26, 27, 28, 29, 30, 69, 70, 91, 92, 98], "us": [2, 3, 4, 7, 8, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 35, 37, 39, 40, 44, 46, 47, 48, 49, 50, 53, 56, 58, 60, 61, 64, 68, 70, 73, 75, 79, 85, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100, 102, 105, 106, 110, 112, 113, 115, 116, 124, 132, 135, 140, 143, 144, 145, 146], "mode": [2, 24, 32, 68, 87, 100, 112, 115, 124, 132, 144, 146], "For": [2, 4, 5, 8, 14, 26, 27, 28, 29, 32, 68, 108, 112, 116, 124, 126, 132, 134, 137, 141, 142, 143, 144], "we": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 24, 26, 27, 28, 29, 30, 32, 35, 73, 86, 89, 124, 137, 140, 143, 144], "predict": [2, 4, 5, 8, 9, 10, 11, 27, 28, 31, 68, 72, 75, 94, 98, 107, 124, 129, 130, 131, 132, 133, 134, 135, 136, 146], "5": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 68, 70, 85, 87, 88, 89, 91, 92, 93, 98, 100, 101, 102, 103, 104, 105, 108, 124, 145], "regress": [2, 5, 8, 24, 25, 30, 33, 71, 72, 87, 94, 101, 109, 117, 124, 129, 137, 145, 146], "target": [2, 4, 5, 8, 9, 10, 15, 17, 18, 20, 23, 24, 27, 28, 29, 31, 46, 54, 63, 68, 69, 71, 72, 77, 79, 80, 82, 83, 117, 118, 124, 125, 126, 129, 130, 133, 134, 135, 139, 145, 146], "correspond": [2, 5, 8, 12, 21, 29, 30, 31, 37, 40, 68, 69, 70, 71, 79, 80, 82, 116, 118, 123, 124, 125, 133], "each": [2, 4, 8, 9, 10, 11, 12, 14, 16, 17, 19, 21, 22, 26, 29, 30, 31, 36, 37, 38, 42, 47, 51, 53, 55, 56, 60, 64, 65, 67, 68, 69, 70, 71, 73, 76, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 112, 115, 117, 118, 124, 126, 128, 130, 131, 132, 136], "The": [2, 3, 4, 5, 8, 10, 11, 12, 14, 16, 18, 20, 21, 26, 27, 29, 30, 31, 32, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 52, 59, 68, 70, 72, 73, 75, 79, 85, 86, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 104, 108, 110, 111, 112, 113, 115, 116, 122, 124, 134, 135, 139, 142, 144], "were": [2, 8, 9, 11, 14, 19, 26, 30, 70, 71, 73, 89, 102, 112, 146], "record": [2, 4, 8, 9, 10, 11, 14, 16, 21, 22, 26, 31, 69, 70, 73, 75, 76, 77, 78, 82, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 116, 117, 118, 125, 126, 127, 146], "time": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 53, 67, 68, 69, 71, 76, 79, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 120, 121, 124, 125, 129, 130, 133, 136, 146], "seri": [2, 4, 5, 8, 9, 10, 29, 30, 31, 68, 72, 79, 82, 98, 102, 103, 124, 126, 130, 146], "25": [2, 5, 8, 9, 11, 12, 13, 14, 16, 27, 29, 30, 31, 32, 70, 85, 87, 88, 89, 91, 92, 95, 96, 101, 103, 112, 145], "hz": [2, 3, 4, 5, 8, 9, 11, 16, 27, 29, 30, 31, 37, 43, 55, 59, 70, 85, 89, 93, 108, 112], "so": [2, 5, 8, 9, 10, 11, 14, 16, 18, 26, 27, 28, 29, 30, 32, 37, 40, 68, 108, 117, 122, 124, 146], "an": [2, 5, 8, 10, 12, 14, 18, 19, 20, 21, 22, 26, 27, 29, 30, 32, 41, 47, 48, 49, 50, 54, 68, 70, 72, 73, 75, 79, 82, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 114, 115, 116, 118, 124, 126, 132, 140, 141, 146], "author": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 31, 35, 89, 90, 91, 92, 93, 95, 96, 98], "maciej": [2, 8, 146], "sliwowski": [2, 8], "maciek": [2, 8], "gmail": [2, 5, 8, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 31], "com": [2, 3, 5, 8, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 31, 77, 78, 144], "moham": [2, 8, 146], "fattouh": [2, 8, 146], "mo": [2, 8], "licens": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 31], "bsd": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 31], "3": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 31, 32, 44, 46, 47, 61, 63, 64, 68, 69, 70, 73, 76, 85, 87, 91, 92, 93, 94, 97, 102, 105, 106, 124, 125, 126, 135, 142, 145, 146], "claus": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26], "first": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 26, 27, 28, 30, 40, 52, 66, 68, 71, 75, 76, 77, 78, 85, 87, 89, 98, 101, 104, 112, 115, 116, 118, 124, 140, 144], "In": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 18, 20, 21, 26, 27, 28, 29, 30, 32, 37, 44, 46, 47, 48, 49, 50, 52, 55, 61, 63, 64, 66, 68, 70, 86, 112, 113, 116, 124, 137], "avail": [2, 3, 4, 8, 9, 10, 11, 12, 14, 16, 19, 22, 26, 27, 28, 29, 30, 32, 69, 76, 86, 89, 91, 92, 98, 104, 117, 118, 125, 126], "part": [2, 8, 16, 17, 19, 28, 29, 32, 38, 39, 52, 56, 58, 66, 89, 91, 92], "librari": [2, 3, 4, 8, 24, 26, 28, 29, 30, 35, 69, 144], "http": [2, 4, 5, 8, 12, 26, 27, 28, 29, 30, 35, 46, 63, 68, 69, 76, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 101, 102, 104, 105, 106, 108, 124, 134, 137, 139, 144], "searchwork": [2, 8, 69], "stanford": [2, 8, 69], "edu": [2, 4, 8, 69], "view": [2, 4, 8, 22, 69], "zk881ps0522": [2, 8, 69], "contain": [2, 5, 8, 12, 14, 16, 18, 21, 22, 26, 31, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 52, 55, 63, 64, 66, 68, 69, 71, 74, 75, 76, 79, 116, 117, 118, 124, 125, 126, 127, 133, 134, 140, 146], "signal": [2, 3, 4, 5, 8, 9, 10, 11, 12, 18, 20, 26, 28, 29, 30, 31, 36, 37, 38, 39, 42, 43, 47, 48, 49, 50, 52, 55, 56, 58, 59, 60, 64, 66, 70, 72, 76, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 112, 115, 116, 117, 118, 122, 124, 127, 146], "differ": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 18, 21, 26, 27, 28, 29, 30, 70, 91, 92, 93, 108, 127, 142], "than": [2, 5, 8, 9, 10, 11, 12, 14, 16, 27, 32, 37, 55, 68, 75, 82, 112, 118, 124, 146], "standard": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 32, 36, 44, 47, 48, 49, 50, 61, 64, 116, 121, 146], "setup": [2, 4, 8, 27, 142], "multipl": [2, 3, 4, 8, 9, 10, 14, 15, 16, 21, 23, 24, 27, 29, 30, 68, 71, 77, 93, 107, 108, 112, 116, 117, 122, 124, 135, 145, 146], "trial": [2, 3, 4, 8, 19, 21, 27, 28, 29, 30, 31, 32, 68, 70, 73, 80, 82, 118, 124, 130, 131, 135, 136, 146], "usual": [2, 3, 4, 8, 16, 29, 32, 68, 124], "one": [2, 4, 8, 9, 10, 11, 14, 16, 20, 26, 27, 29, 30, 32, 41, 46, 52, 66, 68, 70, 71, 85, 89, 93, 94, 108, 116, 117, 118, 124, 125, 126, 127, 140], "per": [2, 4, 5, 8, 9, 10, 11, 27, 46, 52, 66, 70, 73, 76, 93, 98, 106, 116, 146], "here": [2, 3, 4, 5, 8, 10, 11, 12, 21, 22, 24, 26, 27, 28, 29, 30, 32, 43, 59, 75, 82, 86, 93, 118], "chang": [2, 5, 8, 14, 18, 31, 45, 68, 116, 124, 132, 144], "ar": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 32, 35, 37, 46, 63, 68, 71, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 116, 117, 118, 122, 124, 127, 129, 133, 140, 142, 143, 144, 146], "sampl": [2, 3, 4, 5, 8, 9, 10, 14, 16, 17, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 42, 43, 46, 47, 48, 49, 50, 52, 55, 58, 59, 60, 66, 68, 70, 72, 73, 76, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 112, 117, 118, 125, 126, 127, 128, 134, 140, 146], "frequenc": [2, 3, 4, 8, 11, 12, 16, 17, 26, 27, 28, 29, 30, 31, 32, 37, 43, 55, 59, 73, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 112, 115, 122, 125, 146], "equal": [2, 8, 32, 80, 81, 82, 94, 100, 109, 117], "If": [2, 8, 14, 18, 19, 22, 26, 29, 30, 32, 35, 37, 46, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 116, 117, 118, 122, 123, 124, 125, 127, 128, 132, 133, 134, 135, 140, 144], "pleas": [2, 3, 4, 5, 8, 11, 12, 22, 26, 27, 28, 29, 30, 32, 69, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 105, 106, 108, 122, 144, 146], "cite": [2, 8, 69], "1": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 30, 31, 33, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 60, 61, 63, 64, 66, 68, 69, 70, 71, 73, 75, 76, 77, 78, 83, 85, 87, 91, 92, 93, 94, 97, 98, 100, 101, 102, 104, 106, 108, 109, 112, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 134, 135, 136, 139, 145], "miller": [2, 8, 27, 28, 29, 30, 69], "kai": [2, 8, 69], "j": [2, 4, 5, 8, 26, 27, 28, 29, 30, 31, 37, 40, 42, 44, 52, 55, 57, 60, 61, 66, 69, 86, 87, 90, 95, 96, 97, 99, 101, 103, 105, 106, 139], "A": [2, 3, 4, 5, 8, 9, 10, 16, 27, 28, 29, 30, 31, 34, 36, 38, 39, 42, 54, 56, 58, 60, 68, 69, 71, 74, 75, 77, 78, 88, 91, 92, 93, 95, 96, 98, 102, 103, 106, 112, 116, 117, 118, 123, 124, 127, 135, 139, 146], "human": [2, 8, 26, 31, 35, 40, 57, 69, 87, 97, 99, 101, 112, 139], "electrocorticograph": [2, 8, 69], "analys": [2, 8, 29, 30, 69], "natur": [2, 8, 14, 69], "behaviour": [2, 8, 69], "11": [2, 3, 4, 5, 8, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 27, 28, 29, 31, 32, 69, 88, 145], "2019": [2, 8, 31, 69], "1225": [2, 8, 69], "1235": [2, 8, 69], "doi": [2, 8, 10, 26, 27, 28, 29, 30, 35, 69, 85, 87, 90, 91, 92, 97, 99, 101, 102, 104, 106, 139], "org": [2, 4, 5, 8, 26, 27, 28, 29, 30, 35, 46, 63, 68, 69, 76, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 104, 105, 106, 108, 124, 134, 137, 139], "10": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 35, 40, 47, 48, 49, 50, 64, 68, 69, 85, 87, 89, 90, 91, 92, 97, 99, 100, 101, 102, 104, 106, 112, 116, 124, 125, 139, 145], "1038": [2, 8, 69], "s41562": [2, 8, 69], "019": [2, 8, 69, 102], "0678": [2, 8, 69], "import": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 42, 60, 140, 144], "copi": [2, 11, 16, 42, 60, 69, 110, 140], "numpi": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 17, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 61, 64, 68, 112, 115, 124, 137, 139], "np": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 26, 29, 31, 32, 68, 120, 121, 124, 125, 126, 127, 128, 135], "sklearn": [2, 4, 5, 8, 9, 10, 11, 16, 27, 28, 29, 30, 31, 68, 124, 132, 139, 146], "from": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 39, 42, 46, 47, 48, 49, 50, 56, 58, 60, 64, 68, 70, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 116, 117, 118, 124, 125, 126, 127, 128, 130, 131, 132, 134, 135, 142, 145, 146], "mne": [2, 3, 4, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 25, 28, 30, 33, 47, 64, 69, 71, 72, 76, 79, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 124, 140, 145, 146], "set_log_level": [2, 8, 12, 14, 22], "bcicompetitionivdataset4": [2, 8, 146], "subject_id": [2, 3, 4, 5, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 27, 28, 29, 30, 32, 69, 70, 73, 74, 76, 146], "can": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 26, 27, 28, 29, 30, 32, 35, 43, 47, 64, 68, 71, 75, 76, 77, 78, 79, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 112, 113, 115, 116, 124, 135, 142, 143, 146], "easili": [2, 8, 20, 26, 28, 29, 30, 32, 126], "addit": [2, 8, 12, 17, 20, 21, 26, 28, 29, 30, 32, 44, 61, 68, 70, 71, 72, 79, 82, 118, 124, 139], "info": [2, 3, 4, 8, 12, 14, 16, 17, 19, 20, 21, 26, 27, 28, 29, 30, 32, 71, 79, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 112, 113, 116, 126, 128, 140, 146], "store": [2, 4, 8, 9, 10, 11, 12, 14, 18, 22, 28, 29, 30, 32, 69, 71, 83, 146], "descript": [2, 5, 8, 12, 17, 18, 19, 20, 22, 27, 28, 29, 30, 32, 69, 70, 71, 72, 77, 78, 79, 82, 83, 85, 86, 89, 91, 93, 95, 96, 97, 98, 99, 102, 108, 117, 118], "attribut": [2, 8, 26, 28, 29, 30, 32, 68, 72, 79, 114, 124, 146], "case": [2, 8, 16, 21, 26, 27, 28, 29, 30, 32, 68, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 116, 124, 137, 143, 146], "session": [2, 4, 8, 12, 18, 20, 21, 27, 28, 29, 30, 31, 32, 70, 73, 126], "column": [2, 8, 19, 21, 22, 27, 28, 29, 30, 32, 71, 79, 83, 94, 125, 126, 139], "select": [2, 4, 8, 9, 16, 20, 27, 28, 29, 30, 32, 37, 73, 100, 116, 125], "valid": [2, 21, 26, 27, 31, 32, 68, 104, 116, 117, 118, 124, 132, 133, 146], "final": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 26, 27, 28, 29, 30, 32, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 121], "evalu": [2, 3, 4, 5, 8, 9, 10, 11, 14, 21, 27, 28, 30, 98, 105], "train_set": [2, 3, 4, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32], "test_set": [2, 8, 29, 31, 32], "now": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 22, 26, 27, 28, 30, 116, 144, 146], "appli": [2, 3, 4, 5, 8, 9, 10, 12, 16, 18, 19, 20, 26, 27, 28, 29, 30, 32, 36, 37, 38, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 68, 72, 79, 100, 102, 103, 107, 112, 114, 116, 122, 123, 124, 134, 146], "like": [2, 8, 16, 26, 28, 29, 30, 32, 37, 42, 47, 55, 60, 64, 68, 80, 81, 82, 104, 112, 113, 124, 126, 144, 146], "bandpass": [2, 3, 4, 8, 20, 27, 28, 29, 30, 32, 70, 112, 122], "filter": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 20, 26, 27, 28, 29, 30, 32, 37, 55, 70, 85, 87, 89, 91, 92, 93, 96, 101, 103, 105, 106, 108, 114, 115, 122, 146], "our": [2, 5, 8, 9, 10, 11, 12, 16, 20, 26, 27, 28, 30, 32, 73, 142], "either": [2, 8, 26, 28, 29, 30, 68, 70, 71, 73, 94, 112, 116, 124, 135], "provid": [2, 8, 9, 10, 11, 26, 28, 30, 32, 35, 68, 70, 71, 72, 75, 77, 78, 86, 107, 112, 113, 114, 123, 124, 140], "raw": [2, 3, 4, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 27, 28, 29, 30, 31, 71, 72, 75, 76, 77, 78, 82, 88, 110, 111, 112, 113, 114, 116, 117, 118, 122, 141, 146], "epoch": [2, 3, 4, 5, 8, 9, 10, 11, 14, 19, 24, 25, 27, 28, 29, 30, 31, 32, 33, 68, 71, 79, 81, 82, 94, 101, 110, 111, 112, 113, 114, 116, 117, 118, 124, 127, 130, 131, 132, 145, 146], "your": [2, 3, 4, 8, 14, 16, 21, 24, 25, 27, 28, 30, 33, 35, 68, 71, 74, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 101, 102, 105, 106, 108, 114, 118, 121, 123, 124, 137, 140, 142, 145], "own": [2, 8, 27, 28, 29, 30, 32, 73, 140], "object": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 18, 19, 21, 27, 28, 29, 30, 31, 32, 41, 72, 75, 76, 77, 78, 79, 82, 110, 114, 117, 118, 123, 139, 146], "underli": [2, 5, 8, 28, 30, 114], "arrai": [2, 4, 8, 11, 17, 22, 26, 28, 29, 30, 37, 47, 54, 55, 64, 68, 80, 81, 82, 112, 113, 114, 115, 124, 128, 135, 139], "step": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 18, 22, 28, 29, 30, 32, 82, 100, 118, 140], "taken": [2, 5, 8, 14], "process": [2, 4, 5, 7, 8, 13, 14, 15, 16, 22, 24, 29, 30, 71, 77, 86, 114, 117, 123, 145, 146], "pipelin": [2, 5, 8, 29, 32], "onli": [2, 4, 5, 8, 9, 10, 11, 12, 14, 18, 19, 21, 26, 27, 29, 30, 32, 41, 54, 68, 73, 76, 82, 86, 90, 91, 92, 93, 95, 96, 100, 110, 112, 113, 115, 116, 118, 124, 133, 140, 144, 146], "cutoff": [2, 8, 16, 112], "proper": [2, 8], "other": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 18, 26, 29, 30, 32, 54, 68, 73, 76, 85, 86, 87, 88, 94, 97, 99, 100, 101, 102, 103, 104, 105, 108, 124], "mai": [2, 3, 4, 5, 8, 9, 10, 11, 16, 18, 19, 27, 28, 29, 32, 35, 68, 100, 124, 132, 137, 140], "need": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 26, 27, 28, 29, 32, 68, 85, 89, 93, 124, 137, 142, 146], "These": [2, 5, 8, 26, 27, 28, 30], "prepocess": [2, 8, 28, 30], "directli": [2, 3, 5, 8, 12, 22, 26, 27, 28, 30, 31, 68, 79, 114, 116, 124, 144], "fly": [2, 8, 28, 30, 72, 79, 146], "transform": [2, 5, 8, 9, 10, 11, 20, 27, 28, 29, 30, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 72, 79, 80, 81, 82, 86, 89, 94, 100, 124, 146], "pytorch": [2, 8, 14, 22, 24, 25, 26, 27, 28, 30, 33, 68, 71, 74, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 105, 106, 108, 114, 118, 121, 123, 124, 135, 137, 143, 145, 146], "torchvis": [2, 8, 28, 30], "preprocessor": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 18, 20, 27, 28, 29, 30, 32, 123, 146], "exponential_moving_standard": [2, 3, 4, 8, 27, 28, 29, 30, 32], "low_cut_hz": [2, 3, 4, 8, 27, 28, 29, 30, 32], "0": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 34, 37, 38, 39, 42, 44, 45, 46, 54, 56, 58, 60, 63, 68, 70, 71, 75, 76, 77, 78, 82, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 124, 126, 135, 139, 145], "low": [2, 3, 4, 5, 8, 9, 10, 11, 16, 27, 28, 29, 30, 32, 37, 55, 91, 92, 98, 112], "high_cut_hz": [2, 3, 4, 5, 8, 9, 10, 27, 28, 29, 30, 32], "200": [2, 8, 10, 11, 14, 86, 87, 100], "high": [2, 3, 4, 8, 11, 27, 28, 29, 30, 32, 37, 55, 73, 91, 92, 108, 112, 125], "higher": [2, 5, 8, 32, 104], "paramet": [2, 3, 4, 5, 8, 10, 14, 16, 17, 18, 19, 26, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 139, 146], "exponenti": [2, 3, 4, 8, 27, 28, 29, 30, 32, 108, 120, 121], "move": [2, 3, 4, 8, 14, 16, 27, 28, 29, 30, 32, 69, 94, 120, 121, 146], "factor_new": [2, 3, 4, 8, 27, 28, 29, 30, 32, 120, 121], "1e": [2, 3, 4, 8, 9, 10, 11, 27, 28, 29, 30, 32], "init_block_s": [2, 3, 4, 8, 27, 28, 29, 30, 32, 120, 121], "1000": [2, 3, 4, 8, 12, 22, 26, 27, 28, 29, 30, 32, 73, 91, 92, 126], "30": [2, 5, 8, 9, 10, 11, 16, 27, 31, 76, 104, 105, 108], "second": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 30, 31, 32, 40, 70, 73, 75, 77, 78, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110], "limit": [2, 5, 8, 11, 12, 16, 26, 110], "memori": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 68, 118, 124], "run": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 68, 70, 73, 82, 85, 89, 93, 102, 112, 114, 115, 118, 124, 126, 137, 140, 144, 146], "6": [2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 31, 32, 70, 73, 89, 112, 145], "To": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 17, 22, 26, 27, 28, 29, 30, 31, 32, 100, 112, 143, 144], "obtain": [2, 3, 4, 5, 8, 9, 11, 27, 28, 47, 64, 68, 72, 73, 79, 98, 124, 126], "whole": [2, 8, 9, 10], "should": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 20, 26, 27, 28, 30, 37, 40, 47, 52, 55, 64, 66, 68, 69, 71, 72, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 115, 116, 124, 132, 140, 144], "valid_set": [2, 3, 8, 9, 10, 11, 27, 28, 31], "deepcopi": 2, "tmin": [2, 8, 12, 16, 19, 110], "24": [2, 5, 9, 10, 11, 12, 16, 27, 32, 102, 106, 113, 145], "tmax": [2, 8, 12, 110], "n_job": [2, 3, 4, 5, 12, 14, 16, 27, 28, 29, 30, 32, 75, 77, 78, 83, 112, 115, 117, 118, 119, 123, 146], "baseconcatdataset": [2, 5, 9, 10, 12, 14, 16, 21, 31, 68, 80, 81, 82, 83, 117, 118, 123, 124, 126, 135, 146], "0x7fcad92928f0": 2, "variabl": [2, 4, 8, 29, 30, 69, 137], "channel": [2, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 31, 32, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 52, 56, 57, 58, 59, 60, 61, 63, 64, 66, 76, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 112, 113, 116, 117, 118, 122, 146], "type": [2, 3, 4, 8, 11, 26, 27, 28, 29, 32, 37, 38, 39, 40, 42, 43, 44, 46, 47, 52, 63, 68, 71, 73, 80, 81, 82, 83, 93, 94, 98, 100, 107, 109, 112, 113, 115, 116, 117, 118, 120, 121, 123, 124, 126, 128, 134, 136, 139, 146], "misc": [2, 4, 8, 79], "thu": [2, 4, 8, 110], "those": [2, 4, 5, 8, 12, 68, 112, 113, 124], "have": [2, 4, 5, 8, 11, 12, 14, 16, 17, 19, 21, 26, 27, 28, 29, 30, 32, 47, 52, 64, 66, 68, 80, 81, 82, 93, 98, 100, 114, 116, 117, 124, 132, 140, 143, 144, 146], "further": [2, 4, 5, 8, 9, 10, 11, 27, 29, 32, 68, 124], "howev": [2, 3, 4, 5, 8, 11, 14, 16, 21, 26, 27, 28, 29, 118], "mani": [2, 4, 5, 8, 16, 26, 27, 29, 32, 71], "ignor": [2, 4, 8, 52, 68, 85, 89, 93, 111, 114, 117, 118, 124, 127], "perform": [2, 4, 8, 9, 10, 11, 26, 27, 28, 29, 30, 32, 70, 71, 73, 85, 89, 93, 98, 104, 120, 121, 146], "oper": [2, 3, 4, 8, 16, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 62, 110, 115], "see": [2, 3, 4, 5, 8, 9, 10, 11, 16, 18, 20, 21, 24, 26, 27, 28, 29, 30, 32, 46, 63, 68, 69, 70, 73, 76, 78, 79, 90, 94, 95, 96, 99, 105, 106, 110, 111, 112, 113, 115, 116, 117, 118, 123, 124, 125, 127, 128, 134, 137, 140, 143, 144], "tool": [2, 4, 8, 76, 141, 144], "stabl": [2, 4, 5, 8, 16, 26, 68, 76, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 101, 102, 105, 106, 108, 124, 137, 139], "glossari": [2, 4, 8], "html": [2, 4, 5, 8, 12, 26, 27, 68, 76, 77, 78, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 101, 102, 105, 106, 108, 124, 137, 139], "term": [2, 4, 8, 88, 94], "todo": 2, "ensur": [2, 108, 137, 143], "remov": [2, 3, 4, 5, 8, 9, 11, 18, 19, 20, 21, 26, 27, 28, 29, 30, 31, 32, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 116, 136, 146], "pick_typ": [2, 3, 4, 8, 20, 27, 28, 29, 30, 32, 111], "true": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 26, 27, 28, 29, 30, 31, 32, 46, 47, 48, 49, 50, 68, 71, 72, 75, 76, 77, 78, 79, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 114, 116, 117, 118, 119, 122, 124, 127, 128, 130, 131, 132, 135, 137, 146], "lambda": [2, 3, 4, 5, 8, 9, 10, 12, 27, 28, 29, 30, 32, 68, 97, 124], "x": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 20, 22, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 80, 81, 82, 85, 86, 88, 89, 93, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 115, 120, 121, 124, 129, 132, 133, 135], "1e6": [2, 3, 4, 5, 8, 9, 10, 12, 27, 28, 29, 30, 32], "pick": [2, 8, 10, 12, 19, 20, 112, 117, 118, 119, 146], "convert": [2, 3, 4, 5, 8, 9, 10, 12, 17, 19, 27, 28, 29, 30, 31, 32, 112], "v": [2, 3, 4, 5, 8, 9, 10, 12, 16, 27, 28, 29, 30, 32, 91, 92, 95, 96, 98, 105], "uv": [2, 3, 4, 5, 8, 9, 10, 12, 27, 28, 29, 30, 32], "l_freq": [2, 3, 4, 5, 8, 9, 10, 16, 27, 28, 29, 30, 32, 112], "h_freq": [2, 3, 4, 5, 8, 9, 10, 16, 27, 28, 29, 30, 32, 112], "extract": [2, 8, 12, 14, 16, 17, 19, 22, 27, 32, 79, 91, 92, 93, 100, 102, 104, 117, 118, 125, 127], "check": [2, 3, 4, 8, 9, 10, 11, 26, 27, 28, 29, 30, 32, 35, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 105, 106, 108, 140, 143, 146], "thei": [2, 3, 4, 8, 14, 16, 26, 27, 28, 29, 30, 32, 116, 146], "same": [2, 3, 4, 5, 8, 9, 10, 11, 14, 18, 21, 27, 28, 29, 30, 32, 43, 52, 59, 66, 68, 73, 76, 104, 124, 127], "all": [2, 3, 4, 8, 12, 14, 16, 24, 26, 27, 28, 29, 30, 32, 43, 44, 52, 59, 61, 66, 68, 69, 70, 73, 74, 76, 85, 89, 91, 92, 93, 94, 100, 110, 112, 113, 115, 116, 117, 118, 124, 132, 145, 146], "sfreq": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 26, 27, 28, 29, 30, 31, 32, 37, 43, 55, 59, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 112, 124, 146], "assert": [2, 3, 4, 8, 12, 14, 27, 28, 29, 30, 32], "d": [2, 3, 4, 5, 8, 12, 14, 22, 26, 27, 28, 29, 30, 31, 32, 38, 39, 42, 56, 58, 60, 75, 85, 87, 96, 97, 99, 101, 102, 106, 127, 139, 146], "target_sfreq": [2, 8], "temp": [2, 8], "home": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19, 26, 27, 28, 29, 30, 31, 32], "runner": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19, 26, 27, 28, 29, 30, 31, 32], "work": [2, 3, 4, 5, 8, 9, 10, 12, 16, 18, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 32, 68, 94, 108, 110, 124, 132, 141, 143, 146], "py": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 145], "60": [2, 3, 4, 5, 8, 9, 10, 12, 16, 19, 27, 28, 29, 30, 32], "userwarn": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 18, 19, 26, 27, 28, 29, 30, 31, 32], "choic": [2, 3, 4, 5, 8, 9, 10, 12, 27, 28, 29, 30, 32, 89, 98, 146], "cannot": [2, 3, 4, 5, 8, 9, 10, 11, 12, 27, 28, 29, 30, 32, 68, 110, 124], "save": [2, 3, 4, 5, 8, 9, 10, 12, 14, 15, 16, 23, 24, 27, 28, 29, 30, 32, 68, 71, 74, 83, 114, 118, 123, 124, 145, 146], "warn": [2, 3, 4, 5, 8, 9, 10, 12, 14, 16, 18, 19, 26, 27, 28, 29, 30, 31, 32, 70, 104, 111, 117, 118, 137, 146], "contrast": [2, 4, 5, 27, 37, 44, 52, 55, 61, 66, 86], "trialwis": [2, 4, 8, 20, 27, 28, 30, 68, 124, 135, 146], "befor": [2, 11, 16, 27, 28, 29, 30, 32, 68, 71, 72, 76, 79, 85, 87, 88, 89, 102, 103, 104, 120, 121, 124, 132, 137, 143, 146], "becaus": [2, 16, 26, 27, 29, 30, 140], "know": [2, 3, 4, 26, 27], "recept": [2, 27, 68, 124, 135], "field": [2, 27, 68, 116, 124, 135], "network": [2, 4, 5, 7, 8, 10, 13, 14, 25, 26, 27, 28, 29, 32, 33, 35, 44, 61, 68, 71, 72, 76, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 114, 117, 118, 123, 124, 126, 128, 129, 135, 137, 139, 145, 146], "larg": [2, 5, 14, 16, 26, 27, 71, 86, 100, 118], "stride": [2, 9, 10, 11, 26, 27, 80, 81, 82, 87, 89, 94, 101, 106, 117, 118], "choos": [2, 3, 4, 8, 18, 27, 28, 29, 30, 32], "input": [2, 3, 4, 8, 10, 11, 14, 21, 26, 27, 28, 29, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 124, 146], "size": [2, 3, 4, 5, 11, 14, 16, 26, 27, 28, 29, 30, 31, 32, 37, 52, 55, 66, 68, 80, 81, 82, 85, 86, 89, 91, 92, 93, 94, 98, 100, 102, 103, 105, 106, 108, 109, 112, 115, 117, 118, 124, 127, 129, 133, 135, 139], "fed": [2, 27, 48, 49, 50, 98], "dure": [2, 4, 5, 8, 9, 10, 11, 12, 14, 27, 28, 29, 30, 32, 68, 69, 100, 112, 116, 124, 146], "ha": [2, 3, 4, 5, 8, 10, 12, 18, 19, 20, 21, 22, 27, 28, 29, 30, 31, 32, 48, 49, 50, 68, 71, 72, 76, 79, 82, 90, 91, 92, 93, 95, 96, 108, 112, 118, 124, 134, 140, 146], "larger": [2, 5, 27, 91, 92], "otherwis": [2, 14, 27, 29, 31, 82, 118], "chosen": [2, 16, 18, 27, 32, 52, 68, 112, 124, 135], "effici": [2, 3, 16, 27], "explan": [2, 27, 122, 123], "begin": [2, 27, 29, 30, 70, 102, 112, 117], "which": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 19, 20, 21, 24, 26, 27, 29, 30, 32, 35, 36, 39, 42, 47, 58, 60, 64, 68, 71, 72, 73, 79, 94, 98, 104, 107, 112, 115, 116, 124, 126, 127, 128, 140], "rate": [2, 5, 14, 27, 28, 29, 30, 31, 32, 68, 73, 89, 91, 92, 100, 102, 103, 104, 108, 124, 146], "input_window_sampl": [2, 3, 4, 8, 14, 26, 27, 28, 29, 30, 31, 32, 87, 89, 90, 91, 92, 95, 96, 97, 99, 101, 106, 109], "come": [2, 8, 14, 28, 30, 32, 128, 137], "some": [2, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 22, 26, 27, 28, 30, 35, 68, 71, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 116, 124, 137], "predefin": [2, 8, 28, 30], "convolut": [2, 5, 8, 9, 11, 24, 25, 26, 27, 28, 29, 30, 33, 35, 42, 44, 60, 61, 71, 72, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 117, 129, 137, 139, 145, 146], "neural": [2, 4, 5, 8, 9, 10, 11, 14, 25, 26, 27, 28, 29, 33, 35, 44, 61, 71, 72, 86, 87, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 106, 109, 117, 129, 137, 139, 145, 146], "architectur": [2, 5, 8, 9, 10, 11, 26, 27, 28, 30, 68, 86, 88, 89, 98, 100, 102, 103, 104, 108, 124, 141], "domain": [2, 4, 8, 16, 28, 30, 43, 59, 98, 108, 112, 115], "shallow": [2, 8, 14, 26, 27, 28, 31, 101], "convnet": [2, 8, 26, 27, 28, 87, 99, 101], "visual": [2, 8, 9, 10, 11, 12, 26, 27, 28, 30, 31, 35, 73, 87, 89, 97, 99, 100, 101, 141, 146], "pure": [2, 5, 8, 28, 30, 146], "therefor": [2, 8, 12, 16, 27, 28, 29, 30, 32, 132], "just": [2, 4, 8, 22, 26, 28, 29, 30, 68, 87, 101, 124], "normal": [2, 5, 8, 9, 10, 28, 30, 100, 102, 103, 126, 139, 146], "nn": [2, 3, 4, 5, 8, 9, 10, 11, 14, 26, 27, 28, 29, 30, 31, 32, 68, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 105, 106, 107, 108, 124, 135], "modul": [2, 4, 5, 8, 9, 10, 11, 14, 26, 28, 30, 32, 68, 85, 86, 89, 91, 92, 93, 100, 104, 107, 124, 135, 137, 139, 143, 146], "torch": [2, 3, 4, 5, 8, 9, 10, 11, 14, 22, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 124, 129, 133, 134, 135, 137, 146], "shallowfbcspnet": [2, 3, 4, 8, 14, 26, 27, 28, 29, 30, 31, 32], "util": [2, 3, 4, 5, 8, 9, 10, 11, 14, 18, 22, 26, 27, 28, 30, 31, 32, 68, 124, 146], "set_random_se": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32, 146], "cuda": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32, 68, 112, 115, 124, 137, 143], "is_avail": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32], "gpu": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 32, 68, 124, 143, 146], "devic": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32, 36, 68, 124, 146], "els": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 27, 28, 29, 30, 31, 32, 68, 100, 124], "cpu": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 32, 68, 124], "backend": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32, 137, 146], "cudnn": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32, 137, 146], "benchmark": [2, 3, 4, 5, 8, 9, 10, 11, 15, 23, 24, 27, 28, 29, 30, 31, 32, 71, 76, 78, 87, 101, 114, 117, 123, 137, 145, 146], "set": [2, 4, 8, 9, 10, 11, 12, 14, 16, 17, 19, 22, 26, 27, 29, 30, 31, 32, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 63, 68, 70, 71, 73, 87, 91, 92, 93, 101, 102, 103, 106, 108, 110, 113, 116, 117, 118, 124, 137, 143, 146], "random": [2, 3, 4, 5, 8, 9, 10, 11, 26, 27, 28, 30, 31, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 61, 73, 125, 126, 127, 128, 132, 137, 146], "seed": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 61, 137], "abl": [2, 3, 4, 5, 8, 9, 10, 11, 12, 27, 28, 30, 68, 124, 140], "roughli": [2, 3, 4, 5, 8, 9, 11, 27, 28, 73], "reproduc": [2, 3, 4, 5, 8, 9, 10, 11, 24, 27, 28, 30, 137, 146], "note": [2, 3, 4, 5, 8, 9, 11, 17, 20, 26, 27, 28, 43, 59, 68, 69, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 116, 124, 132, 137], "indetermin": [2, 3, 4, 5, 8, 9, 11, 27, 28], "still": [2, 3, 4, 5, 8, 9, 11, 27, 28, 29, 73, 98], "make": [2, 3, 4, 5, 8, 9, 11, 12, 27, 28, 29, 30, 32, 104, 112, 140, 146], "substanti": [2, 3, 4, 5, 8, 9, 10, 11, 14, 19, 27, 28], "between": [2, 3, 4, 5, 8, 9, 11, 26, 27, 28, 29, 37, 38, 39, 42, 43, 46, 47, 48, 49, 50, 54, 55, 56, 58, 60, 63, 70, 80, 81, 82, 87, 89, 98, 101, 102, 110, 117, 118, 128, 133], "consist": [2, 3, 4, 5, 8, 9, 11, 27, 28, 48, 49, 50, 70, 73], "cost": [2, 3, 4, 5, 8, 9, 11, 27, 28], "increas": [2, 3, 4, 5, 8, 9, 10, 11, 16, 27, 28, 29, 32, 93, 104], "cudnn_benchmark": [2, 3, 4, 5, 8, 9, 11, 27, 28, 137], "fals": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 26, 27, 28, 29, 30, 31, 32, 42, 46, 47, 48, 49, 50, 60, 64, 68, 69, 71, 72, 75, 76, 77, 78, 79, 82, 84, 85, 86, 87, 88, 89, 94, 98, 100, 101, 102, 103, 104, 105, 108, 110, 114, 116, 117, 118, 119, 122, 123, 124, 127, 128, 130, 131, 137, 139, 146], "20200220": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "n_class": [2, 3, 4, 9, 10, 11, 14, 26, 27, 28, 29, 30, 31, 32, 68, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 101, 102, 103, 104, 106, 108, 124, 129, 133, 135], "number": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 22, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 61, 64, 66, 68, 71, 76, 77, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 112, 115, 117, 118, 122, 123, 124, 125, 126, 127, 128, 135, 136], "chan": [2, 3, 4, 8, 27, 28, 29, 30, 32, 73], "n_chan": [2, 8, 11, 26, 27, 28, 30, 31, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 124], "shape": [2, 3, 4, 5, 8, 9, 10, 11, 17, 20, 22, 26, 27, 28, 29, 30, 32, 47, 64, 68, 88, 89, 94, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 128, 129, 133], "final_conv_length": [2, 3, 4, 8, 14, 26, 27, 28, 29, 30, 31, 32, 87, 95, 96, 101, 146], "2": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 30, 31, 33, 37, 38, 39, 42, 43, 44, 46, 52, 55, 60, 61, 63, 66, 68, 70, 73, 75, 76, 85, 87, 91, 92, 94, 95, 96, 97, 98, 102, 104, 106, 108, 112, 116, 121, 124, 125, 126, 134, 135, 145], "add_log_softmax": [2, 8, 26, 31, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108], "send": [2, 3, 4, 8, 9, 10, 11, 16, 27, 28, 29, 30, 32], "get_output_shap": [2, 27, 31, 94, 146], "to_dense_prediction_model": [2, 27, 31, 94, 146], "local": [2, 5, 10, 11, 14, 27, 31, 32, 69, 116, 140, 144], "lib": [2, 5, 10, 11, 27, 31, 32], "python3": [2, 5, 10, 11, 27, 31, 32], "site": [2, 5, 10, 11, 27, 31, 32], "packag": [2, 5, 10, 11, 27, 31, 32, 35, 142, 143], "deprec": [2, 5, 10, 19, 31, 91, 146], "87": [2, 5, 16, 27, 31], "futurewarn": [2, 26, 30, 31, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108], "version": [2, 3, 4, 5, 9, 10, 18, 20, 21, 22, 29, 30, 31, 68, 75, 86, 89, 94, 98, 100, 110, 111, 112, 113, 115, 116, 124, 140, 142, 143, 144], "eegmodulemixin": [2, 31, 146], "method": [2, 4, 5, 8, 12, 16, 21, 26, 29, 31, 32, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 68, 69, 71, 72, 74, 79, 85, 86, 88, 89, 93, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 114, 116, 124, 125, 126, 127, 129, 130, 131, 132, 133, 146], "msg": [2, 31], "categori": [2, 4, 31], "calcul": [2, 3, 4, 27, 28, 29, 30, 32, 68, 106, 124], "output": [2, 3, 4, 5, 11, 12, 14, 21, 26, 27, 28, 29, 30, 31, 32, 68, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 115, 116, 117, 118, 124], "dummi": [2, 27], "n_preds_per_input": [2, 27, 31], "create_fixed_length_window": [2, 5, 12, 14, 16, 22, 31, 146], "It": [2, 3, 4, 8, 9, 10, 11, 18, 27, 28, 29, 30, 32, 42, 60, 68, 71, 79, 82, 86, 104, 118, 124, 141], "defin": [2, 5, 9, 10, 11, 12, 14, 20, 21, 27, 28, 30, 40, 54, 57, 68, 79, 85, 89, 93, 106, 118, 124, 127], "start_offset_sampl": [2, 14, 22, 31, 117], "stop_offset_sampl": [2, 14, 22, 31, 117, 146], "none": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 18, 19, 20, 22, 26, 27, 28, 29, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 61, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 130, 131, 132, 137, 139, 146], "window_size_sampl": [2, 5, 8, 9, 10, 11, 12, 14, 17, 19, 22, 27, 31, 80, 81, 82, 117, 118, 119], "window_stride_sampl": [2, 5, 9, 10, 11, 12, 14, 17, 19, 22, 27, 31, 80, 81, 82, 117, 118], "drop_last_window": [2, 12, 14, 17, 19, 22, 27, 31, 80, 81, 82, 117, 118], "targets_from": [2, 79, 117, 124], "last_target_onli": [2, 8, 79, 117, 119], "preload": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 22, 27, 28, 29, 30, 31, 32, 75, 76, 77, 78, 82, 83, 116, 117, 118, 119, 123, 146], "thumb": [2, 8, 27], "": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 21, 22, 26, 27, 28, 30, 31, 32, 40, 42, 44, 47, 48, 49, 50, 57, 60, 61, 64, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 85, 92, 93, 95, 96, 100, 103, 105, 108, 111, 112, 114, 116, 124, 125, 129, 132, 133], "consid": [2, 4, 29, 32, 48, 49, 50, 68, 124, 132], "well": [2, 5, 8, 12, 26, 27, 28, 29, 32, 82, 118, 141, 146], "encourag": [2, 8, 24, 27, 28], "find": [2, 4, 8, 30], "wai": [2, 5, 8, 16, 21, 24, 26, 29, 104, 142, 144], "target_transform": [2, 8, 9, 10, 71, 146], "suppli": [2, 3, 5, 8, 9, 10, 11, 27, 28, 29], "eegclassifi": [2, 5, 9, 10, 11, 26, 27, 28, 29, 30, 146], "croppedloss": [2, 27, 31], "criterion": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 68, 124], "criterion__loss_funct": [2, 27, 31], "loss": [2, 3, 4, 5, 8, 9, 10, 11, 14, 26, 27, 28, 29, 30, 31, 32, 68, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 101, 102, 105, 106, 108, 124, 129, 133, 134], "mean": [2, 3, 4, 8, 10, 12, 14, 16, 19, 26, 27, 29, 30, 31, 32, 73, 87, 96, 100, 101, 116, 120, 121, 124, 140], "default": [2, 8, 11, 12, 27, 28, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 61, 68, 69, 75, 76, 77, 78, 79, 82, 85, 86, 87, 89, 91, 92, 93, 94, 98, 100, 110, 111, 112, 113, 115, 116, 118, 124, 132, 137, 146], "found": [2, 8, 10, 12, 16, 18, 19, 20, 21, 26, 27, 28, 29, 30, 32, 69, 116, 117, 118], "motor": [2, 4, 8, 27, 28, 70, 73, 85, 90, 93, 98, 146], "strongli": [2, 8, 27, 28, 91, 92, 93], "hyperparamet": [2, 5, 8, 9, 10, 11, 14, 24, 25, 27, 28, 32, 33, 46, 68, 71, 74, 94, 98, 101, 114, 118, 121, 123, 124, 137, 145, 146], "optim": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32, 68, 73, 124], "cross": [2, 8, 16, 27, 28, 70, 86, 98], "skorch": [2, 3, 4, 5, 8, 9, 10, 11, 17, 26, 27, 28, 29, 30, 31, 68, 80, 81, 82, 124, 146], "callback": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32, 68, 124, 132], "lrschedul": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "helper": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31], "predefined_split": [2, 3, 5, 8, 9, 10, 11, 27, 28, 29, 31], "eegregressor": [2, 8, 26, 31, 146], "croppedtimeseriesepochscor": 2, "timeseriesloss": 2, "valu": [2, 4, 5, 8, 9, 10, 11, 12, 26, 27, 28, 30, 31, 32, 43, 46, 63, 68, 71, 72, 79, 82, 93, 98, 100, 106, 112, 113, 115, 116, 117, 118, 124, 133, 134, 135, 146], "good": [2, 8, 26, 27, 28], "mi": [2, 8, 98], "lr": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32, 68, 124], "0625": [2, 3, 4, 8, 27, 28, 29, 32], "01": [2, 3, 4, 6, 8, 12, 16, 23, 26, 27, 28, 29, 32, 33, 68, 91, 92, 124, 145], "weight_decai": [2, 3, 4, 8, 27, 28, 29, 32], "batch_siz": [2, 3, 4, 5, 8, 9, 10, 11, 14, 22, 27, 28, 29, 30, 31, 32, 37, 46, 47, 55, 63, 64, 68, 86, 88, 89, 94, 98, 99, 102, 103, 104, 105, 106, 107, 109, 124, 129, 133, 135, 138], "27": [2, 4, 9, 11, 16, 27, 29, 73], "64": [2, 3, 4, 8, 10, 11, 14, 16, 17, 19, 27, 28, 29, 32, 85, 96, 98, 103], "n_epoch": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32], "8": [2, 3, 4, 5, 6, 8, 9, 10, 11, 14, 16, 17, 18, 19, 20, 21, 23, 26, 27, 28, 29, 30, 31, 32, 85, 86, 89, 91, 92, 95, 96, 98, 100, 103, 122, 142, 145], "regressor": [2, 8, 26, 31, 146], "aggregate_predict": [2, 68, 124], "mse_loss": [2, 31], "adamw": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "train_split": [2, 3, 4, 5, 8, 9, 10, 11, 26, 27, 28, 29, 30, 31, 68, 124], "optimizer__lr": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 68, 124], "optimizer__weight_decai": [2, 3, 4, 8, 27, 28, 29, 31], "iterator_train__shuffl": [2, 5, 9, 10, 11, 27, 31, 68, 124], "lr_schedul": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "cosineannealinglr": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "t_max": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "r2_train": 2, "metric": [2, 5, 9, 10, 11, 27, 28, 32, 139], "r2_score": 2, "lower_is_bett": [2, 5, 8, 9, 10, 11, 130, 131, 132], "on_train": [2, 5, 8, 9, 10, 11, 130, 131], "r2_valid": 2, "verbos": [2, 3, 4, 8, 29, 30, 68, 69, 110, 112, 113, 115, 116, 117, 118, 119, 124, 146], "specifi": [2, 3, 5, 8, 9, 10, 11, 12, 18, 21, 22, 26, 27, 28, 29, 68, 69, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 112, 116, 123, 124], "y": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 20, 22, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 80, 81, 82, 88, 89, 93, 115, 124, 132], "alreadi": [2, 3, 5, 8, 9, 10, 11, 14, 19, 27, 28, 29, 71, 72, 79, 123, 124, 140, 142], "fit": [2, 3, 5, 8, 9, 10, 11, 14, 24, 26, 27, 28, 29, 30, 31, 32, 68, 118, 124], "train_loss": [2, 3, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32, 68, 124], "valid_loss": [2, 3, 5, 8, 9, 10, 11, 26, 27, 28, 29, 30, 31], "dur": [2, 3, 5, 8, 9, 10, 11, 26, 27, 28, 29, 30, 31], "16": [2, 5, 9, 10, 11, 16, 27, 30, 85, 96, 103, 112], "9037": 2, "3086": 2, "5378": 2, "20": [2, 5, 9, 10, 11, 12, 16, 26, 27, 29, 31, 32, 40, 47, 48, 49, 50, 64, 97, 102, 116], "7324": 2, "0006": [2, 3, 8, 27, 28, 29], "4965": 2, "13": [2, 5, 6, 9, 11, 16, 17, 19, 26, 32, 73, 76, 86, 112, 122, 145], "7539": 2, "7": [2, 3, 4, 5, 9, 10, 11, 16, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 31, 32, 33, 35, 73, 85, 93, 94, 102, 145], "1244": 2, "9596": 2, "18": [2, 4, 5, 11, 12, 16, 27, 29, 93], "0720": 2, "4621": 2, "12": [2, 4, 5, 10, 11, 13, 16, 17, 18, 19, 27, 28, 29, 30, 32, 33, 70, 98, 100, 108, 139, 145], "7768": 2, "7402": 2, "6787": 2, "17": [2, 3, 5, 6, 11, 16, 27, 98, 106, 145], "1870": 2, "0005": [2, 3, 22, 28, 31], "4244": 2, "7970": 2, "3910": 2, "5638": [2, 30], "4409": 2, "0004": 2, "4286": 2, "2712": [2, 27], "1840": 2, "4237": 2, "0095": 2, "0002": [2, 3, 28], "4250": 2, "5735": 2, "9203": 2, "3549": 2, "15": [2, 5, 9, 10, 11, 12, 14, 16, 26, 27, 28, 29, 30, 32, 47, 48, 49, 50, 75, 89, 101, 106, 112, 115], "4436": 2, "0001": [2, 30, 97, 121], "4218": 2, "9": [2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 16, 17, 18, 19, 20, 21, 23, 26, 27, 28, 29, 30, 32, 33, 70, 73, 75, 86, 91, 93, 98, 100, 108, 116, 145], "8228": 2, "6181": 2, "3132": 2, "14": [2, 5, 8, 9, 11, 16, 17, 19, 23, 27, 28, 32, 33, 73, 112, 137], "7799": 2, "0000": [2, 3, 8, 27, 28, 29, 30, 31], "4259": 2, "0643": 2, "3047": 2, "3316": 2, "0884": 2, "4210": 2, "def": [2, 3, 5, 8, 9, 10, 11, 12, 14, 16, 29, 31, 32], "pad_and_select_predict": 2, "pred": [2, 8, 32, 129, 133, 134, 136], "pad": [2, 9, 10, 11, 27, 103, 112, 115, 146], "constant": 2, "constant_valu": 2, "mask": [2, 5, 52, 66, 100, 133], "isnan": 2, "squeez": [2, 3, 4, 26, 27, 28, 29, 30, 32], "return": [2, 5, 8, 9, 10, 11, 12, 14, 17, 19, 21, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 75, 77, 78, 79, 80, 81, 82, 83, 86, 88, 89, 94, 98, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 132, 134, 135, 136, 139, 146], "t": [2, 4, 5, 11, 17, 19, 26, 27, 28, 29, 30, 31, 32, 42, 60, 68, 69, 70, 75, 87, 97, 99, 101, 108, 110, 120, 121, 124, 137, 139], "preds_train": [2, 8], "y_train": [2, 8, 9, 10, 11, 29], "predict_tri": [2, 68, 124, 146], "return_target": [2, 68, 124, 135], "preds_valid": [2, 8], "y_valid": [2, 8], "preds_test": [2, 8], "y_test": [2, 8, 29], "decreas": [2, 8, 11], "doe": [2, 8, 14, 16, 18, 27, 29, 32, 45, 68, 85, 94, 118, 124, 140], "divers": [2, 4, 8], "caus": [2, 8], "overfit": [2, 8, 9, 10, 11, 29], "better": [2, 5, 8, 10, 14, 16, 27, 28, 29, 32, 89, 132, 146], "improv": [2, 3, 5, 8, 9, 10, 11, 32, 112, 140, 146], "matplotlib": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 30, 31, 139], "pyplot": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 30, 31], "plt": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 30, 31], "panda": [2, 4, 5, 8, 9, 10, 11, 14, 16, 20, 21, 27, 28, 29, 30, 31, 68, 71, 72, 79, 82, 124], "pd": [2, 4, 5, 8, 9, 10, 11, 14, 16, 27, 28, 29, 30, 31, 71, 72, 79, 125, 126, 127, 128], "line": [2, 8, 14, 27, 28, 31, 70, 140], "line2d": [2, 8, 27, 28], "fig": [2, 4, 5, 8, 9, 10, 11, 16, 27, 28, 29, 30, 31, 139], "ax": [2, 3, 4, 5, 8, 9, 10, 11, 16, 27, 28, 29, 30, 31, 94], "subplot": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 30, 31], "figsiz": [2, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 31, 139], "set_titl": [2, 8, 16, 31], "arang": [2, 8], "label": [2, 3, 5, 8, 9, 10, 11, 12, 16, 22, 26, 27, 28, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 107, 124, 127, 129, 133, 135, 139], "set_ylabel": [2, 5, 8, 9, 10, 11, 16, 27, 28, 31], "legend": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 31], "set_xlabel": [2, 4, 5, 8, 9, 10, 11, 16, 27, 28, 31], "tight_layout": [2, 4, 5, 8, 9, 10, 11, 27, 28, 30], "correl": [2, 8, 27, 29], "coeffici": [2, 8, 46, 63, 134], "corr_coeff": [2, 8], "dim": [2, 8, 100], "rang": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 26, 27, 28, 29, 31, 32, 42, 60, 69, 98, 122, 139], "append": [2, 8, 12, 14, 16, 27, 28, 31, 68, 112, 124], "corrcoef": [2, 8], "print": [2, 4, 5, 8, 9, 10, 11, 14, 17, 20, 21, 22, 26, 27, 28, 29, 30, 32, 68, 124, 140], "dimens": [2, 5, 8, 52, 66, 85, 89, 100, 104, 108, 115, 146], "round": [2, 8], "histori": [2, 5, 8, 9, 10, 11, 27, 28, 31, 68, 124], "throughout": [2, 8, 9, 10, 11, 28, 29, 32], "accuraci": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 32, 132, 146], "curv": [2, 8, 28], "results_column": [2, 8, 27, 28], "df": [2, 5, 8, 9, 10, 11, 12, 16, 27, 28], "datafram": [2, 4, 5, 8, 9, 10, 11, 14, 16, 20, 21, 22, 27, 28, 29, 30, 68, 71, 124, 125, 126, 127, 128], "index": [2, 5, 8, 9, 10, 11, 17, 27, 28, 30, 31, 72, 110, 120, 121, 125, 126, 136, 142], "ax1": [2, 5, 8, 9, 10, 11, 27, 28], "loc": [2, 8, 12, 26, 27, 28, 29], "style": [2, 5, 8, 27, 28, 48, 49, 50, 106], "marker": [2, 5, 8, 16, 27, 28], "o": [2, 4, 5, 8, 16, 27, 28, 37, 38, 39, 40, 44, 52, 55, 56, 57, 58, 61, 66, 127], "color": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 139], "tab": [2, 5, 8, 16, 27, 28], "blue": [2, 5, 8, 16, 27, 28], "fontsiz": [2, 8, 12, 27, 28], "tick_param": [2, 5, 8, 12, 27, 28], "axi": [2, 3, 5, 8, 27, 28, 31, 47, 48, 49, 50, 51, 53, 64, 65, 67, 94, 115, 136], "labelcolor": [2, 5, 8, 27, 28], "labels": [2, 8, 12, 27, 28], "ax2": [2, 5, 8, 9, 10, 11, 27, 28], "twinx": [2, 5, 8, 27, 28], "instanti": [2, 3, 4, 8, 14, 26, 27, 28, 32, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 61, 68, 74, 124, 146], "share": [2, 8, 14, 27, 28], "red": [2, 8, 27, 28], "r2": [2, 8], "score": [2, 4, 5, 9, 10, 11, 29, 30, 68, 88, 102, 124, 130, 131, 132, 146], "where": [2, 4, 8, 9, 10, 22, 27, 28, 29, 37, 46, 47, 52, 55, 63, 64, 66, 68, 69, 71, 80, 98, 100, 124, 135, 137, 146], "been": [2, 3, 4, 8, 10, 14, 16, 18, 20, 21, 27, 28, 29, 30, 32, 90, 91, 92, 93, 94, 95, 96, 134, 140, 144, 146], "handl": [2, 3, 4, 8, 27, 28, 30, 116], "black": [2, 8, 12, 27, 28, 70, 73, 139, 146], "linewidth": [2, 8, 27, 28], "linestyl": [2, 8, 12, 27, 28], "h": [2, 4, 5, 8, 27, 28, 37, 40, 44, 52, 55, 57, 61, 66, 75, 85, 88, 90, 127], "get_label": [2, 8, 27, 28], "center": [2, 8, 9, 10, 29, 37, 55], "right": [2, 4, 8, 12, 27, 28, 29, 32, 40, 70, 73, 144], "total": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 70, 145], "script": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 137], "minut": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 76], "43": [2, 5, 6, 10, 11, 16, 27, 145], "244": [2, 6, 145], "estim": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32], "usag": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 140, 146], "804": [2, 27], "mb": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 145], "jupyt": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32], "notebook": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32], "plot_bcic_iv_4_ecog_crop": [2, 6, 145], "ipynb": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32], "python": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 35, 110, 137, 141, 142, 144, 146], "sourc": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142], "galleri": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 145], "gener": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 32, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 61, 68, 94, 100, 102, 105, 112, 124, 132, 139, 146], "sphinx": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32], "follow": [3, 4, 5, 9, 10, 11, 14, 26, 29, 32, 86, 91, 92, 98, 100, 112, 115, 118, 124, 142, 143, 144, 146], "wise": [3, 4, 5, 9, 10, 11], "also": [3, 4, 5, 9, 10, 11, 12, 14, 18, 21, 26, 28, 35, 68, 79, 89, 91, 92, 104, 112, 113, 115, 124, 135, 140, 143, 144], "illustr": [3, 29], "effect": [3, 19], "simon": [3, 20, 146], "brandt": [3, 20, 146], "simonbrandt": [3, 20], "protonmail": [3, 20], "c\u00e9dric": [3, 4], "rommel": [3, 4, 146], "cedric": [3, 4, 146], "inria": [3, 4, 11], "fr": [3, 4, 11], "moabbdataset": [3, 4, 18, 20, 21, 27, 28, 29, 30, 32, 146], "dataset_nam": [3, 4, 18, 20, 21, 27, 28, 29, 30, 32, 74], "bnci2014001": [3, 4, 18, 20, 21, 29, 30], "renam": [3, 4, 12, 18, 20, 21, 29, 30, 146], "bnci2014_001": [3, 4, 18, 20, 21, 27, 28, 29, 30, 32], "must": [3, 4, 12, 14, 16, 18, 20, 21, 26, 29, 30, 79, 87, 101, 102, 107, 110, 114, 116, 117, 125, 143, 146], "abbrevi": [3, 4, 18, 20, 21, 29, 30], "its": [3, 4, 9, 10, 16, 18, 20, 21, 26, 29, 30, 31, 68, 71, 114, 124], "bnci2014": [3, 4, 18, 20, 21, 29, 30], "001": [3, 4, 18, 20, 21, 27, 28, 29, 30, 31, 70, 100, 120, 121], "moabb": [3, 4, 15, 18, 21, 23, 24, 27, 28, 29, 30, 32, 70, 71, 73, 74, 114, 123, 143, 144, 145, 146], "is_abbrev": [3, 4, 18, 20, 21, 29, 30], "inform": [3, 4, 12, 14, 17, 18, 20, 26, 29, 30, 42, 60, 68, 71, 79, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 112, 124, 126, 144], "multipli": [3, 4, 5, 9, 10, 12, 27, 28, 29, 30, 32, 85, 91, 92], "cut": [3, 4, 19, 28, 29, 30, 37, 55, 80, 112], "38": [3, 4, 11, 16, 27, 28, 29, 30, 31, 32], "factor": [3, 4, 5, 9, 10, 12, 27, 28, 29, 30, 32, 98, 100, 104, 106, 108, 115], "meg": [3, 4, 20, 27, 28, 29, 30, 32, 35, 112, 113, 141], "stim": [3, 4, 18, 20, 21, 27, 28, 29, 30, 32], "keep": [3, 4, 10, 11, 16, 27, 28, 29, 30, 32, 73, 76, 146], "sensor": [3, 4, 27, 28, 29, 30, 32, 40, 47, 48, 49, 50, 64, 73], "0x7fcb969e2f20": 3, "create_windows_from_ev": [3, 4, 5, 9, 10, 11, 18, 21, 27, 28, 29, 30, 32, 146], "trial_start_offset_second": [3, 4, 27, 28, 29, 30, 32], "start": [3, 4, 12, 14, 16, 22, 27, 28, 29, 30, 32, 52, 66, 68, 82, 98, 110, 115, 117, 118, 124, 142], "offset": [3, 4, 27, 28, 29, 30, 32, 71, 82, 117, 118], "trial_start_offset_sampl": [3, 4, 5, 9, 10, 11, 18, 19, 21, 27, 28, 29, 30, 32, 82, 118], "int": [3, 4, 5, 9, 10, 14, 16, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 61, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 135, 137, 139], "windows_dataset": [3, 4, 5, 8, 9, 10, 11, 17, 18, 19, 27, 28, 29, 30, 31, 32, 80, 81, 82, 117, 118], "trial_stop_offset_sampl": [3, 4, 5, 9, 10, 11, 18, 19, 21, 27, 28, 29, 30, 31, 32, 82, 118, 146], "0train": [3, 4, 18, 20, 21, 27, 28, 29, 30, 32], "1test": [3, 4, 20, 21, 27, 28, 29, 30, 32], "callabl": [3, 26, 41, 54, 68, 71, 72, 79, 87, 101, 114, 124, 132], "custom": [3, 4, 15, 23, 24, 36, 71, 80, 145], "loader": [3, 4, 5, 14, 32], "call": [3, 16, 26, 27, 29, 32, 68, 71, 79, 82, 85, 89, 93, 110, 114, 117, 118, 124, 130, 131, 132], "demonstr": [3, 4, 7, 22, 24, 26, 32], "below": [3, 5, 35, 37, 140, 143, 146], "illutr": 3, "purpos": [3, 14, 16, 32], "chose": 3, "frequencyshift": 3, "randomli": [3, 5, 27, 37, 38, 39, 44, 52, 56, 58, 61, 128], "translat": 3, "within": [3, 4, 73, 85, 89, 93, 98, 106, 127, 146], "given": [3, 4, 5, 21, 32, 38, 39, 40, 42, 51, 53, 54, 68, 69, 83, 112, 113, 116, 124, 135, 146], "probabl": [3, 4, 26, 30, 32, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 68, 85, 86, 87, 90, 101, 105, 106, 124], "actual": [3, 5, 12, 14, 22], "modifi": [3, 5, 10, 12, 42, 60, 68, 94, 110, 111, 113, 114, 122, 124, 137], "max_delta_freq": [3, 43], "shift": [3, 29, 43, 59], "next": [3, 4, 5, 9, 10, 11, 12, 14, 16, 18, 22], "let": [3, 4, 22, 26], "u": [3, 5, 7, 13, 24, 30, 71, 76, 94, 108, 114, 118, 123, 125, 126, 128, 137, 139, 144, 145, 146], "result": [3, 12, 14, 16, 29, 32, 68, 82, 115, 118, 124, 132, 137, 140], "stack": [3, 8], "allow": [3, 5, 14, 26, 29, 30, 32, 41, 68, 74, 82, 91, 92, 98, 100, 118, 124, 146], "fix": [3, 40, 57, 86, 100, 140, 146], "instead": [3, 4, 5, 8, 22, 27, 28, 29, 30, 31, 32, 68, 85, 89, 91, 93, 94, 116, 124, 146], "x_tr": 3, "_": [3, 5, 14, 16, 17, 26, 27, 28, 31, 32, 146], "as_tensor": 3, "float": [3, 5, 26, 31, 32, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 64, 68, 76, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 115, 118, 120, 121, 124, 134, 139], "psd": 3, "plot": [3, 5, 12, 14, 16, 29, 31, 146], "plot_psd": 3, "freq": 3, "time_frequ": 3, "psd_array_multitap": 3, "fmin": 3, "fmax": 3, "100": [3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 20, 26, 27, 28, 29, 30, 31, 32, 37, 52, 70, 86, 87, 98, 108, 115], "log10": 3, "psds_mean": 3, "origin": [3, 11, 17, 19, 26, 29, 46, 47, 48, 49, 50, 52, 63, 64, 66, 71, 82, 89, 90, 91, 92, 93, 95, 96, 98, 100, 118, 122], "k": [3, 5, 9, 10, 11, 26, 27, 28, 30, 31, 32, 37, 44, 47, 48, 49, 50, 52, 55, 61, 64, 66, 87, 93, 97, 99, 101, 139], "r": [3, 5, 9, 10, 11, 26, 27, 28, 29, 30, 31, 37, 44, 52, 55, 61, 66, 75, 87, 91, 92, 95, 96, 97, 99, 101, 139], "titl": [3, 12, 29, 30, 35], "multitap": 3, "gradiomet": 3, "xlabel": [3, 12, 29, 30], "ylabel": [3, 12, 30], "power": [3, 5, 30, 112, 115], "spectral": 3, "densiti": 3, "db": [3, 16, 116], "them": [3, 4, 5, 12, 14, 16, 17, 19, 26, 27, 29, 32, 68, 71, 85, 86, 87, 88, 89, 93, 94, 97, 99, 100, 101, 102, 103, 104, 105, 108, 124, 144], "try": [3, 4, 12, 18, 22, 24, 30, 140, 144], "comput": [3, 4, 5, 9, 10, 11, 18, 22, 35, 48, 49, 50, 68, 70, 82, 85, 89, 91, 92, 93, 95, 96, 102, 116, 118, 120, 121, 124, 129, 130, 131, 133, 137, 140, 144, 146], "list": [3, 5, 11, 14, 16, 21, 22, 26, 27, 28, 29, 31, 32, 35, 36, 40, 41, 48, 49, 50, 57, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 112, 113, 116, 117, 118, 122, 123, 124, 134, 136, 139, 146], "n_channel": [3, 4, 5, 9, 10, 14, 17, 19, 22, 29, 31, 32, 46, 47, 63, 64, 80, 85, 86, 88, 89, 98, 99, 102, 103, 104, 105, 106, 107, 120, 121], "auto": [3, 4, 8, 14, 17, 19, 26, 28, 29, 30, 32, 68, 87, 89, 95, 96, 97, 101, 112, 115, 116, 124, 146], "23": [3, 4, 5, 8, 9, 10, 11, 16, 27, 28, 29, 30, 31, 32, 111], "depreci": [3, 4, 8, 27, 28, 29, 30, 31, 32], "n_time": [3, 4, 5, 8, 9, 10, 11, 12, 14, 17, 19, 26, 27, 28, 29, 30, 31, 32, 46, 63, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 120, 121, 124, 129, 133], "175": [3, 4, 26, 27, 28, 29, 30, 32], "logsoftmax": [3, 4, 26, 27, 28, 29, 30, 32, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 146], "layer": [3, 4, 5, 9, 10, 11, 26, 27, 28, 29, 30, 31, 32, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 146], "adjust": [3, 4, 26, 27, 28, 29, 30, 32, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 101, 102, 105, 106, 108], "accordingli": [3, 4, 9, 26, 27, 28, 29, 30, 32, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 101, 102, 105, 106, 108, 110], "e": [3, 4, 5, 9, 10, 11, 14, 16, 26, 27, 28, 29, 30, 32, 37, 40, 44, 52, 54, 55, 57, 61, 66, 68, 72, 75, 76, 77, 78, 79, 82, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 118, 122, 124, 128, 132, 139, 144, 146], "g": [3, 4, 5, 9, 10, 11, 14, 16, 26, 27, 28, 29, 30, 32, 37, 40, 42, 44, 52, 54, 55, 57, 60, 61, 68, 72, 75, 76, 77, 78, 79, 82, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 114, 118, 122, 124, 128, 132, 139, 146], "crossentropyloss": [3, 4, 9, 10, 11, 26, 27, 28, 29, 30, 32, 68, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 101, 102, 105, 106, 108, 124], "order": [3, 4, 12, 21, 26, 40, 48, 49, 50, 57, 68, 73, 75, 77, 78, 112, 116, 122, 124, 128, 146], "pass": [3, 4, 9, 10, 11, 16, 22, 26, 27, 28, 29, 30, 32, 36, 41, 54, 68, 74, 85, 86, 88, 89, 93, 98, 99, 102, 103, 104, 105, 106, 110, 112, 113, 115, 116, 124, 129, 132, 133, 146], "sequenti": [3, 4, 5, 9, 10, 11, 16, 26, 27, 28, 29, 30, 32, 73, 94], "batch": [3, 4, 5, 26, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 87, 88, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 124, 131, 135, 146], "augmenteddataload": [3, 4, 146], "signflip": 3, "freq_shift": 3, "sign_flip": 3, "iter": [3, 4, 5, 20, 22, 46, 68, 94, 111, 124, 135], "argument": [3, 4, 16, 19, 26, 29, 32, 36, 38, 39, 40, 42, 51, 53, 54, 68, 74, 110, 112, 113, 114, 115, 116, 122, 124, 132, 146], "clf": [3, 4, 5, 9, 10, 11, 27, 28, 29, 30], "iterator_train": [3, 4, 68, 124], "tell": [3, 4, 140], "dataload": [3, 4, 5, 14, 32, 36, 68, 124, 135], "iterator_train__transform": [3, 4], "nllloss": [3, 4, 14, 28, 29, 30, 32, 68], "train_accuraci": [3, 27, 28, 29, 30, 32], "valid_acc": [3, 5, 9, 10, 11, 26, 28, 29, 30], "valid_accuraci": [3, 27, 28, 29, 30], "2535": [3, 28], "6458": 3, "1252": 3, "8046": 3, "2639": 3, "3297": 3, "2500": [3, 22, 27, 28, 29, 126], "7607": 3, "5861": 3, "1539": 3, "1231": 3, "5872": 3, "2708": 3, "1567": 3, "2555": 3, "5795": 3, "classifi": [3, 4, 5, 9, 10, 11, 26, 29, 31, 100, 146], "initi": [3, 5, 9, 10, 11, 26, 29, 30, 32, 68, 89, 91, 92, 100, 108, 124], "module_": [3, 9, 10, 11, 26, 68, 124], "var_nam": [3, 4, 11, 26, 27, 28, 29, 32, 94], "depth": [3, 4, 11, 26, 27, 28, 29, 30, 32, 85, 91, 92, 94, 98, 108], "idx": [3, 4, 9, 10, 11, 26, 27, 28, 29, 30, 32], "param": [3, 4, 5, 11, 26, 27, 28, 29, 30, 32, 37, 38, 39, 40, 42, 43, 44, 46, 47, 52], "kernel": [3, 4, 11, 26, 27, 28, 29, 30, 32, 47, 48, 49, 50, 64, 85, 92, 93, 98, 102, 103, 105, 108], "22": [3, 4, 5, 9, 11, 16, 17, 19, 27, 28, 29, 32], "1125": [3, 4, 28, 29, 32], "ensure4d": [3, 4, 26, 27, 28, 29, 32], "ensuredim": [3, 4, 26, 27, 28, 29, 32], "rearrang": [3, 4, 26, 27, 28, 29, 32, 146], "dimshuffl": [3, 4, 26, 27, 28, 29, 32], "combinedconv": [3, 4, 26, 27, 28, 29, 32], "conv_time_spat": [3, 4, 26, 27, 28, 29, 32], "40": [3, 4, 11, 14, 16, 26, 27, 28, 29, 31, 32, 89, 101], "1101": [3, 4, 28, 29, 32], "36": [3, 4, 9, 11, 16, 27, 28, 29, 32], "240": [3, 4, 17, 26, 27, 28, 29, 32], "batchnorm2d": [3, 4, 26, 27, 28, 29, 32, 87, 91, 92, 101], "bnorm": [3, 4, 26, 27, 28, 29, 32], "80": [3, 4, 5, 10, 11, 16, 19, 26, 27, 28, 29, 32, 73, 98, 104], "express": [3, 4, 26, 27, 28, 29, 32], "conv_nonlin_exp": [3, 4, 26, 27, 28, 29, 32], "avgpool2d": [3, 4, 26, 27, 28, 29, 32], "pool": [3, 4, 26, 27, 28, 29, 32, 85, 87, 89, 91, 92, 94, 98, 100, 101, 103, 106, 108], "69": [3, 4, 5, 16, 28, 29, 32], "75": [3, 4, 5, 9, 14, 16, 26, 27, 28, 29, 32, 89, 101, 106], "pool_nonlin_exp": [3, 4, 26, 27, 28, 29, 32], "dropout": [3, 4, 5, 9, 10, 26, 27, 28, 29, 30, 32, 85, 87, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106], "drop": [3, 4, 10, 14, 19, 26, 27, 28, 29, 32, 38, 56, 82, 111, 118, 122], "final_lay": [3, 4, 11, 26, 27, 28, 29, 32], "conv2d": [3, 4, 9, 26, 27, 28, 29, 32], "conv_classifi": [3, 4, 26, 27, 28, 29, 32], "044": [3, 4, 28, 29, 32], "47": [3, 4, 5, 9, 10, 11, 16, 26, 28, 29, 32, 33, 145], "364": [3, 4, 28, 29, 31, 32, 33, 145], "trainabl": [3, 4, 11, 26, 27, 28, 29, 32], "non": [3, 4, 11, 16, 22, 26, 27, 28, 29, 30, 32, 68, 73, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 101, 102, 105, 106, 108, 112, 124, 146], "mult": [3, 4, 11, 26, 27, 28, 29, 32], "add": [3, 4, 5, 11, 26, 27, 28, 29, 32, 43, 44, 59, 61, 68, 71, 72, 79, 100, 112, 124, 132, 146], "m": [3, 4, 5, 9, 10, 11, 12, 16, 22, 26, 27, 28, 29, 30, 31, 32, 37, 40, 44, 47, 48, 49, 50, 52, 55, 57, 61, 64, 66, 75, 85, 86, 87, 95, 96, 97, 99, 101, 103, 108, 112, 125, 139, 144], "forward": [3, 4, 5, 11, 26, 27, 28, 29, 32, 41, 54, 68, 85, 86, 88, 89, 93, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 112, 114, 116, 124, 129, 133, 135], "backward": [3, 4, 11, 14, 26, 27, 28, 29, 32, 94, 112, 146], "35": [3, 4, 11, 16, 28, 29, 31, 32], "04": [3, 4, 11, 16, 23, 26, 27, 28, 29, 32, 145], "50": [3, 4, 5, 9, 10, 11, 14, 16, 19, 28, 29, 32, 70, 87, 98], "would": [3, 26, 27, 29, 32, 68, 87, 101, 124], "equival": 3, "although": [3, 68, 85, 89, 93, 124], "composit": [3, 41], "composed_transform": 3, "possibl": [3, 4, 11, 12, 16, 18, 26, 68, 70, 117, 124, 137, 140, 146], "most": [3, 9, 10, 11, 14, 127, 140, 143], "windowsdataset": [3, 18, 26, 71, 80, 81, 82, 83, 117, 118, 123, 124, 146], "through": [3, 4, 11, 12, 14, 16, 20, 22, 27, 47, 64, 72, 79, 86, 88, 100, 102, 103, 104, 146], "commonli": 3, "done": [3, 11, 16, 18, 26, 27, 85, 117, 118], "advis": [3, 27, 30, 42, 60, 124], "abov": [3, 14, 16, 22, 27, 29, 140, 142], "compat": [3, 14, 17, 19, 30, 68, 80, 81, 82, 124, 146], "414": [3, 6, 145], "506": 3, "plot_data_augment": [3, 6, 145], "inde": 4, "known": [4, 68], "often": [4, 9, 10, 11, 28, 30], "depend": [4, 5, 9, 10, 11, 12, 14, 16, 26, 29, 30, 32, 35, 68, 73, 104, 124, 135, 142, 144, 146], "task": [4, 9, 10, 11, 26, 30, 42, 60, 70, 72, 75, 127], "phenomenon": 4, "studi": [4, 5, 7, 24, 86, 98], "methodologi": 4, "propos": [4, 38, 39, 42, 52, 56, 58, 60, 66, 86, 93, 146], "openli": [4, 5, 9, 10, 11], "could": [4, 5, 14, 29, 32, 94, 144], "brain": [4, 24, 25, 26, 27, 29, 30, 31, 33, 35, 71, 74, 75, 87, 91, 92, 94, 95, 96, 97, 99, 100, 101, 114, 118, 121, 123, 137, 139, 141, 145], "recent": [4, 26, 140], "shown": [4, 5, 9, 11, 16, 29, 32, 70, 73], "artifici": 4, "cast": [4, 41], "paradigm": [4, 5, 68, 70, 98, 124, 135], "present": [4, 12, 29, 32, 70, 73, 86, 111], "both": [4, 5, 16, 22, 30, 70, 73, 102, 103, 108], "pretext": 4, "approach": [4, 5, 9, 10, 11, 16, 24, 30, 104, 125], "demand": 4, "intens": [4, 98], "comparison": [4, 14, 27, 28], "strength": 4, "context": [4, 5, 29, 35, 104, 127], "bruno": [4, 146], "aristimunha": [4, 146], "ufabc": 4, "br": 4, "bnci": [4, 70], "websit": 4, "There": [4, 24, 26, 87, 101, 142, 144], "subject": [4, 5, 9, 10, 11, 12, 14, 18, 19, 20, 21, 22, 29, 37, 44, 52, 55, 61, 66, 69, 70, 72, 73, 74, 76, 98, 126], "electrod": [4, 20, 70, 73, 116], "while": [4, 5, 14, 29, 32, 73, 85, 89, 93, 98, 102, 136], "do": [4, 12, 14, 26, 27, 29, 32, 68, 80, 81, 82, 108, 117, 118, 124, 128, 137, 144, 146], "imageri": [4, 70, 85, 90, 93, 98, 146], "144": [4, 98], "focu": 4, "relat": [4, 5, 26, 27, 35, 73, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 124, 146], "activ": [4, 19, 26, 68, 73, 85, 86, 87, 91, 92, 93, 98], "0x7fcad972d510": 4, "out": [4, 8, 9, 10, 26, 37, 52, 55, 66, 68, 70, 86, 124, 125, 133, 140], "provind": 4, "slicedataset": [4, 29, 30], "eval_set": [4, 30], "three": [4, 16, 29, 32, 68, 69, 75, 89, 91, 92, 98, 124, 140], "categor": [4, 125], "aggreg": [4, 89], "sever": [4, 12, 18, 24, 117, 118, 141], "being": [4, 10, 14, 27, 68, 73, 124], "spatial": [4, 26, 42, 60, 87, 101, 108, 146], "paper": [4, 11, 35, 47, 48, 49, 50, 64, 85, 89, 90, 91, 92, 93, 95, 96, 98, 104, 146], "ftsurrog": 4, "smoothtimemask": 4, "channelsdropout": 4, "respect": [4, 5, 30], "two": [4, 5, 9, 10, 11, 12, 14, 16, 18, 27, 29, 32, 46, 52, 63, 70, 73, 76, 93, 98, 100, 102, 112, 115, 116, 127, 128, 134], "insid": [4, 29, 30, 91, 92, 144], "rememb": [4, 29, 32], "\u03c6max": 4, "2\u03c0": 4, "p_drop": [4, 38, 56], "linspac": [4, 12], "transforms_freq": 4, "phase_noise_magnitud": [4, 42, 60], "phase_freq": 4, "random_st": [4, 5, 8, 30, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 61, 125, 126, 127, 128], "transforms_tim": 4, "mask_len_sampl": [4, 52, 66], "transforms_spati": 4, "prob": 4, "gridsearchcv": [4, 29, 30, 132, 146], "control": [4, 5, 10, 29, 68, 102, 110, 112, 113, 115, 116, 117, 118, 123, 124, 146], "over": [4, 10, 16, 29, 31, 32, 42, 47, 48, 49, 50, 60, 64, 68, 124, 146], "framework": 4, "necessari": [4, 68, 116, 124], "slicedata": 4, "mandatori": 4, "eval": [4, 30, 32, 146], "train_x": [4, 30], "train_i": [4, 30], "kfold": [4, 29, 30], "model_select": [4, 5, 8, 29, 30], "cv": [4, 29, 30, 100], "n_split": [4, 29, 30], "shuffl": [4, 8, 14, 29, 30, 32, 39, 46, 58, 68, 124, 146], "fit_param": [4, 30, 124], "param_grid": [4, 29, 30], "return_train_scor": [4, 29, 30], "refit": [4, 29, 30], "error_scor": [4, 29, 30], "rais": [4, 14, 26, 29, 30, 31, 68, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 118, 123, 146], "fold": [4, 30, 32], "candid": [4, 29, 30], "x27": 4, "lt": 4, "gt": 4, "uniniti": [4, 68, 124], "ou": 4, "environ": [4, 69, 137], "rerun": 4, "cell": 4, "represent": [4, 37, 44, 46, 52, 55, 61, 63, 66, 86, 100, 146], "trust": 4, "On": [4, 27, 30, 31, 72, 79], "github": [4, 30, 86, 98, 100, 140, 142, 146], "unabl": 4, "render": 4, "page": [4, 29, 32, 35, 140, 146], "nbviewer": 4, "nbsp": 4, "document": [4, 5, 10, 12, 35, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 101, 102, 105, 106, 108, 110, 112, 113, 115, 116, 140, 144, 146], "gridsearchcvifittedgridsearchcv": 4, "analysi": [4, 5, 9, 10, 11, 26, 35, 141], "wa": [4, 5, 9, 10, 11, 27, 28, 29, 32, 68, 70, 73, 86, 89, 104, 124, 125, 146], "search_result": [4, 29, 30], "cv_results_": [4, 29, 30], "best_run": [4, 29, 30], "rank_test_scor": [4, 29, 30], "best_aug": 4, "validation_scor": 4, "around": [4, 10, 32, 47, 48, 49, 50, 64, 86, 118, 125], "mean_test_scor": [4, 30], "training_scor": 4, "mean_train_scor": [4, 30], "report_messag": 4, "gave": [4, 30], "format": [4, 14, 17, 19, 26, 80, 81, 82], "eval_x": [4, 30], "eval_i": [4, 30], "f": [4, 5, 10, 11, 12, 14, 16, 17, 22, 26, 27, 28, 29, 30, 31, 32, 44, 61, 75, 87, 91, 92, 97, 99, 101, 106, 139], "2f": [4, 29, 30, 32], "accuracyof": 4, "08": [4, 16, 27, 29], "26": [4, 5, 9, 10, 11, 16, 20, 27, 103], "39": [4, 5, 6, 11, 13, 16, 22, 27, 145], "bar": 4, "param_iterator_train__transform": 4, "yerr": 4, "std_train_scor": 4, "rot": 4, "45": [4, 5, 11, 16, 23, 29, 32, 145], "c0": 4, "c1": 4, "c2": 4, "strategi": [4, 25, 29, 30], "set_ylim": [4, 27, 28], "32": [4, 5, 6, 9, 10, 11, 16, 26, 27, 85, 95, 106, 145], "c": [4, 5, 9, 10, 11, 20, 27, 28, 29, 30, 42, 60, 86, 88, 93, 95, 96, 100, 108, 125, 140], "paillard": 4, "moreau": [4, 146], "gramfort": [4, 5, 9, 10, 35, 103, 127, 146], "2022": [4, 30, 75, 85, 89, 90, 91, 92], "systemat": 4, "arxiv": [4, 5, 31, 37, 38, 39, 40, 42, 44, 46, 52, 55, 56, 57, 58, 60, 61, 63, 66, 95, 96, 98, 100, 105, 127, 134], "ab": [4, 5, 46, 63, 98, 134], "2206": 4, "14483": 4, "banvil": [4, 5, 9, 14, 16, 20, 127, 146], "chehab": [4, 5, 11, 127, 146], "hyv\u00e4rinen": [4, 5, 127], "engemann": [4, 5, 35, 127, 146], "2021": [4, 10, 11, 91, 92, 93, 104, 108, 125], "uncov": [4, 5, 127], "structur": [4, 5, 16, 17, 19, 126, 127, 146], "clinic": [4, 5, 7, 24, 127], "journal": [4, 28, 29, 30, 35, 93], "engin": [4, 5, 9, 10, 28, 29, 30, 47, 48, 49, 50, 64, 88, 89, 91, 92, 93, 103, 104], "046020": 4, "879": [4, 6, 145], "202": [4, 26], "plot_data_augmentation_search": [4, 6, 145], "access": [5, 9, 10, 11, 12, 14, 26, 86, 90, 100, 126, 142], "physionet": [5, 7, 13, 16, 24, 71, 76, 94, 103, 104, 107, 108, 114, 118, 123, 126, 128, 137, 139, 145, 146], "ssl": [5, 27], "leverag": [5, 104], "unlabel": 5, "design": [5, 16, 86, 98, 100, 104, 112], "prior": [5, 94], "understand": [5, 24, 29, 98], "under": [5, 14, 69, 123, 144, 146], "autocorrel": 5, "requir": [5, 11, 12, 14, 16, 17, 22, 54, 68, 73, 79, 124, 146], "anoth": [5, 21, 29, 32, 127], "interest": [5, 12, 22, 26], "onc": [5, 16, 29, 112, 117, 127, 144], "reus": [5, 9, 11], "featur": [5, 9, 10, 26, 29, 88, 89, 91, 92, 93, 94, 98, 100, 102, 103, 104, 108, 140, 144, 146], "extractor": [5, 9, 10, 88, 102, 103, 104, 108], "weight": [5, 9, 10, 11, 29, 30, 32, 85, 86, 100, 139], "downstream": 5, "help": [5, 9, 10, 21, 116], "reduc": [5, 10, 14, 16, 76, 118], "quantiti": 5, "compar": [5, 14, 16, 22, 27, 29, 32], "strictli": 5, "rp": 5, "simpl": [5, 12, 16, 24, 25, 32, 33, 86, 94, 98, 101, 145], "whether": [5, 14, 26, 38, 39, 40, 42, 47, 48, 49, 50, 51, 53, 54, 60, 64, 68, 71, 79, 80, 81, 82, 83, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 105, 106, 108, 117, 122, 123, 124, 127, 132, 137, 140], "close": [5, 16, 18, 127, 140], "far": [5, 127], "apart": 5, "yield": [5, 14, 20, 70, 106, 140], "physiolog": [5, 9, 10, 11], "relev": [5, 29, 35, 68, 124], "boost": 5, "classif": [5, 9, 10, 11, 26, 27, 30, 37, 42, 44, 52, 55, 60, 61, 66, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106], "regim": 5, "hubert": [5, 9, 14, 16, 20, 146], "jbanvil": [5, 9, 14, 16, 20], "few": [5, 9, 10, 11, 14, 16, 26, 146], "sleep_physionet": [5, 9, 10, 11], "sleepphysionet": [5, 9, 10, 11, 16, 146], "recording_id": [5, 9, 10, 11, 12, 14, 16, 22, 75, 76, 77, 78], "crop_wake_min": [5, 9, 10, 11, 16, 76], "microvolt": [5, 9, 10], "lowpass": [5, 9, 10, 16], "sinc": [5, 9, 10, 11, 12, 22, 26, 30, 68, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 124, 140], "don": [5, 11, 17, 19, 68, 124], "resampl": [5, 12, 14, 18, 20, 76, 112, 146], "0x7fcad91ff790": [5, 27], "As": [5, 16, 26, 27, 29, 68, 124], "conveni": [5, 100, 116], "later": [5, 12, 22, 72, 73, 75, 77, 78, 87], "window_size_": [5, 9, 10, 11], "map": [5, 9, 10, 11, 12, 22, 26, 27, 28, 29, 30, 31, 35, 68, 82, 85, 87, 97, 98, 99, 101, 107, 117, 118, 124, 139], "merg": [5, 9, 10, 11, 146], "aasm": [5, 9, 10, 11], "w": [5, 9, 10, 11, 12, 27, 28, 29, 30, 75], "z": [5, 9, 10, 31, 47, 50, 64, 105], "scale": [5, 9, 10, 11, 12, 16, 89, 91, 92, 93, 100, 146], "standard_scal": [5, 9, 10], "channel_wis": [5, 9, 10, 11, 16], "0x7fcad93559f0": 5, "new": [5, 9, 10, 11, 20, 40, 57, 68, 75, 86, 89, 98, 100, 110, 111, 112, 113, 115, 116, 124, 140, 144], "receiv": [5, 89], "pair": [5, 127], "indic": [5, 9, 10, 21, 31, 46, 63, 71, 112, 113, 116, 126, 127, 128, 146], "when": [5, 9, 10, 11, 14, 16, 22, 27, 29, 30, 32, 35, 41, 42, 47, 48, 49, 50, 54, 60, 64, 68, 69, 74, 80, 81, 82, 85, 89, 108, 111, 112, 113, 116, 117, 118, 123, 124, 137, 140, 146], "train_test_split": [5, 8, 29], "uniqu": [5, 9, 10, 11, 21, 68, 72, 75, 124], "subj_train": 5, "subj_test": 5, "test_siz": [5, 8, 29], "subj_valid": 5, "relativepositioningdataset": 5, "__getitem__": [5, 68, 124], "expect": [5, 14, 26, 32, 68, 124], "__init__": [5, 32], "list_of_d": [5, 71], "super": [5, 32, 130, 131], "return_pair": 5, "ind1": 5, "ind2": 5, "properti": [5, 71, 146], "_return_pair": 5, "setter": 5, "split_id": [5, 9, 10, 11, 12, 71, 146], "dict": [5, 9, 10, 11, 21, 26, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 52, 71, 72, 74, 79, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 112, 117, 118, 122, 124, 146], "item": [5, 14, 19, 20, 26, 27, 28, 32], "main": [5, 91, 92, 93], "tau_po": [5, 127], "tau_neg": [5, 127], "neg": [5, 27, 31, 68, 127], "separ": [5, 29, 32, 70, 98, 112, 118, 127], "less": [5, 27, 29, 32], "min": [5, 12, 29, 76, 112], "n_exampl": [5, 127], "regular": [5, 120, 121], "instanc": [5, 32, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 61, 68, 85, 89, 93, 110, 111, 112, 113, 116, 124, 126, 146], "000": [5, 16, 17, 18, 19, 22, 23, 31, 34, 145], "lower": [5, 9, 12, 29, 32, 37, 55, 112, 132], "250": [5, 20, 27, 70, 85, 89, 93, 97], "relativepositioningsampl": 5, "n_examples_train": 5, "len": [5, 8, 9, 10, 11, 12, 14, 17, 20, 22, 29, 32, 73, 122], "n_examples_valid": 5, "n_examples_test": 5, "train_sampl": [5, 9, 10, 11], "get_metadata": [5, 9, 10, 11, 27, 28, 29, 31, 71, 126], "same_rec_neg": [5, 127], "valid_sampl": [5, 9, 10, 11], "presampl": [5, 127], "test_sampl": 5, "introduc": [5, 9, 10, 11, 14, 15, 24, 25, 27, 31], "four": [5, 9, 47, 70, 73], "embedd": 5, "dimension": [5, 68, 86, 89, 98, 124, 135], "last": [5, 22, 27, 31, 32, 52, 66, 73, 76, 80, 81, 82, 85, 89, 112, 115, 117, 118, 146], "embed": [5, 9, 10, 85, 86, 89, 100], "after": [5, 12, 16, 21, 26, 28, 29, 32, 70, 76, 87, 101, 102, 103, 129, 132, 146], "tempor": [5, 9, 10, 14, 26, 85, 87, 89, 90, 92, 100, 101, 102, 103, 104, 105, 106, 108, 146], "wrap": [5, 26, 32, 71], "siames": 5, "contrastivenet": 5, "sleepstagerchambon2018": [5, 9, 26], "input_size_sampl": [5, 9, 10, 11], "emb_siz": [5, 86, 100], "emb": [5, 86], "n_output": [5, 9, 10, 11, 26, 31, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 124], "n_conv_ch": [5, 103], "apply_batch_norm": [5, 102, 103], "linear": [5, 9, 10, 26, 30, 46, 63, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 112], "top": [5, 9, 10, 11, 35], "x1": [5, 127], "x2": [5, 127], "z1": 5, "z2": 5, "flatten": [5, 9, 10, 11], "similar": [5, 27, 110], "account": [5, 71, 117], "smaller": [5, 27, 32, 82, 91, 92, 118], "checkpoint": [5, 32], "earlystop": [5, 29, 32], "epochscor": [5, 8, 9, 10, 11, 68, 124], "5e": 5, "128": [5, 10, 11, 68, 73, 91, 92, 98, 103, 108, 124], "512": [5, 11], "enough": [5, 73], "num_work": [5, 14, 32, 135], "cp": 5, "dirnam": 5, "f_criterion": 5, "f_optim": 5, "f_histori": 5, "early_stop": 5, "patienc": 5, "train_acc": 5, "bcewithlogitsloss": [5, 68, 124], "adam": [5, 9, 10, 11, 14, 31], "max_epoch": [5, 29, 32, 68, 124], "iterator_train__sampl": [5, 9, 10, 11], "iterator_valid__sampl": [5, 9, 10, 11], "iterator_train__num_work": 5, "iterator_valid__num_work": 5, "load_param": 5, "lowest": 5, "pt": [5, 85], "delet": [5, 22, 71, 123], "file": [5, 6, 12, 13, 14, 16, 17, 18, 19, 23, 26, 33, 34, 71, 76, 77, 83, 110, 128, 140, 145, 146], "5234": 5, "7013": 5, "6680": 5, "6320": 5, "0877": 5, "5938": 5, "7149": 5, "4880": 5, "8358": 5, "8288": 5, "4922": 5, "0040": 5, "6440": 5, "6172": 5, "8260": 5, "7031": 5, "6120": 5, "5990": 5, "8159": 5, "5391": [5, 27, 28, 29, 30, 31], "6751": 5, "5920": 5, "6213": 5, "8249": 5, "6719": 5, "6227": 5, "6263": 5, "8209": 5, "6562": 5, "6309": 5, "6240": 5, "6117": 5, "6641": 5, "6272": 5, "6480": 5, "5950": 5, "8090": 5, "6328": 5, "6238": 5, "5797": 5, "8062": 5, "6406": [5, 30], "6177": 5, "6800": 5, "5746": 5, "8235": 5, "6250": 5, "6323": 5, "7040": 5, "5787": 5, "8114": 5, "6094": 5, "6281": 5, "6760": 5, "5772": 5, "8099": 5, "6422": 5, "6880": 5, "5790": 5, "8011": 5, "6840": 5, "5765": 5, "8246": 5, "6170": 5, "6920": 5, "5730": 5, "8193": 5, "7578": 5, "5608": 5, "6960": 5, "5676": 5, "8399": 5, "6875": 5, "5936": 5, "7120": 5, "5612": 5, "8082": 5, "7734": 5, "5472": 5, "7080": 5, "5500": 5, "8626": 5, "19": [5, 9, 10, 11, 16, 110, 116], "7656": 5, "5245": 5, "5400": 5, "8143": 5, "5641": 5, "7160": 5, "5333": 5, "8035": 5, "21": [5, 9, 10, 11, 16, 27, 31, 116, 145], "7422": 5, "5307": 5, "7200": [5, 10], "5272": 5, "8213": 5, "7109": 5, "5499": 5, "7360": 5, "5211": [5, 22], "8023": 5, "6259": 5, "7400": 5, "5164": 5, "8273": 5, "5712": 5, "5120": 5, "8328": 5, "5030": 5, "7280": 5, "8225": 5, "balanc": [5, 9, 10, 11, 125, 146], "to_list": [5, 9, 10, 11], "ys1": 5, "ys2": 5, "y1": 5, "y2": 5, "zip": [5, 12, 16, 24], "l": [5, 9, 10, 11, 12, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 85, 87, 97, 99, 101, 108, 125, 139], "orang": [5, 12, 16], "lines1": 5, "labels1": 5, "get_legend_handles_label": 5, "lines2": 5, "labels2": 5, "displai": [5, 9, 10, 11, 27, 28, 29, 32, 73, 137], "confus": [5, 9, 10, 11, 139, 146], "matrix": [5, 9, 10, 11, 39, 40, 47, 57, 58, 64, 89, 98, 139, 146], "report": [5, 9, 10, 11, 14, 29, 32, 77, 78, 85, 140], "confusion_matrix": [5, 9, 10, 11, 27, 28, 139], "classification_report": [5, 9, 10, 11], "switch": [5, 32, 146], "y_pred": [5, 9, 10, 11, 27, 28, 68, 108, 131], "y_true": [5, 9, 10, 11, 27, 28, 68], "90": [5, 16, 29, 139], "31": [5, 9, 10, 11, 16, 26, 27, 30, 32, 89], "41": [5, 11, 16, 27], "88": [5, 16], "precis": [5, 9, 10, 11, 139], "recal": [5, 9, 10, 11], "f1": [5, 9, 10, 11, 85, 96, 132], "support": [5, 9, 10, 11, 18, 27, 32, 68, 112, 115, 116, 122, 124, 146], "74": [5, 16], "71": [5, 16], "121": [5, 12], "68": [5, 16], "129": [5, 11], "macro": [5, 9, 10, 11], "avg": [5, 9, 10, 11], "logist": 5, "balanced_accuracy_scor": [5, 11], "linear_model": 5, "logisticregress": 5, "standardscal": 5, "make_pipelin": 5, "singl": [5, 9, 10, 27, 30, 41, 42, 43, 59, 60, 68, 88, 98, 104, 116, 124, 135, 146], "no_grad": [5, 32], "feat": 5, "batch_x": [5, 22], "concaten": [5, 9, 10, 71, 85, 107, 112, 117, 118], "log_reg": 5, "penalti": 5, "l2": [5, 85], "class_weight": [5, 9, 10, 11], "solver": 5, "lbfg": 5, "multi_class": 5, "multinomi": 5, "clf_pipe": 5, "train_y_pr": 5, "valid_y_pr": 5, "test_y_pr": 5, "train_bal_acc": [5, 9, 10, 11], "valid_bal_acc": [5, 9, 10, 11], "test_bal_acc": 5, "bal": 5, "acc": [5, 29, 32], "4f": 5, "_logist": 5, "469": 5, "convergencewarn": 5, "fail": [5, 12], "converg": [5, 29, 31], "statu": 5, "stop": [5, 32, 37, 55, 82, 112, 117, 118, 136, 146], "NO": 5, "reach": [5, 9, 10, 32], "max_it": 5, "scikit": [5, 24, 25, 33, 68, 71, 74, 94, 101, 114, 118, 121, 123, 124, 137, 139, 145, 146], "altern": [5, 26, 32, 68, 124], "option": [5, 10, 18, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 61, 68, 71, 74, 82, 85, 86, 92, 93, 94, 98, 100, 112, 115, 118, 124, 135, 139, 144, 146], "n_iter_i": 5, "_check_optimize_result": 5, "8924": 5, "5215": 5, "6011": 5, "107": [5, 26], "70": [5, 16, 98], "350": 5, "55": [5, 11, 16, 27, 28, 29, 30], "77": [5, 11, 16], "79": [5, 16], "58": [5, 11, 16, 27], "66": [5, 16, 27], "142": [5, 146], "109": 5, "81": [5, 16, 19], "62": [5, 14, 16, 26], "562": 5, "86": [5, 11, 16], "48": [5, 10, 11, 16, 18, 20, 21, 27, 28, 29, 30, 32, 70, 93], "61": [5, 9, 16, 26, 27], "105": 5, "46": [5, 11, 16, 26, 27], "170": [5, 146], "1088": [5, 106], "57": [5, 14, 16, 26], "much": [5, 27, 68, 115, 124], "chanc": [5, 9, 10], "level": [5, 9, 10, 22, 69, 110, 112, 113, 115, 116, 146], "problem": [5, 26, 42, 60, 140, 143], "quick": [5, 126], "2d": [5, 139], "space": [5, 16], "pca": 5, "decomposit": 5, "cm": [5, 70, 139], "n_compon": 5, "tsne": 5, "compon": [5, 9, 10, 11, 73, 91, 92], "fit_transform": 5, "get_cmap": 5, "viridi": 5, "enumer": [5, 12, 29, 32], "n1": [5, 9, 10, 11], "n2": [5, 9, 10, 11], "n3": [5, 9, 10, 11], "scatter": [5, 16, 31], "alpha": [5, 9, 10, 11, 12, 46, 85, 91, 92], "advanced_train": [5, 6, 145], "plot_relative_posit": [5, 6, 145], "490": [5, 146], "matplotlibdeprecationwarn": 5, "minor": 5, "releas": [5, 91, 140, 144], "colormap": [5, 139], "obj": 5, "0x7fcb97339360": 5, "nonlinear": [5, 29, 68, 85, 97, 124], "project": [5, 12, 14, 19, 26, 77, 78, 116], "umap": 5, "might": [5, 14, 16, 26, 29, 30, 32, 118, 126], "insight": 5, "explor": [5, 29], "ag": [5, 12, 18, 22, 70, 73, 75, 77, 78], "sex": 5, "specif": [5, 9, 10, 11, 16, 18, 30, 68, 83, 102, 110, 124, 126, 142], "subset": [5, 8, 20, 29, 31, 71, 112, 113, 146], "achiev": [5, 9, 10, 11, 98], "reason": [5, 10, 29, 32, 68, 124, 132], "avenu": 5, "entir": [5, 14, 20, 29, 32, 146], "describ": [5, 11, 26, 27, 28, 29, 32, 73, 75, 87, 88, 91, 92, 93, 94, 97, 101, 102, 103, 104, 108], "discov": 5, "2020": [5, 37, 38, 39, 44, 52, 55, 56, 58, 61, 66, 91, 92, 102, 106, 127], "preprint": [5, 31, 37, 38, 39, 40, 42, 44, 52, 55, 56, 57, 58, 60, 61, 66, 95, 96, 98, 105, 127], "2007": [5, 37, 44, 52, 55, 61, 66, 127], "16104": [5, 127], "kemp": [5, 9, 10, 11], "b": [5, 9, 10, 11, 16, 27, 40, 57, 86, 89, 95, 96, 98, 108], "zwinderman": [5, 9, 10, 11], "tuk": [5, 9, 10, 11], "kamphuisen": [5, 9, 10, 11], "obery": 5, "2000": [5, 9, 10, 11, 22, 30, 126], "neuron": [5, 9, 10, 11], "feedback": [5, 9, 10, 11, 70], "loop": [5, 9, 10, 11, 14, 68, 124], "slow": [5, 9, 10, 11, 16, 137, 146], "wave": [5, 9, 10, 11], "microcontinu": [5, 9, 10, 11], "ieee": [5, 9, 10, 11, 47, 48, 49, 50, 64, 85, 88, 89, 90, 91, 92, 103, 104], "transact": [5, 10, 85, 88, 89, 91, 92, 103, 104], "biomed": 5, "1185": [5, 9, 10, 11, 22], "1194": [5, 9, 10, 11], "goldberg": [5, 9, 10, 11], "amar": [5, 9, 10, 11], "glass": [5, 9, 10, 11], "hausdorff": [5, 9, 10, 11], "ivanov": [5, 9, 10, 11], "p": [5, 9, 10, 27, 28, 29, 30, 31, 37, 44, 52, 55, 61, 66, 75, 95, 96, 103], "mark": [5, 9, 10, 11], "stanlei": [5, 9, 10, 11], "physiobank": [5, 9, 10, 11], "physiotoolkit": [5, 9, 10, 11], "research": [5, 9, 10, 11, 30, 35, 141], "resourc": [5, 7, 9, 10, 11, 13, 16, 24, 71, 77, 114, 117, 123, 145, 146], "complex": [5, 9, 10, 11, 29, 32, 73, 102], "circul": [5, 9, 10, 11], "101": [5, 9, 10, 11, 12], "e215": [5, 9, 10, 11], "e220": [5, 9, 10, 11], "chambon": [5, 9, 10, 103], "galtier": [5, 9, 10, 103], "arnal": [5, 9, 10, 103], "wainrib": [5, 9, 10, 103], "2018": [5, 9, 10, 28, 29, 30, 40, 42, 44, 46, 57, 60, 61, 63, 96, 103, 105], "multivari": [5, 9, 10, 103], "multimod": [5, 9, 10, 103], "tran": [5, 9, 10], "system": [5, 9, 10, 47, 64, 86, 88, 89, 91, 92, 103, 104, 143], "rehabilit": [5, 9, 10, 88, 89, 91, 92, 103, 104], "758": [5, 9, 10, 103], "769": [5, 9, 10, 103], "794": [5, 6, 145], "173": [5, 6, 145], "05": [6, 10, 11, 12, 16, 106], "331": 6, "execut": [6, 11, 12, 13, 14, 16, 17, 19, 23, 33, 34, 73, 123, 145], "auto_exampl": [6, 13, 23, 33, 34], "mem": [6, 13, 16, 23, 33, 34, 145], "02": [6, 11, 13, 16, 23, 26, 27, 33, 86, 100, 145], "803": [6, 145], "00": [6, 10, 13, 16, 23, 26, 27, 29, 32, 33, 34, 145], "201": [6, 145], "505": [6, 145, 146], "analaysi": [7, 24], "sleep": [7, 13, 16, 24, 30, 42, 60, 71, 76, 86, 88, 94, 102, 103, 104, 107, 108, 114, 118, 123, 125, 126, 128, 137, 139, 145, 146], "cognit": [7, 24], "experi": [7, 14, 24, 29, 32, 69, 73], "stage": [7, 13, 24, 29, 30, 32, 71, 76, 88, 94, 102, 103, 104, 107, 108, 114, 118, 123, 125, 126, 128, 137, 139, 145, 146], "chambon2018": [7, 13, 24, 71, 76, 94, 103, 107, 114, 118, 123, 126, 128, 137, 139, 145], "eldele2021": [7, 13, 24, 71, 76, 94, 104, 107, 114, 118, 123, 126, 128, 137, 139, 145], "big": [7, 13, 24, 71, 77, 114, 117, 123, 145, 146], "tuh": [7, 13, 14, 15, 23, 24, 71, 78, 86, 114, 117, 123, 145, 146], "corpu": [7, 13, 14, 15, 23, 24, 71, 77, 78, 86, 114, 117, 123, 145, 146], "bcicomp": 8, "0x7fcb973069b0": 8, "decid": [8, 28, 38, 39, 40, 42, 51, 53, 54], "about": [8, 9, 10, 12, 26, 30, 72, 79, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 137, 140], "length": [8, 9, 11, 12, 14, 16, 26, 27, 30, 46, 63, 71, 82, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 112, 117, 118, 146], "preced": 8, "create_windows_from_target_channel": [8, 146], "cnosid": 8, "finer": [8, 146], "fexion": 8, "idx_train": 8, "idx_valid": 8, "n_out_chan": 8, "long": [8, 14, 29, 30, 73, 88], "respons": [8, 9, 10, 11, 28, 30], "manag": [8, 9, 10, 11, 28, 30, 31], "inherit": [8, 9, 10, 11, 26, 28, 30, 68, 124], "neuralnetregressor": 8, "logic": [8, 9, 10, 11, 28, 30, 32], "pearson": 8, "pearson_r_scor": 8, "net": [8, 26, 68, 104, 108, 124, 130, 131, 132], "mseloss": [8, 124], "valid_pearson_r": 8, "train_pearson_r": 8, "train_r2": 8, "valid_r2": 8, "5083": 8, "1251": [8, 22], "5570": 8, "7337": 8, "1507": 8, "6139": 8, "3569": 8, "7986": 8, "3712": 8, "3153": 8, "2582": 8, "1510": 8, "3971": 8, "2075": 8, "593": [8, 13, 145], "214": [8, 11, 13, 145], "plot_bcic_iv_4_ecog_tri": [8, 13, 145], "test": [9, 10, 11, 16, 21, 24, 25, 27, 28, 30, 33, 68, 71, 73, 74, 94, 101, 114, 118, 121, 123, 124, 137, 145, 146], "adapt": [9, 11, 16, 90, 91, 92, 100, 104, 105, 106], "distribut": [9, 10, 29, 46, 100, 142], "individu": [9, 10, 11, 12, 26, 27, 68, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 124, 146], "integr": [9, 10, 32, 146], "omit": [9, 37], "downsampl": [9, 10, 98, 115], "apply_on_arrai": [9, 10, 12, 114], "0x7fcad93c87f0": 9, "0x7fcad2c9ec80": 9, "take": [9, 10, 11, 16, 17, 29, 31, 54, 83, 85, 86, 89, 93, 104], "everi": [9, 10, 11, 12, 14, 18, 22, 29, 32, 73, 85, 89, 93], "consecut": [9, 10, 11, 52, 66, 107, 118, 125, 128], "simplifi": [9, 10, 126, 146], "rather": [9, 10], "freez": [9, 10, 146], "sequencesampl": [9, 10, 11, 146], "n_window": [9, 10, 11, 22, 85, 125, 128], "n_windows_strid": [9, 10, 11, 128], "maxim": [9, 10, 30, 37], "overlap": [9, 10, 11, 80, 81, 82, 112, 117, 118], "372": 9, "383": 9, "implement": [9, 10, 14, 16, 26, 29, 46, 54, 63, 68, 85, 90, 91, 92, 93, 95, 96, 100, 124, 134, 135, 141, 146], "get_center_label": [9, 10], "isinst": [9, 10], "ceil": [9, 10, 106], "astyp": [9, 10], "appear": [9, 10, 11, 70], "lot": [9, 10, 11, 68, 124], "night": [9, 10, 11], "spent": [9, 10, 11], "imbalanc": [9, 10, 11], "avoid": [9, 10, 11, 12, 14, 16, 22, 27, 29, 76, 146], "frequent": [9, 10, 11], "compute_class_weight": [9, 10, 11], "vector": [9, 10, 100, 112, 115], "timedistribut": [9, 10, 146], "feat_extractor": [9, 10], "return_feat": [9, 10, 88, 102, 103, 104], "start_dim": [9, 10], "len_last_lay": [9, 10], "neuralnetclassifi": [9, 10, 11, 28, 30], "mass": 9, "ss3": 9, "speak": [9, 11, 14], "recommend": [9, 11, 16, 29, 30, 35, 89, 98, 143, 144], "balanced_accuraci": [9, 10], "criterion__weight": [9, 10, 11], "tensor": [9, 10, 11, 22, 26, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 86, 88, 89, 93, 98, 99, 100, 102, 103, 104, 105, 106, 107, 124, 129, 133, 134], "2136": 9, "5768": 9, "0888": 9, "6372": 9, "4639": 9, "2036": 9, "4788": 9, "6676": 9, "3655": 9, "2324": 9, "4033": 9, "0966": 9, "2102": 9, "6337": 9, "3511": 9, "2888": 9, "3407": 9, "1149": [9, 29], "2465": 9, "6790": 9, "3506": 9, "3993": 9, "2126": 9, "4517": 9, "4013": 9, "6235": 9, "3737": 9, "5294": 9, "0967": 9, "2768": 9, "4076": [9, 30], "6179": 9, "3667": 9, "5755": 9, "9662": 9, "5927": 9, "5671": [9, 22], "3689": 9, "3612": 9, "6251": 9, "8904": 9, "7076": 9, "5786": 9, "2952": 9, "4016": 9, "6877": 9, "8148": 9, "7154": 9, "5876": 9, "3450": 9, "6860": 9, "7449": 9, "5196": 9, "5269": 9, "6322": 9, "3572": 9, "spatial_conv": 9, "kernel_s": [9, 10, 94, 98, 105, 146], "feature_extractor": [9, 10], "ident": [9, 11, 32, 45, 68, 87, 124], "relu": [9, 10, 93, 98], "maxpool2d": 9, "dilat": [9, 10, 11, 27, 94], "ceil_mod": [9, 10], "end_dim": [9, 10], "inplac": [9, 10, 16], "in_featur": [9, 10], "816": 9, "out_featur": [9, 10], "bia": [9, 10, 11, 100], "sharex": [9, 10, 11], "plot_confusion_matrix": [9, 10, 11, 27, 28, 146], "confusion_mat": [9, 10, 11, 27, 28, 139], "class_nam": [9, 10, 11, 27, 28, 139], "wake": [9, 10, 11, 76], "rem": [9, 10, 11], "33": [9, 11, 16, 27, 29, 33, 145], "56": [9, 11, 16], "34": [9, 11, 16, 27, 30], "42": [9, 11, 13, 16, 27, 30, 145], "194": 9, "03": [9, 10, 11, 13, 16, 23, 100, 145], "28": [9, 11, 16, 27, 29, 91, 92], "37": [9, 11, 16, 22, 26, 27, 33, 145], "hypnogram": [9, 10, 11], "overlaid": [9, 10, 11], "correctli": [9, 10, 11, 94, 144, 146], "identifi": [9, 10, 11, 82, 118], "amount": [9, 10, 11, 16, 115], "expert": [9, 10, 11], "annot": [9, 10, 11, 18, 19, 21, 27, 28, 29, 30, 32, 75, 112, 146], "text": [9, 10, 11, 29, 139], "150": [9, 10, 11, 19, 73], "22222222222223": [9, 10, 11], "despit": [9, 10, 11], "held": [9, 10], "includ": [9, 11, 12, 14, 28, 29, 30, 32, 39, 58, 74, 98, 110, 112, 113, 117, 118, 140, 141], "especi": [9, 30, 32], "ah": [9, 10, 11], "hac": [9, 10, 11], "jjl": [9, 10, 11], "obery\u00e9": [9, 10, 11], "bme": [9, 10, 11], "al": [9, 10, 11, 26, 73, 86, 87, 88, 90, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 108, 132], "lan": [9, 10, 11], "jm": [9, 10, 11], "pch": [9, 10, 11], "rg": [9, 10, 11], "mietu": [9, 10, 11], "je": [9, 10, 11], "moodi": [9, 10, 11], "gb": [9, 10, 11], "peng": [9, 10, 11, 44, 61, 100], "he": [9, 10, 11], "805": [9, 13, 145], "plot_sleep_staging_chambon2018": [9, 13, 145], "attent": [10, 85, 86, 89, 100, 104], "divyesh": [10, 146], "narayanan": [10, 146], "400": [10, 11, 146], "speed": [10, 11, 16, 146], "0x7fcad249a770": 10, "fpz": 10, "cz": [10, 12, 26, 116, 122], "give": [10, 12, 22, 26, 47, 64, 112, 140], "pz": [10, 12], "oz": 10, "reject": [10, 19, 117, 118, 119], "flat": [10, 19, 38, 56, 117, 118, 119], "bad": [10, 14, 19, 112, 113, 116, 140], "slower": [10, 14, 19], "futur": [10, 19, 26, 30, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108], "0x7fcad2445cf0": 10, "133": [10, 11], "sleepstagereldele2021": [10, 26, 146], "1471": 10, "1811": 10, "3459": 10, "1795": 10, "4760": 10, "2971": 10, "2781": 10, "8815": 10, "1955": 10, "2186": 10, "1547": 10, "9845": 10, "4518": 10, "4929": 10, "2331": 10, "2295": 10, "1885": 10, "9780": 10, "_mrcnn": 10, "gelu": 10, "approxim": [10, 48, 49, 50], "features1": 10, "conv1d": [10, 11, 108], "batchnorm1d": [10, 11], "ep": [10, 121], "momentum": [10, 26, 87, 91, 92, 101], "affin": 10, "track_running_stat": 10, "maxpool1d": [10, 11], "features2": 10, "afr": [10, 104], "_sebasicblock": 10, "conv1": 10, "bn1": 10, "conv2": 10, "bn2": 10, "se": 10, "_selay": 10, "avg_pool": 10, "adaptiveavgpool1d": [10, 106], "output_s": [10, 94, 107], "fc": [10, 104], "sigmoid": [10, 68, 124], "_tce": 10, "modulelist": 10, "_encoderlay": 10, "self_attn": 10, "_multiheadedattent": 10, "conv": [10, 11, 108], "_causalconv1d": 10, "feed_forward": 10, "_positionwisefeedforward": 10, "w_1": 10, "120": [10, 73, 104], "w_2": 10, "sublayer_output": 10, "_sublayeroutput": 10, "norm": [10, 85], "layernorm": [10, 100], "06": [10, 11, 13, 16, 27, 145], "elementwise_affin": 10, "n4": 10, "_classif": 10, "1509": 10, "undefinedmetricwarn": 10, "ill": 10, "zero_divis": 10, "behavior": [10, 30, 32, 68, 124, 146], "_warn_prf": 10, "averag": [10, 12, 27, 29, 31, 32, 68, 85, 94, 98, 116, 124, 129], "capit": 10, "07": [10, 16, 27, 29, 33, 145], "faster": [10, 16, 27, 68, 115, 124], "89": [10, 16], "eldel": [10, 104], "et": [10, 26, 73, 86, 87, 88, 90, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 108, 132], "With": [10, 104], "vol": [10, 104], "29": [10, 11, 16, 26, 27, 30, 31, 33, 104, 145], "pp": [10, 37, 44, 47, 48, 49, 50, 52, 55, 61, 64, 66, 89, 104], "809": [10, 104], "818": [10, 104], "1109": [10, 85, 90, 91, 92, 104], "tnsre": [10, 91, 92, 104], "3076234": [10, 104], "935": [10, 13, 145], "plot_sleep_staging_eldele2021": [10, 13, 145], "look": [11, 12, 17, 22, 26, 29, 69, 126], "simpler": 11, "current": [11, 68, 116, 124, 140], "seq2seq": 11, "written": [11, 123, 142], "veri": [11, 29, 32, 71, 98, 118], "short": [11, 12, 29, 32, 70, 88], "too": 11, "small": [11, 12, 27, 29, 140], "theo": [11, 146], "gnassoun": [11, 146], "omar": [11, 146], "emir": 11, "zero": [11, 16, 52, 66, 112, 115, 118, 121, 146], "median": 11, "unit": [11, 26, 112, 144], "interquartil": 11, "upsampl": [11, 108, 115], "light": [11, 139], "No": [11, 19, 26, 29, 32, 70], "robust_scal": 11, "0x7fcad2dcdba0": 11, "shorter": [11, 146], "fulli": [11, 29, 30, 85, 89, 91, 92, 93], "usleep": [11, 26, 146], "in_chan": [11, 26, 31, 87, 95, 96, 97, 99, 101, 106, 108, 109], "with_skip_connect": [11, 108], "balanced_accuracy_multi": 11, "deactiv": 11, "set_param": [11, 68, 124], "callbacks__valid_acc": 11, "306": 11, "even": [11, 26, 29, 32, 68, 69, 108, 124], "odd": [11, 93, 108], "trigger": 11, "intern": [11, 14, 16, 20, 21, 44, 46, 47, 48, 49, 50, 61, 63, 64, 100, 114], "aten": 11, "src": 11, "nativ": 11, "cpp": 11, "1040": 11, "2040": 11, "6129": 11, "1707": 11, "5807": 11, "2327": 11, "2224": 11, "5430": 11, "1594": 11, "5866": 11, "7525": 11, "3464": 11, "4928": 11, "1853": 11, "6026": 11, "7639": 11, "3000": [11, 22, 31], "encod": [11, 86, 104, 108], "_encoderblock": 11, "1500": [11, 106, 126], "block_prepool": 11, "102": 11, "maxpool": [11, 108], "750": 11, "405": 11, "375": 11, "726": 11, "188": 11, "constantpad1d": 11, "377": 11, "94": [11, 16, 27], "160": [11, 73], "004": 11, "960": 11, "49": [11, 16], "565": 11, "876": 11, "108": 11, "536": 11, "152": [11, 146], "115": 11, "368": 11, "228": 11, "338": 11, "bottom": 11, "302": 11, "452": 11, "698": 11, "elu": [11, 85, 86, 87, 91, 92, 97], "604": 11, "_decoderblock": 11, "block_preskip": 11, "898": 11, "block_postskip": 11, "428": [11, 146], "641": 11, "786": 11, "65": [11, 16, 27], "304": [11, 146], "323": 11, "912": 11, "156": 11, "216": 11, "163": 11, "620": 11, "863": 11, "154": 11, "83": [11, 16, 22, 32], "237": 11, "635": 11, "110": 11, "515": [11, 146], "520": [11, 146], "324": 11, "060": 11, "180": 11, "660": 11, "44": [11, 16, 27, 30, 73], "376": 11, "645": 11, "195": 11, "363": 11, "727": 11, "225": 11, "161": [11, 146], "126": [11, 32, 33, 145], "51": [11, 16, 27], "522": 11, "tanh": 11, "avgpool1d": 11, "482": 11, "011": 11, "91": [11, 16, 27], "93": [11, 16, 44, 61], "52": [11, 16, 26], "197": [11, 146], "84": [11, 16], "399": [11, 19, 23, 33, 145], "perslev": [11, 108, 125], "darkner": [11, 108, 125], "kempfner": [11, 108, 125], "nikol": [11, 108, 125], "jennum": [11, 108, 125], "pj": [11, 108, 125], "igel": [11, 108, 125], "resili": [11, 108, 125], "npj": [11, 108, 125], "digit": [11, 22, 108, 125], "med": [11, 108, 125], "72": [11, 16, 27, 30, 108, 125], "206": [11, 13, 145], "122": [11, 12, 13, 145], "plot_sleep_staging_usleep": [11, 13, 145], "showcas": [12, 29, 32], "templ": [12, 77, 78, 146], "univers": [12, 73, 77, 78, 146], "hospit": [12, 77, 78, 146], "www": [12, 14, 35, 69, 77, 78], "isip": [12, 14, 77, 78], "piconepress": [12, 14, 77, 78], "tuh_eeg": [12, 14, 22, 77, 78], "shtml": [12, 77, 78], "c_tueg": [12, 77], "luka": [12, 17, 18, 19, 20, 21, 22, 31, 35, 146], "gemein": [12, 17, 18, 19, 20, 21, 22, 31, 146], "tempfil": [12, 16, 18], "error": [12, 22, 27, 30, 31, 82, 111, 117, 118, 119, 124, 140, 146], "messag": [12, 14, 22, 140], "creation": [12, 22], "mock": [12, 22], "want": [12, 14, 18, 21, 22, 24, 28, 29, 30, 32, 68, 124, 141, 144], "disconsid": 12, "section": [12, 22, 73, 143], "_tuhmock": [12, 22], "noqa": [12, 22], "f811": [12, 22], "firstli": [12, 21], "complet": [12, 14, 16, 27, 68, 124], "read": [12, 14, 16, 17, 18, 19, 75, 77, 78, 83, 118], "tuh_path": [12, 14, 22], "pars": 12, "path": [12, 14, 17, 18, 19, 22, 32, 69, 71, 75, 77, 78, 83, 84], "patient": [12, 69], "id": [12, 18, 20, 21, 27, 28, 29, 30, 32, 71, 75, 77, 78, 83, 117, 118, 146], "sort": [12, 27, 28, 146], "chronolog": [12, 75, 77, 78], "year": [12, 35], "month": [12, 35], "dai": [12, 70], "segment": [12, 16, 29, 32, 89, 100, 112], "regard": [12, 98], "gender": [12, 18, 22, 75, 77, 78], "insert": [12, 22, 94], "job": [12, 68, 77, 83, 112, 115, 117, 118, 123, 124], "load": [12, 16, 17, 19, 22, 23, 69, 71, 74, 76, 78, 83, 87, 101, 114, 117, 118, 123, 145, 146], "target_nam": [12, 14, 18, 22, 31, 71, 72, 75, 77, 78, 83, 146], "add_physician_report": [12, 22, 77, 78], "__name__": 12, "statist": 12, "plt_histogram": 12, "df_of_ages_gend": 12, "ylim": 12, "show_titl": 12, "dafaram": 12, "male_df": 12, "female_df": 12, "figur": [12, 27, 28, 29, 70, 85, 139], "suptitl": 12, "95": [12, 16, 68, 124], "male": 12, "hist": 12, "bin": 12, "green": 12, "orient": 12, "horizont": 12, "axhlin": 12, "1f": [12, 32], "std": [12, 29, 44, 61, 73], "barh": [12, 29], "height": [12, 29], "width": [12, 30, 98, 106, 112], "xlim": 12, "upper": [12, 16, 112], "left": [12, 27, 28, 29, 40, 68, 70, 73, 124], "ytick": 12, "gca": 12, "invert_xaxi": 12, "femal": [12, 73], "subplots_adjust": 12, "wspace": 12, "hspace": 12, "count": [12, 68, 124], "labelpad": 12, "durat": [12, 29, 30, 31, 110, 112, 118], "least": [12, 112, 126, 127, 136], "five": [12, 69], "select_by_dur": 12, "inf": 12, "determin": [12, 30, 68, 92, 124], "d_i": 12, "ones": [12, 26, 125, 146], "split": [12, 15, 20, 23, 24, 26, 31, 68, 71, 74, 87, 101, 118, 124, 145, 146], "discard": [12, 76], "incomplet": 12, "configur": [12, 16, 27, 29, 32], "subdivis": 12, "le": 12, "repres": [12, 21, 48, 49, 50, 89, 98], "re": [12, 21, 68, 116, 124, 140], "referenc": [12, 116], "short_ch_nam": 12, "a1": 12, "a2": 12, "fp1": 12, "fp2": 12, "f3": 12, "f4": 12, "c3": [12, 26], "c4": [12, 26], "p3": 12, "p4": 12, "o1": [12, 122], "o2": 12, "f7": 12, "f8": 12, "t3": 12, "t4": 12, "t5": 12, "t6": 12, "fz": 12, "subdivid": 12, "refer": [12, 35, 37, 38, 39, 40, 42, 44, 46, 47, 48, 49, 50, 52, 55, 56, 57, 58, 60, 61, 63, 64, 66, 69, 70, 75, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 116, 122, 125, 127, 134, 139], "ar_ch_nam": 12, "ref": 12, "le_ch_nam": 12, "ar_ch_map": 12, "ch_name": [12, 14, 17, 26, 80, 111, 122], "le_ch_map": 12, "ch_map": 12, "select_by_channel": 12, "endswith": 12, "seta": 12, "kei": [12, 21, 26, 27, 28, 71, 72, 79, 100, 117, 118], "recod": 12, "setb": 12, "issubset": 12, "region": [12, 112], "micro": 12, "volt": 12, "clip": 12, "outlier": 12, "800": [12, 18], "common": [12, 14, 116, 143, 146], "custom_rename_channel": 12, "unexpect": [12, 140], "rename_channel": 12, "custom_crop": 12, "include_tmax": [12, 110], "bigger": 12, "set_eeg_refer": [12, 116], "ref_channel": [12, 116], "ch_type": [12, 26, 116], "pick_channel": [12, 111, 114], "a_min": 12, "a_max": 12, "parallel": [12, 14, 15, 23, 24, 71, 76, 77, 83, 91, 92, 93, 112, 114, 115, 117, 118, 123, 145, 146], "addition": [12, 18, 26, 35, 68, 124, 135], "serial": [12, 15, 18, 23, 24, 71, 76, 114, 117, 123, 145, 146], "lazi": [12, 15, 16, 23, 24, 78, 87, 101, 117, 145, 146], "capabl": [12, 16, 29, 32, 68, 124], "automat": [12, 14, 26, 69, 88, 106, 116, 146], "reload": [12, 16, 123], "machin": [12, 14, 16, 29, 32, 35, 37, 40, 44, 52, 55, 57, 61, 66, 68, 124], "build": [12, 27, 32, 142, 144], "core": [12, 16, 32], "out_path": 12, "mkdtemp": [12, 18], "directori": [12, 16, 18, 27, 69, 71, 75, 77, 78, 83, 123, 144], "tuh_preproc": 12, "concat_d": [12, 16, 18, 117, 118, 119, 123], "save_dir": [12, 16, 123], "readi": [12, 16, 17, 18, 19, 31], "model": [12, 14, 21, 33, 35, 44, 61, 68, 71, 72, 74, 75, 114, 117, 118, 121, 123, 124, 129, 130, 131, 132, 133, 134, 135, 137, 138, 141, 145, 146], "train": [12, 14, 20, 21, 33, 68, 71, 73, 74, 79, 86, 94, 100, 101, 114, 118, 121, 123, 124, 137, 145, 146], "disk": [12, 14, 16, 77, 78, 118], "tuh_window": [12, 22], "900": [12, 13, 145], "plot_tuh_eeg_corpu": [12, 13, 145], "440": 13, "applied_exampl": [13, 145], "sake": 14, "etc": [14, 28, 30, 86, 114], "preprocess": [14, 15, 18, 19, 20, 21, 22, 23, 24, 26, 31, 71, 76, 141, 145, 146], "continu": [14, 16, 20, 72, 73, 80, 81, 82, 117, 118, 143, 146], "fast": [14, 16, 32, 137], "expens": [14, 68, 124], "ultim": 14, "becom": [14, 16, 29], "imposs": 14, "tb": 14, "potenti": [14, 16, 32, 143], "issu": [14, 16, 140, 146], "overhead": [14, 118], "accommod": 14, "window": [14, 16, 18, 19, 21, 26, 68, 71, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 115, 117, 118, 124, 125, 126, 127, 128, 135, 136, 146], "overal": 14, "though": [14, 16, 29, 32], "impact": [14, 27, 30], "dispatch": 14, "enabl": [14, 16, 27, 32, 68, 70, 106, 124, 146], "fif": [14, 16, 18, 71, 83, 146], "edf": [14, 16, 17, 19, 22], "itertool": [14, 16], "product": [14, 16], "seaborn": [14, 29, 30], "sn": [14, 29, 30], "tuhabnorm": [14, 18, 146], "deep4net": [14, 26, 31, 146], "affect": [14, 27, 132], "algorithm": [14, 26, 28, 29, 30, 32], "set_num_thread": 14, "thread": 14, "autom": [14, 29], "abnorm": [14, 75, 78, 86], "slide": [14, 31, 85, 117], "bundl": 14, "prepar": [14, 16, 20, 32], "load_example_data": 14, "window_len_": 14, "n_record": [14, 126], "creat": [14, 16, 17, 18, 19, 20, 21, 31, 68, 71, 79, 80, 81, 82, 116, 117, 118, 124, 135, 146], "bool": [14, 26, 42, 46, 47, 48, 49, 50, 60, 64, 68, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 116, 117, 118, 122, 123, 124, 127, 128, 132, 135, 137, 139], "windows_d": [14, 16], "assum": [14, 26, 68, 110, 124, 129, 133, 146], "patholog": [14, 18, 75, 78], "window_len_sampl": 14, "xxx": 14, "itself": [14, 29, 30, 140], "drop_bad": [14, 82, 118], "create_example_model": 14, "kind": [14, 26], "str": [14, 22, 26, 27, 28, 29, 36, 68, 69, 71, 72, 74, 75, 77, 78, 79, 82, 83, 87, 89, 94, 101, 110, 111, 112, 113, 114, 115, 116, 117, 118, 123, 124, 132, 139], "n_filters_tim": [14, 26, 31, 87, 89, 101], "filter_time_length": [14, 26, 87, 89, 101], "n_filters_spat": [14, 26, 31, 87, 101], "pool_time_length": [14, 26, 87, 89, 101], "pool_time_strid": [14, 26, 87, 89, 101], "split_first_lay": [14, 26, 87, 97, 101], "batch_norm": [14, 26, 87, 101], "batch_norm_alpha": [14, 26, 87, 91, 92, 97, 101], "drop_prob": [14, 26, 30, 87, 89, 90, 91, 92, 95, 96, 101, 105, 106], "elif": [14, 31], "n_filters_2": [14, 31, 87], "filter_length_2": [14, 87], "n_filters_3": [14, 31, 87], "filter_length_3": [14, 87], "n_filters_4": [14, 31, 87], "filter_length_4": [14, 87], "first_pool_mod": [14, 87], "max": [14, 16, 26, 29, 87, 95, 98, 101, 103, 106, 108, 112, 121], "later_pool_mod": [14, 87], "double_time_conv": 14, "stride_before_pool": [14, 31, 87], "valueerror": [14, 26, 31, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108], "run_train": 14, "serv": [14, 70, 72, 79], "loss_val": 14, "zero_grad": [14, 32], "256": [14, 26, 86, 146], "minibatch": 14, "pin_memori": 14, "pin": 14, "n_repetit": 14, "repeat": [14, 140], "get": [14, 16, 17, 22, 27, 28, 29, 32, 68, 100, 124], "folder": [14, 32, 69], "storag": 14, "tuh_eeg_abnorm": 14, "v2": [14, 100], "cycl": 14, "combin": [14, 16, 71], "all_result": 14, "win_len_": 14, "model_kind": 14, "repetit": [14, 16, 73], "nrepetit": 14, "n": [14, 16, 22, 26, 27, 28, 29, 30, 32, 34, 37, 38, 39, 44, 46, 52, 55, 56, 58, 61, 63, 66, 85, 86, 95, 96, 98, 103, 134], "data_loading_start": 14, "data_loading_end": 14, "training_setup_start": 14, "worker_init_fn": 14, "training_setup_end": 14, "model_training_start": 14, "trained_model": 14, "model_training_end": 14, "del": 14, "data_prepar": 14, "training_setup": 14, "model_train": 14, "csv": 14, "results_df": 14, "fname": 14, "lazy_vs_eager_loading_result": 14, "to_csv": 14, "summar": 14, "catplot": 14, "row": [14, 22, 40, 71, 94, 139], "hue": 14, "col": 14, "strip": 14, "hardwar": [14, 16], "pretti": [14, 140], "worker": [14, 32, 135, 146], "speedup": 14, "benchmark_lazy_eager_load": [14, 23, 145], "basic": [15, 27, 29, 32, 33, 54, 71, 74, 93, 94, 101, 114, 118, 121, 123, 137, 139, 145, 146], "eager": [15, 23, 24, 78, 87, 101, 117, 145], "discret": [15, 23, 24, 71, 77, 117, 145, 146], "simplest": 16, "scenario": [16, 118], "act": [16, 116], "stai": [16, 27, 70], "aris": 16, "bottleneck": [16, 32, 91, 92, 106], "consider": 16, "solut": [16, 116], "clear": 16, "downsid": 16, "write": [16, 18], "cours": [16, 69], "whenev": 16, "up": [16, 17, 70, 108, 115, 146], "significantli": 16, "joblib": [16, 123], "made": [16, 27, 93, 146], "remain": [16, 29, 32], "tradeoff": 16, "memory_profil": 16, "memory_usag": 16, "goe": 16, "prepare_data": 16, "n_rec": 16, "tmp_dir": 16, "temporarydirectori": 16, "overwrit": [16, 18, 68, 71, 72, 75, 77, 78, 79, 84, 123, 124], "measur": 16, "peak": [16, 117, 118], "character": 16, "n_repet": 16, "all_n_rec": 16, "all_n_job": 16, "proc": 16, "time_taken": 16, "max_mem": 16, "1m": [16, 27], "9k": 16, "601kb": 16, "180k": 16, "698kb": 16, "279k": 16, "775kb": 16, "360k": 16, "757kb": 16, "437k": 16, "759kb": 16, "514k": 16, "750kb": 16, "590k": 16, "09": [16, 27], "726kb": 16, "672k": 16, "686kb": 16, "770k": 16, "752kb": 16, "852k": 16, "744kb": 16, "934k": 16, "740kb": 16, "02m": 16, "697kb": 16, "11m": 16, "717kb": 16, "20m": 16, "739kb": 16, "27m": 16, "36m": 16, "44m": 16, "735kb": 16, "52m": 16, "719kb": 16, "61m": 16, "742kb": 16, "69m": 16, "77m": 16, "714kb": 16, "87m": 16, "755kb": 16, "95m": 16, "762kb": 16, "03m": 16, "13m": [16, 27], "21m": 16, "29m": 16, "38m": 16, "46m": [16, 27], "763kb": 16, "54m": 16, "729kb": 16, "64m": 16, "784kb": 16, "72m": 16, "781kb": 16, "80m": [16, 27], "753kb": 16, "88m": 16, "769kb": 16, "97m": 16, "754kb": 16, "04m": 16, "738kb": 16, "12m": 16, "19m": 16, "699kb": 16, "28m": 16, "671kb": 16, "62m": [16, 27], "747kb": 16, "70m": 16, "749kb": 16, "78m": 16, "743kb": 16, "751kb": 16, "731kb": 16, "05m": 16, "770kb": 16, "721kb": 16, "23m": 16, "59": [16, 27], "31m": 16, "39m": 16, "766kb": 16, "47m": 16, "774kb": 16, "55m": 16, "776kb": 16, "756kb": 16, "96m": 16, "746kb": 16, "37m": 16, "703kb": 16, "720kb": 16, "725kb": 16, "718kb": 16, "86m": 16, "93m": 16, "691kb": 16, "00m": 16, "661kb": 16, "08m": 16, "677kb": 16, "16m": 16, "687kb": 16, "24m": 16, "706kb": 16, "32m": 16, "41m": 16, "49m": 16, "57m": 16, "710kb": 16, "65m": 16, "711kb": 16, "73m": 16, "722kb": 16, "82m": 16, "90m": 16, "736kb": 16, "98m": 16, "06m": 16, "14m": 16, "730kb": 16, "728kb": 16, "673kb": 16, "732kb": 16, "727kb": 16, "716kb": 16, "715kb": 16, "22m": 16, "63m": 16, "701kb": 16, "700kb": 16, "45m": 16, "737kb": 16, "712kb": 16, "0m": [16, 27], "2m": [16, 27], "3m": [16, 27], "733kb": 16, "4m": [16, 27], "5m": [16, 27, 86], "724kb": 16, "6m": [16, 27], "7m": [16, 27], "734kb": 16, "8m": [16, 27], "54": 16, "9m": [16, 27], "53": [16, 22, 23, 27, 145], "741kb": 16, "745kb": 16, "748kb": 16, "723kb": 16, "685kb": 16, "764kb": 16, "765kb": 16, "760kb": 16, "772kb": 16, "778kb": 16, "767kb": 16, "768kb": 16, "771kb": 16, "799kb": 16, "795kb": 16, "789kb": 16, "780kb": 16, "788kb": 16, "793kb": 16, "796kb": 16, "790kb": 16, "783kb": 16, "785kb": 16, "779kb": 16, "773kb": 16, "798kb": 16, "816kb": 16, "814kb": 16, "815kb": 16, "812kb": 16, "810kb": 16, "761kb": 16, "800kb": 16, "809kb": 16, "807kb": 16, "805kb": 16, "802kb": 16, "63": [16, 33, 145], "794kb": 16, "787kb": 16, "758kb": 16, "67": [16, 108], "782kb": 16, "791kb": 16, "73": [16, 27], "797kb": 16, "777kb": 16, "76": 16, "78": [16, 27, 76], "786kb": 16, "82": [16, 29, 44, 61], "85": [16, 27, 28], "92": 16, "96": [16, 27], "674kb": 16, "633kb": 16, "632kb": 16, "97": 16, "669kb": 16, "98": [16, 27], "99": 16, "200gb": 16, "90k": 16, "7mb": [16, 27], "01m08": 16, "mne_data": [16, 17, 19, 27, 69], "sc4001e0": 16, "psg": 16, "detect": [16, 17, 19, 30, 73, 75], "sc4011e0": 16, "2507000": 16, "25070": 16, "sec": [16, 17, 18, 19, 31], "contigu": [16, 52, 66], "fir": [16, 112], "phase": [16, 42, 60, 100, 112], "causal": [16, 112], "firwin": [16, 112], "ham": [16, 112], "0194": 16, "passband": 16, "rippl": 16, "stopband": 16, "attenu": [16, 112], "edg": [16, 112], "transit": [16, 37, 55, 112], "bandwidth": [16, 37, 55], "450": 16, "tmp": [16, 18], "tmpdej1pqb_": 16, "3260000": 16, "32600": 16, "762": [16, 18], "subdirectori": [16, 18, 71, 123], "open": [16, 18, 75, 140, 141, 143], "isotrak": 16, "2884000": 16, "5391000": 16, "28840": 16, "53910": 16, "1975000": 16, "5235000": 16, "19750": 16, "52350": 16, "751": [16, 18], "match": [16, 18, 19, 26, 30, 71, 85], "exist": [16, 18, 22, 29, 31, 69, 71, 72, 79, 116, 123], "encount": [16, 18, 140], "mix": [16, 18, 46, 63, 134], "tmp1e75knmb": 16, "tmp_ckrejkj": 16, "tmpnknfn3fj": 16, "sub_df": 16, "groupbi": 16, "mib": 16, "without": [16, 26, 27, 29, 30, 32, 68, 124, 134, 146], "circl": 16, "advantag": [16, 29, 91, 92], "togeth": [16, 27, 146], "062": [16, 23, 145], "plot_benchmark_preprocess": [16, 23, 145], "create_from_x_i": 17, "fetch": [17, 19, 20, 21, 70, 73, 74], "imagin": [17, 19], "hand": [17, 19, 24, 28, 30, 70, 73], "feet": [17, 18, 19, 21, 27, 28, 29, 30, 32, 70, 73], "event_cod": [17, 19], "yet": [17, 19, 94, 144], "physionet_path": [17, 19], "eegbci": [17, 19], "load_data": [17, 19, 74], "update_path": [17, 19], "io": [17, 19, 27, 72, 110, 112, 122], "read_raw_edf": [17, 19], "stim_channel": [17, 19], "eegmmidb": [17, 19], "s022": [17, 19], "s022r05": [17, 19], "19999": [17, 19], "124": [17, 19, 27], "994": [17, 19], "s022r06": [17, 19], "s022r09": [17, 19], "s022r10": [17, 19], "s022r13": [17, 19], "s022r14": [17, 19], "ani": [17, 18, 26, 27, 29, 32, 68, 104, 112, 116, 124, 144], "get_data": 17, "500": [17, 19, 28, 126, 146], "rawarrai": [17, 19, 31, 82], "float64": [17, 19, 31], "20000": 17, "manipul": 17, "x_i": 17, "y_i": 17, "window_ind": 17, "start_ind": 17, "stop_ind": 17, "072": [17, 23, 145], "plot_custom_dataset_exampl": [17, 23, 145], "load_concat_dataset": [18, 146], "event": [18, 19, 20, 21, 26, 27, 28, 29, 30, 32, 76, 82, 117, 118], "skip": [18, 22, 29, 32, 93, 108], "fn": [18, 114], "0x7fcad924d390": 18, "concat": [18, 71, 85, 117, 118, 123], "json": [18, 71, 83, 146], "hold": [18, 71, 72, 79, 117, 118], "due": [18, 32, 146], "tmpdir": 18, "temporari": [18, 146], "tmpit8b05u8": 18, "complianc": 18, "upon": [18, 26], "dataset_load": 18, "ids_to_load": [18, 83], "3868": 18, "386": 18, "left_hand": [18, 21, 27, 28, 29, 30, 32], "right_hand": [18, 21, 27, 28, 29, 30, 32], "tongu": [18, 21, 27, 28, 29, 30, 32, 70], "again": [18, 22, 29], "epo": [18, 71, 83], "windows_dataset_load": 18, "874": [18, 23, 145], "plot_load_save_dataset": [18, 23, 145], "create_from_mne_raw": 19, "create_from_mne_epoch": 19, "138": [19, 146], "t0": 19, "t1": 19, "t2": 19, "point": [19, 20, 26, 70, 116, 120, 121], "beforehand": 19, "list_of_epoch": [19, 81], "baselin": [19, 26, 98], "Not": [19, 26], "metadata": [19, 26, 71, 79, 117, 124, 125, 126, 127, 128], "correct": [19, 26, 32, 68, 90, 91, 92, 93, 95, 96, 124, 146], "ad": [19, 27, 71, 77, 78, 100, 106, 108, 116, 146], "plot_mne_dataset_exampl": [19, 23, 145], "daniel": [20, 35, 146], "wilson": [20, 146], "dan": [20, 146], "wil": 20, "break": [20, 70], "place": [20, 31, 94, 110, 122], "legaci": 20, "inst": [20, 111, 112, 113, 116], "criteria": [20, 68, 124], "subset_nam": 20, "232164": 20, "840": [20, 23, 26, 145], "plot_moabb_dataset_exampl": [20, 23, 145], "aim": [21, 22, 98], "dictionari": [21, 26, 68, 71, 74, 112, 124], "string": [21, 22, 26, 35, 40, 48, 49, 50, 68, 71, 112, 113, 114, 123, 124, 132], "entri": [21, 111], "0x7fcad972e5c0": 21, "0x7fcb974aabf0": 21, "0x7fcb974ab9d0": 21, "0x7fcb974a8b20": 21, "0x7fcb974a87f0": 21, "0x7fcb974a94b0": 21, "integ": [21, 22, 27, 28, 40, 52, 57, 66, 71, 112, 113], "0x7fcb974a8070": 21, "0x7fcb974a8160": 21, "0x7fcb974ab520": 21, "0x7fcb974ab460": 21, "0x7fcb974aa650": 21, "0x7fcb974abc10": 21, "0x7fcb974a8910": 21, "similarli": [21, 32], "0x7fcb968f9300": 21, "0x7fcb968fa380": 21, "0x7fcb968f95a0": 21, "0x7fcad934e6b0": 21, "0x7fcad934e980": 21, "0x7fcad9293dc0": 21, "0x7fcad9292e90": 21, "0x7fcad934cc70": 21, "944": [21, 23, 145], "plot_split_dataset": [21, 23, 145], "welcom": 22, "ll": 22, "guid": [22, 29, 143], "log": [22, 26, 27, 32, 68, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 101, 102, 105, 106, 108, 110, 112, 113, 115, 116, 117, 118, 124, 146], "excess": 22, "v1": [22, 32], "02_tcp_le": 22, "00000058": 22, "s001": 22, "01_tcp_ar": 22, "099": 22, "00009932": 22, "s004": 22, "03_tcp_ar_a": 22, "123": 22, "00012331": 22, "s0": 22, "00000000": 22, "149": 22, "00014928": 22, "ndarrai": [22, 47, 64, 68, 115, 120, 121, 124, 128, 135, 136], "92922518": 22, "22477157": 22, "12493701": 22, "28417889": 22, "13578887": 22, "56835277": 22, "25153176": 22, "7638324": 22, "14345092": 22, "30167542": 22, "68056549": 22, "70380673": 22, "70052629": 22, "21543634": 22, "96330007": 22, "02736802": 22, "65902848": 22, "15756383": 22, "38658058": 22, "04194231": 22, "15447331": 22, "set_descript": [22, 32, 71, 72, 79], "ind": 22, "16017832": 22, "11754766": 22, "6515615": 22, "50407195": 22, "7429778": 22, "9292252": 22, "86039335": 22, "5169721": 22, "0308012": 22, "1209397": 22, "5210943": 22, "2247716": 22, "373041": 22, "14827406": 22, "25829056": 22, "1486133": 22, "15352039": 22, "30362263": 22, "939559": 22, "5686462": 22, "5503989": 22, "3299779": 22, "3865806": 22, "7443461": 22, "1792846": 22, "25878426": 22, "5670986": 22, "2997373": 22, "0537782": 22, "4429058": 22, "05458383": 22, "000525": 22, "66521484": 22, "15447332": 22, "dtype": [22, 30, 146], "float32": 22, "2600": 22, "3600": [22, 76], "dl": 22, "batch_i": 22, "batch_ind": 22, "simpli": [22, 26], "8024": 22, "4564": 22, "4433": 22, "7404": 22, "2522": [22, 30], "0508": 22, "4418": 22, "5201": 22, "2037": 22, "0273": 22, "0506": 22, "1677": 22, "1145": 22, "7075": 22, "1768": 22, "0260": 22, "7216": 22, "2742": 22, "3986": 22, "3912": 22, "8000": 22, "0593": 22, "8097": 22, "1729": 22, "6267": 22, "8419": 22, "3996": 22, "6685": 22, "9266": 22, "1319": 22, "1409": 22, "6246": 22, "6229": 22, "5953": 22, "3169": 22, "4604": 22, "2885": 22, "0168": 22, "6279": 22, "6533": 22, "7673": 22, "6671": 22, "0448": 22, "1422": 22, "5395": 22, "4664": 22, "1882": 22, "2031": 22, "6282": 22, "4535": 22, "8585": 22, "2657": 22, "9942": 22, "3878": 22, "1360": 22, "9132": 22, "9481": 22, "5033": 22, "3406": 22, "6089": 22, "9883": 22, "2919": 22, "3796": 22, "8036": 22, "7666": 22, "8174": 22, "3829": 22, "1508": 22, "8516": 22, "0426": 22, "1322": 22, "4122": 22, "2526": 22, "9711": 22, "6890": 22, "4660": 22, "5510": 22, "3613": 22, "0280": 22, "1350": 22, "2249": 22, "9406": 22, "7754": 22, "7664": 22, "1807": 22, "8206": 22, "1281": 22, "1607": 22, "9353": 22, "0165": [22, 29], "6509": 22, "7276": 22, "2137": 22, "5619": 22, "0408": 22, "9825": 22, "3648": 22, "6978": 22, "8943": 22, "2374": 22, "4398": 22, "8218": 22, "5172": 22, "2975": 22, "0311": 22, "1602": 22, "1175": 22, "6516": 22, "5041": 22, "7430": 22, "9292": 22, "8604": 22, "5170": 22, "0308": 22, "1209": 22, "2248": 22, "3730": 22, "1483": 22, "2583": 22, "1486": 22, "1535": 22, "1249": 22, "3036": 22, "9396": 22, "5686": 22, "5504": 22, "3300": 22, "3866": 22, "7443": 22, "1793": 22, "2588": 22, "2997": 22, "0419": 22, "0538": 22, "4429": 22, "0546": 22, "6652": 22, "1545": 22, "082": [22, 23, 145], "plot_tuh_discrete_multitarget": [22, 23, 145], "272": 23, "datasets_io": [23, 145], "fundament": [24, 25], "tune": [24, 25, 32, 33, 71, 74, 89, 94, 101, 114, 118, 121, 123, 137, 145, 146], "fake": [24, 25, 26, 33, 71, 72, 87, 94, 101, 109, 117, 129, 137, 145, 146], "auto_examples_python": 24, "auto_examples_jupyt": 24, "develop": [26, 29, 32, 140, 144], "particular": 26, "pierr": [26, 146], "guetschel": [26, 146], "suppos": 26, "stumbl": 26, "schirrmeist": [26, 27, 28, 29, 30, 31, 35, 73, 87, 97, 99, 101, 139, 146], "2017": [26, 27, 28, 29, 30, 31, 35, 47, 48, 49, 50, 64, 73, 87, 88, 97, 99, 101, 139], "articl": [26, 35], "mention": [26, 29], "novel": [26, 91, 92], "shallowconvnet": [26, 31], "fortun": 26, "publish": 26, "what": [26, 29, 68, 85, 117, 118, 124], "exact": 26, "visit": [26, 29], "api": [26, 144], "models_dict": [26, 68, 124, 146], "atcnet": [26, 146], "biot": [26, 146], "deepsleepnet": [26, 146], "eegconform": [26, 146], "eegitnet": [26, 146], "eegincept": [26, 92, 146], "eeginceptionerp": [26, 91, 146], "eeginceptionmi": [26, 146], "eegnetv1": 26, "eegnetv4": 26, "eegresnet": [26, 146], "eegsimpleconv": [26, 146], "hybridnet": 26, "labram": [26, 146], "sleepstagerblanco2020": [26, 146], "tcn": [26, 85, 146], "tidnet": [26, 146], "investig": 26, "docstr": [26, 146], "__doc__": 26, "schirrmeister2017": [26, 73, 87, 97, 99, 101], "conv_nonlin": [26, 101], "pool_mod": [26, 95, 96, 101], "pool_nonlin": [26, 101], "normalis": [26, 87, 98, 101], "chs_info": [26, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 124], "fill": [26, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108], "ch": [26, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108], "detail": [26, 29, 32, 46, 63, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 115, 116, 122, 123, 137, 144], "input_window_second": [26, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 124], "alia": [26, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 101, 102, 103, 104, 105, 106, 108], "softmax": [26, 27, 31, 68, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 101, 102, 105, 106, 108, 124], "doc": [26, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 101, 102, 105, 106, 108, 137, 144, 146], "infer": [26, 29, 30, 68, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 118, 124, 132], "attempt": [26, 85, 86, 87, 88, 94, 97, 99, 100, 101, 102, 103, 104, 105, 108, 116], "springenberg": [26, 27, 28, 29, 30, 31, 35, 87, 97, 99, 101, 139], "fieder": [26, 27, 28, 29, 30, 31, 35, 87, 97, 99, 101, 139], "glasstett": [26, 27, 28, 29, 30, 31, 35, 87, 97, 99, 101, 139], "eggensperg": [26, 27, 28, 29, 30, 31, 35, 87, 97, 99, 101, 139], "tangermann": [26, 27, 28, 29, 30, 31, 35, 87, 97, 99, 101, 139], "hutter": [26, 27, 28, 29, 30, 35, 87, 97, 99, 101, 139], "ball": [26, 27, 28, 29, 30, 31, 35, 73, 87, 97, 99, 101, 139], "aug": [26, 35, 87, 97, 99, 101, 139], "dx": [26, 35, 87, 91, 92, 97, 99, 101, 139], "1002": [26, 27, 28, 29, 30, 35, 87, 97, 99, 101, 139], "hbm": [26, 27, 28, 29, 30, 35, 87, 97, 99, 101, 139], "23730": [26, 27, 28, 29, 30, 35, 87, 97, 99, 101, 139], "__str__": 26, "976": [26, 27], "882": 26, "quit": [26, 29], "popular": 26, "collect": [26, 68, 73, 124], "1024": 26, "simul": 26, "create_info": 26, "randn": 26, "256hz": 26, "epochsarrai": 26, "randint": [26, 31], "99609": 26, "off": [26, 29, 30, 112], "wrapper": [26, 28, 29, 86], "form": [26, 46, 63, 70, 71, 72, 79], "facilit": [26, 146], "easiest": [26, 29], "former": [26, 68, 85, 89, 93, 124], "prefix": [26, 68, 124], "module__": 26, "validsplit": [26, 30, 68, 124], "module__final_conv_length": 26, "along": [26, 72, 79, 115, 143, 146], "3500": 26, "9173": 26, "0152": 26, "0096": 26, "0080": 26, "0078": [26, 30], "0077": 26, "0076": 26, "0075": 26, "0074": 26, "924": 26, "844": 26, "pre": [26, 80, 86, 100, 116, 146], "via": [26, 28, 29, 30, 108, 112, 142, 143, 146], "And": [26, 27], "nan": [26, 133], "unit_mul": 26, "fiff_unitm_non": 26, "cal": 26, "fiffv_eeg_ch": 26, "coil_typ": 26, "fiffv_coil_eeg": 26, "fiff_unit_v": 26, "coord_fram": 26, "fiffv_coord_head": 26, "scanno": 26, "logno": 26, "target_from": 26, "miss": [26, 32, 85, 86, 89, 91, 93, 95, 96, 97, 98, 99, 102, 108, 146], "manual": [26, 27, 29, 143], "956": [26, 33, 145], "plot_basic_training_epoch": [26, 33, 145], "push": [27, 68, 124], "produc": [27, 29, 32, 104], "neighbour": 27, "simultan": [27, 91, 92], "sub": [27, 146], "afterward": [27, 29, 85, 89, 93, 116], "implicitli": [27, 29, 32], "timestep": 27, "user": [27, 68, 124, 140, 142, 143, 146], "mostli": 27, "runtim": 27, "rule": [27, 68, 124], "mathemat": 27, "neighbourhood": 27, "At": [27, 70], "redund": 27, "lead": [27, 29, 68, 116, 124], "gradient": [27, 146], "likelihood": [27, 68], "typic": [27, 68, 110, 124], "locat": [27, 69], "anyth": [27, 68], "runtimewarn": 27, "config": [27, 69], "mne_datasets_bnci_path": 27, "set_config": 27, "get_config": 27, "urllib3": 27, "connectionpool": 27, "1061": 27, "insecurerequestwarn": 27, "unverifi": 27, "request": [27, 116, 140], "host": 27, "lampx": 27, "tugraz": 27, "certif": 27, "verif": 27, "readthedoc": 27, "en": 27, "advanc": [27, 142], "8k": 27, "166kb": 27, "3k": 27, "362kb": 27, "209k": 27, "647kb": 27, "432k": 27, "20mb": 27, "889k": 27, "31mb": 27, "48mb": 27, "78mb": 27, "8mb": 27, "4mb": 27, "3mb": 27, "2mb": 27, "6mb": 27, "0mb": 27, "1mb": 27, "5mb": 27, "227gb": 27, "7k": 27, "297kb": 27, "4k": 27, "296kb": 27, "101k": 27, "352kb": 27, "636kb": 27, "21mb": 27, "34mb": 27, "54mb": 27, "87mb": 27, "74m": 27, "79m": 27, "9mb": 27, "161gb": 27, "definit": [27, 68, 124], "torchinfo": [27, 28, 29, 32, 94, 146], "tabl": [27, 28, 29, 30, 32, 85, 94, 146], "dens": [27, 94, 102, 103], "explicit": [27, 132], "deep4": [27, 28, 146], "nll_loss": 27, "4632": 27, "9341": 27, "4830": 27, "2539": 27, "3309": 27, "percent": [27, 28], "misclass": [27, 28], "assign": [27, 28, 136], "train_misclass": [27, 28], "valid_misclass": [27, 28], "misclassif": [27, 28], "get_ylim": [27, 28], "room": [27, 28], "matric": [27, 28, 48, 49, 50, 68, 124], "label_dict": [27, 28], "i_class": [27, 28], "window_kwarg": [27, 28, 71], "kv": [27, 28], "conf": [27, 28], "640x480": [27, 28], "m\u00fcller": [27, 28, 29, 30], "aertsen": [27, 28, 29, 30], "birbaum": [27, 28, 29, 30], "braun": [27, 28, 29, 30], "brunner": [27, 28, 29, 30], "leeb": [27, 28, 29, 30], "mehr": [27, 28, 29, 30], "mueller": [27, 28, 29, 30], "putz": [27, 28, 29, 30], "nolt": [27, 28, 29, 30], "2012": [27, 28, 29, 30], "review": [27, 28, 29, 30], "frontier": [27, 28, 29, 30, 35, 75], "neurosci": [27, 28, 29, 30, 35, 75], "burgard": [27, 28, 29, 30, 35], "hum": [27, 28, 29, 30], "5420": [27, 28, 29, 30, 31], "456": [27, 33, 145], "740": [27, 33, 145], "plot_bcic_iv_2a_moabb_crop": [27, 33, 145], "classic": 28, "0x7fcad9463a60": 28, "benefici": 28, "6001": [28, 29], "6724": 28, "5731": 28, "2570": 28, "9811": 28, "4679": 28, "2569": [28, 29], "1473": 28, "0235": 28, "4691": 28, "0680": 28, "2431": 28, "9948": 28, "4696": 28, "jayaram": [28, 29, 30], "vinai": [28, 29, 30], "alexandr": [28, 29, 30, 35], "barach": [28, 29, 30], "trustworthi": [28, 29, 30], "066011": [28, 29, 30], "633": [28, 33, 145], "502": [28, 33, 145], "plot_bcic_iv_2a_moabb_tri": [28, 33, 145], "properli": [29, 112, 115, 116], "exclus": [29, 32], "elabor": [29, 32], "feel": [29, 32], "free": [29, 32], "distinguish": 29, "scheme": [29, 32, 116, 146], "answer": [29, 32], "reliabl": [29, 32], "sound": [29, 32], "divis": [29, 32, 102, 104, 121], "But": [29, 32], "stori": [29, 32], "learnabl": [29, 100], "connect": [29, 30, 85, 89, 93, 102, 108], "bias": 29, "capac": [29, 30], "ml": [29, 32], "degre": [29, 32, 47, 48, 49, 50, 64], "freedom": [29, 32], "kept": [29, 32], "leakag": [29, 32], "memor": [29, 32], "longer": [29, 32, 68, 124], "independ": [29, 32, 42, 60, 112, 146], "never": [29, 32], "explicitli": [29, 32, 112, 113, 116], "recogn": [29, 32], "behind": [29, 32], "alwai": [29, 32, 35, 54, 68, 124], "readabl": [29, 32, 112], "reiniti": [29, 32], "rescal": [29, 30], "varianc": [29, 30, 121], "0x7fcad9525630": 29, "One": [29, 30, 70, 91, 92], "demarc": [29, 30], "stimulu": [29, 30], "trial_stop_offset_second": [29, 30], "0test": 29, "matter": [29, 32, 75, 77, 78], "distinct": [29, 32], "previous": [29, 32], "credibl": [29, 32], "test_acc": [29, 32], "2670": 29, "2351": 29, "1355": 29, "patch": [29, 100], "font_scal": 29, "plot_simple_train_test": 29, "all_dataset": 29, "bd_cmap": 29, "3a6190": 29, "683e00": 29, "ddf2ff": 29, "2196f3": 29, "ndataset": 29, "nsplit": 29, "invert_yaxi": 29, "ncol": 29, "bbox_to_anchor": 29, "set_xlim": 29, "risk": [29, 46, 63, 134], "tweak": 29, "until": [29, 70], "realli": 29, "unreli": 29, "ratio": [29, 100], "leav": [29, 146], "empti": [29, 68, 112, 116], "x_train": 29, "train_indic": 29, "val_indic": 29, "indices_": 29, "train_subset": 29, "val_subset": 29, "meaning": 29, "3348": 29, "2877": 29, "3448": [29, 30], "0761": 29, "0309": 29, "3522": 29, "0681": 29, "3621": 29, "5752": 29, "9337": 29, "compact": [29, 95, 96], "plot_train_valid_test": 29, "n_train": 29, "n_val": 29, "n_test": 29, "suffici": 29, "compens": [29, 112], "unseen": 29, "holdout": 29, "highli": 29, "cross_val_scor": 29, "splitter": 29, "train_val_split": 29, "By": [29, 30, 31, 46, 68, 124], "processor": [29, 30], "cv_result": 29, "2565": 29, "2217": 29, "9664": 29, "2609": 29, "8600": 29, "2171": 29, "8500": 29, "2652": 29, "0127": 29, "8568": 29, "2870": [29, 30], "1441": 29, "8596": 29, "0173": 29, "8577": 29, "2641": 29, "1313": 29, "8547": 29, "2727": 29, "0366": 29, "8599": [29, 30], "3853": 29, "0511": 29, "8344": 29, "9833": 29, "8342": 29, "plot_k_fold": 29, "fraction": [29, 31], "ii": 29, "tr_idx": 29, "val_idx": 29, "n_train2": 29, "rotat": [29, 47, 48, 49, 50, 64, 139], "verticalalign": 29, "horizontalalign": 29, "transax": 29, "earli": 29, "rough": 29, "quickli": 29, "messi": 29, "jointli": 29, "analog": [29, 132], "grid": [29, 30], "tupl": [29, 30, 46, 54, 63, 68, 72, 76, 86, 94, 109, 115, 122, 124, 127, 139], "00625": [29, 30], "000625": 29, "best_paramet": 29, "3565": 29, "4721": 29, "0063": [29, 30], "9451": 29, "3913": [29, 30], "1627": 29, "8469": 29, "4000": 29, "8608": 29, "9486": 29, "8774": 29, "2016": [29, 95], "1630": 29, "2847": 29, "0208": 29, "1371": 29, "replac": [29, 52, 66, 146], "336": [29, 33, 145], "165": [29, 33, 145], "plot_how_train_test_and_tun": [29, 33, 145], "sensit": [30, 70, 139], "hyeperparamet": 30, "signific": 30, "discrimin": 30, "pathologi": 30, "playbook": 30, "googl": 30, "0x7fcad93f12d0": 30, "functool": 30, "partial": 30, "analyz": 30, "initialis": [30, 124], "slice": [30, 112, 113, 117, 118], "fine": 30, "learning_r": 30, "0000625": 30, "module__drop_prob": 30, "got": 30, "3130": 30, "8104": 30, "3793": 30, "1239": 30, "5884": 30, "7925": 30, "5862": 30, "7020": 30, "5501": 30, "1558": 30, "0195": 30, "5703": 30, "4522": 30, "0370": 30, "4483": 30, "7048": 30, "5697": 30, "2348": 30, "6052": 30, "2759": 30, "2581": 30, "5714": 30, "5181": 30, "5275": 30, "5446": 30, "5301": 30, "3103": 30, "4240": 30, "5471": 30, "2916": 30, "5690": 30, "6926": 30, "6754": 30, "5677": 30, "4957": 30, "1572": 30, "4138": 30, "7131": 30, "5450": 30, "9938": 30, "1901": 30, "5408": 30, "3739": 30, "4401": 30, "4828": 30, "5421": 30, "2174": 30, "0672": 30, "5605": 30, "6373": 30, "8733": 30, "5678": 30, "2783": 30, "6966": 30, "2069": 30, "8291": 30, "5645": 30, "5263": 30, "3642": 30, "5412": 30, "4261": 30, "3976": 30, "8938": 30, "5423": 30, "5304": 30, "6155": 30, "8008": 30, "5687": 30, "2435": 30, "2416": 30, "7621": 30, "5709": 30, "6460": 30, "2773": 30, "5469": 30, "9100": 30, "9077": 30, "5439": 30, "0091": 30, "3657": 30, "5485": 30, "5285": 30, "5659": 30, "7658": 30, "0842": 30, "2957": 30, "2414": 30, "4293": 30, "1196": 30, "5000": 30, "9042": 30, "3966": 30, "0486": 30, "1097": [30, 35], "pivot": 30, "heatmap": 30, "pivot_t": 30, "param_optimizer__lr": 30, "param_module__drop_prob": 30, "fmt": 30, "3f": 30, "cmap": 30, "ylgnbu": 30, "cbar": 30, "model_build": [30, 32, 33, 145], "plot_hyperparameter_tuning_with_scikit": [30, 33, 145], "339": 30, "constructor": 30, "numer": [30, 118], "sequenc": [30, 36, 41, 68, 100, 105, 107, 124, 125, 128, 135, 143, 146], "varun": 30, "godbol": 30, "georg": 30, "dahl": 30, "justin": 30, "gilmer": 30, "christoph": 30, "shallu": 30, "zachari": 30, "nado": 30, "tuning_playbook": 30, "527": [30, 33, 145], "119": 30, "sara": [31, 146], "sedlar": [31, 146], "n_fake_rec": 31, "sinusoid": 31, "gaussian": [31, 44, 61], "nois": [31, 44, 61, 70], "n_fake_ch": 31, "fake_dur": 31, "fake_sfreq": 31, "basedataset": [31, 36, 71, 79, 83, 123, 146], "create_mne_dummy_raw": 31, "fake_regression_dataset": 31, "n_fake_target": 31, "fake_data_split": 31, "target_subset": 31, "sin": 31, "pi": [31, 42, 60], "_data": 31, "expand_dim": 31, "fake_descript": 31, "n_fake_chan": 31, "2999": 31, "990": 31, "model_nam": 31, "deepconvnet": 31, "unknown": [31, 132], "785": 31, "minim": [31, 46, 63, 134, 140], "mse": 31, "ground": [31, 70, 73], "truth": 31, "period": 31, "schedul": [31, 32], "optimizer_lr": 31, "optimizer_weight_decai": 31, "neg_root_mean_squared_error": 31, "train_neg_root_mean_squared_error": 31, "valid_neg_root_mean_squared_error": 31, "2505": 31, "1215": 31, "9371": 31, "9685": 31, "0010": 31, "9954": 31, "9601": 31, "1443": 31, "2920": 31, "5329": 31, "9311": 31, "3129": 31, "0412": 31, "2603": 31, "4996": 31, "9517": 31, "root": [31, 144], "squar": [31, 101, 124], "rmse": 31, "0x7fcb97431840": 31, "versu": 31, "trend": 31, "y_estim": 31, "ravel": 31, "y_gt": 31, "to_numpi": [31, 130, 131, 132], "polyfit": 31, "poly1d": 31, "kingma": 31, "diederik": 31, "jimmi": 31, "ba": 31, "stochast": 31, "1412": 31, "6980": 31, "2014": [31, 70], "reddi": 31, "sashank": 31, "satyen": 31, "kale": 31, "sanjiv": 31, "kumar": 31, "beyond": [31, 46, 63, 134], "1904": 31, "09237": 31, "plot_regress": [31, 33, 145], "goal": [32, 91, 92, 93], "percept": 32, "adjustmenty": 32, "third": 32, "0x7fcad9291480": 32, "real": 32, "world": 32, "updat": [32, 68, 69, 71, 72, 79, 82, 118, 122, 124, 143, 146], "tqdm": 32, "train_one_epoch": 32, "loss_fn": 32, "print_batch_stat": 32, "progress_bar": 32, "disabl": [32, 68, 112, 124], "batch_idx": 32, "argmax": 32, "sum": [32, 146], "6f": 32, "accumul": 32, "doesn": [32, 68, 69, 124], "test_model": 32, "n_batch": [32, 129, 133], "test_loss": 32, "batch_loss": 32, "nnloss": 32, "seamlessli": 32, "train_load": 32, "test_load": 32, "test_accuraci": 32, "590727": 32, "74it": 32, "602779": 32, "14it": 32, "717662": 32, "12it": 32, "489191": 32, "29it": 32, "812099": 32, "06it": 32, "58it": 32, "819803": 32, "713765": 32, "07it": 32, "059528": 32, "284172": 32, "03it": 32, "808160": 32, "55it": 32, "337086": 32, "642491": 32, "217304": 32, "22it": 32, "259046": 32, "43it": 32, "252112": 32, "51it": 32, "289975": 32, "948479": 32, "28it": 32, "87it": 32, "608116": 32, "350593": 32, "33it": 32, "812453": 32, "045583": 32, "69it": 32, "459187": 32, "15it": 32, "055186": 32, "193383": 32, "nice": 32, "interfac": [32, 35, 91, 92, 95, 96], "previou": [32, 146], "torchmetr": 32, "litmodul": 32, "lightningmodul": 32, "training_step": 32, "y_hat": 32, "test_step": 32, "multiclass": 32, "num_class": 32, "log_dict": 32, "configure_optim": 32, "trainer": 32, "lit_model": 32, "tpu": 32, "ipu": 32, "hpu": 32, "connector": 32, "logger_connector": 32, "tensorboardx": 32, "conflict": [32, 68, 124], "ecosystem": 32, "logger": 32, "csvlogger": 32, "unless": [32, 124], "tensorboard": 32, "pip": [32, 142, 143, 144, 146], "instal": [32, 68, 112, 115, 124, 146], "extra": [32, 146], "lightning_log": 32, "189": 32, "data_connector": 32, "441": 32, "train_dataload": 32, "fit_loop": 32, "298": 32, "interv": [32, 73, 118, 146], "log_every_n_step": 32, "77it": 32, "76it": 32, "v_num": 32, "13it": 32, "26it": 32, "64it": 32, "48it": 32, "53it": 32, "56it": 32, "96it": 32, "95it": 32, "checkpoint_connector": 32, "145": 32, "ckpt_path": 32, "silenc": 32, "restor": [32, 68], "state": [32, 125, 126, 127, 128], "version_0": 32, "ckpt": 32, "test_dataload": 32, "27it": 32, "57it": 32, "61it": 32, "98it": 32, "91it": 32, "28125": 32, "1977527141571045": 32, "plot_train_in_pure_pytorch_and_pytorch_lightn": [32, 33, 145], "118": [33, 145], "scientif": 35, "softwar": [35, 140], "canon": 35, "hbm23730": 35, "robin": [35, 146], "tibor": [35, 146], "jost": 35, "tobia": 35, "dominiqu": 35, "josef": 35, "martin": [35, 146], "katharina": 35, "michael": 35, "frank": 35, "wolfram": 35, "tonio": 35, "issn": 35, "0193": 35, "url": 35, "keyword": [35, 36, 74, 110, 112, 113, 114, 115, 116, 122], "electroencephalographi": 35, "interpret": [35, 40, 57, 112, 113, 124], "built": [35, 140], "zenodo": 35, "ask": [35, 70], "3389": 35, "fnin": 35, "2013": 35, "00267": 35, "luessi": 35, "larson": 35, "eric": 35, "deni": [35, 146], "strohmeier": 35, "brodbeck": 35, "christian": 35, "goj": 35, "roman": 35, "ja": 35, "mainak": 35, "brook": 35, "teon": 35, "parkkonen": 35, "lauri": 35, "h\u00e4m\u00e4l\u00e4inen": 35, "matti": 35, "volum": 35, "267": 35, "frontiersin": 35, "1662": 35, "453x": 35, "appropri": [35, 143], "kwarg": [36, 68, 94, 114, 124, 130, 131, 132], "max_freq": 37, "band": [37, 55, 112, 122, 146], "desir": [37, 47, 55, 64, 70, 110, 116], "suggest": [37, 40, 44, 47, 48, 49, 50, 52, 55, 57, 61, 64, 82, 118], "distanc": [37, 55, 70], "admiss": 37, "1hz": 37, "nyquist": 37, "cheng": [37, 44, 52, 55, 61, 66], "goh": [37, 44, 52, 55, 61, 66], "dogrusoz": [37, 44, 52, 55, 61, 66], "tuzel": [37, 44, 52, 55, 61, 66], "azemi": [37, 44, 52, 55, 61, 66], "awar": [37, 44, 52, 55, 61, 66], "biosign": [37, 44, 52, 55, 61, 66, 86], "04871": [37, 44, 52, 55, 61, 66], "mohsenvand": [37, 44, 52, 55, 61, 66], "izadi": [37, 44, 52, 55, 61, 66], "mae": [37, 44, 52, 55, 61, 66], "electroencephalogram": [37, 44, 52, 55, 61, 66], "health": [37, 44, 52, 55, 61, 66, 86], "238": [37, 44, 52, 55, 61, 66], "253": [37, 44, 52, 55, 61, 66], "pmlr": [37, 44, 52, 55, 61, 66], "get_augmentation_param": [37, 38, 39, 40, 42, 43, 44, 46, 47, 52, 54, 146], "freqs_to_notch": [37, 55], "greater": [37, 55], "static": [37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 51, 52, 53, 69, 100], "cmsaugment": [38, 39, 56, 58], "polici": [38, 39, 56, 58], "proba_drop": 38, "eras": 38, "saeed": [38, 39, 56, 58], "grangier": [38, 39, 56, 58], "pietquin": [38, 39, 56, 58], "zeghidour": [38, 39, 56, 58], "heterogen": [38, 39, 56, 58], "differenti": [38, 39, 56, 58], "reorder": [38, 39, 56, 58], "2010": [38, 39, 56, 58, 73], "13694": [38, 39, 56, 58], "p_shuffl": [39, 58], "permut": [39, 40, 46, 57, 58, 63], "carri": [39, 58, 70], "ordered_ch_nam": [40, 48, 49, 50], "invert": 40, "side": [40, 112], "nomenclatur": 40, "deiss": [40, 57], "biswal": [40, 57], "jin": [40, 57], "sun": [40, 57, 86], "westov": [40, 57, 86], "hamlet": [40, 57], "co": [40, 57], "techniqu": [40, 57, 112, 116], "1803": [40, 57, 105], "09702": [40, 57], "accord": [40, 57, 116], "channel_indep": [42, 60], "ft": [42, 60, 85], "surrog": [42, 60], "perturb": [42, 60], "uniformli": [42, 46, 47, 48, 49, 50, 60, 125], "schwabed": [42, 60], "snyder": [42, 60], "cakmak": [42, 60], "nemati": [42, 60], "clifford": [42, 60], "address": [42, 60], "imbal": [42, 60, 76], "noisi": [42, 60], "fourier": [42, 60], "1806": [42, 60], "08675": [42, 60], "magnitud": [42, 52], "cliffordlab": [42, 60], "tf": [42, 60], "draw": [42, 60], "maximum": [43, 47, 48, 49, 50, 85, 117], "absolut": [43, 100], "delta_freq": [43, 59], "amplitud": [43, 59, 117, 118, 146], "white": [44, 61], "deviat": [44, 61], "wang": [44, 61], "zhong": [44, 61], "jiang": [44, 61, 100], "liu": [44, 61, 89], "emot": [44, 61], "recognit": [44, 61], "confer": [44, 46, 47, 48, 49, 50, 61, 63, 64, 86, 100], "multimedia": [44, 61], "beta_per_sampl": 46, "drawn": 46, "beta": 46, "hongyi": [46, 63, 134], "zhang": [46, 63, 93, 134], "moustapha": [46, 63, 134], "ciss": [46, 63, 134], "yann": [46, 63, 134], "dauphin": [46, 63, 134], "david": [46, 63, 134], "lopez": [46, 63, 134], "paz": [46, 63, 134], "empir": [46, 63, 105, 134], "iclr": [46, 63, 100], "onlin": [46, 63, 87, 91, 92, 97, 99, 101, 134, 139], "1710": [46, 63, 134], "09412": [46, 63, 134], "facebookresearch": [46, 63, 134], "cifar10": [46, 63, 134], "interpol": [46, 47, 48, 49, 50, 63, 64], "lam": [46, 63], "idx_perm": [46, 63], "sensors_positions_matrix": [47, 64], "max_degre": [47, 48, 49, 50], "spherical_splin": [47, 48, 49, 50, 64], "angl": [47, 48, 49, 50, 64, 139], "3d": [47, 64, 146], "cartesian": [47, 64], "coordin": [47, 64], "ten_twenty_montag": [47, 64], "make_standard_montag": [47, 64], "standard_1020": [47, 64], "get_posit": [47, 64], "ch_po": [47, 64], "spheric": [47, 48, 49, 50, 64], "spline": [47, 48, 49, 50, 64], "scipi": [47, 48, 49, 50, 64, 68, 112, 115, 124], "rbf": [47, 48, 49, 50, 64], "quadrat": [47, 48, 49, 50, 64], "krell": [47, 48, 49, 50, 64], "kim": [47, 48, 49, 50, 64, 93], "electroencephalograph": [47, 48, 49, 50, 64], "39th": [47, 48, 49, 50, 64], "annual": [47, 48, 49, 50, 64], "medicin": [47, 48, 49, 50, 64], "biologi": [47, 48, 49, 50, 64], "societi": [47, 48, 49, 50, 64], "embc": [47, 48, 49, 50, 64], "471": [47, 48, 49, 50, 64], "474": [47, 48, 49, 50, 64], "element": [47, 52, 64], "montag": [48, 49, 50, 70], "flip": [51, 53, 65, 67], "sign": [51, 65], "smoothli": [52, 66], "Will": 52, "mask_start_per_sampl": [52, 66], "resp": 54, "uniform": 54, "arg": [68, 94, 124], "iterator_train__drop_last": [68, 124, 146], "uninstanti": [68, 124], "get_loss": 68, "classes_": 68, "attributeerror": 68, "sgd": [68, 124], "outcom": [68, 124], "keyboard": [68, 124], "interrupt": [68, 124], "mini": [68, 124], "iterator_train__batch_s": [68, 124], "iterator_test__batch_s": [68, 124], "iterator_valid": [68, 124], "incom": [68, 124], "__len__": [68, 124], "deal": [68, 124], "box": [68, 124], "dataset__": [68, 124], "initialz": [68, 124], "dataset_train": [68, 124, 130, 131, 132], "dataset_valid": [68, 124, 130, 131, 132], "get_default_callback": [68, 124], "resolv": [68, 124], "suffix": [68, 124], "epochscoring_1": [68, 124], "print_log": [68, 124], "callbacks__print_log__keys_ignor": [68, 124], "predict_nonlinear": [68, 124], "pickleabl": [68, 124], "accept": [68, 82, 107, 118, 124], "predict_proba": [68, 124, 146], "whatev": [68, 124], "anywher": [68, 124], "notabl": [68, 124], "unaffect": [68, 124], "warm_start": [68, 124], "cold": [68, 124], "warm": [68, 124], "summari": [68, 94, 106, 124], "regardless": [68, 124], "acceler": [68, 124], "sent": [68, 124], "unmodifi": [68, 124], "compil": [68, 124], "volta": [68, 124], "amper": [68, 124], "dunder": [68, 124], "notat": [68, 124], "compile__dynam": [68, 124], "dynam": [68, 124], "use_cach": [68, 124, 130, 131], "overrid": [68, 69, 124], "cach": [68, 124, 146], "batchscor": [68, 124], "certain": [68, 124], "situat": [68, 124], "tight": [68, 124], "cumbersom": [68, 124], "global": [68, 98, 124, 132], "honor": [68, 124], "prefer": [68, 124], "model_evalu": [68, 124], "prefixes_": [68, 124], "special": [68, 124], "neuralnet": [68, 124], "optimizer__momentum": [68, 124], "popul": [68, 124, 146], "cuda_dependent_attributes_": [68, 124], "whose": [68, 82, 118, 124], "unpickl": [68, 124], "expand": [68, 108, 124], "initialized_": [68, 124], "criterion_": [68, 124], "callbacks_": [68, 124], "_modul": [68, 124], "_criteria": [68, 124], "_optim": [68, 124], "get_iter": [68, 124], "drop_index": [68, 124], "iterator_test": [68, 124], "spars": [68, 124], "csr": [68, 124], "y_proba": [68, 124], "trial_predict": [68, 124, 135], "n_trial": [68, 80, 124, 135], "n_predict": [68, 124, 129, 133, 135], "trial_label": [68, 124, 135], "n_target": [68, 124, 135], "bbci": 69, "de": 69, "desc_4": 69, "pdf": 69, "force_upd": 69, "mne_datasets_": 69, "_path": 69, "forc": 69, "iia": 70, "r382d436f3223": 70, "cue": [70, 73], "imag": [70, 91, 92, 100], "inat": 70, "movement": [70, 73], "compris": 70, "288": [70, 146], "sit": 70, "comfort": 70, "armchair": 70, "front": 70, "screen": 70, "fixat": 70, "acoust": 70, "tone": 70, "arrow": [70, 73], "down": [70, 102, 108, 115, 137], "foot": 70, "prompt": [70, 140], "disappear": 70, "twenti": 70, "agcl": 70, "inter": [70, 73], "monopolarli": 70, "mastoid": [70, 116], "amplifi": 70, "\u03bcv": 70, "notch": 70, "suppress": [70, 112], "raw_preproc_kwarg": 71, "window_preproc_kwarg": 71, "old": [71, 123, 146], "datapoint": 71, "gamma": 73, "subj": 73, "500hz": 73, "r5e478952091a": 73, "cover": [73, 139], "cortex": 73, "healthi": [73, 75, 76], "963": 73, "divid": [73, 80, 81, 82, 117], "rest": [73, 116], "approx": 73, "880": 73, "except": [73, 76], "acquir": 73, "lab": 73, "invas": 73, "2008": [73, 88], "darva": 73, "direct": [73, 140], "grai": 73, "back": 73, "had": [73, 91, 92, 94], "clench": 73, "toe": 73, "downward": 73, "tap": 73, "leftward": 73, "rightward": 73, "relax": 73, "upward": 73, "littl": 73, "proxim": 73, "muscular": 73, "volv": 73, "pace": 73, "maintain": 73, "pseudo": 73, "ideal": 73, "260": 73, "stimuli": 73, "bci2000": 73, "schalk": 73, "2004": 73, "approv": 73, "ethic": 73, "committe": 73, "freiburg": 73, "dataset_kwarg": 74, "dataset_load_kwarg": 74, "cache_config": 74, "process_pipelin": 74, "scalp": 75, "417": [75, 146], "particip": 75, "span": 75, "almost": 75, "625": 75, "khan2022": 75, "parent": [75, 77, 78], "ascend": [75, 77, 78], "preserv": [75, 77, 78], "khan": 75, "ul": 75, "ain": 75, "kamboh": 75, "butt": 75, "shafait": 75, "alamgir": 75, "stricker": 75, "755817": 75, "load_eeg_onli": 76, "content": 76, "edfx": 76, "overnight": 76, "auto_tutori": 76, "plot_sleep": 76, "eog": [76, 108], "emg": 76, "temperatur": 76, "respir": 76, "3h": 76, "physician": [77, 78], "c_tuab": 78, "i_window_in_tri": [79, 126, 136], "i_start_in_tri": [79, 126], "i_stop_in_tri": [79, 126, 136], "applic": [79, 112], "drop_bad_window": [82, 118], "accepted_bads_ratio": [82, 118], "onset": [82, 118], "fall": [82, 118], "outsid": [82, 118], "proport": [82, 91, 92, 118], "withinconsist": 82, "exceed": [82, 118], "pathlib": 83, "concat_dataset": [83, 84], "conv_block_n_filt": 85, "conv_block_kernel_length_1": 85, "conv_block_kernel_length_2": 85, "conv_block_pool_size_1": 85, "conv_block_pool_size_2": 85, "conv_block_depth_mult": 85, "conv_block_dropout": 85, "att_head_dim": 85, "att_num_head": [85, 86, 100], "att_dropout": 85, "tcn_depth": 85, "tcn_kernel_s": 85, "tcn_n_filter": 85, "tcn_dropout": 85, "tcn_activ": 85, "max_norm_const": 85, "input_size_": [85, 102, 103, 104, 108], "offici": [85, 143], "tensorflow": 85, "block": [85, 91, 92, 93, 98, 100, 105, 108], "denot": 85, "kc": 85, "p2": 85, "depthwis": [85, 91, 92], "pc": 85, "head": [85, 86, 89, 100, 104, 126], "dh": 85, "1_": 85, "pa": 85, "residu": [85, 97, 100], "kt": 85, "slid": 85, "feed": [85, 104], "logit": 85, "contrari": 85, "constraint": 85, "impos": 85, "altaheri": 85, "muhammad": 85, "alsulaiman": 85, "physic": 85, "industri": 85, "informat": 85, "tii": 85, "3197419": 85, "overridden": [85, 89, 93], "subclass": [85, 89, 93], "recip": [85, 89, 93], "care": [85, 89, 93], "regist": [85, 89, 93], "hook": [85, 89, 93, 146], "latter": [85, 89, 93], "silent": [85, 89, 93], "n_layer": [86, 100], "hop_length": 86, "return_featur": [86, 89, 98], "wild": 86, "yang2023": 86, "languag": 86, "biotencod": 86, "classificationhead": [86, 89], "ecg": 86, "yang": 86, "code2023": 86, "400k": 86, "heart": 86, "linearattentiontransform": 86, "patchfrequencyembed": 86, "2023": [86, 98], "novemb": 86, "thirti": 86, "seventh": 86, "neurip": [86, 91, 92], "ycq091044": 86, "2024": [86, 100], "first_conv_nonlin": 87, "first_pool_nonlin": 87, "later_conv_nonlin": 87, "later_pool_nonlin": 87, "supratak": 88, "bidirect": 88, "supratak2017": 88, "dong": [88, 100], "wu": 88, "guo": 88, "1998": 88, "att_depth": 89, "att_head": 89, "att_drop_prob": 89, "final_fc_length": 89, "conform": 89, "methodolog": [89, 98], "song2022": 89, "conformercod": 89, "tradit": 89, "n_timestep": [89, 98], "compos": 89, "patchembed": 89, "transformerencod": 89, "recombin": 89, "song": [89, 146], "zheng": 89, "q": 89, "gao": 89, "710": 89, "719": 89, "ieeexplor": 89, "9991178": 89, "eeyhsong": 89, "get_fc_siz": 89, "in_channel": [90, 91, 92, 93, 100], "itnet": [90, 146], "incept": [90, 91, 92, 93, 146], "salami": 90, "salami2022": 90, "abbassalami": 90, "guarante": [90, 91, 92, 93, 95, 96], "reimplement": [90, 91, 92, 93, 95, 96], "andreu": 90, "perez": 90, "gillmeist": 90, "3161489": 90, "scales_samples_": [91, 92], "125": [91, 92, 103], "n_filter": [91, 92, 93, 105], "depth_multipli": [91, 92], "pooling_s": [91, 92], "erp": [91, 92], "AND": 91, "WILL": 91, "BE": 91, "IN": 91, "THE": 91, "OF": 91, "santamaria2020": [91, 92], "inceptionnet": [91, 92, 93], "largest": [91, 92], "associ": [91, 92], "winner": [91, 92], "beetl": [91, 92], "r15fdf33b022f": 91, "santamaria": [91, 92], "vazquez": [91, 92], "martinez": [91, 92], "cagig": [91, 92], "vaquerizo": [91, 92], "villar": [91, 92], "hornero": [91, 92], "assist": [91, 92], "3048106": [91, 92], "grifcc": [91, 92], "r37c4761d4e92": 92, "n_conv": [93, 98], "kernel_unit_": 93, "input_window_": 93, "vision": 93, "wide": 93, "branch": 93, "1d": [93, 98], "bose": 93, "eskandarian": 93, "accur": 93, "robust": 93, "046014": 93, "mixin": 94, "output_shap": [94, 109], "get_torchinfo_statist": 94, "col_nam": 94, "input_s": 94, "num_param": 94, "row_set": 94, "modelstatist": 94, "load_state_dict": 94, "state_dict": 94, "intermedi": 94, "bug": 94, "second_kernel_s": 95, "third_kernel_s": [95, 96], "eegnet": [95, 96], "lawhern": [95, 96], "solon": [95, 96], "waytowich": [95, 96], "gordon": [95, 96], "hung": [95, 96], "lanc": [95, 96], "1611": [95, 96], "08024": [95, 96], "f2": 96, "kernel_length": 96, "v4": 96, "eegnet4": 96, "final_pool_length": [97, 146], "n_first_filt": 97, "n_layers_per_block": 97, "first_filter_length": 97, "batch_norm_epsilon": 97, "conv_weight_init_fn": 97, "feature_map": 98, "resampling_freq": 98, "yassine2023": 98, "straightforward": 98, "latenc": 98, "simpleconv": 98, "enter": [98, 144], "r5661533ddc63": 98, "yassine2023cod": 98, "ablat": 98, "yassin": [98, 146], "el": [98, 146], "ouahidi": [98, 146], "gripon": 98, "pasdeloup": 98, "bouallegu": [98, 146], "farrugia": 98, "lioi": 98, "strong": [98, 100], "2309": 98, "07159": 98, "repositori": [98, 142], "elouaya": 98, "hybrid": 99, "patch_siz": 100, "out_channel": 100, "mlp_ratio": 100, "qkv_bia": 100, "qk_norm": 100, "qk_scale": 100, "drop_rat": 100, "attn_drop_r": 100, "drop_path_r": 100, "norm_lay": 100, "init_valu": 100, "use_abs_pos_emb": 100, "use_mean_pool": 100, "init_scal": 100, "neural_token": 100, "attn_head_dim": 100, "tremend": 100, "jiang2024": 100, "code2024": 100, "inspir": [100, 125], "beitv2": 100, "tokenizor": 100, "amplitur": 100, "vqsnp": 100, "modif": 100, "token": 100, "n_patch": 100, "segmentpatch": 100, "temporalconv": 100, "cl": 100, "windowsattentionblock": 100, "patchemb": 100, "expans": 100, "mlp": 100, "queri": 100, "head_dim": 100, "num_head": 100, "droppath": 100, "gamma_1": 100, "gamma_2": 100, "wei": 100, "bang": 100, "li": 100, "ming": 100, "zhao": 100, "bao": 100, "liang": 100, "lu": 100, "twelfth": 100, "935963004": 100, "zhiliang": 100, "hangbo": 100, "qixiang": 100, "ye": 100, "furu": 100, "beit": 100, "quantiz": 100, "2208": 100, "06366": 100, "fix_init_weight_and_init_embed": 100, "truncat": 100, "input_chan": 100, "return_patch_token": 100, "return_all_token": 100, "forward_featur": 100, "get_classifi": 100, "get_num_lay": 100, "reset_classifi": 100, "reset": 100, "safe_log": 101, "n_conv_chan": 102, "n_group": 102, "max_pool_s": 102, "blanco": 102, "blanco2020": 102, "seven": 102, "group": 102, "fernandez": 102, "rivero": 102, "pazo": 102, "soft": 102, "4067": 102, "4079": 102, "1007": 102, "s00500": 102, "04174": 102, "time_conv_size_": [103, 108], "max_pool_size_": 103, "pad_size_": 103, "half": [103, 112], "n_tce": 104, "d_model": 104, "d_ff": 104, "n_attn_head": 104, "after_reduced_cnn_s": 104, "multi": 104, "resolut": 104, "mrcnn": 104, "recalibr": 104, "tce": 104, "mechan": [104, 146], "captur": 104, "among": 104, "100hz": 104, "125hz": 104, "shh": 104, "unintend": 104, "clone": [104, 146], "positionwisefeedforward": 104, "emadeldeen24": 104, "attnsleep": 104, "sleepdata": 104, "n_block": 105, "n_in_chan": 105, "bai": 105, "bai2018": 105, "locuslab": 105, "kolter": 105, "koltun": 105, "recurr": 105, "01271": 105, "s_growth": 106, "t_filter": 106, "temp_lay": 106, "spat_lay": 106, "temp_span": 106, "thinker": [106, 146], "invari": [106, 146], "densenet": 106, "kosta": 106, "growth": 106, "densefilt": 106, "percentag": 106, "temp_len": 106, "spoclab": 106, "ca": 106, "thinkerinvari": 106, "rudzicz": 106, "across": [106, 116, 125, 129], "peopl": 106, "eng": 106, "056008": 106, "1741": 106, "2552": 106, "abb7a7": 106, "stager": 107, "middl": 107, "seq_len": 107, "n_time_filt": 108, "complexity_factor": 108, "0703125": 108, "ensure_odd_conv_s": 108, "autoencod": 108, "shrink": 108, "fewer": [108, 112], "2x2": 108, "halv": 108, "ne": 108, "subsequ": 110, "time_as_index": 110, "first_samp": 110, "last_samp": 110, "exce": 110, "exclud": [110, 112, 113, 116], "on_miss": [111, 117, 118], "emit": 111, "evok": [111, 112, 113, 116], "reorder_channel": 111, "drop_channel": 111, "filter_length": 112, "l_trans_bandwidth": 112, "h_trans_bandwidth": 112, "iir_param": 112, "fir_window": 112, "fir_design": 112, "skip_by_annot": 112, "bad_acq_skip": 112, "reflect_limit": [112, 115], "iir": 112, "meg0111": [112, 113], "meg2623": [112, 113], "reciproc": 112, "shortest": 112, "firwin2": 112, "5500m": 112, "doubl": 112, "cupi": [112, 115], "filtfilt": 112, "4th": 112, "butterworth": 112, "construct_iir_filt": 112, "symmetr": 112, "construct": [112, 116], "delai": [112, 146], "twice": 112, "minimum": 112, "weaker": 112, "lfilter": 112, "hann": 112, "blackman": 112, "concatenate_raw": 112, "acquisit": 112, "reflect": [112, 115], "mirror": [112, 115], "create_filt": 112, "savgol_filt": 112, "notch_filt": 112, "filter_data": 112, "apply_funct": 114, "raw_or_epoch": 114, "npad": 115, "boxcar": 115, "joint": 116, "virtual": 116, "infin": 116, "footcit": 116, "yao2001": 116, "apply_proj": 116, "seeg": 116, "projector": 116, "set_bipolar_refer": 116, "bipolar": 116, "m1": 116, "m2": 116, "concatdataset": 117, "ie": 117, "winddow_size_sampl": 117, "exactli": 118, "inconsist": 118, "demeanin": 120, "exponent": [120, 121], "m_t": [120, 121], "mathrm": [120, 121], "factornew": [120, 121], "cdot": [120, 121], "x_t": [120, 121], "m_": [120, 121], "deman": 120, "_t": [120, 121], "demean": 120, "Then": 121, "v_t": 121, "v_": 121, "sqrt": 121, "stabil": 121, "frequency_band": 122, "drop_original_sign": 122, "order_by_frequency_band": 122, "mne_filter_kwarg": 122, "unfilt": 122, "cz_4": 122, "o1_4": 122, "cz_8": 122, "o1_8": 122, "fileexistserror": 123, "n_sequenc": [125, 128], "perslev2021": 125, "recordingsampl": [125, 127, 128], "randomst": [125, 126, 127, 128], "sample_class": 125, "rec_ind": [125, 126], "session_t": 126, "run_0": 126, "multiindex": 126, "sample_record": 126, "sample_window": 126, "tau_max": 127, "banville2020": 127, "file_id": 128, "ensembl": [128, 146], "loss_funct": [129, 133], "target_extractor": [130, 131, 132], "on_epoch_end": [130, 131, 132], "on_batch_end": 131, "recomput": 132, "slightli": 132, "scorer": 132, "signatur": 132, "scalar": 132, "wors": 132, "tri": 132, "timeseri": 133, "window_len": 133, "mixup": [134, 146], "duplic": [136, 146], "2darrai": 136, "preds_per_tri": 136, "lack": 137, "pythonhashse": 137, "forum": 137, "ai": 137, "solv": [137, 146], "31628": 137, "use_deterministic_algorithm": 137, "linearsegmentedcolormap": 139, "textcolor": 139, "vmin": 139, "vmax": 139, "fontweight": 139, "rotate_row_label": 139, "rotate_col_label": 139, "with_f1_scor": 139, "norm_ax": 139, "rotate_precis": 139, "class_names_fonts": 139, "font": 139, "bold": 139, "heavi": 139, "ultrabold": 139, "ultralight": 139, "hard": 140, "happen": [140, 146], "mistak": 140, "corrupt": 140, "irregular": 140, "chat": 140, "bear": 140, "tracker": 140, "sure": 140, "ve": 140, "shell": 140, "__version__": [140, 144], "latest": [140, 143, 144], "replic": 140, "link": [140, 146], "anonym": 140, "portion": 140, "persist": 140, "smallest": 140, "past": 140, "backtick": 140, "contributor": [140, 144], "snippet": 140, "toolbox": 141, "electrophysiolog": 141, "fetcher": 141, "neuroscientist": 141, "who": 141, "neurophysiolog": 141, "pypi": 142, "beginn": 142, "familiar": 142, "instruct": 142, "contribut": [142, 144], "braincod": 143, "command": [143, 144], "nvidia": 143, "driver": 143, "cuda_path": 143, "troubleshoot": 143, "thing": 144, "git": 144, "cd": 144, "repo": 144, "zipbal": 144, "master": 144, "egg": 144, "edit": 144, "verifi": 144, "guidelin": 144, "442": 145, "whats_new": 146, "incompat": 146, "nmt": 146, "443": 146, "mohammad": 146, "javad": 146, "gh": 146, "570": 146, "573": 146, "578": 146, "codebas": 146, "579": 146, "581": 146, "582": 146, "561": 146, "checker": 146, "569": 146, "429": 146, "431": 146, "oskar": 146, "st\u00f8rmer": 146, "454": 146, "yonghao": 146, "einop": 146, "466": 146, "467": 146, "marco": 146, "zamboni": 146, "468": 146, "refactor": 146, "470": 146, "conda": 146, "yml": 146, "ci": 146, "479": 146, "action": 146, "472": 146, "489": 146, "485": 146, "487": 146, "473": 146, "488": 146, "495": 146, "sylvain": 146, "chevalli": 146, "494": 146, "bruna": 146, "lope": 146, "491": 146, "enforc": 146, "497": 146, "env": 146, "friendli": 146, "\u015bliwowski": 146, "shallowfbcsp": 146, "503": 146, "sampler": 146, "504": 146, "th\u00e9o": 146, "dropchannel": 146, "seteegrefer": 146, "514": 146, "517": 146, "523": 146, "remi": 146, "delboui": 146, "524": 146, "535": 146, "529": 146, "528": 146, "539": 146, "541": 146, "hint": 146, "551": 146, "valentin": 146, "ioven": 146, "pyproject": 146, "toml": 146, "553": 146, "commit": 146, "556": 146, "461": 146, "e231": 146, "whitespac": 146, "untrac": 146, "flake8": 146, "460": 146, "transposit": 146, "_frequency_shift": 146, "446": 146, "matthieu": 146, "terri": 146, "451": 146, "465": 146, "wrong": 146, "538": 146, "546": 146, "397": 146, "flag": 146, "513": 146, "390": 146, "ghaith": 146, "371": 146, "389": 146, "exemplifi": 146, "349": 146, "unifi": 146, "378": 146, "wimpff": 146, "391": 146, "406": 146, "recoding_id": 146, "402": 146, "ft_surrog": 146, "409": 146, "get_param": 146, "388": 146, "alex": 146, "413": 146, "zscore": 146, "mnepreproc": 146, "numpypreproc": 146, "415": 146, "411": 146, "263": 146, "ann": 146, "kathrin": 146, "kiessner": 146, "henrik": 146, "bonsmann": 146, "vytauta": 146, "jankauska": 146, "274": 146, "254": 146, "thoma": 146, "287": 146, "aggregate_proba": 146, "294": 146, "312": 146, "balancedsequencesampl": 146, "295": 146, "277": 146, "318": 146, "261": 146, "cloneabl": 146, "347": 146, "353": 146, "333": 146, "365": 146, "367": 146, "mismatch": 146, "327": 146, "propag": 146, "269": 146, "favour": 146, "292": 146, "199": 146, "198": 146, "178": 146, "147": 146, "realiz": 146, "filterbank": 146, "158": 146, "159": 146, "timecrop": 146, "164": 146, "185": 146, "282": 146, "341": 146, "accident": 146, "167": 146, "compute_amplitude_gradi": 146, "4d": 146, "166": 146, "incorrect": 146, "146": 146, "169": 146, "window_s": 146, "148": 146, "171": 146, "155": 146, "223": 146, "favor": 146}, "objects": {"": [[0, 0, 0, "-", "braindecode"]], "braindecode.augmentation": [[36, 1, 1, "", "AugmentedDataLoader"], [37, 1, 1, "", "BandstopFilter"], [38, 1, 1, "", "ChannelsDropout"], [39, 1, 1, "", "ChannelsShuffle"], [40, 1, 1, "", "ChannelsSymmetry"], [41, 1, 1, "", "Compose"], [42, 1, 1, "", "FTSurrogate"], [43, 1, 1, "", "FrequencyShift"], [44, 1, 1, "", "GaussianNoise"], [45, 1, 1, "", "IdentityTransform"], [46, 1, 1, "", "Mixup"], [47, 1, 1, "", "SensorsRotation"], [48, 1, 1, "", "SensorsXRotation"], [49, 1, 1, "", "SensorsYRotation"], [50, 1, 1, "", "SensorsZRotation"], [51, 1, 1, "", "SignFlip"], [52, 1, 1, "", "SmoothTimeMask"], [53, 1, 1, "", "TimeReverse"], [54, 1, 1, "", "Transform"]], "braindecode.augmentation.BandstopFilter": [[37, 2, 1, "", "get_augmentation_params"], [37, 2, 1, "", "operation"]], "braindecode.augmentation.ChannelsDropout": [[38, 2, 1, "", "get_augmentation_params"], [38, 2, 1, "", "operation"]], "braindecode.augmentation.ChannelsShuffle": [[39, 2, 1, "", "get_augmentation_params"], [39, 2, 1, "", "operation"]], "braindecode.augmentation.ChannelsSymmetry": [[40, 2, 1, "", "get_augmentation_params"], [40, 2, 1, "", "operation"]], "braindecode.augmentation.Compose": [[41, 2, 1, "", "forward"]], "braindecode.augmentation.FTSurrogate": [[42, 2, 1, "", "get_augmentation_params"], [42, 2, 1, "", "operation"]], "braindecode.augmentation.FrequencyShift": [[43, 2, 1, "", "get_augmentation_params"], [43, 2, 1, "", "operation"]], "braindecode.augmentation.GaussianNoise": [[44, 2, 1, "", "get_augmentation_params"], [44, 2, 1, "", "operation"]], "braindecode.augmentation.IdentityTransform": [[45, 2, 1, "", "operation"]], "braindecode.augmentation.Mixup": [[46, 2, 1, "", "get_augmentation_params"], [46, 2, 1, "", "operation"]], "braindecode.augmentation.SensorsRotation": [[47, 2, 1, "", "get_augmentation_params"], [47, 2, 1, "", "operation"]], "braindecode.augmentation.SignFlip": [[51, 2, 1, "", "operation"]], "braindecode.augmentation.SmoothTimeMask": [[52, 2, 1, "", "get_augmentation_params"], [52, 2, 1, "", "operation"]], "braindecode.augmentation.TimeReverse": [[53, 2, 1, "", "operation"]], "braindecode.augmentation.Transform": [[54, 2, 1, "", "forward"], [54, 2, 1, "", "get_augmentation_params"]], "braindecode.augmentation.functional": [[55, 3, 1, "", "bandstop_filter"], [56, 3, 1, "", "channels_dropout"], [57, 3, 1, "", "channels_permute"], [58, 3, 1, "", "channels_shuffle"], [59, 3, 1, "", "frequency_shift"], [60, 3, 1, "", "ft_surrogate"], [61, 3, 1, "", "gaussian_noise"], [62, 3, 1, "", "identity"], [63, 3, 1, "", "mixup"], [64, 3, 1, "", "sensors_rotation"], [65, 3, 1, "", "sign_flip"], [66, 3, 1, "", "smooth_time_mask"], [67, 3, 1, "", "time_reverse"]], "braindecode.classifier": [[68, 1, 1, "", "EEGClassifier"]], "braindecode.classifier.EEGClassifier": [[68, 4, 1, "", "_criteria"], [68, 4, 1, "", "_modules"], [68, 4, 1, "", "_optimizers"], [68, 4, 1, "", "callbacks_"], [68, 4, 1, "", "classes_"], [68, 4, 1, "", "criterion_"], [68, 4, 1, "", "cuda_dependent_attributes_"], [68, 2, 1, "", "get_iterator"], [68, 2, 1, "", "get_loss"], [68, 4, 1, "", "initialized_"], [68, 4, 1, "", "module_"], [68, 2, 1, "", "predict"], [68, 2, 1, "", "predict_proba"], [68, 2, 1, "", "predict_trials"], [68, 4, 1, "", "prefixes_"]], "braindecode.datasets": [[69, 1, 1, "", "BCICompetitionIVDataset4"], [70, 1, 1, "", "BNCI2014001"], [71, 1, 1, "", "BaseConcatDataset"], [72, 1, 1, "", "BaseDataset"], [73, 1, 1, "", "HGD"], [74, 1, 1, "", "MOABBDataset"], [75, 1, 1, "", "NMT"], [76, 1, 1, "", "SleepPhysionet"], [77, 1, 1, "", "TUH"], [78, 1, 1, "", "TUHAbnormal"], [79, 1, 1, "", "WindowsDataset"], [80, 3, 1, "", "create_from_X_y"], [81, 3, 1, "", "create_from_mne_epochs"], [82, 3, 1, "", "create_from_mne_raw"]], "braindecode.datasets.BCICompetitionIVDataset4": [[69, 2, 1, "", "download"]], "braindecode.datasets.BaseConcatDataset": [[71, 2, 1, "", "get_metadata"], [71, 2, 1, "", "save"], [71, 2, 1, "", "set_description"], [71, 2, 1, "", "split"]], "braindecode.datasets.BaseDataset": [[72, 2, 1, "", "set_description"]], "braindecode.datasets.WindowsDataset": [[79, 2, 1, "", "set_description"]], "braindecode.datautil": [[83, 3, 1, "", "load_concat_dataset"], [84, 3, 1, "", "save_concat_dataset"]], "braindecode.models": [[85, 1, 1, "", "ATCNet"], [86, 1, 1, "", "BIOT"], [87, 1, 1, "", "Deep4Net"], [88, 1, 1, "", "DeepSleepNet"], [89, 1, 1, "", "EEGConformer"], [90, 1, 1, "", "EEGITNet"], [91, 1, 1, "", "EEGInception"], [92, 1, 1, "", "EEGInceptionERP"], [93, 1, 1, "", "EEGInceptionMI"], [94, 1, 1, "", "EEGModuleMixin"], [95, 1, 1, "", "EEGNetv1"], [96, 1, 1, "", "EEGNetv4"], [97, 1, 1, "", "EEGResNet"], [98, 1, 1, "", "EEGSimpleConv"], [99, 1, 1, "", "HybridNet"], [100, 1, 1, "", "Labram"], [101, 1, 1, "", "ShallowFBCSPNet"], [102, 1, 1, "", "SleepStagerBlanco2020"], [103, 1, 1, "", "SleepStagerChambon2018"], [104, 1, 1, "", "SleepStagerEldele2021"], [105, 1, 1, "", "TCN"], [106, 1, 1, "", "TIDNet"], [107, 1, 1, "", "TimeDistributed"], [108, 1, 1, "", "USleep"], [109, 3, 1, "", "get_output_shape"]], "braindecode.models.ATCNet": [[85, 2, 1, "", "forward"]], "braindecode.models.BIOT": [[86, 2, 1, "", "forward"]], "braindecode.models.DeepSleepNet": [[88, 2, 1, "", "forward"]], "braindecode.models.EEGConformer": [[89, 2, 1, "", "forward"], [89, 2, 1, "", "get_fc_size"]], "braindecode.models.EEGInceptionMI": [[93, 2, 1, "", "forward"]], "braindecode.models.EEGModuleMixin": [[94, 2, 1, "", "get_output_shape"], [94, 2, 1, "", "get_torchinfo_statistics"], [94, 2, 1, "", "load_state_dict"], [94, 2, 1, "", "to_dense_prediction_model"]], "braindecode.models.EEGSimpleConv": [[98, 2, 1, "", "forward"]], "braindecode.models.HybridNet": [[99, 2, 1, "", "forward"]], "braindecode.models.Labram": [[100, 2, 1, "", "fix_init_weight_and_init_embedding"], [100, 2, 1, "", "forward"], [100, 2, 1, "", "forward_features"], [100, 2, 1, "", "get_classifier"], [100, 2, 1, "", "get_num_layers"], [100, 2, 1, "", "reset_classifier"]], "braindecode.models.SleepStagerBlanco2020": [[102, 2, 1, "", "forward"]], "braindecode.models.SleepStagerChambon2018": [[103, 2, 1, "", "forward"]], "braindecode.models.SleepStagerEldele2021": [[104, 2, 1, "", "forward"]], "braindecode.models.TCN": [[105, 2, 1, "", "forward"]], "braindecode.models.TIDNet": [[106, 2, 1, "", "forward"]], "braindecode.models.TimeDistributed": [[107, 2, 1, "", "forward"]], "braindecode.models.USleep": [[108, 2, 1, "", "forward"]], "braindecode.preprocessing": [[110, 1, 1, "", "Crop"], [111, 1, 1, "", "DropChannels"], [112, 1, 1, "", "Filter"], [113, 1, 1, "", "Pick"], [114, 1, 1, "", "Preprocessor"], [115, 1, 1, "", "Resample"], [116, 1, 1, "", "SetEEGReference"], [117, 3, 1, "", "create_fixed_length_windows"], [118, 3, 1, "", "create_windows_from_events"], [119, 3, 1, "", "create_windows_from_target_channels"], [120, 3, 1, "", "exponential_moving_demean"], [121, 3, 1, "", "exponential_moving_standardize"], [122, 3, 1, "", "filterbank"], [123, 3, 1, "", "preprocess"]], "braindecode.preprocessing.Preprocessor": [[114, 2, 1, "", "apply"]], "braindecode.regressor": [[124, 1, 1, "", "EEGRegressor"]], "braindecode.regressor.EEGRegressor": [[124, 4, 1, "", "_criteria"], [124, 4, 1, "", "_modules"], [124, 4, 1, "", "_optimizers"], [124, 4, 1, "", "callbacks_"], [124, 4, 1, "", "criterion_"], [124, 4, 1, "", "cuda_dependent_attributes_"], [124, 2, 1, "", "fit"], [124, 2, 1, "", "get_iterator"], [124, 4, 1, "", "initialized_"], [124, 4, 1, "", "module_"], [124, 2, 1, "", "predict_proba"], [124, 2, 1, "", "predict_trials"], [124, 4, 1, "", "prefixes_"]], "braindecode.samplers": [[125, 1, 1, "", "BalancedSequenceSampler"], [126, 1, 1, "", "RecordingSampler"], [127, 1, 1, "", "RelativePositioningSampler"], [128, 1, 1, "", "SequenceSampler"]], "braindecode.samplers.BalancedSequenceSampler": [[125, 2, 1, "", "sample_class"]], "braindecode.samplers.RecordingSampler": [[126, 4, 1, "", "info"], [126, 4, 1, "", "n_recordings"], [126, 2, 1, "", "sample_recording"], [126, 2, 1, "", "sample_window"]], "braindecode.samplers.RelativePositioningSampler": [[127, 2, 1, "", "presample"]], "braindecode.samplers.SequenceSampler": [[128, 4, 1, "", "file_ids"], [128, 4, 1, "", "info"]], "braindecode.training": [[129, 1, 1, "", "CroppedLoss"], [130, 1, 1, "", "CroppedTimeSeriesEpochScoring"], [131, 1, 1, "", "CroppedTrialEpochScoring"], [132, 1, 1, "", "PostEpochTrainScoring"], [133, 1, 1, "", "TimeSeriesLoss"], [134, 3, 1, "", "mixup_criterion"], [135, 3, 1, "", "predict_trials"], [136, 3, 1, "", "trial_preds_from_window_preds"]], "braindecode.training.CroppedLoss": [[129, 2, 1, "", "forward"]], "braindecode.training.CroppedTimeSeriesEpochScoring": [[130, 2, 1, "", "on_epoch_end"]], "braindecode.training.CroppedTrialEpochScoring": [[131, 2, 1, "", "on_batch_end"], [131, 2, 1, "", "on_epoch_end"]], "braindecode.training.PostEpochTrainScoring": [[132, 2, 1, "", "on_epoch_end"]], "braindecode.training.TimeSeriesLoss": [[133, 2, 1, "", "forward"]], "braindecode.util": [[137, 3, 1, "", "set_random_seeds"]], "braindecode.visualization": [[138, 3, 1, "", "compute_amplitude_gradients"], [139, 3, 1, "", "plot_confusion_matrix"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"]}, "titleterms": {"api": [0, 146], "refer": [0, 4, 5, 9, 10, 11, 26, 27, 28, 29, 30, 31, 140], "classifi": [0, 68], "regressor": [0, 124], "model": [0, 2, 3, 4, 5, 8, 9, 10, 11, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "train": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 129, 130, 131, 132, 133, 134, 135, 136], "dataset": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "preprocess": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 30, 32, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123], "data": [0, 3, 4, 12, 15, 22, 24, 26, 27, 28, 29, 31], "util": [0, 29, 137], "sampler": [0, 5, 9, 10, 11, 125, 126, 127, 128], "augment": [0, 3, 4, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "visual": [0, 3, 5, 29, 138, 139], "advanc": [1, 24], "neural": [1, 24, 30, 31], "network": [1, 9, 11, 24, 30, 31], "strategi": [1, 24], "finger": [2, 8], "flexion": [2, 8], "crop": [2, 27, 110], "decod": [2, 8, 27, 28], "bcic": [2, 3, 4, 8, 27], "iv": [2, 3, 4, 8, 27], "4": [2, 8], "ecog": [2, 8], "load": [2, 3, 4, 5, 8, 9, 10, 11, 14, 15, 18, 21, 24, 26, 27, 28, 29, 30, 32], "prepar": [2, 8, 28], "split": [2, 3, 4, 5, 8, 9, 10, 11, 21, 27, 28, 29, 30, 32], "test": [2, 5, 8, 29, 31, 32, 144], "creat": [2, 3, 4, 5, 8, 9, 10, 11, 12, 22, 27, 28, 29, 30, 32], "cut": [2, 8, 12, 27, 32], "comput": [2, 6, 8, 12, 13, 23, 27, 28, 30, 32, 33, 34, 145], "window": [2, 3, 4, 5, 8, 9, 10, 11, 12, 22, 27, 28, 29, 30, 31, 32], "plot": [2, 4, 8, 9, 10, 11, 27, 28, 30], "result": [2, 4, 5, 8, 9, 10, 11, 27, 28, 30], "2a": [3, 4, 27], "thi": [3, 4, 5, 12, 21, 26, 27, 28, 29, 30, 32], "exampl": [3, 4, 5, 7, 12, 17, 18, 19, 20, 21, 24, 26, 27, 28, 29, 30, 32, 36, 38, 41, 42, 43, 51, 52, 54, 69, 71, 72, 74, 76, 77, 78, 80, 81, 82, 83, 87, 94, 101, 103, 104, 107, 108, 109, 114, 117, 118, 119, 121, 123, 126, 127, 128, 129, 130, 131, 133, 137, 139], "cover": [3, 4, 5, 12, 21, 26, 27, 28, 29, 30, 32], "extract": [3, 4, 5, 9, 10, 11, 28, 29, 30], "valid": [3, 4, 5, 8, 9, 10, 11, 28, 29, 30], "defin": [3, 4, 29, 31, 32], "transform": [3, 4, 32, 54], "manipul": 3, "one": 3, "session": 3, "an": [3, 4], "eegclassifi": [3, 4, 68], "desir": [3, 4], "manual": 3, "compos": [3, 41], "set": [3, 5, 28], "level": 3, "search": 4, "best": [4, 30], "list": 4, "analys": 4, "fit": 4, "self": 5, "supervis": 5, "learn": [5, 26, 30], "eeg": [5, 12, 22, 28], "rel": 5, "posit": 5, "raw": [5, 32], "record": [5, 12], "inspect": 5, "pretext": 5, "task": 5, "perform": 5, "us": [5, 9, 10, 11, 12, 36, 38, 41, 42, 43, 51, 52, 54, 69, 71, 72, 74, 76, 77, 78, 80, 81, 82, 83, 87, 94, 101, 103, 104, 107, 108, 109, 114, 117, 118, 119, 121, 123, 126, 127, 128, 129, 130, 131, 133, 137, 139], "represent": 5, "sleep": [5, 9, 10, 11], "stage": [5, 9, 10, 11], "conclus": 5, "time": [6, 13, 23, 33, 34, 145], "appli": [7, 24], "real": [7, 24], "world": [7, 24], "physionet": [9, 10, 11], "chambon2018": 9, "sequenc": [9, 10, 11], "eldele2021": 10, "u": 11, "process": 12, "big": 12, "resourc": 12, "tuh": [12, 22, 77], "corpu": [12, 22], "tuhmock": 12, "select": 12, "combin": 12, "step": 12, "benchmark": [14, 16], "eager": 14, "lazi": 14, "organ": [15, 24], "parallel": 16, "serial": 16, "custom": 17, "save": 18, "mne": [19, 26, 35], "moabb": 20, "By": 21, "descript": 21, "inform": 21, "row": 21, "index": 21, "observ": 21, "multipl": 22, "discret": 22, "target": 22, "templ": 22, "univers": 22, "hospit": 22, "explor": [22, 26], "dataload": 22, "basic": [24, 25, 28], "build": [24, 25], "simpl": [26, 29], "epoch": 26, "find": 26, "you": [26, 30], "want": 26, "braindecod": [26, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144], "onlin": 26, "document": 26, "examin": 26, "your": [26, 29, 32, 144], "own": 26, "scikit": [26, 30], "compat": 26, "paramet": 27, "confus": [27, 28], "matrix": [27, 28], "brain": 28, "how": [29, 32, 35, 140], "tune": [29, 30], "why": [29, 30, 32], "should": [29, 32], "i": [29, 32, 140, 144], "care": [29, 32], "about": [29, 32], "evalu": [29, 31, 32], "etc": [29, 32], "option": [29, 32], "1": [29, 32, 146], "let": 29, "": [29, 146], "first": 29, "function": [29, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "2": [29, 32], "val": 29, "second": 29, "3": 29, "k": 29, "fold": 29, "cross": 29, "third": 29, "hyperparamet": [29, 30], "do": [30, 140], "need": 30, "get": [30, 140], "convolut": 31, "regress": 31, "fake": 31, "gener": 31, "cnn": 31, "choos": 31, "between": 31, "gpu": 31, "cpu": 31, "processor": 31, "pytorch": 32, "structur": 32, "offlin": 32, "pure": 32, "loop": 32, "lightn": 32, "cite": [35, 140], "other": 35, "algorithm": 35, "augmenteddataload": 36, "bandstopfilt": 37, "channelsdropout": 38, "channelsshuffl": 39, "channelssymmetri": 40, "ftsurrog": 42, "frequencyshift": 43, "gaussiannois": 44, "identitytransform": 45, "mixup": [46, 63], "sensorsrot": 47, "sensorsxrot": 48, "sensorsyrot": 49, "sensorszrot": 50, "signflip": 51, "smoothtimemask": 52, "timerevers": 53, "bandstop_filt": 55, "channels_dropout": 56, "channels_permut": 57, "channels_shuffl": 58, "frequency_shift": 59, "ft_surrog": 60, "gaussian_nois": 61, "ident": 62, "sensors_rot": 64, "sign_flip": 65, "smooth_time_mask": 66, "time_revers": 67, "bcicompetitionivdataset4": 69, "bnci2014001": 70, "summari": [70, 73], "baseconcatdataset": 71, "basedataset": 72, "hgd": 73, "moabbdataset": 74, "nmt": 75, "sleepphysionet": 76, "tuhabnorm": 78, "windowsdataset": 79, "create_from_x_i": 80, "create_from_mne_epoch": 81, "create_from_mne_raw": 82, "datautil": [83, 84], "load_concat_dataset": 83, "save_concat_dataset": 84, "atcnet": 85, "biot": 86, "deep4net": 87, "deepsleepnet": 88, "eegconform": 89, "eegitnet": 90, "eegincept": 91, "eeginceptionerp": 92, "eeginceptionmi": 93, "eegmodulemixin": 94, "eegnetv1": 95, "eegnetv4": 96, "eegresnet": 97, "eegsimpleconv": 98, "hybridnet": 99, "labram": 100, "shallowfbcspnet": 101, "sleepstagerblanco2020": 102, "sleepstagerchambon2018": 103, "sleepstagereldele2021": 104, "tcn": 105, "tidnet": 106, "timedistribut": 107, "usleep": 108, "get_output_shap": 109, "dropchannel": 111, "filter": 112, "pick": 113, "preprocessor": 114, "resampl": 115, "seteegrefer": 116, "create_fixed_length_window": 117, "create_windows_from_ev": 118, "create_windows_from_target_channel": 119, "exponential_moving_demean": 120, "exponential_moving_standard": 121, "filterbank": 122, "eegregressor": 124, "balancedsequencesampl": 125, "recordingsampl": 126, "relativepositioningsampl": 127, "sequencesampl": 128, "croppedloss": 129, "croppedtimeseriesepochscor": 130, "croppedtrialepochscor": 131, "postepochtrainscor": 132, "timeseriesloss": 133, "mixup_criterion": 134, "predict_tri": 135, "trial_preds_from_window_pr": 136, "set_random_se": 137, "compute_amplitude_gradi": 138, "plot_confusion_matrix": 139, "frequent": 140, "ask": 140, "question": 140, "faq": 140, "help": 140, "can": 140, "t": 140, "python": 140, "work": [140, 144], "still": 140, "think": 140, "found": 140, "bug": [140, 146], "what": [140, 146], "homepag": 141, "instal": [142, 143, 144], "from": [143, 144], "pypi": 143, "sourc": 144, "clone": 144, "repositori": 144, "github": 144, "new": 146, "current": 146, "0": 146, "9": 146, "dev0": 146, "enhanc": 146, "chang": 146, "8": 146, "11": 146, "2022": 146, "7": 146, "10": 146, "version": 146, "6": 146, "2021": 146, "12": 146, "06": 146, "5": 146, "07": 146, "14": 146, "author": 146}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"API Reference": [[0, "api-reference"]], "Classifier": [[0, "classifier"]], "Regressor": [[0, "regressor"]], "Models": [[0, "models"]], "Training": [[0, "training"], [2, "training"], [5, "training"], [8, "training"], [9, "training"], [10, "training"], [11, "training"], [27, "training"], [30, "training"]], "Datasets": [[0, "datasets"]], "Preprocessing": [[0, "preprocessing"], [2, "preprocessing"], [3, "preprocessing"], [4, "preprocessing"], [5, "preprocessing"], [8, "preprocessing"], [9, "preprocessing"], [10, "preprocessing"], [11, "preprocessing"], [12, "preprocessing"], [28, "preprocessing"], [30, "preprocessing"]], "Data Utils": [[0, "data-utils"]], "Samplers": [[0, "samplers"]], "Augmentation": [[0, "augmentation"]], "Utils": [[0, "utils"]], "Visualization": [[0, "visualization"]], "Advanced neural network training strategies": [[1, "advanced-neural-network-training-strategies"], [24, "advanced-neural-network-training-strategies"]], "Fingers flexion cropped decoding on BCIC IV 4 ECoG Dataset": [[2, "fingers-flexion-cropped-decoding-on-bcic-iv-4-ecog-dataset"]], "Loading and preparing the dataset": [[2, "loading-and-preparing-the-dataset"], [8, "loading-and-preparing-the-dataset"]], "Loading": [[2, "loading"], [3, "loading"], [4, "loading"], [8, "loading"], [9, "loading"], [10, "loading"], [11, "loading"], [30, "loading"]], "Split dataset into train and test": [[2, "split-dataset-into-train-and-test"], [29, "split-dataset-into-train-and-test"], [32, "split-dataset-into-train-and-test"]], "Create model": [[2, "create-model"], [3, "create-model"], [4, "create-model"], [8, "create-model"], [9, "create-model"], [10, "create-model"], [11, "create-model"], [29, "create-model"], [30, "create-model"]], "Cut Compute Windows": [[2, "cut-compute-windows"], [8, "cut-compute-windows"], [12, "cut-compute-windows"], [32, "cut-compute-windows"]], "Plot Results": [[2, "plot-results"], [8, "plot-results"], [27, "plot-results"]], "Data Augmentation on BCIC IV 2a Dataset": [[3, "data-augmentation-on-bcic-iv-2a-dataset"]], "This example covers:": [[3, "this-example-covers"], [4, "this-example-covers"], [5, "this-example-covers"], [12, "this-example-covers"], [21, "this-example-covers"], [26, "this-example-covers"], [27, "this-example-covers"], [28, "this-example-covers"], [29, "this-example-covers"], [30, "this-example-covers"], [32, "this-example-covers"]], "Loading and preprocessing the dataset": [[3, "loading-and-preprocessing-the-dataset"], [4, "loading-and-preprocessing-the-dataset"], [5, "loading-and-preprocessing-the-dataset"], [9, "loading-and-preprocessing-the-dataset"], [10, "loading-and-preprocessing-the-dataset"], [11, "loading-and-preprocessing-the-dataset"], [27, "loading-and-preprocessing-the-dataset"], [30, "loading-and-preprocessing-the-dataset"]], "Extracting windows": [[3, "extracting-windows"], [4, "extracting-windows"], [5, "extracting-windows"]], "Split dataset into train and valid": [[3, "split-dataset-into-train-and-valid"], [4, "split-dataset-into-train-and-valid"], [9, "split-dataset-into-train-and-valid"], [10, "split-dataset-into-train-and-valid"], [11, "split-dataset-into-train-and-valid"], [30, "split-dataset-into-train-and-valid"]], "Defining a Transform": [[3, "defining-a-transform"]], "Manipulating one session and visualizing the transformed data": [[3, "manipulating-one-session-and-visualizing-the-transformed-data"]], "Training a model with data augmentation": [[3, "training-a-model-with-data-augmentation"], [4, "training-a-model-with-data-augmentation"]], "Create an EEGClassifier with the desired augmentation": [[3, "create-an-eegclassifier-with-the-desired-augmentation"], [4, "create-an-eegclassifier-with-the-desired-augmentation"]], "Manually composing Transforms": [[3, "manually-composing-transforms"]], "Setting the data augmentation at the Dataset level": [[3, "setting-the-data-augmentation-at-the-dataset-level"]], "Searching the best data augmentation on BCIC IV 2a Dataset": [[4, "searching-the-best-data-augmentation-on-bcic-iv-2a-dataset"]], "Data Augmentation": [[4, null]], "Defining a list of transforms": [[4, "defining-a-list-of-transforms"]], "Analysing the best fit": [[4, "analysing-the-best-fit"]], "Plot results": [[4, "plot-results"], [9, "plot-results"], [10, "plot-results"], [11, "plot-results"]], "References": [[4, "references"], [5, "references"], [9, "references"], [10, "references"], [11, "references"], [26, "references"], [27, "references"], [28, "references"], [29, "references"], [30, "references"], [31, "references"], [140, "references"]], "Self-supervised learning on EEG with relative positioning": [[5, "self-supervised-learning-on-eeg-with-relative-positioning"]], "Self-supervised learning": [[5, null]], "Loading the raw recordings": [[5, "loading-the-raw-recordings"]], "Preprocessing windows": [[5, "preprocessing-windows"]], "Splitting dataset into train, valid and test sets": [[5, "splitting-dataset-into-train-valid-and-test-sets"]], "Creating samplers": [[5, "creating-samplers"]], "Creating the model": [[5, "creating-the-model"]], "Visualizing the results": [[5, "visualizing-the-results"]], "Inspecting pretext task performance": [[5, "inspecting-pretext-task-performance"]], "Using the learned representation for sleep staging": [[5, "using-the-learned-representation-for-sleep-staging"]], "Conclusion": [[5, "conclusion"]], "Computation times": [[6, "computation-times"], [13, "computation-times"], [23, "computation-times"], [33, "computation-times"], [34, "computation-times"], [145, "computation-times"]], "Applied examples on real-world datasets": [[7, "applied-examples-on-real-world-datasets"], [24, "applied-examples-on-real-world-datasets"]], "Fingers flexion decoding on BCIC IV 4 ECoG Dataset": [[8, "fingers-flexion-decoding-on-bcic-iv-4-ecog-dataset"]], "Split dataset into train, valid, and test": [[8, "split-dataset-into-train-valid-and-test"]], "Sleep staging on the Sleep Physionet dataset using Chambon2018 network": [[9, "sleep-staging-on-the-sleep-physionet-dataset-using-chambon2018-network"]], "Extract windows": [[9, "extract-windows"], [10, "extract-windows"], [11, "extract-windows"]], "Window preprocessing": [[9, "window-preprocessing"], [10, "window-preprocessing"]], "Create sequence samplers": [[9, "create-sequence-samplers"], [10, "create-sequence-samplers"], [11, "create-sequence-samplers"]], "Sleep staging on the Sleep Physionet dataset using Eldele2021": [[10, "sleep-staging-on-the-sleep-physionet-dataset-using-eldele2021"]], "Sleep staging on the Sleep Physionet dataset using U-Sleep network": [[11, "sleep-staging-on-the-sleep-physionet-dataset-using-u-sleep-network"]], "Process a big data EEG resource (TUH EEG Corpus)": [[12, "process-a-big-data-eeg-resource-tuh-eeg-corpus"]], "Creating the dataset using TUHMock": [[12, "creating-the-dataset-using-tuhmock"]], "Selecting recordings": [[12, "selecting-recordings"]], "Combining preprocessing steps": [[12, "combining-preprocessing-steps"]], "Benchmarking eager and lazy loading": [[14, "benchmarking-eager-and-lazy-loading"]], "Loading and organizing data": [[15, "loading-and-organizing-data"], [24, "loading-and-organizing-data"]], "Benchmarking preprocessing with parallelization and serialization": [[16, "benchmarking-preprocessing-with-parallelization-and-serialization"]], "Custom Dataset Example": [[17, "custom-dataset-example"]], "Load and save dataset example": [[18, "load-and-save-dataset-example"]], "MNE Dataset Example": [[19, "mne-dataset-example"]], "MOABB Dataset Example": [[20, "moabb-dataset-example"]], "Split Dataset Example": [[21, "split-dataset-example"]], "Loading the dataset": [[21, "loading-the-dataset"], [28, "loading-the-dataset"]], "Splitting": [[21, "splitting"]], "By description information": [[21, "by-description-information"]], "By row index": [[21, "by-row-index"]], "Observation": [[21, "observation"]], "Multiple discrete targets with the TUH EEG Corpus": [[22, "multiple-discrete-targets-with-the-tuh-eeg-corpus"]], "Creating Temple University Hospital (TUH) EEG Corpus Dataset": [[22, "creating-temple-university-hospital-tuh-eeg-corpus-dataset"]], "Exploring Data": [[22, "exploring-data"]], "Creating Windows": [[22, "creating-windows"]], "Exploring Windows": [[22, "exploring-windows"]], "DataLoader for Model Training": [[22, "dataloader-for-model-training"]], "Exploring DataLoader": [[22, "exploring-dataloader"]], "Examples": [[24, "examples"]], "Basic model building and training": [[24, "basic-model-building-and-training"], [25, "basic-model-building-and-training"]], "Simple training on MNE epochs": [[26, "simple-training-on-mne-epochs"]], "Finding the model you want": [[26, "finding-the-model-you-want"]], "Exploring the braindecode online documentation": [[26, "exploring-the-braindecode-online-documentation"]], "Examining the model": [[26, "examining-the-model"]], "Loading your own data with MNE": [[26, "loading-your-own-data-with-mne"]], "Training your model (scikit-learn compatible)": [[26, "training-your-model-scikit-learn-compatible"]], "Cropped Decoding on BCIC IV 2a Dataset": [[27, "cropped-decoding-on-bcic-iv-2a-dataset"]], "Create model and compute windowing parameters": [[27, "create-model-and-compute-windowing-parameters"]], "Cut the data into windows": [[27, "cut-the-data-into-windows"]], "Split the dataset": [[27, "split-the-dataset"]], "Plot Confusion Matrix": [[27, "plot-confusion-matrix"]], "Basic Brain Decoding on EEG Data": [[28, "basic-brain-decoding-on-eeg-data"]], "Loading and preparing the data": [[28, "loading-and-preparing-the-data"]], "Extracting Compute Windows": [[28, "extracting-compute-windows"]], "Splitting the dataset into training and validation sets": [[28, "splitting-the-dataset-into-training-and-validation-sets"]], "Creating a model": [[28, "creating-a-model"]], "Model Training": [[28, "model-training"]], "Plotting Results": [[28, "plotting-results"]], "Plotting a  Confusion Matrix": [[28, "plotting-a-confusion-matrix"]], "How to train, test and tune your model?": [[29, "how-to-train-test-and-tune-your-model"]], "Why should I care about model evaluation?": [[29, "why-should-i-care-about-model-evaluation"], [32, "why-should-i-care-about-model-evaluation"]], "Loading and preprocessing of data, defining a model, etc.": [[29, "loading-and-preprocessing-of-data-defining-a-model-etc"]], "Loading data": [[29, "loading-data"]], "Preprocessing data": [[29, "preprocessing-data"]], "Extraction of the Windows": [[29, "extraction-of-the-windows"], [30, "extraction-of-the-windows"]], "How to train and evaluate your model": [[29, "how-to-train-and-evaluate-your-model"], [32, "how-to-train-and-evaluate-your-model"]], "Option 1: Simple Train-Test Split": [[29, "option-1-simple-train-test-split"]], "Let\u2019s visualize the first option with a util function.": [[29, "let-s-visualize-the-first-option-with-a-util-function"]], "Option 2: Train-Val-Test Split": [[29, "option-2-train-val-test-split"]], "Let\u2019s visualize the second option with a util function.": [[29, "let-s-visualize-the-second-option-with-a-util-function"]], "Option 3: k-Fold Cross Validation": [[29, "option-3-k-fold-cross-validation"]], "Let\u2019s visualize the third option with a util function.": [[29, "let-s-visualize-the-third-option-with-a-util-function"]], "How to tune your hyperparameters": [[29, "how-to-tune-your-hyperparameters"]], "Option 1: Train-Val-Test Split": [[29, "option-1-train-val-test-split"]], "Option 2: k-Fold Cross Validation": [[29, "option-2-k-fold-cross-validation"]], "Hyperparameter tuning with scikit-learn": [[30, "hyperparameter-tuning-with-scikit-learn"]], "Why do you need to tune the neural networks model?": [[30, null]], "Extraction of the Compute Windows": [[30, "extraction-of-the-compute-windows"]], "Plotting the results": [[30, "plotting-the-results"]], "Get the best hyperparameters": [[30, "get-the-best-hyperparameters"]], "Convolutional neural network regression model on fake data.": [[31, "convolutional-neural-network-regression-model-on-fake-data"]], "Fake regression data": [[31, "fake-regression-data"]], "Generating fake regression dataset": [[31, "generating-fake-regression-dataset"]], "Defining a CNN regression model": [[31, "defining-a-cnn-regression-model"]], "Choosing between GPU and CPU processors": [[31, "choosing-between-gpu-and-cpu-processors"]], "Data windowing": [[31, "data-windowing"]], "Model training": [[31, "model-training"]], "Model evaluation": [[31, "model-evaluation"]], "Model testing": [[31, "model-testing"]], "Training a Braindecode model in PyTorch": [[32, "training-a-braindecode-model-in-pytorch"]], "Loading, preprocessing, defining a model, etc.": [[32, "loading-preprocessing-defining-a-model-etc"]], "Loading the Dataset Structure": [[32, "loading-the-dataset-structure"]], "Preprocessing, the offline transformation of the raw dataset": [[32, "preprocessing-the-offline-transformation-of-the-raw-dataset"]], "Create Pytorch model": [[32, "create-pytorch-model"]], "Option 1: Pure PyTorch training loop": [[32, "option-1-pure-pytorch-training-loop"]], "Option 2: Train it with PyTorch Lightning": [[32, "option-2-train-it-with-pytorch-lightning"]], "How to cite Braindecode": [[35, "how-to-cite-braindecode"]], "Citing the Braindecode": [[35, "citing-the-braindecode"]], "Citing the MNE": [[35, "citing-the-mne"]], "Citing other algorithms": [[35, "citing-other-algorithms"]], "braindecode.augmentation.AugmentedDataLoader": [[36, "braindecode-augmentation-augmenteddataloader"]], "Examples using braindecode.augmentation.AugmentedDataLoader": [[36, "examples-using-braindecode-augmentation-augmenteddataloader"]], "braindecode.augmentation.BandstopFilter": [[37, "braindecode-augmentation-bandstopfilter"]], "braindecode.augmentation.ChannelsDropout": [[38, "braindecode-augmentation-channelsdropout"]], "Examples using braindecode.augmentation.ChannelsDropout": [[38, "examples-using-braindecode-augmentation-channelsdropout"]], "braindecode.augmentation.ChannelsShuffle": [[39, "braindecode-augmentation-channelsshuffle"]], "braindecode.augmentation.ChannelsSymmetry": [[40, "braindecode-augmentation-channelssymmetry"]], "braindecode.augmentation.Compose": [[41, "braindecode-augmentation-compose"]], "Examples using braindecode.augmentation.Compose": [[41, "examples-using-braindecode-augmentation-compose"]], "braindecode.augmentation.FTSurrogate": [[42, "braindecode-augmentation-ftsurrogate"]], "Examples using braindecode.augmentation.FTSurrogate": [[42, "examples-using-braindecode-augmentation-ftsurrogate"]], "braindecode.augmentation.FrequencyShift": [[43, "braindecode-augmentation-frequencyshift"]], "Examples using braindecode.augmentation.FrequencyShift": [[43, "examples-using-braindecode-augmentation-frequencyshift"]], "braindecode.augmentation.GaussianNoise": [[44, "braindecode-augmentation-gaussiannoise"]], "braindecode.augmentation.IdentityTransform": [[45, "braindecode-augmentation-identitytransform"]], "braindecode.augmentation.Mixup": [[46, "braindecode-augmentation-mixup"]], "braindecode.augmentation.SensorsRotation": [[47, "braindecode-augmentation-sensorsrotation"]], "braindecode.augmentation.SensorsXRotation": [[48, "braindecode-augmentation-sensorsxrotation"]], "braindecode.augmentation.SensorsYRotation": [[49, "braindecode-augmentation-sensorsyrotation"]], "braindecode.augmentation.SensorsZRotation": [[50, "braindecode-augmentation-sensorszrotation"]], "braindecode.augmentation.SignFlip": [[51, "braindecode-augmentation-signflip"]], "Examples using braindecode.augmentation.SignFlip": [[51, "examples-using-braindecode-augmentation-signflip"]], "braindecode.augmentation.SmoothTimeMask": [[52, "braindecode-augmentation-smoothtimemask"]], "Examples using braindecode.augmentation.SmoothTimeMask": [[52, "examples-using-braindecode-augmentation-smoothtimemask"]], "braindecode.augmentation.TimeReverse": [[53, "braindecode-augmentation-timereverse"]], "braindecode.augmentation.Transform": [[54, "braindecode-augmentation-transform"]], "Examples using braindecode.augmentation.Transform": [[54, "examples-using-braindecode-augmentation-transform"]], "braindecode.augmentation.functional.bandstop_filter": [[55, "braindecode-augmentation-functional-bandstop-filter"]], "braindecode.augmentation.functional.channels_dropout": [[56, "braindecode-augmentation-functional-channels-dropout"]], "braindecode.augmentation.functional.channels_permute": [[57, "braindecode-augmentation-functional-channels-permute"]], "braindecode.augmentation.functional.channels_shuffle": [[58, "braindecode-augmentation-functional-channels-shuffle"]], "braindecode.augmentation.functional.frequency_shift": [[59, "braindecode-augmentation-functional-frequency-shift"]], "braindecode.augmentation.functional.ft_surrogate": [[60, "braindecode-augmentation-functional-ft-surrogate"]], "braindecode.augmentation.functional.gaussian_noise": [[61, "braindecode-augmentation-functional-gaussian-noise"]], "braindecode.augmentation.functional.identity": [[62, "braindecode-augmentation-functional-identity"]], "braindecode.augmentation.functional.mixup": [[63, "braindecode-augmentation-functional-mixup"]], "braindecode.augmentation.functional.sensors_rotation": [[64, "braindecode-augmentation-functional-sensors-rotation"]], "braindecode.augmentation.functional.sign_flip": [[65, "braindecode-augmentation-functional-sign-flip"]], "braindecode.augmentation.functional.smooth_time_mask": [[66, "braindecode-augmentation-functional-smooth-time-mask"]], "braindecode.augmentation.functional.time_reverse": [[67, "braindecode-augmentation-functional-time-reverse"]], "braindecode.classifier.EEGClassifier": [[68, "braindecode-classifier-eegclassifier"]], "braindecode.datasets.BCICompetitionIVDataset4": [[69, "braindecode-datasets-bcicompetitionivdataset4"]], "Examples using braindecode.datasets.BCICompetitionIVDataset4": [[69, "examples-using-braindecode-datasets-bcicompetitionivdataset4"]], "braindecode.datasets.BNCI2014001": [[70, "braindecode-datasets-bnci2014001"]], "Dataset summary": [[70, null], [73, null]], "braindecode.datasets.BaseConcatDataset": [[71, "braindecode-datasets-baseconcatdataset"]], "Examples using braindecode.datasets.BaseConcatDataset": [[71, "examples-using-braindecode-datasets-baseconcatdataset"]], "braindecode.datasets.BaseDataset": [[72, "braindecode-datasets-basedataset"]], "Examples using braindecode.datasets.BaseDataset": [[72, "examples-using-braindecode-datasets-basedataset"]], "braindecode.datasets.HGD": [[73, "braindecode-datasets-hgd"]], "braindecode.datasets.MOABBDataset": [[74, "braindecode-datasets-moabbdataset"]], "Examples using braindecode.datasets.MOABBDataset": [[74, "examples-using-braindecode-datasets-moabbdataset"]], "braindecode.datasets.NMT": [[75, "braindecode-datasets-nmt"]], "braindecode.datasets.SleepPhysionet": [[76, "braindecode-datasets-sleepphysionet"]], "Examples using braindecode.datasets.SleepPhysionet": [[76, "examples-using-braindecode-datasets-sleepphysionet"]], "braindecode.datasets.TUH": [[77, "braindecode-datasets-tuh"]], "Examples using braindecode.datasets.TUH": [[77, "examples-using-braindecode-datasets-tuh"]], "braindecode.datasets.TUHAbnormal": [[78, "braindecode-datasets-tuhabnormal"]], "Examples using braindecode.datasets.TUHAbnormal": [[78, "examples-using-braindecode-datasets-tuhabnormal"]], "braindecode.datasets.WindowsDataset": [[79, "braindecode-datasets-windowsdataset"]], "braindecode.datasets.create_from_X_y": [[80, "braindecode-datasets-create-from-x-y"]], "Examples using braindecode.datasets.create_from_X_y": [[80, "examples-using-braindecode-datasets-create-from-x-y"]], "braindecode.datasets.create_from_mne_epochs": [[81, "braindecode-datasets-create-from-mne-epochs"]], "Examples using braindecode.datasets.create_from_mne_epochs": [[81, "examples-using-braindecode-datasets-create-from-mne-epochs"]], "braindecode.datasets.create_from_mne_raw": [[82, "braindecode-datasets-create-from-mne-raw"]], "Examples using braindecode.datasets.create_from_mne_raw": [[82, "examples-using-braindecode-datasets-create-from-mne-raw"]], "braindecode.datautil.load_concat_dataset": [[83, "braindecode-datautil-load-concat-dataset"]], "Examples using braindecode.datautil.load_concat_dataset": [[83, "examples-using-braindecode-datautil-load-concat-dataset"]], "braindecode.datautil.save_concat_dataset": [[84, "braindecode-datautil-save-concat-dataset"]], "braindecode.models.ATCNet": [[85, "braindecode-models-atcnet"]], "braindecode.models.BIOT": [[86, "braindecode-models-biot"]], "braindecode.models.Deep4Net": [[87, "braindecode-models-deep4net"]], "Examples using braindecode.models.Deep4Net": [[87, "examples-using-braindecode-models-deep4net"]], "braindecode.models.DeepSleepNet": [[88, "braindecode-models-deepsleepnet"]], "braindecode.models.EEGConformer": [[89, "braindecode-models-eegconformer"]], "braindecode.models.EEGITNet": [[90, "braindecode-models-eegitnet"]], "braindecode.models.EEGInception": [[91, "braindecode-models-eeginception"]], "braindecode.models.EEGInceptionERP": [[92, "braindecode-models-eeginceptionerp"]], "braindecode.models.EEGInceptionMI": [[93, "braindecode-models-eeginceptionmi"]], "braindecode.models.EEGModuleMixin": [[94, "braindecode-models-eegmodulemixin"]], "Examples using braindecode.models.EEGModuleMixin": [[94, "examples-using-braindecode-models-eegmodulemixin"]], "braindecode.models.EEGNetv1": [[95, "braindecode-models-eegnetv1"]], "braindecode.models.EEGNetv4": [[96, "braindecode-models-eegnetv4"]], "braindecode.models.EEGResNet": [[97, "braindecode-models-eegresnet"]], "braindecode.models.EEGSimpleConv": [[98, "braindecode-models-eegsimpleconv"]], "braindecode.models.HybridNet": [[99, "braindecode-models-hybridnet"]], "braindecode.models.Labram": [[100, "braindecode-models-labram"]], "braindecode.models.ShallowFBCSPNet": [[101, "braindecode-models-shallowfbcspnet"]], "Examples using braindecode.models.ShallowFBCSPNet": [[101, "examples-using-braindecode-models-shallowfbcspnet"]], "braindecode.models.SleepStagerBlanco2020": [[102, "braindecode-models-sleepstagerblanco2020"]], "braindecode.models.SleepStagerChambon2018": [[103, "braindecode-models-sleepstagerchambon2018"]], "Examples using braindecode.models.SleepStagerChambon2018": [[103, "examples-using-braindecode-models-sleepstagerchambon2018"]], "braindecode.models.SleepStagerEldele2021": [[104, "braindecode-models-sleepstagereldele2021"]], "Examples using braindecode.models.SleepStagerEldele2021": [[104, "examples-using-braindecode-models-sleepstagereldele2021"]], "braindecode.models.TCN": [[105, "braindecode-models-tcn"]], "braindecode.models.TIDNet": [[106, "braindecode-models-tidnet"]], "braindecode.models.TimeDistributed": [[107, "braindecode-models-timedistributed"]], "Examples using braindecode.models.TimeDistributed": [[107, "examples-using-braindecode-models-timedistributed"]], "braindecode.models.USleep": [[108, "braindecode-models-usleep"]], "Examples using braindecode.models.USleep": [[108, "examples-using-braindecode-models-usleep"]], "braindecode.models.get_output_shape": [[109, "braindecode-models-get-output-shape"]], "Examples using braindecode.models.get_output_shape": [[109, "examples-using-braindecode-models-get-output-shape"]], "braindecode.preprocessing.Crop": [[110, "braindecode-preprocessing-crop"]], "braindecode.preprocessing.DropChannels": [[111, "braindecode-preprocessing-dropchannels"]], "braindecode.preprocessing.Filter": [[112, "braindecode-preprocessing-filter"]], "braindecode.preprocessing.Pick": [[113, "braindecode-preprocessing-pick"]], "braindecode.preprocessing.Preprocessor": [[114, "braindecode-preprocessing-preprocessor"]], "Examples using braindecode.preprocessing.Preprocessor": [[114, "examples-using-braindecode-preprocessing-preprocessor"]], "braindecode.preprocessing.Resample": [[115, "braindecode-preprocessing-resample"]], "braindecode.preprocessing.SetEEGReference": [[116, "braindecode-preprocessing-seteegreference"]], "braindecode.preprocessing.create_fixed_length_windows": [[117, "braindecode-preprocessing-create-fixed-length-windows"]], "Examples using braindecode.preprocessing.create_fixed_length_windows": [[117, "examples-using-braindecode-preprocessing-create-fixed-length-windows"]], "braindecode.preprocessing.create_windows_from_events": [[118, "braindecode-preprocessing-create-windows-from-events"]], "Examples using braindecode.preprocessing.create_windows_from_events": [[118, "examples-using-braindecode-preprocessing-create-windows-from-events"]], "braindecode.preprocessing.create_windows_from_target_channels": [[119, "braindecode-preprocessing-create-windows-from-target-channels"]], "Examples using braindecode.preprocessing.create_windows_from_target_channels": [[119, "examples-using-braindecode-preprocessing-create-windows-from-target-channels"]], "braindecode.preprocessing.exponential_moving_demean": [[120, "braindecode-preprocessing-exponential-moving-demean"]], "braindecode.preprocessing.exponential_moving_standardize": [[121, "braindecode-preprocessing-exponential-moving-standardize"]], "Examples using braindecode.preprocessing.exponential_moving_standardize": [[121, "examples-using-braindecode-preprocessing-exponential-moving-standardize"]], "braindecode.preprocessing.filterbank": [[122, "braindecode-preprocessing-filterbank"]], "braindecode.preprocessing.preprocess": [[123, "braindecode-preprocessing-preprocess"]], "Examples using braindecode.preprocessing.preprocess": [[123, "examples-using-braindecode-preprocessing-preprocess"]], "braindecode.regressor.EEGRegressor": [[124, "braindecode-regressor-eegregressor"]], "braindecode.samplers.BalancedSequenceSampler": [[125, "braindecode-samplers-balancedsequencesampler"]], "braindecode.samplers.RecordingSampler": [[126, "braindecode-samplers-recordingsampler"]], "Examples using braindecode.samplers.RecordingSampler": [[126, "examples-using-braindecode-samplers-recordingsampler"]], "braindecode.samplers.RelativePositioningSampler": [[127, "braindecode-samplers-relativepositioningsampler"]], "Examples using braindecode.samplers.RelativePositioningSampler": [[127, "examples-using-braindecode-samplers-relativepositioningsampler"]], "braindecode.samplers.SequenceSampler": [[128, "braindecode-samplers-sequencesampler"]], "Examples using braindecode.samplers.SequenceSampler": [[128, "examples-using-braindecode-samplers-sequencesampler"]], "braindecode.training.CroppedLoss": [[129, "braindecode-training-croppedloss"]], "Examples using braindecode.training.CroppedLoss": [[129, "examples-using-braindecode-training-croppedloss"]], "braindecode.training.CroppedTimeSeriesEpochScoring": [[130, "braindecode-training-croppedtimeseriesepochscoring"]], "Examples using braindecode.training.CroppedTimeSeriesEpochScoring": [[130, "examples-using-braindecode-training-croppedtimeseriesepochscoring"]], "braindecode.training.CroppedTrialEpochScoring": [[131, "braindecode-training-croppedtrialepochscoring"]], "Examples using braindecode.training.CroppedTrialEpochScoring": [[131, "examples-using-braindecode-training-croppedtrialepochscoring"]], "braindecode.training.PostEpochTrainScoring": [[132, "braindecode-training-postepochtrainscoring"]], "braindecode.training.TimeSeriesLoss": [[133, "braindecode-training-timeseriesloss"]], "Examples using braindecode.training.TimeSeriesLoss": [[133, "examples-using-braindecode-training-timeseriesloss"]], "braindecode.training.mixup_criterion": [[134, "braindecode-training-mixup-criterion"]], "braindecode.training.predict_trials": [[135, "braindecode-training-predict-trials"]], "braindecode.training.trial_preds_from_window_preds": [[136, "braindecode-training-trial-preds-from-window-preds"]], "braindecode.util.set_random_seeds": [[137, "braindecode-util-set-random-seeds"]], "Examples using braindecode.util.set_random_seeds": [[137, "examples-using-braindecode-util-set-random-seeds"]], "braindecode.visualization.compute_amplitude_gradients": [[138, "braindecode-visualization-compute-amplitude-gradients"]], "braindecode.visualization.plot_confusion_matrix": [[139, "braindecode-visualization-plot-confusion-matrix"]], "Examples using braindecode.visualization.plot_confusion_matrix": [[139, "examples-using-braindecode-visualization-plot-confusion-matrix"]], "Frequently Asked Questions (FAQ)": [[140, "frequently-asked-questions-faq"]], "How do I cite Braindecode?": [[140, "how-do-i-cite-braindecode"]], "Help! I can\u2019t get Python and Braindecode working!": [[140, "help-i-can-t-get-python-and-braindecode-working"]], "I still can\u2019t get it to work!": [[140, "i-still-can-t-get-it-to-work"]], "I think I found a bug, what do I do?": [[140, "i-think-i-found-a-bug-what-do-i-do"]], "Braindecode Homepage": [[141, "braindecode-homepage"]], "Installation": [[142, "installation"]], "Installing from PyPI": [[143, "installing-from-pypi"]], "Installing from sources": [[144, "installing-from-sources"]], "Clone the repository from GitHub": [[144, "clone-the-repository-from-github"]], "Installing Braindecode from the source": [[144, "installing-braindecode-from-the-source"]], "Testing if your installation is working": [[144, "testing-if-your-installation-is-working"]], "What\u2019s new": [[146, "what-s-new"]], "Current 0.9 (dev0)": [[146, "current-0-9-dev0"]], "Enhancements": [[146, "enhancements"], [146, "id1"], [146, "id8"], [146, "id11"], [146, "id14"]], "Bugs": [[146, "bugs"], [146, "id6"], [146, "id9"], [146, "id12"], [146, "id15"]], "API changes": [[146, "api-changes"], [146, "id7"], [146, "id10"], [146, "id13"], [146, "id16"]], "Current 0.8 (11-2022)": [[146, "current-0-8-11-2022"]], "Current 0.7 (10-2022)": [[146, "current-0-7-10-2022"]], "Version 0.6 (2021-12-06)": [[146, "version-0-6-2021-12-06"]], "Version 0.5.1 (2021-07-14)": [[146, "version-0-5-1-2021-07-14"]], "Authors": [[146, "authors"]]}, "indexentries": {"braindecode": [[0, "module-braindecode"]], "module": [[0, "module-braindecode"]], "augmenteddataloader (class in braindecode.augmentation)": [[36, "braindecode.augmentation.AugmentedDataLoader"]], "bandstopfilter (class in braindecode.augmentation)": [[37, "braindecode.augmentation.BandstopFilter"]], "get_augmentation_params() (braindecode.augmentation.bandstopfilter method)": [[37, "braindecode.augmentation.BandstopFilter.get_augmentation_params"]], "operation() (braindecode.augmentation.bandstopfilter static method)": [[37, "braindecode.augmentation.BandstopFilter.operation"]], "channelsdropout (class in braindecode.augmentation)": [[38, "braindecode.augmentation.ChannelsDropout"]], "get_augmentation_params() (braindecode.augmentation.channelsdropout method)": [[38, "braindecode.augmentation.ChannelsDropout.get_augmentation_params"]], "operation() (braindecode.augmentation.channelsdropout static method)": [[38, "braindecode.augmentation.ChannelsDropout.operation"]], "channelsshuffle (class in braindecode.augmentation)": [[39, "braindecode.augmentation.ChannelsShuffle"]], "get_augmentation_params() (braindecode.augmentation.channelsshuffle method)": [[39, "braindecode.augmentation.ChannelsShuffle.get_augmentation_params"]], "operation() (braindecode.augmentation.channelsshuffle static method)": [[39, "braindecode.augmentation.ChannelsShuffle.operation"]], "channelssymmetry (class in braindecode.augmentation)": [[40, "braindecode.augmentation.ChannelsSymmetry"]], "get_augmentation_params() (braindecode.augmentation.channelssymmetry method)": [[40, "braindecode.augmentation.ChannelsSymmetry.get_augmentation_params"]], "operation() (braindecode.augmentation.channelssymmetry static method)": [[40, "braindecode.augmentation.ChannelsSymmetry.operation"]], "compose (class in braindecode.augmentation)": [[41, "braindecode.augmentation.Compose"]], "forward() (braindecode.augmentation.compose method)": [[41, "braindecode.augmentation.Compose.forward"]], "ftsurrogate (class in braindecode.augmentation)": [[42, "braindecode.augmentation.FTSurrogate"]], "get_augmentation_params() (braindecode.augmentation.ftsurrogate method)": [[42, "braindecode.augmentation.FTSurrogate.get_augmentation_params"]], "operation() (braindecode.augmentation.ftsurrogate static method)": [[42, "braindecode.augmentation.FTSurrogate.operation"]], "frequencyshift (class in braindecode.augmentation)": [[43, "braindecode.augmentation.FrequencyShift"]], "get_augmentation_params() (braindecode.augmentation.frequencyshift method)": [[43, "braindecode.augmentation.FrequencyShift.get_augmentation_params"]], "operation() (braindecode.augmentation.frequencyshift static method)": [[43, "braindecode.augmentation.FrequencyShift.operation"]], "gaussiannoise (class in braindecode.augmentation)": [[44, "braindecode.augmentation.GaussianNoise"]], "get_augmentation_params() (braindecode.augmentation.gaussiannoise method)": [[44, "braindecode.augmentation.GaussianNoise.get_augmentation_params"]], "operation() (braindecode.augmentation.gaussiannoise static method)": [[44, "braindecode.augmentation.GaussianNoise.operation"]], "identitytransform (class in braindecode.augmentation)": [[45, "braindecode.augmentation.IdentityTransform"]], "operation() (braindecode.augmentation.identitytransform static method)": [[45, "braindecode.augmentation.IdentityTransform.operation"]], "mixup (class in braindecode.augmentation)": [[46, "braindecode.augmentation.Mixup"]], "get_augmentation_params() (braindecode.augmentation.mixup method)": [[46, "braindecode.augmentation.Mixup.get_augmentation_params"]], "operation() (braindecode.augmentation.mixup static method)": [[46, "braindecode.augmentation.Mixup.operation"]], "sensorsrotation (class in braindecode.augmentation)": [[47, "braindecode.augmentation.SensorsRotation"]], "get_augmentation_params() (braindecode.augmentation.sensorsrotation method)": [[47, "braindecode.augmentation.SensorsRotation.get_augmentation_params"]], "operation() (braindecode.augmentation.sensorsrotation static method)": [[47, "braindecode.augmentation.SensorsRotation.operation"]], "sensorsxrotation (class in braindecode.augmentation)": [[48, "braindecode.augmentation.SensorsXRotation"]], "sensorsyrotation (class in braindecode.augmentation)": [[49, "braindecode.augmentation.SensorsYRotation"]], "sensorszrotation (class in braindecode.augmentation)": [[50, "braindecode.augmentation.SensorsZRotation"]], "signflip (class in braindecode.augmentation)": [[51, "braindecode.augmentation.SignFlip"]], "operation() (braindecode.augmentation.signflip static method)": [[51, "braindecode.augmentation.SignFlip.operation"]], "smoothtimemask (class in braindecode.augmentation)": [[52, "braindecode.augmentation.SmoothTimeMask"]], "get_augmentation_params() (braindecode.augmentation.smoothtimemask method)": [[52, "braindecode.augmentation.SmoothTimeMask.get_augmentation_params"]], "operation() (braindecode.augmentation.smoothtimemask static method)": [[52, "braindecode.augmentation.SmoothTimeMask.operation"]], "timereverse (class in braindecode.augmentation)": [[53, "braindecode.augmentation.TimeReverse"]], "operation() (braindecode.augmentation.timereverse static method)": [[53, "braindecode.augmentation.TimeReverse.operation"]], "transform (class in braindecode.augmentation)": [[54, "braindecode.augmentation.Transform"]], "forward() (braindecode.augmentation.transform method)": [[54, "braindecode.augmentation.Transform.forward"]], "get_augmentation_params() (braindecode.augmentation.transform method)": [[54, "braindecode.augmentation.Transform.get_augmentation_params"]], "bandstop_filter() (in module braindecode.augmentation.functional)": [[55, "braindecode.augmentation.functional.bandstop_filter"]], "channels_dropout() (in module braindecode.augmentation.functional)": [[56, "braindecode.augmentation.functional.channels_dropout"]], "channels_permute() (in module braindecode.augmentation.functional)": [[57, "braindecode.augmentation.functional.channels_permute"]], "channels_shuffle() (in module braindecode.augmentation.functional)": [[58, "braindecode.augmentation.functional.channels_shuffle"]], "frequency_shift() (in module braindecode.augmentation.functional)": [[59, "braindecode.augmentation.functional.frequency_shift"]], "ft_surrogate() (in module braindecode.augmentation.functional)": [[60, "braindecode.augmentation.functional.ft_surrogate"]], "gaussian_noise() (in module braindecode.augmentation.functional)": [[61, "braindecode.augmentation.functional.gaussian_noise"]], "identity() (in module braindecode.augmentation.functional)": [[62, "braindecode.augmentation.functional.identity"]], "mixup() (in module braindecode.augmentation.functional)": [[63, "braindecode.augmentation.functional.mixup"]], "sensors_rotation() (in module braindecode.augmentation.functional)": [[64, "braindecode.augmentation.functional.sensors_rotation"]], "sign_flip() (in module braindecode.augmentation.functional)": [[65, "braindecode.augmentation.functional.sign_flip"]], "smooth_time_mask() (in module braindecode.augmentation.functional)": [[66, "braindecode.augmentation.functional.smooth_time_mask"]], "time_reverse() (in module braindecode.augmentation.functional)": [[67, "braindecode.augmentation.functional.time_reverse"]], "eegclassifier (class in braindecode.classifier)": [[68, "braindecode.classifier.EEGClassifier"]], "_criteria (braindecode.classifier.eegclassifier attribute)": [[68, "braindecode.classifier.EEGClassifier._criteria"]], "_modules (braindecode.classifier.eegclassifier attribute)": [[68, "braindecode.classifier.EEGClassifier._modules"]], "_optimizers (braindecode.classifier.eegclassifier attribute)": [[68, "braindecode.classifier.EEGClassifier._optimizers"]], "callbacks_ (braindecode.classifier.eegclassifier attribute)": [[68, "braindecode.classifier.EEGClassifier.callbacks_"]], "classes_ (braindecode.classifier.eegclassifier attribute)": [[68, "braindecode.classifier.EEGClassifier.classes_"]], "criterion_ (braindecode.classifier.eegclassifier attribute)": [[68, "braindecode.classifier.EEGClassifier.criterion_"]], "cuda_dependent_attributes_ (braindecode.classifier.eegclassifier attribute)": [[68, "braindecode.classifier.EEGClassifier.cuda_dependent_attributes_"]], "get_iterator() (braindecode.classifier.eegclassifier method)": [[68, "braindecode.classifier.EEGClassifier.get_iterator"]], "get_loss() (braindecode.classifier.eegclassifier method)": [[68, "braindecode.classifier.EEGClassifier.get_loss"]], "initialized_ (braindecode.classifier.eegclassifier attribute)": [[68, "braindecode.classifier.EEGClassifier.initialized_"]], "module_ (braindecode.classifier.eegclassifier attribute)": [[68, "braindecode.classifier.EEGClassifier.module_"]], "predict() (braindecode.classifier.eegclassifier method)": [[68, "braindecode.classifier.EEGClassifier.predict"]], "predict_proba() (braindecode.classifier.eegclassifier method)": [[68, "braindecode.classifier.EEGClassifier.predict_proba"]], "predict_trials() (braindecode.classifier.eegclassifier method)": [[68, "braindecode.classifier.EEGClassifier.predict_trials"]], "prefixes_ (braindecode.classifier.eegclassifier attribute)": [[68, "braindecode.classifier.EEGClassifier.prefixes_"]], "bcicompetitionivdataset4 (class in braindecode.datasets)": [[69, "braindecode.datasets.BCICompetitionIVDataset4"]], "download() (braindecode.datasets.bcicompetitionivdataset4 static method)": [[69, "braindecode.datasets.BCICompetitionIVDataset4.download"]], "bnci2014001 (class in braindecode.datasets)": [[70, "braindecode.datasets.BNCI2014001"]], "baseconcatdataset (class in braindecode.datasets)": [[71, "braindecode.datasets.BaseConcatDataset"]], "get_metadata() (braindecode.datasets.baseconcatdataset method)": [[71, "braindecode.datasets.BaseConcatDataset.get_metadata"]], "save() (braindecode.datasets.baseconcatdataset method)": [[71, "braindecode.datasets.BaseConcatDataset.save"]], "set_description() (braindecode.datasets.baseconcatdataset method)": [[71, "braindecode.datasets.BaseConcatDataset.set_description"]], "split() (braindecode.datasets.baseconcatdataset method)": [[71, "braindecode.datasets.BaseConcatDataset.split"]], "basedataset (class in braindecode.datasets)": [[72, "braindecode.datasets.BaseDataset"]], "set_description() (braindecode.datasets.basedataset method)": [[72, "braindecode.datasets.BaseDataset.set_description"]], "hgd (class in braindecode.datasets)": [[73, "braindecode.datasets.HGD"]], "moabbdataset (class in braindecode.datasets)": [[74, "braindecode.datasets.MOABBDataset"]], "nmt (class in braindecode.datasets)": [[75, "braindecode.datasets.NMT"]], "sleepphysionet (class in braindecode.datasets)": [[76, "braindecode.datasets.SleepPhysionet"]], "tuh (class in braindecode.datasets)": [[77, "braindecode.datasets.TUH"]], "tuhabnormal (class in braindecode.datasets)": [[78, "braindecode.datasets.TUHAbnormal"]], "windowsdataset (class in braindecode.datasets)": [[79, "braindecode.datasets.WindowsDataset"]], "set_description() (braindecode.datasets.windowsdataset method)": [[79, "braindecode.datasets.WindowsDataset.set_description"]], "create_from_x_y() (in module braindecode.datasets)": [[80, "braindecode.datasets.create_from_X_y"]], "create_from_mne_epochs() (in module braindecode.datasets)": [[81, "braindecode.datasets.create_from_mne_epochs"]], "create_from_mne_raw() (in module braindecode.datasets)": [[82, "braindecode.datasets.create_from_mne_raw"]], "load_concat_dataset() (in module braindecode.datautil)": [[83, "braindecode.datautil.load_concat_dataset"]], "save_concat_dataset() (in module braindecode.datautil)": [[84, "braindecode.datautil.save_concat_dataset"]], "atcnet (class in braindecode.models)": [[85, "braindecode.models.ATCNet"]], "forward() (braindecode.models.atcnet method)": [[85, "braindecode.models.ATCNet.forward"]], "biot (class in braindecode.models)": [[86, "braindecode.models.BIOT"]], "forward() (braindecode.models.biot method)": [[86, "braindecode.models.BIOT.forward"]], "deep4net (class in braindecode.models)": [[87, "braindecode.models.Deep4Net"]], "deepsleepnet (class in braindecode.models)": [[88, "braindecode.models.DeepSleepNet"]], "forward() (braindecode.models.deepsleepnet method)": [[88, "braindecode.models.DeepSleepNet.forward"]], "eegconformer (class in braindecode.models)": [[89, "braindecode.models.EEGConformer"]], "forward() (braindecode.models.eegconformer method)": [[89, "braindecode.models.EEGConformer.forward"]], "get_fc_size() (braindecode.models.eegconformer method)": [[89, "braindecode.models.EEGConformer.get_fc_size"]], "eegitnet (class in braindecode.models)": [[90, "braindecode.models.EEGITNet"]], "eeginception (class in braindecode.models)": [[91, "braindecode.models.EEGInception"]], "eeginceptionerp (class in braindecode.models)": [[92, "braindecode.models.EEGInceptionERP"]], "eeginceptionmi (class in braindecode.models)": [[93, "braindecode.models.EEGInceptionMI"]], "forward() (braindecode.models.eeginceptionmi method)": [[93, "braindecode.models.EEGInceptionMI.forward"]], "eegmodulemixin (class in braindecode.models)": [[94, "braindecode.models.EEGModuleMixin"]], "get_output_shape() (braindecode.models.eegmodulemixin method)": [[94, "braindecode.models.EEGModuleMixin.get_output_shape"]], "get_torchinfo_statistics() (braindecode.models.eegmodulemixin method)": [[94, "braindecode.models.EEGModuleMixin.get_torchinfo_statistics"]], "load_state_dict() (braindecode.models.eegmodulemixin method)": [[94, "braindecode.models.EEGModuleMixin.load_state_dict"]], "to_dense_prediction_model() (braindecode.models.eegmodulemixin method)": [[94, "braindecode.models.EEGModuleMixin.to_dense_prediction_model"]], "eegnetv1 (class in braindecode.models)": [[95, "braindecode.models.EEGNetv1"]], "eegnetv4 (class in braindecode.models)": [[96, "braindecode.models.EEGNetv4"]], "eegresnet (class in braindecode.models)": [[97, "braindecode.models.EEGResNet"]], "eegsimpleconv (class in braindecode.models)": [[98, "braindecode.models.EEGSimpleConv"]], "forward() (braindecode.models.eegsimpleconv method)": [[98, "braindecode.models.EEGSimpleConv.forward"]], "hybridnet (class in braindecode.models)": [[99, "braindecode.models.HybridNet"]], "forward() (braindecode.models.hybridnet method)": [[99, "braindecode.models.HybridNet.forward"]], "labram (class in braindecode.models)": [[100, "braindecode.models.Labram"]], "fix_init_weight_and_init_embedding() (braindecode.models.labram method)": [[100, "braindecode.models.Labram.fix_init_weight_and_init_embedding"]], "forward() (braindecode.models.labram method)": [[100, "braindecode.models.Labram.forward"]], "forward_features() (braindecode.models.labram method)": [[100, "braindecode.models.Labram.forward_features"]], "get_classifier() (braindecode.models.labram method)": [[100, "braindecode.models.Labram.get_classifier"]], "get_num_layers() (braindecode.models.labram method)": [[100, "braindecode.models.Labram.get_num_layers"]], "reset_classifier() (braindecode.models.labram method)": [[100, "braindecode.models.Labram.reset_classifier"]], "shallowfbcspnet (class in braindecode.models)": [[101, "braindecode.models.ShallowFBCSPNet"]], "sleepstagerblanco2020 (class in braindecode.models)": [[102, "braindecode.models.SleepStagerBlanco2020"]], "forward() (braindecode.models.sleepstagerblanco2020 method)": [[102, "braindecode.models.SleepStagerBlanco2020.forward"]], "sleepstagerchambon2018 (class in braindecode.models)": [[103, "braindecode.models.SleepStagerChambon2018"]], "forward() (braindecode.models.sleepstagerchambon2018 method)": [[103, "braindecode.models.SleepStagerChambon2018.forward"]], "sleepstagereldele2021 (class in braindecode.models)": [[104, "braindecode.models.SleepStagerEldele2021"]], "forward() (braindecode.models.sleepstagereldele2021 method)": [[104, "braindecode.models.SleepStagerEldele2021.forward"]], "tcn (class in braindecode.models)": [[105, "braindecode.models.TCN"]], "forward() (braindecode.models.tcn method)": [[105, "braindecode.models.TCN.forward"]], "tidnet (class in braindecode.models)": [[106, "braindecode.models.TIDNet"]], "forward() (braindecode.models.tidnet method)": [[106, "braindecode.models.TIDNet.forward"]], "timedistributed (class in braindecode.models)": [[107, "braindecode.models.TimeDistributed"]], "forward() (braindecode.models.timedistributed method)": [[107, "braindecode.models.TimeDistributed.forward"]], "usleep (class in braindecode.models)": [[108, "braindecode.models.USleep"]], "forward() (braindecode.models.usleep method)": [[108, "braindecode.models.USleep.forward"]], "get_output_shape() (in module braindecode.models)": [[109, "braindecode.models.get_output_shape"]], "crop (class in braindecode.preprocessing)": [[110, "braindecode.preprocessing.Crop"]], "dropchannels (class in braindecode.preprocessing)": [[111, "braindecode.preprocessing.DropChannels"]], "filter (class in braindecode.preprocessing)": [[112, "braindecode.preprocessing.Filter"]], "pick (class in braindecode.preprocessing)": [[113, "braindecode.preprocessing.Pick"]], "preprocessor (class in braindecode.preprocessing)": [[114, "braindecode.preprocessing.Preprocessor"]], "apply() (braindecode.preprocessing.preprocessor method)": [[114, "braindecode.preprocessing.Preprocessor.apply"]], "resample (class in braindecode.preprocessing)": [[115, "braindecode.preprocessing.Resample"]], "seteegreference (class in braindecode.preprocessing)": [[116, "braindecode.preprocessing.SetEEGReference"]], "create_fixed_length_windows() (in module braindecode.preprocessing)": [[117, "braindecode.preprocessing.create_fixed_length_windows"]], "create_windows_from_events() (in module braindecode.preprocessing)": [[118, "braindecode.preprocessing.create_windows_from_events"]], "create_windows_from_target_channels() (in module braindecode.preprocessing)": [[119, "braindecode.preprocessing.create_windows_from_target_channels"]], "exponential_moving_demean() (in module braindecode.preprocessing)": [[120, "braindecode.preprocessing.exponential_moving_demean"]], "exponential_moving_standardize() (in module braindecode.preprocessing)": [[121, "braindecode.preprocessing.exponential_moving_standardize"]], "filterbank() (in module braindecode.preprocessing)": [[122, "braindecode.preprocessing.filterbank"]], "preprocess() (in module braindecode.preprocessing)": [[123, "braindecode.preprocessing.preprocess"]], "eegregressor (class in braindecode.regressor)": [[124, "braindecode.regressor.EEGRegressor"]], "_criteria (braindecode.regressor.eegregressor attribute)": [[124, "braindecode.regressor.EEGRegressor._criteria"]], "_modules (braindecode.regressor.eegregressor attribute)": [[124, "braindecode.regressor.EEGRegressor._modules"]], "_optimizers (braindecode.regressor.eegregressor attribute)": [[124, "braindecode.regressor.EEGRegressor._optimizers"]], "callbacks_ (braindecode.regressor.eegregressor attribute)": [[124, "braindecode.regressor.EEGRegressor.callbacks_"]], "criterion_ (braindecode.regressor.eegregressor attribute)": [[124, "braindecode.regressor.EEGRegressor.criterion_"]], "cuda_dependent_attributes_ (braindecode.regressor.eegregressor attribute)": [[124, "braindecode.regressor.EEGRegressor.cuda_dependent_attributes_"]], "fit() (braindecode.regressor.eegregressor method)": [[124, "braindecode.regressor.EEGRegressor.fit"]], "get_iterator() (braindecode.regressor.eegregressor method)": [[124, "braindecode.regressor.EEGRegressor.get_iterator"]], "initialized_ (braindecode.regressor.eegregressor attribute)": [[124, "braindecode.regressor.EEGRegressor.initialized_"]], "module_ (braindecode.regressor.eegregressor attribute)": [[124, "braindecode.regressor.EEGRegressor.module_"]], "predict_proba() (braindecode.regressor.eegregressor method)": [[124, "braindecode.regressor.EEGRegressor.predict_proba"]], "predict_trials() (braindecode.regressor.eegregressor method)": [[124, "braindecode.regressor.EEGRegressor.predict_trials"]], "prefixes_ (braindecode.regressor.eegregressor attribute)": [[124, "braindecode.regressor.EEGRegressor.prefixes_"]], "balancedsequencesampler (class in braindecode.samplers)": [[125, "braindecode.samplers.BalancedSequenceSampler"]], "sample_class() (braindecode.samplers.balancedsequencesampler method)": [[125, "braindecode.samplers.BalancedSequenceSampler.sample_class"]], "recordingsampler (class in braindecode.samplers)": [[126, "braindecode.samplers.RecordingSampler"]], "info (braindecode.samplers.recordingsampler attribute)": [[126, "braindecode.samplers.RecordingSampler.info"]], "n_recordings (braindecode.samplers.recordingsampler attribute)": [[126, "braindecode.samplers.RecordingSampler.n_recordings"]], "sample_recording() (braindecode.samplers.recordingsampler method)": [[126, "braindecode.samplers.RecordingSampler.sample_recording"]], "sample_window() (braindecode.samplers.recordingsampler method)": [[126, "braindecode.samplers.RecordingSampler.sample_window"]], "relativepositioningsampler (class in braindecode.samplers)": [[127, "braindecode.samplers.RelativePositioningSampler"]], "presample() (braindecode.samplers.relativepositioningsampler method)": [[127, "braindecode.samplers.RelativePositioningSampler.presample"]], "sequencesampler (class in braindecode.samplers)": [[128, "braindecode.samplers.SequenceSampler"]], "file_ids (braindecode.samplers.sequencesampler attribute)": [[128, "braindecode.samplers.SequenceSampler.file_ids"]], "info (braindecode.samplers.sequencesampler attribute)": [[128, "braindecode.samplers.SequenceSampler.info"]], "croppedloss (class in braindecode.training)": [[129, "braindecode.training.CroppedLoss"]], "forward() (braindecode.training.croppedloss method)": [[129, "braindecode.training.CroppedLoss.forward"]], "croppedtimeseriesepochscoring (class in braindecode.training)": [[130, "braindecode.training.CroppedTimeSeriesEpochScoring"]], "on_epoch_end() (braindecode.training.croppedtimeseriesepochscoring method)": [[130, "braindecode.training.CroppedTimeSeriesEpochScoring.on_epoch_end"]], "croppedtrialepochscoring (class in braindecode.training)": [[131, "braindecode.training.CroppedTrialEpochScoring"]], "on_batch_end() (braindecode.training.croppedtrialepochscoring method)": [[131, "braindecode.training.CroppedTrialEpochScoring.on_batch_end"]], "on_epoch_end() (braindecode.training.croppedtrialepochscoring method)": [[131, "braindecode.training.CroppedTrialEpochScoring.on_epoch_end"]], "postepochtrainscoring (class in braindecode.training)": [[132, "braindecode.training.PostEpochTrainScoring"]], "on_epoch_end() (braindecode.training.postepochtrainscoring method)": [[132, "braindecode.training.PostEpochTrainScoring.on_epoch_end"]], "timeseriesloss (class in braindecode.training)": [[133, "braindecode.training.TimeSeriesLoss"]], "forward() (braindecode.training.timeseriesloss method)": [[133, "braindecode.training.TimeSeriesLoss.forward"]], "mixup_criterion() (in module braindecode.training)": [[134, "braindecode.training.mixup_criterion"]], "predict_trials() (in module braindecode.training)": [[135, "braindecode.training.predict_trials"]], "trial_preds_from_window_preds() (in module braindecode.training)": [[136, "braindecode.training.trial_preds_from_window_preds"]], "set_random_seeds() (in module braindecode.util)": [[137, "braindecode.util.set_random_seeds"]], "compute_amplitude_gradients() (in module braindecode.visualization)": [[138, "braindecode.visualization.compute_amplitude_gradients"]], "plot_confusion_matrix() (in module braindecode.visualization)": [[139, "braindecode.visualization.plot_confusion_matrix"]]}})