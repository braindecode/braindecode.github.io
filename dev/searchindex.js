Search.setIndex({"docnames": ["api", "auto_examples/advanced_training/index", "auto_examples/advanced_training/plot_bcic_iv_4_ecog_cropped", "auto_examples/advanced_training/plot_data_augmentation", "auto_examples/advanced_training/plot_data_augmentation_search", "auto_examples/advanced_training/plot_relative_positioning", "auto_examples/advanced_training/sg_execution_times", "auto_examples/applied_examples/index", "auto_examples/applied_examples/plot_bcic_iv_4_ecog_trial", "auto_examples/applied_examples/plot_sleep_staging_chambon2018", "auto_examples/applied_examples/plot_sleep_staging_eldele2021", "auto_examples/applied_examples/plot_sleep_staging_usleep", "auto_examples/applied_examples/plot_tuh_eeg_corpus", "auto_examples/applied_examples/sg_execution_times", "auto_examples/datasets_io/benchmark_lazy_eager_loading", "auto_examples/datasets_io/index", "auto_examples/datasets_io/plot_benchmark_preprocessing", "auto_examples/datasets_io/plot_custom_dataset_example", "auto_examples/datasets_io/plot_load_save_datasets", "auto_examples/datasets_io/plot_mne_dataset_example", "auto_examples/datasets_io/plot_moabb_dataset_example", "auto_examples/datasets_io/plot_split_dataset", "auto_examples/datasets_io/plot_tuh_discrete_multitarget", "auto_examples/datasets_io/sg_execution_times", "auto_examples/index", "auto_examples/model_building/index", "auto_examples/model_building/plot_basic_training_epochs", "auto_examples/model_building/plot_bcic_iv_2a_moabb_cropped", "auto_examples/model_building/plot_bcic_iv_2a_moabb_trial", "auto_examples/model_building/plot_how_train_test_and_tune", "auto_examples/model_building/plot_hyperparameter_tuning_with_scikit-learn", "auto_examples/model_building/plot_regression", "auto_examples/model_building/plot_train_in_pure_pytorch_and_pytorch_lightning", "auto_examples/model_building/sg_execution_times", "auto_examples/sg_execution_times", "cite", "generated/braindecode.augmentation.AugmentedDataLoader", "generated/braindecode.augmentation.BandstopFilter", "generated/braindecode.augmentation.ChannelsDropout", "generated/braindecode.augmentation.ChannelsShuffle", "generated/braindecode.augmentation.ChannelsSymmetry", "generated/braindecode.augmentation.Compose", "generated/braindecode.augmentation.FTSurrogate", "generated/braindecode.augmentation.FrequencyShift", "generated/braindecode.augmentation.GaussianNoise", "generated/braindecode.augmentation.IdentityTransform", "generated/braindecode.augmentation.Mixup", "generated/braindecode.augmentation.SensorsRotation", "generated/braindecode.augmentation.SensorsXRotation", "generated/braindecode.augmentation.SensorsYRotation", "generated/braindecode.augmentation.SensorsZRotation", "generated/braindecode.augmentation.SignFlip", "generated/braindecode.augmentation.SmoothTimeMask", "generated/braindecode.augmentation.TimeReverse", "generated/braindecode.augmentation.Transform", "generated/braindecode.augmentation.functional.bandstop_filter", "generated/braindecode.augmentation.functional.channels_dropout", "generated/braindecode.augmentation.functional.channels_permute", "generated/braindecode.augmentation.functional.channels_shuffle", "generated/braindecode.augmentation.functional.frequency_shift", "generated/braindecode.augmentation.functional.ft_surrogate", "generated/braindecode.augmentation.functional.gaussian_noise", "generated/braindecode.augmentation.functional.identity", "generated/braindecode.augmentation.functional.mixup", "generated/braindecode.augmentation.functional.sensors_rotation", "generated/braindecode.augmentation.functional.sign_flip", "generated/braindecode.augmentation.functional.smooth_time_mask", "generated/braindecode.augmentation.functional.time_reverse", "generated/braindecode.classifier.EEGClassifier", "generated/braindecode.datasets.BCICompetitionIVDataset4", "generated/braindecode.datasets.BNCI2014001", "generated/braindecode.datasets.BaseConcatDataset", "generated/braindecode.datasets.BaseDataset", "generated/braindecode.datasets.HGD", "generated/braindecode.datasets.MOABBDataset", "generated/braindecode.datasets.SleepPhysionet", "generated/braindecode.datasets.TUH", "generated/braindecode.datasets.TUHAbnormal", "generated/braindecode.datasets.WindowsDataset", "generated/braindecode.datasets.create_from_X_y", "generated/braindecode.datasets.create_from_mne_epochs", "generated/braindecode.datasets.create_from_mne_raw", "generated/braindecode.datautil.load_concat_dataset", "generated/braindecode.datautil.save_concat_dataset", "generated/braindecode.models.ATCNet", "generated/braindecode.models.BIOT", "generated/braindecode.models.Deep4Net", "generated/braindecode.models.DeepSleepNet", "generated/braindecode.models.EEGConformer", "generated/braindecode.models.EEGITNet", "generated/braindecode.models.EEGInception", "generated/braindecode.models.EEGInceptionERP", "generated/braindecode.models.EEGInceptionMI", "generated/braindecode.models.EEGModuleMixin", "generated/braindecode.models.EEGNetv1", "generated/braindecode.models.EEGNetv4", "generated/braindecode.models.EEGResNet", "generated/braindecode.models.HybridNet", "generated/braindecode.models.ShallowFBCSPNet", "generated/braindecode.models.SleepStagerBlanco2020", "generated/braindecode.models.SleepStagerChambon2018", "generated/braindecode.models.SleepStagerEldele2021", "generated/braindecode.models.TCN", "generated/braindecode.models.TIDNet", "generated/braindecode.models.TimeDistributed", "generated/braindecode.models.USleep", "generated/braindecode.models.get_output_shape", "generated/braindecode.preprocessing.Crop", "generated/braindecode.preprocessing.DropChannels", "generated/braindecode.preprocessing.Filter", "generated/braindecode.preprocessing.Pick", "generated/braindecode.preprocessing.Preprocessor", "generated/braindecode.preprocessing.Resample", "generated/braindecode.preprocessing.SetEEGReference", "generated/braindecode.preprocessing.create_fixed_length_windows", "generated/braindecode.preprocessing.create_windows_from_events", "generated/braindecode.preprocessing.create_windows_from_target_channels", "generated/braindecode.preprocessing.exponential_moving_demean", "generated/braindecode.preprocessing.exponential_moving_standardize", "generated/braindecode.preprocessing.filterbank", "generated/braindecode.preprocessing.preprocess", "generated/braindecode.regressor.EEGRegressor", "generated/braindecode.samplers.BalancedSequenceSampler", "generated/braindecode.samplers.RecordingSampler", "generated/braindecode.samplers.RelativePositioningSampler", "generated/braindecode.samplers.SequenceSampler", "generated/braindecode.training.CroppedLoss", "generated/braindecode.training.CroppedTimeSeriesEpochScoring", "generated/braindecode.training.CroppedTrialEpochScoring", "generated/braindecode.training.PostEpochTrainScoring", "generated/braindecode.training.TimeSeriesLoss", "generated/braindecode.training.mixup_criterion", "generated/braindecode.training.predict_trials", "generated/braindecode.training.trial_preds_from_window_preds", "generated/braindecode.util.set_random_seeds", "generated/braindecode.visualization.compute_amplitude_gradients", "generated/braindecode.visualization.plot_confusion_matrix", "help", "index", "install/install", "install/install_pip", "install/install_source", "sg_execution_times", "whats_new"], "filenames": ["api.rst", "auto_examples/advanced_training/index.rst", "auto_examples/advanced_training/plot_bcic_iv_4_ecog_cropped.rst", "auto_examples/advanced_training/plot_data_augmentation.rst", "auto_examples/advanced_training/plot_data_augmentation_search.rst", "auto_examples/advanced_training/plot_relative_positioning.rst", "auto_examples/advanced_training/sg_execution_times.rst", "auto_examples/applied_examples/index.rst", "auto_examples/applied_examples/plot_bcic_iv_4_ecog_trial.rst", "auto_examples/applied_examples/plot_sleep_staging_chambon2018.rst", "auto_examples/applied_examples/plot_sleep_staging_eldele2021.rst", "auto_examples/applied_examples/plot_sleep_staging_usleep.rst", "auto_examples/applied_examples/plot_tuh_eeg_corpus.rst", "auto_examples/applied_examples/sg_execution_times.rst", "auto_examples/datasets_io/benchmark_lazy_eager_loading.rst", "auto_examples/datasets_io/index.rst", "auto_examples/datasets_io/plot_benchmark_preprocessing.rst", "auto_examples/datasets_io/plot_custom_dataset_example.rst", "auto_examples/datasets_io/plot_load_save_datasets.rst", "auto_examples/datasets_io/plot_mne_dataset_example.rst", "auto_examples/datasets_io/plot_moabb_dataset_example.rst", "auto_examples/datasets_io/plot_split_dataset.rst", "auto_examples/datasets_io/plot_tuh_discrete_multitarget.rst", "auto_examples/datasets_io/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/model_building/index.rst", "auto_examples/model_building/plot_basic_training_epochs.rst", "auto_examples/model_building/plot_bcic_iv_2a_moabb_cropped.rst", "auto_examples/model_building/plot_bcic_iv_2a_moabb_trial.rst", "auto_examples/model_building/plot_how_train_test_and_tune.rst", "auto_examples/model_building/plot_hyperparameter_tuning_with_scikit-learn.rst", "auto_examples/model_building/plot_regression.rst", "auto_examples/model_building/plot_train_in_pure_pytorch_and_pytorch_lightning.rst", "auto_examples/model_building/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "cite.rst", "generated/braindecode.augmentation.AugmentedDataLoader.rst", "generated/braindecode.augmentation.BandstopFilter.rst", "generated/braindecode.augmentation.ChannelsDropout.rst", "generated/braindecode.augmentation.ChannelsShuffle.rst", "generated/braindecode.augmentation.ChannelsSymmetry.rst", "generated/braindecode.augmentation.Compose.rst", "generated/braindecode.augmentation.FTSurrogate.rst", "generated/braindecode.augmentation.FrequencyShift.rst", "generated/braindecode.augmentation.GaussianNoise.rst", "generated/braindecode.augmentation.IdentityTransform.rst", "generated/braindecode.augmentation.Mixup.rst", "generated/braindecode.augmentation.SensorsRotation.rst", "generated/braindecode.augmentation.SensorsXRotation.rst", "generated/braindecode.augmentation.SensorsYRotation.rst", "generated/braindecode.augmentation.SensorsZRotation.rst", "generated/braindecode.augmentation.SignFlip.rst", "generated/braindecode.augmentation.SmoothTimeMask.rst", "generated/braindecode.augmentation.TimeReverse.rst", "generated/braindecode.augmentation.Transform.rst", "generated/braindecode.augmentation.functional.bandstop_filter.rst", "generated/braindecode.augmentation.functional.channels_dropout.rst", "generated/braindecode.augmentation.functional.channels_permute.rst", "generated/braindecode.augmentation.functional.channels_shuffle.rst", "generated/braindecode.augmentation.functional.frequency_shift.rst", "generated/braindecode.augmentation.functional.ft_surrogate.rst", "generated/braindecode.augmentation.functional.gaussian_noise.rst", "generated/braindecode.augmentation.functional.identity.rst", "generated/braindecode.augmentation.functional.mixup.rst", "generated/braindecode.augmentation.functional.sensors_rotation.rst", "generated/braindecode.augmentation.functional.sign_flip.rst", "generated/braindecode.augmentation.functional.smooth_time_mask.rst", "generated/braindecode.augmentation.functional.time_reverse.rst", "generated/braindecode.classifier.EEGClassifier.rst", "generated/braindecode.datasets.BCICompetitionIVDataset4.rst", "generated/braindecode.datasets.BNCI2014001.rst", "generated/braindecode.datasets.BaseConcatDataset.rst", "generated/braindecode.datasets.BaseDataset.rst", "generated/braindecode.datasets.HGD.rst", "generated/braindecode.datasets.MOABBDataset.rst", "generated/braindecode.datasets.SleepPhysionet.rst", "generated/braindecode.datasets.TUH.rst", "generated/braindecode.datasets.TUHAbnormal.rst", "generated/braindecode.datasets.WindowsDataset.rst", "generated/braindecode.datasets.create_from_X_y.rst", "generated/braindecode.datasets.create_from_mne_epochs.rst", "generated/braindecode.datasets.create_from_mne_raw.rst", "generated/braindecode.datautil.load_concat_dataset.rst", "generated/braindecode.datautil.save_concat_dataset.rst", "generated/braindecode.models.ATCNet.rst", "generated/braindecode.models.BIOT.rst", "generated/braindecode.models.Deep4Net.rst", "generated/braindecode.models.DeepSleepNet.rst", "generated/braindecode.models.EEGConformer.rst", "generated/braindecode.models.EEGITNet.rst", "generated/braindecode.models.EEGInception.rst", "generated/braindecode.models.EEGInceptionERP.rst", "generated/braindecode.models.EEGInceptionMI.rst", "generated/braindecode.models.EEGModuleMixin.rst", "generated/braindecode.models.EEGNetv1.rst", "generated/braindecode.models.EEGNetv4.rst", "generated/braindecode.models.EEGResNet.rst", "generated/braindecode.models.HybridNet.rst", "generated/braindecode.models.ShallowFBCSPNet.rst", "generated/braindecode.models.SleepStagerBlanco2020.rst", "generated/braindecode.models.SleepStagerChambon2018.rst", "generated/braindecode.models.SleepStagerEldele2021.rst", "generated/braindecode.models.TCN.rst", "generated/braindecode.models.TIDNet.rst", "generated/braindecode.models.TimeDistributed.rst", "generated/braindecode.models.USleep.rst", "generated/braindecode.models.get_output_shape.rst", "generated/braindecode.preprocessing.Crop.rst", "generated/braindecode.preprocessing.DropChannels.rst", "generated/braindecode.preprocessing.Filter.rst", "generated/braindecode.preprocessing.Pick.rst", "generated/braindecode.preprocessing.Preprocessor.rst", "generated/braindecode.preprocessing.Resample.rst", "generated/braindecode.preprocessing.SetEEGReference.rst", "generated/braindecode.preprocessing.create_fixed_length_windows.rst", "generated/braindecode.preprocessing.create_windows_from_events.rst", "generated/braindecode.preprocessing.create_windows_from_target_channels.rst", "generated/braindecode.preprocessing.exponential_moving_demean.rst", "generated/braindecode.preprocessing.exponential_moving_standardize.rst", "generated/braindecode.preprocessing.filterbank.rst", "generated/braindecode.preprocessing.preprocess.rst", "generated/braindecode.regressor.EEGRegressor.rst", "generated/braindecode.samplers.BalancedSequenceSampler.rst", "generated/braindecode.samplers.RecordingSampler.rst", "generated/braindecode.samplers.RelativePositioningSampler.rst", "generated/braindecode.samplers.SequenceSampler.rst", "generated/braindecode.training.CroppedLoss.rst", "generated/braindecode.training.CroppedTimeSeriesEpochScoring.rst", "generated/braindecode.training.CroppedTrialEpochScoring.rst", "generated/braindecode.training.PostEpochTrainScoring.rst", "generated/braindecode.training.TimeSeriesLoss.rst", "generated/braindecode.training.mixup_criterion.rst", "generated/braindecode.training.predict_trials.rst", "generated/braindecode.training.trial_preds_from_window_preds.rst", "generated/braindecode.util.set_random_seeds.rst", "generated/braindecode.visualization.compute_amplitude_gradients.rst", "generated/braindecode.visualization.plot_confusion_matrix.rst", "help.rst", "index.rst", "install/install.rst", "install/install_pip.rst", "install/install_source.rst", "sg_execution_times.rst", "whats_new.rst"], "titles": ["API Reference", "Advanced neural network training strategies", "Fingers flexion cropped decoding on BCIC IV 4 ECoG Dataset", "Data Augmentation on BCIC IV 2a Dataset", "Searching the best data augmentation on BCIC IV 2a Dataset", "Self-supervised learning on EEG with relative positioning", "Computation times", "Applied examples on real-world datasets", "Fingers flexion decoding on BCIC IV 4 ECoG Dataset", "Sleep staging on the Sleep Physionet dataset using Chambon2018 network", "Sleep staging on the Sleep Physionet dataset using Eldele2021", "Sleep staging on the Sleep Physionet dataset using U-Sleep network", "Process a big data EEG resource (TUH EEG Corpus)", "Computation times", "Benchmarking eager and lazy loading", "Loading and organizing data", "Benchmarking preprocessing with parallelization and serialization", "Custom Dataset Example", "Load and save dataset example", "MNE Dataset Example", "MOABB Dataset Example", "Split Dataset Example", "Multiple discrete targets with the TUH EEG Corpus", "Computation times", "Examples", "Basic model building and training", "Simple training on MNE epochs", "Cropped Decoding on BCIC IV 2a Dataset", "Basic Brain Decoding on EEG Data", "How to train, test and tune your model?", "Hyperparameter tuning with scikit-learn", "Convolutional neural network regression model on fake data.", "Training a Braindecode model in PyTorch", "Computation times", "Computation times", "How to cite Braindecode", "braindecode.augmentation.AugmentedDataLoader", "braindecode.augmentation.BandstopFilter", "braindecode.augmentation.ChannelsDropout", "braindecode.augmentation.ChannelsShuffle", "braindecode.augmentation.ChannelsSymmetry", "braindecode.augmentation.Compose", "braindecode.augmentation.FTSurrogate", "braindecode.augmentation.FrequencyShift", "braindecode.augmentation.GaussianNoise", "braindecode.augmentation.IdentityTransform", "braindecode.augmentation.Mixup", "braindecode.augmentation.SensorsRotation", "braindecode.augmentation.SensorsXRotation", "braindecode.augmentation.SensorsYRotation", "braindecode.augmentation.SensorsZRotation", "braindecode.augmentation.SignFlip", "braindecode.augmentation.SmoothTimeMask", "braindecode.augmentation.TimeReverse", "braindecode.augmentation.Transform", "braindecode.augmentation.functional.bandstop_filter", "braindecode.augmentation.functional.channels_dropout", "braindecode.augmentation.functional.channels_permute", "braindecode.augmentation.functional.channels_shuffle", "braindecode.augmentation.functional.frequency_shift", "braindecode.augmentation.functional.ft_surrogate", "braindecode.augmentation.functional.gaussian_noise", "braindecode.augmentation.functional.identity", "braindecode.augmentation.functional.mixup", "braindecode.augmentation.functional.sensors_rotation", "braindecode.augmentation.functional.sign_flip", "braindecode.augmentation.functional.smooth_time_mask", "braindecode.augmentation.functional.time_reverse", "braindecode.classifier.EEGClassifier", "braindecode.datasets.BCICompetitionIVDataset4", "braindecode.datasets.BNCI2014001", "braindecode.datasets.BaseConcatDataset", "braindecode.datasets.BaseDataset", "braindecode.datasets.HGD", "braindecode.datasets.MOABBDataset", "braindecode.datasets.SleepPhysionet", "braindecode.datasets.TUH", "braindecode.datasets.TUHAbnormal", "braindecode.datasets.WindowsDataset", "braindecode.datasets.create_from_X_y", "braindecode.datasets.create_from_mne_epochs", "braindecode.datasets.create_from_mne_raw", "braindecode.datautil.load_concat_dataset", "braindecode.datautil.save_concat_dataset", "braindecode.models.ATCNet", "braindecode.models.BIOT", "braindecode.models.Deep4Net", "braindecode.models.DeepSleepNet", "braindecode.models.EEGConformer", "braindecode.models.EEGITNet", "braindecode.models.EEGInception", "braindecode.models.EEGInceptionERP", "braindecode.models.EEGInceptionMI", "braindecode.models.EEGModuleMixin", "braindecode.models.EEGNetv1", "braindecode.models.EEGNetv4", "braindecode.models.EEGResNet", "braindecode.models.HybridNet", "braindecode.models.ShallowFBCSPNet", "braindecode.models.SleepStagerBlanco2020", "braindecode.models.SleepStagerChambon2018", "braindecode.models.SleepStagerEldele2021", "braindecode.models.TCN", "braindecode.models.TIDNet", "braindecode.models.TimeDistributed", "braindecode.models.USleep", "braindecode.models.get_output_shape", "braindecode.preprocessing.Crop", "braindecode.preprocessing.DropChannels", "braindecode.preprocessing.Filter", "braindecode.preprocessing.Pick", "braindecode.preprocessing.Preprocessor", "braindecode.preprocessing.Resample", "braindecode.preprocessing.SetEEGReference", "braindecode.preprocessing.create_fixed_length_windows", "braindecode.preprocessing.create_windows_from_events", "braindecode.preprocessing.create_windows_from_target_channels", "braindecode.preprocessing.exponential_moving_demean", "braindecode.preprocessing.exponential_moving_standardize", "braindecode.preprocessing.filterbank", "braindecode.preprocessing.preprocess", "braindecode.regressor.EEGRegressor", "braindecode.samplers.BalancedSequenceSampler", "braindecode.samplers.RecordingSampler", "braindecode.samplers.RelativePositioningSampler", "braindecode.samplers.SequenceSampler", "braindecode.training.CroppedLoss", "braindecode.training.CroppedTimeSeriesEpochScoring", "braindecode.training.CroppedTrialEpochScoring", "braindecode.training.PostEpochTrainScoring", "braindecode.training.TimeSeriesLoss", "braindecode.training.mixup_criterion", "braindecode.training.predict_trials", "braindecode.training.trial_preds_from_window_preds", "braindecode.util.set_random_seeds", "braindecode.visualization.compute_amplitude_gradients", "braindecode.visualization.plot_confusion_matrix", "Frequently Asked Questions (FAQ)", "Braindecode", "Installation", "Installing from PyPI", "Installing from sources", "Computation times", "What\u2019s new"], "terms": {"thi": [0, 2, 8, 9, 10, 11, 14, 16, 17, 18, 19, 20, 22, 31, 48, 49, 50, 68, 69, 70, 71, 73, 75, 76, 77, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 109, 113, 115, 117, 118, 121, 123, 129, 134, 137, 141, 143], "i": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 26, 27, 28, 30, 31, 35, 37, 41, 42, 43, 46, 47, 52, 54, 55, 59, 60, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 109, 111, 112, 113, 114, 115, 120, 121, 124, 129, 133, 134, 138, 139, 140, 143], "class": [0, 3, 4, 5, 9, 10, 11, 12, 14, 18, 20, 21, 26, 27, 28, 29, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 60, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 136, 143], "camelcas": 0, "name": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 20, 21, 22, 26, 29, 30, 32, 40, 68, 70, 71, 72, 73, 74, 79, 82, 108, 109, 110, 111, 113, 121, 127, 128, 129, 143], "function": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 20, 22, 26, 27, 28, 30, 31, 32, 35, 42, 54, 68, 71, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 105, 107, 111, 113, 115, 121, 127, 128, 129, 134, 143], "underscore_cas": 0, "braindecod": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 139, 140, 142, 143], "base": [0, 2, 3, 4, 5, 8, 9, 10, 12, 16, 18, 20, 21, 26, 27, 28, 29, 30, 31, 32, 36, 44, 46, 61, 63, 68, 70, 71, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 101, 107, 109, 110, 114, 115, 121, 123, 131, 143], "datautil": [0, 5, 18, 78, 143], "exampl": [1, 2, 6, 8, 9, 10, 11, 13, 14, 15, 16, 22, 23, 25, 31, 33, 34, 37, 39, 40, 44, 45, 46, 47, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 113, 137, 142, 143], "explain": [1, 4, 24, 27, 89], "more": [1, 2, 3, 4, 5, 8, 9, 10, 11, 16, 18, 20, 21, 22, 24, 26, 27, 28, 29, 30, 68, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 112, 113, 120, 121, 134, 141, 143], "topic": [1, 24, 35], "finger": [1, 6, 7, 13, 24, 69, 71, 73, 93, 98, 106, 111, 114, 116, 118, 120, 127, 128, 130, 134, 142, 143], "flexion": [1, 6, 7, 13, 24, 69, 71, 93, 98, 106, 111, 114, 116, 118, 120, 127, 128, 130, 134, 142, 143], "crop": [1, 6, 8, 10, 11, 12, 16, 20, 24, 25, 29, 30, 31, 32, 33, 68, 69, 71, 74, 75, 78, 93, 98, 106, 111, 114, 115, 118, 120, 121, 126, 127, 128, 130, 132, 134, 136, 142, 143], "decod": [1, 3, 4, 6, 7, 11, 13, 20, 22, 24, 25, 26, 29, 30, 31, 32, 33, 35, 68, 69, 71, 74, 79, 86, 88, 93, 96, 97, 98, 105, 106, 111, 114, 115, 116, 118, 120, 121, 126, 127, 128, 130, 132, 134, 136, 138, 142, 143], "bcic": [1, 6, 7, 13, 20, 24, 25, 29, 32, 33, 36, 38, 41, 42, 43, 51, 52, 54, 69, 71, 74, 93, 98, 106, 111, 114, 115, 116, 118, 120, 126, 127, 128, 130, 134, 136, 142, 143], "iv": [1, 6, 7, 13, 20, 21, 24, 25, 26, 28, 29, 30, 32, 33, 36, 38, 41, 42, 43, 51, 52, 54, 69, 71, 74, 84, 92, 93, 98, 106, 111, 114, 115, 116, 118, 120, 126, 127, 128, 130, 134, 136, 142, 143], "4": [1, 3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 69, 70, 71, 73, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 98, 100, 103, 105, 106, 111, 114, 116, 118, 119, 120, 122, 123, 127, 128, 130, 134, 142], "ecog": [1, 6, 7, 13, 24, 69, 71, 93, 98, 106, 111, 113, 114, 116, 118, 120, 127, 128, 130, 134, 138, 142, 143], "dataset": [1, 6, 13, 14, 15, 16, 23, 25, 26, 33, 36, 38, 41, 42, 43, 51, 52, 54, 68, 82, 84, 85, 92, 93, 98, 100, 101, 104, 105, 106, 111, 114, 115, 116, 118, 120, 121, 123, 125, 126, 127, 128, 130, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143], "data": [1, 2, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 21, 25, 30, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 58, 61, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 82, 85, 86, 88, 93, 98, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 126, 131, 134, 136, 137, 138, 142, 143], "augment": [1, 6, 24, 71, 74, 88, 93, 98, 111, 115, 118, 120, 134, 138, 142, 143], "2a": [1, 6, 20, 21, 24, 25, 26, 28, 29, 30, 32, 33, 36, 38, 41, 42, 43, 51, 52, 54, 71, 74, 84, 92, 93, 98, 111, 115, 118, 120, 126, 134, 136, 142, 143], "search": [1, 6, 24, 29, 30, 36, 38, 42, 52, 54, 68, 71, 74, 93, 98, 111, 115, 118, 120, 121, 134, 137, 142, 143], "best": [1, 6, 24, 32, 36, 38, 42, 52, 54, 71, 74, 93, 98, 111, 115, 118, 120, 134, 142], "self": [1, 4, 6, 11, 24, 32, 68, 71, 75, 84, 88, 93, 100, 111, 115, 120, 121, 123, 124, 125, 134, 137, 142, 143], "supervis": [1, 4, 6, 24, 29, 32, 71, 75, 93, 100, 111, 115, 120, 123, 124, 134, 142, 143], "learn": [1, 2, 3, 4, 6, 8, 9, 10, 11, 24, 25, 27, 28, 29, 31, 32, 33, 35, 37, 38, 39, 40, 44, 46, 52, 55, 56, 57, 58, 61, 63, 66, 68, 71, 74, 75, 85, 86, 90, 91, 93, 96, 97, 98, 100, 101, 111, 115, 118, 120, 121, 123, 124, 134, 136, 138, 140, 142, 143], "eeg": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 17, 20, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 73, 74, 75, 76, 77, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 109, 110, 111, 113, 114, 115, 118, 120, 123, 124, 131, 134, 136, 138, 142, 143], "rel": [1, 6, 24, 29, 30, 71, 75, 93, 100, 111, 115, 120, 123, 124, 134, 142], "posit": [1, 6, 24, 27, 37, 47, 48, 49, 50, 52, 55, 64, 66, 71, 75, 93, 100, 111, 115, 120, 123, 124, 133, 134, 142], "go": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 107], "end": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 35, 68, 92, 107, 112, 114, 115, 121, 127, 128, 129, 143], "download": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 69, 76, 77, 140], "full": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 134], "code": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 84, 85, 88, 89, 90, 91, 101, 102, 103, 137, 139, 141, 143], "tutori": [2, 3, 4, 5, 8, 9, 10, 11, 22, 24, 26, 27, 28, 29, 30, 32, 141, 143], "show": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 21, 26, 28, 29, 30, 31, 32, 73, 93, 143], "you": [2, 3, 4, 5, 8, 9, 11, 12, 16, 17, 18, 19, 21, 22, 24, 27, 28, 29, 32, 35, 68, 121, 129, 137, 139, 140, 141], "how": [2, 3, 4, 5, 8, 9, 10, 11, 12, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 33, 68, 71, 74, 93, 98, 107, 111, 113, 115, 118, 120, 121, 134, 142, 143], "deep": [2, 3, 4, 5, 8, 9, 10, 11, 14, 26, 27, 28, 29, 30, 31, 32, 35, 44, 61, 86, 90, 91, 96, 97, 98, 100, 101, 103, 136, 138, 140], "bci": [2, 4, 8, 21, 26, 27, 28, 29, 30, 42, 60, 69, 70, 84, 92, 103], "competit": [2, 4, 8, 11, 14, 21, 26, 27, 28, 29, 30, 69, 70, 90, 91], "us": [2, 3, 4, 7, 8, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 35, 37, 39, 40, 44, 46, 47, 48, 49, 50, 53, 56, 58, 60, 61, 64, 68, 70, 73, 78, 84, 88, 89, 90, 91, 92, 94, 96, 97, 99, 102, 103, 107, 109, 110, 112, 113, 121, 129, 132, 137, 140, 141, 142, 143], "mode": [2, 24, 32, 68, 86, 109, 112, 121, 129, 141, 143], "For": [2, 4, 5, 8, 14, 26, 27, 28, 29, 32, 68, 105, 109, 113, 121, 123, 129, 131, 134, 138, 139, 140, 141], "we": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 24, 26, 27, 28, 29, 30, 32, 35, 73, 85, 88, 121, 134, 137, 140, 141], "predict": [2, 4, 5, 8, 9, 10, 11, 27, 28, 31, 68, 72, 93, 104, 121, 126, 127, 128, 129, 130, 131, 132, 133, 143], "5": [2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 68, 70, 84, 86, 87, 88, 90, 91, 92, 98, 99, 100, 101, 102, 105, 121, 142], "regress": [2, 5, 8, 24, 25, 30, 33, 71, 72, 86, 93, 98, 106, 114, 121, 126, 134, 142, 143], "target": [2, 4, 5, 8, 9, 10, 15, 17, 18, 20, 23, 24, 27, 28, 29, 31, 46, 54, 63, 68, 69, 71, 72, 76, 78, 79, 81, 82, 114, 115, 121, 122, 123, 126, 127, 130, 131, 132, 136, 142, 143], "correspond": [2, 5, 8, 12, 21, 29, 30, 31, 37, 40, 68, 69, 70, 71, 78, 79, 81, 113, 115, 120, 121, 122, 130], "each": [2, 4, 8, 9, 10, 11, 12, 14, 16, 17, 19, 21, 22, 26, 29, 30, 31, 36, 37, 38, 42, 47, 51, 53, 55, 56, 60, 64, 65, 67, 68, 69, 70, 71, 73, 75, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 109, 112, 114, 115, 121, 123, 125, 127, 128, 129, 133], "The": [2, 3, 4, 5, 8, 10, 11, 12, 14, 16, 18, 20, 21, 26, 27, 29, 30, 31, 32, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 52, 59, 68, 70, 72, 73, 78, 84, 85, 88, 90, 91, 92, 94, 95, 96, 97, 99, 101, 105, 107, 108, 109, 110, 112, 113, 119, 121, 131, 132, 136, 139, 141], "were": [2, 8, 9, 11, 14, 19, 26, 30, 70, 71, 73, 88, 99, 109, 143], "record": [2, 4, 8, 9, 10, 11, 14, 16, 21, 22, 26, 31, 69, 70, 73, 75, 76, 77, 81, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 113, 114, 115, 122, 123, 124, 143], "time": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 53, 67, 68, 69, 71, 75, 78, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 109, 117, 118, 121, 122, 126, 127, 130, 133, 143], "seri": [2, 4, 5, 8, 9, 10, 29, 30, 31, 68, 72, 78, 81, 99, 100, 121, 123, 127, 143], "25": [2, 5, 8, 9, 11, 12, 13, 14, 16, 29, 30, 31, 32, 70, 84, 86, 87, 88, 90, 91, 94, 95, 98, 100, 109, 142], "hz": [2, 3, 4, 5, 8, 9, 11, 16, 27, 29, 30, 31, 37, 43, 55, 59, 70, 84, 88, 92, 105, 109], "so": [2, 5, 8, 9, 10, 11, 14, 16, 18, 26, 27, 28, 29, 30, 32, 37, 40, 68, 105, 114, 119, 121, 143], "an": [2, 5, 8, 10, 12, 14, 18, 19, 20, 21, 22, 26, 27, 29, 30, 32, 41, 47, 48, 49, 50, 54, 68, 70, 72, 73, 78, 81, 84, 85, 86, 87, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 104, 105, 108, 109, 111, 112, 113, 115, 121, 123, 129, 137, 138, 143], "author": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 31, 35, 88, 89, 90, 91, 92, 94, 95], "maciej": [2, 8, 143], "sliwowski": [2, 8], "maciek": [2, 8], "gmail": [2, 5, 8, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 31], "com": [2, 3, 5, 8, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 31, 76, 77, 141], "moham": [2, 8, 143], "fattouh": [2, 8, 143], "mo": [2, 8], "licens": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 31], "bsd": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 31], "3": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 30, 31, 32, 44, 46, 47, 61, 63, 64, 68, 69, 70, 73, 75, 84, 86, 90, 91, 92, 93, 96, 99, 102, 103, 121, 122, 123, 132, 139, 143], "claus": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26], "first": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 26, 27, 28, 30, 40, 52, 66, 68, 71, 75, 76, 77, 84, 86, 88, 98, 101, 109, 112, 113, 115, 121, 137, 141], "In": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 18, 20, 21, 26, 27, 28, 29, 30, 32, 37, 44, 46, 47, 48, 49, 50, 52, 55, 61, 63, 64, 66, 68, 70, 85, 109, 110, 113, 121, 134], "avail": [2, 3, 4, 8, 9, 10, 11, 12, 14, 16, 19, 22, 26, 27, 28, 29, 30, 32, 69, 75, 85, 88, 90, 91, 101, 114, 115, 122, 123], "part": [2, 8, 16, 17, 19, 28, 29, 32, 38, 39, 52, 56, 58, 66, 88, 90, 91], "librari": [2, 3, 4, 8, 24, 26, 28, 29, 30, 35, 69, 141], "http": [2, 4, 5, 8, 12, 26, 27, 28, 29, 30, 35, 46, 63, 68, 69, 75, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 105, 121, 131, 134, 136, 141], "searchwork": [2, 8, 69], "stanford": [2, 8, 69], "edu": [2, 4, 8, 69], "view": [2, 4, 8, 22, 69], "zk881ps0522": [2, 8, 69], "contain": [2, 5, 8, 12, 14, 16, 18, 21, 22, 26, 31, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 52, 55, 63, 64, 66, 68, 69, 71, 74, 75, 78, 113, 114, 115, 121, 122, 123, 124, 130, 131, 137, 143], "signal": [2, 3, 4, 5, 8, 9, 10, 11, 12, 18, 20, 26, 28, 29, 30, 31, 36, 37, 38, 39, 42, 43, 47, 48, 49, 50, 52, 55, 56, 58, 59, 60, 64, 66, 70, 72, 75, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 109, 112, 113, 114, 115, 119, 121, 124, 143], "differ": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 18, 21, 26, 27, 28, 29, 30, 70, 90, 91, 92, 105, 124, 139], "than": [2, 5, 8, 9, 10, 11, 12, 14, 16, 27, 32, 37, 55, 68, 81, 109, 115, 121, 143], "standard": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 32, 36, 44, 47, 48, 49, 50, 61, 64, 113, 118, 143], "setup": [2, 4, 8, 27, 139], "multipl": [2, 3, 4, 8, 9, 10, 14, 15, 16, 21, 23, 24, 27, 29, 30, 68, 71, 76, 92, 104, 105, 109, 113, 114, 119, 121, 132, 142, 143], "trial": [2, 3, 4, 8, 19, 21, 27, 28, 29, 30, 31, 32, 68, 70, 73, 79, 81, 115, 121, 127, 128, 132, 133, 143], "usual": [2, 3, 4, 8, 16, 29, 32, 68, 121], "one": [2, 4, 8, 9, 10, 11, 14, 16, 20, 26, 27, 29, 30, 32, 41, 46, 52, 66, 68, 70, 71, 84, 88, 92, 93, 105, 113, 114, 115, 121, 122, 123, 124, 137], "per": [2, 4, 5, 8, 9, 10, 11, 27, 46, 52, 66, 70, 73, 75, 92, 103, 113, 143], "here": [2, 3, 4, 5, 8, 10, 11, 12, 21, 22, 24, 26, 27, 28, 29, 30, 32, 43, 59, 81, 85, 92, 115], "chang": [2, 5, 8, 14, 18, 31, 45, 68, 113, 121, 129, 141], "ar": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 32, 35, 37, 46, 63, 68, 71, 78, 79, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 113, 114, 115, 119, 121, 124, 126, 130, 137, 139, 140, 141, 143], "sampl": [2, 3, 4, 5, 8, 9, 10, 14, 16, 17, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 42, 43, 46, 47, 48, 49, 50, 52, 55, 58, 59, 60, 66, 68, 70, 72, 73, 75, 79, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 109, 114, 115, 122, 123, 124, 125, 131, 137, 143], "frequenc": [2, 3, 4, 8, 11, 12, 16, 17, 26, 27, 28, 29, 30, 31, 32, 37, 43, 55, 59, 73, 79, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 109, 112, 119, 122, 143], "equal": [2, 8, 32, 79, 80, 81, 93, 106, 114], "If": [2, 8, 14, 18, 19, 22, 26, 29, 30, 32, 35, 37, 46, 68, 69, 70, 71, 73, 74, 75, 76, 77, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 109, 110, 111, 112, 113, 114, 115, 119, 120, 121, 122, 124, 125, 129, 130, 131, 132, 137, 141], "pleas": [2, 3, 4, 5, 8, 11, 12, 22, 26, 27, 28, 29, 30, 32, 69, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 105, 119, 141, 143], "cite": [2, 8, 69], "1": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 30, 31, 33, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 60, 61, 63, 64, 66, 68, 69, 70, 71, 73, 75, 76, 77, 82, 84, 86, 90, 91, 92, 93, 96, 98, 99, 101, 103, 105, 106, 109, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 131, 132, 133, 136, 142], "miller": [2, 8, 27, 28, 29, 30, 69], "kai": [2, 8, 69], "j": [2, 4, 5, 8, 26, 27, 28, 29, 30, 31, 37, 40, 42, 44, 52, 55, 57, 60, 61, 66, 69, 85, 86, 89, 94, 95, 96, 97, 98, 100, 102, 103, 136], "A": [2, 3, 4, 5, 8, 9, 10, 16, 27, 28, 29, 30, 31, 34, 36, 38, 39, 42, 54, 56, 58, 60, 68, 69, 71, 74, 76, 77, 87, 90, 91, 92, 94, 95, 99, 100, 103, 109, 113, 114, 115, 120, 121, 124, 132, 136, 143], "human": [2, 8, 26, 31, 35, 40, 57, 69, 86, 96, 97, 98, 109, 136], "electrocorticograph": [2, 8, 69], "analys": [2, 8, 29, 30, 69], "natur": [2, 8, 14, 69], "behaviour": [2, 8, 69], "11": [2, 3, 4, 5, 8, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 27, 28, 29, 31, 32, 33, 69, 87, 142], "2019": [2, 8, 31, 69], "1225": [2, 8, 69], "1235": [2, 8, 69], "doi": [2, 8, 10, 26, 27, 28, 29, 30, 35, 69, 84, 86, 89, 90, 91, 96, 97, 98, 99, 101, 103, 136], "org": [2, 4, 5, 8, 26, 27, 28, 29, 30, 35, 46, 63, 68, 69, 75, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 105, 121, 131, 134, 136], "10": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 35, 40, 47, 48, 49, 50, 64, 68, 69, 84, 86, 88, 89, 90, 91, 96, 97, 98, 99, 101, 103, 109, 113, 121, 122, 136, 142], "1038": [2, 8, 69], "s41562": [2, 8, 69], "019": [2, 8, 69, 99], "0678": [2, 8, 69], "import": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 42, 60, 137, 141], "copi": [2, 11, 16, 42, 60, 69, 107, 137], "numpi": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 17, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 61, 64, 68, 109, 112, 121, 134, 136], "np": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 26, 29, 31, 32, 68, 117, 118, 121, 122, 123, 124, 125, 132], "sklearn": [2, 4, 5, 8, 9, 10, 11, 16, 27, 28, 29, 30, 31, 68, 121, 129, 136, 143], "from": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 39, 42, 46, 47, 48, 49, 50, 56, 58, 60, 64, 68, 70, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 113, 114, 115, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 139, 142, 143], "mne": [2, 3, 4, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 25, 28, 30, 33, 47, 64, 69, 71, 72, 75, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 121, 137, 142, 143], "set_log_level": [2, 8, 12, 14, 22], "bcicompetitionivdataset4": [2, 8, 143], "subject_id": [2, 3, 4, 5, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 27, 28, 29, 30, 32, 69, 70, 73, 74, 75, 143], "can": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 26, 27, 28, 29, 30, 32, 35, 43, 47, 64, 68, 71, 75, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 108, 109, 110, 112, 113, 121, 132, 139, 140, 143], "easili": [2, 8, 20, 26, 28, 29, 30, 32, 123], "addit": [2, 8, 12, 17, 20, 21, 26, 28, 29, 30, 32, 44, 61, 68, 70, 71, 72, 78, 81, 115, 121, 136], "info": [2, 3, 4, 8, 12, 14, 16, 17, 19, 20, 21, 26, 27, 28, 29, 30, 32, 71, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 109, 110, 113, 123, 125, 137, 143], "store": [2, 4, 8, 9, 10, 11, 12, 14, 18, 22, 28, 29, 30, 32, 69, 71, 82, 143], "descript": [2, 5, 8, 12, 17, 18, 19, 20, 22, 27, 28, 29, 30, 32, 69, 70, 71, 72, 76, 77, 78, 81, 82, 84, 85, 88, 90, 92, 94, 95, 96, 97, 99, 105, 114, 115], "attribut": [2, 8, 26, 28, 29, 30, 32, 68, 72, 78, 111, 121, 143], "case": [2, 8, 16, 21, 26, 27, 28, 29, 30, 32, 68, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 113, 121, 134, 140, 143], "session": [2, 4, 8, 12, 18, 20, 21, 27, 28, 29, 30, 31, 32, 70, 73, 123], "column": [2, 8, 19, 21, 22, 27, 28, 29, 30, 32, 71, 78, 82, 93, 122, 123, 136], "select": [2, 4, 8, 9, 16, 20, 27, 28, 29, 30, 32, 37, 73, 113, 122], "valid": [2, 21, 26, 27, 31, 32, 68, 101, 113, 114, 115, 121, 129, 130, 143], "final": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 26, 27, 28, 29, 30, 32, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 118], "evalu": [2, 3, 4, 5, 8, 9, 10, 11, 14, 21, 27, 28, 30, 102], "train_set": [2, 3, 4, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32], "test_set": [2, 8, 29, 31, 32], "now": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 22, 26, 27, 28, 30, 113, 141, 143], "appli": [2, 3, 4, 5, 8, 9, 10, 12, 16, 18, 19, 20, 26, 27, 28, 29, 30, 32, 36, 37, 38, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 68, 72, 78, 99, 100, 104, 109, 111, 113, 119, 120, 121, 131, 143], "like": [2, 8, 16, 26, 28, 29, 30, 32, 37, 42, 47, 55, 60, 64, 68, 79, 80, 81, 101, 109, 110, 121, 123, 141, 143], "bandpass": [2, 3, 4, 8, 20, 27, 28, 29, 30, 32, 70, 109, 119], "filter": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 20, 26, 27, 28, 29, 30, 32, 37, 55, 70, 84, 86, 88, 90, 91, 92, 95, 98, 100, 102, 103, 105, 111, 112, 119, 143], "our": [2, 5, 8, 9, 10, 11, 12, 16, 20, 26, 27, 28, 30, 32, 73, 139], "either": [2, 8, 26, 28, 29, 30, 68, 70, 71, 73, 93, 109, 113, 121, 132], "provid": [2, 8, 9, 10, 11, 26, 28, 30, 32, 35, 68, 70, 71, 72, 76, 77, 85, 104, 109, 110, 111, 120, 121, 137], "raw": [2, 3, 4, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 27, 28, 29, 30, 31, 71, 72, 75, 76, 77, 81, 87, 107, 108, 109, 110, 111, 113, 114, 115, 119, 138, 143], "epoch": [2, 3, 4, 5, 8, 9, 10, 11, 14, 19, 24, 25, 27, 28, 29, 30, 31, 32, 33, 68, 71, 78, 80, 81, 93, 98, 107, 108, 109, 110, 111, 113, 114, 115, 121, 124, 127, 128, 129, 142, 143], "your": [2, 3, 4, 8, 14, 16, 21, 24, 25, 27, 28, 30, 33, 35, 68, 71, 74, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 105, 111, 115, 118, 120, 121, 134, 137, 139, 142], "own": [2, 8, 27, 28, 29, 30, 32, 73, 137], "object": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 18, 19, 21, 27, 28, 29, 30, 31, 32, 41, 72, 75, 76, 77, 78, 81, 107, 111, 114, 115, 120, 136, 143], "underli": [2, 5, 8, 28, 30, 111], "arrai": [2, 4, 8, 11, 17, 22, 26, 28, 29, 30, 37, 47, 54, 55, 64, 68, 79, 80, 81, 109, 110, 111, 112, 121, 125, 132, 136], "step": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 18, 22, 28, 29, 30, 32, 81, 115, 137], "taken": [2, 5, 8, 14], "process": [2, 4, 5, 7, 8, 13, 14, 15, 16, 22, 24, 29, 30, 71, 76, 85, 111, 114, 120, 142, 143], "pipelin": [2, 5, 8, 29, 32], "onli": [2, 4, 5, 8, 9, 10, 11, 12, 14, 18, 19, 21, 26, 27, 29, 30, 32, 41, 54, 68, 73, 75, 81, 85, 89, 90, 91, 92, 94, 95, 107, 109, 110, 112, 113, 115, 121, 130, 137, 141, 143], "cutoff": [2, 8, 16, 109], "proper": [2, 8], "other": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 18, 26, 29, 30, 32, 54, 68, 73, 75, 84, 85, 86, 87, 93, 96, 97, 98, 99, 100, 101, 102, 105, 121], "mai": [2, 3, 4, 5, 8, 9, 10, 11, 16, 18, 19, 27, 28, 29, 32, 35, 68, 121, 129, 134, 137], "need": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 26, 27, 28, 29, 32, 68, 84, 88, 92, 121, 134, 139, 143], "These": [2, 5, 8, 26, 27, 28, 30], "prepocess": [2, 8, 28, 30], "directli": [2, 3, 5, 8, 12, 22, 26, 27, 28, 30, 31, 68, 78, 111, 113, 121, 141], "fly": [2, 8, 28, 30, 72, 78, 143], "transform": [2, 5, 8, 9, 10, 11, 20, 27, 28, 29, 30, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 72, 78, 79, 80, 81, 85, 88, 93, 121, 143], "pytorch": [2, 8, 14, 22, 24, 25, 26, 27, 28, 30, 33, 68, 71, 74, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 105, 111, 115, 118, 120, 121, 132, 134, 140, 142, 143], "torchvis": [2, 8, 28, 30], "preprocessor": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 18, 20, 27, 28, 29, 30, 32, 120, 143], "exponential_moving_standard": [2, 3, 4, 8, 27, 28, 29, 30, 32], "low_cut_hz": [2, 3, 4, 8, 27, 28, 29, 30, 32], "low": [2, 3, 4, 5, 8, 9, 10, 11, 16, 27, 28, 29, 30, 32, 37, 55, 90, 91, 109], "high_cut_hz": [2, 3, 4, 5, 8, 9, 10, 27, 28, 29, 30, 32], "200": [2, 8, 10, 11, 14, 85, 86], "high": [2, 3, 4, 8, 11, 27, 28, 29, 30, 32, 37, 55, 73, 90, 91, 105, 109, 122], "higher": [2, 5, 8, 32, 101], "paramet": [2, 3, 4, 5, 8, 10, 14, 16, 17, 18, 19, 26, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 136, 143], "exponenti": [2, 3, 4, 8, 27, 28, 29, 30, 32, 105, 117, 118], "move": [2, 3, 4, 8, 14, 16, 27, 28, 29, 30, 32, 69, 93, 117, 118, 143], "factor_new": [2, 3, 4, 8, 27, 28, 29, 30, 32, 117, 118], "1e": [2, 3, 4, 8, 9, 10, 11, 27, 28, 29, 30, 32], "init_block_s": [2, 3, 4, 8, 27, 28, 29, 30, 32, 117, 118], "1000": [2, 3, 4, 8, 12, 22, 26, 27, 28, 29, 30, 32, 73, 90, 91, 123], "30": [2, 5, 8, 9, 10, 11, 16, 27, 31, 75, 101, 102, 105], "second": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 30, 31, 32, 40, 70, 73, 76, 77, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107], "limit": [2, 5, 8, 11, 12, 16, 26, 107], "memori": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 68, 115, 121], "run": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 68, 70, 73, 81, 84, 88, 92, 99, 109, 111, 112, 115, 121, 123, 134, 137, 141, 143], "6": [2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 31, 32, 70, 73, 88, 109, 142], "To": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 17, 22, 26, 27, 28, 29, 30, 31, 32, 109, 140, 141], "obtain": [2, 3, 4, 5, 8, 9, 11, 27, 28, 47, 64, 68, 72, 73, 78, 121, 123], "whole": [2, 8, 9, 10], "should": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 20, 26, 27, 28, 30, 37, 40, 47, 52, 55, 64, 66, 68, 69, 71, 72, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 109, 110, 112, 113, 121, 129, 137, 141], "valid_set": [2, 3, 8, 9, 10, 11, 27, 28, 31], "deepcopi": 2, "tmin": [2, 8, 12, 16, 19, 107], "24": [2, 5, 9, 10, 11, 12, 16, 27, 32, 99, 103, 110, 142], "tmax": [2, 8, 12, 107], "n_job": [2, 3, 4, 5, 12, 14, 16, 27, 28, 29, 30, 32, 76, 77, 82, 109, 112, 114, 115, 116, 120, 143], "0": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 42, 44, 45, 46, 54, 56, 58, 60, 63, 68, 70, 71, 75, 76, 77, 81, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 121, 123, 132, 136, 142], "baseconcatdataset": [2, 5, 9, 10, 12, 14, 16, 21, 31, 68, 79, 80, 81, 82, 114, 115, 120, 121, 123, 132, 143], "0x7fbb969548e0": 2, "variabl": [2, 4, 8, 29, 30, 69, 134], "channel": [2, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 31, 32, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 52, 56, 57, 58, 59, 60, 61, 63, 64, 66, 75, 78, 79, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 108, 109, 110, 113, 114, 115, 119, 143], "type": [2, 3, 4, 8, 11, 26, 27, 28, 29, 32, 37, 38, 39, 40, 42, 43, 44, 46, 47, 52, 63, 68, 71, 73, 79, 80, 81, 82, 92, 93, 104, 106, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 123, 125, 131, 133, 136, 143], "misc": [2, 4, 8, 78], "thu": [2, 4, 8, 107], "those": [2, 4, 5, 8, 12, 68, 109, 110, 121], "have": [2, 4, 5, 8, 11, 12, 14, 16, 17, 19, 21, 26, 27, 28, 29, 30, 32, 47, 52, 64, 66, 68, 79, 80, 81, 92, 111, 113, 114, 121, 129, 137, 140, 141, 143], "further": [2, 4, 5, 8, 9, 10, 11, 27, 29, 32, 68, 121], "howev": [2, 3, 4, 5, 8, 11, 14, 16, 21, 26, 27, 28, 29, 115], "mani": [2, 4, 5, 8, 16, 26, 27, 29, 32, 71], "ignor": [2, 4, 8, 52, 68, 84, 88, 92, 108, 111, 114, 115, 121, 124], "perform": [2, 4, 8, 9, 10, 11, 26, 27, 28, 29, 30, 32, 70, 71, 73, 84, 88, 92, 101, 117, 118, 143], "oper": [2, 3, 4, 8, 16, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 62, 107, 112], "see": [2, 3, 4, 5, 8, 9, 10, 11, 16, 18, 20, 21, 24, 26, 27, 28, 29, 30, 32, 46, 63, 68, 69, 70, 73, 75, 77, 78, 89, 93, 94, 95, 97, 102, 103, 107, 108, 109, 110, 112, 113, 114, 115, 120, 121, 122, 124, 125, 131, 134, 137, 140, 141], "tool": [2, 4, 8, 75, 138, 141], "stabl": [2, 4, 5, 8, 16, 26, 68, 75, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 105, 121, 134, 136], "glossari": [2, 4, 8], "html": [2, 4, 5, 8, 12, 26, 27, 68, 75, 76, 77, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 105, 121, 134, 136], "term": [2, 4, 8, 87, 93], "todo": 2, "ensur": [2, 105, 134, 140], "remov": [2, 3, 4, 5, 8, 9, 11, 18, 19, 20, 21, 26, 27, 28, 29, 30, 31, 32, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 108, 113, 133, 143], "pick_typ": [2, 3, 4, 8, 20, 27, 28, 29, 30, 32, 108], "true": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 26, 27, 28, 29, 30, 31, 32, 46, 47, 48, 49, 50, 68, 71, 72, 75, 76, 77, 78, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 111, 113, 114, 115, 116, 119, 121, 124, 125, 127, 128, 129, 132, 134, 143], "lambda": [2, 3, 4, 5, 8, 9, 10, 12, 27, 28, 29, 30, 32, 68, 96, 121], "x": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 20, 22, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 79, 80, 81, 84, 85, 87, 88, 92, 97, 99, 100, 101, 102, 103, 104, 105, 112, 117, 118, 121, 126, 129, 130, 132], "1e6": [2, 3, 4, 5, 8, 9, 10, 12, 27, 28, 29, 30, 32], "pick": [2, 8, 10, 12, 19, 20, 109, 114, 115, 116, 143], "convert": [2, 3, 4, 5, 8, 9, 10, 12, 17, 19, 27, 28, 29, 30, 31, 32, 109], "v": [2, 3, 4, 5, 8, 9, 10, 12, 16, 27, 28, 29, 30, 32, 90, 91, 94, 95, 102], "uv": [2, 3, 4, 5, 8, 9, 10, 12, 27, 28, 29, 30, 32], "l_freq": [2, 3, 4, 5, 8, 9, 10, 16, 27, 28, 29, 30, 32, 109], "h_freq": [2, 3, 4, 5, 8, 9, 10, 16, 27, 28, 29, 30, 32, 109], "extract": [2, 8, 12, 14, 16, 17, 19, 22, 27, 32, 78, 90, 91, 92, 99, 101, 114, 115, 122, 124], "check": [2, 3, 4, 8, 9, 10, 11, 26, 27, 28, 29, 30, 32, 35, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 105, 137, 140, 143], "thei": [2, 3, 4, 8, 14, 16, 26, 27, 28, 29, 30, 32, 113, 143], "same": [2, 3, 4, 5, 8, 9, 10, 11, 14, 18, 21, 27, 28, 29, 30, 32, 43, 52, 59, 66, 68, 73, 75, 101, 121, 124], "all": [2, 3, 4, 8, 12, 14, 16, 24, 26, 27, 28, 29, 30, 32, 43, 44, 52, 59, 61, 66, 68, 69, 70, 73, 74, 75, 84, 88, 90, 91, 92, 93, 107, 109, 110, 112, 113, 114, 115, 121, 129, 142, 143], "sfreq": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 26, 27, 28, 29, 30, 31, 32, 37, 43, 55, 59, 79, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 109, 121, 143], "assert": [2, 3, 4, 8, 12, 14, 27, 28, 29, 30, 32], "d": [2, 3, 4, 5, 8, 12, 14, 22, 26, 27, 28, 29, 30, 31, 32, 38, 39, 42, 56, 58, 60, 84, 86, 95, 96, 97, 98, 99, 103, 124, 136, 143], "target_sfreq": [2, 8], "temp": [2, 8], "home": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19, 26, 27, 28, 29, 30, 31, 32], "runner": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19, 26, 27, 28, 29, 30, 31, 32], "work": [2, 3, 4, 5, 8, 9, 10, 12, 16, 18, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 32, 68, 93, 105, 107, 121, 129, 138, 140, 143], "py": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 142], "55": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 30, 32], "userwarn": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 18, 19, 26, 27, 28, 29, 30, 31, 32], "choic": [2, 3, 4, 5, 8, 9, 10, 12, 27, 28, 29, 30, 32, 88, 143], "cannot": [2, 3, 4, 5, 8, 9, 10, 11, 12, 27, 28, 29, 30, 32, 68, 107, 121], "save": [2, 3, 4, 5, 8, 9, 10, 12, 14, 15, 16, 23, 24, 27, 28, 29, 30, 32, 68, 71, 74, 82, 111, 115, 120, 121, 142, 143], "warn": [2, 3, 4, 5, 8, 9, 10, 12, 14, 16, 18, 19, 26, 27, 28, 29, 30, 31, 32, 70, 101, 108, 114, 115, 134, 143], "contrast": [2, 4, 5, 27, 37, 44, 52, 55, 61, 66, 85], "trialwis": [2, 4, 8, 20, 27, 28, 30, 68, 121, 132, 143], "befor": [2, 11, 16, 27, 28, 29, 30, 32, 68, 71, 72, 75, 78, 84, 86, 87, 88, 99, 100, 101, 117, 118, 121, 129, 134, 140, 143], "becaus": [2, 16, 26, 27, 29, 30, 137], "know": [2, 3, 4, 26, 27], "recept": [2, 27, 68, 121, 132], "field": [2, 27, 68, 113, 121, 132], "network": [2, 4, 5, 7, 8, 10, 13, 14, 25, 26, 27, 28, 29, 32, 33, 35, 44, 61, 68, 71, 72, 75, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 114, 115, 120, 121, 123, 125, 126, 132, 134, 136, 142, 143], "larg": [2, 5, 14, 16, 26, 27, 71, 85, 115], "stride": [2, 9, 10, 11, 26, 27, 79, 80, 81, 86, 88, 93, 98, 103, 114, 115], "choos": [2, 3, 4, 8, 18, 27, 28, 29, 30, 32], "input": [2, 3, 4, 8, 10, 11, 14, 21, 26, 27, 28, 29, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 121, 143], "size": [2, 3, 4, 5, 11, 14, 16, 26, 27, 28, 29, 30, 31, 32, 37, 52, 55, 66, 68, 79, 80, 81, 84, 85, 88, 90, 91, 92, 93, 99, 100, 102, 103, 105, 106, 109, 112, 114, 115, 121, 124, 126, 130, 132, 136], "fed": [2, 27, 48, 49, 50], "dure": [2, 4, 5, 8, 9, 10, 11, 12, 14, 27, 28, 29, 30, 32, 68, 69, 109, 113, 121, 143], "ha": [2, 3, 4, 5, 8, 10, 12, 18, 19, 20, 21, 22, 27, 28, 29, 30, 31, 32, 48, 49, 50, 68, 71, 72, 75, 78, 81, 89, 90, 91, 92, 94, 95, 105, 109, 115, 121, 131, 137, 143], "larger": [2, 5, 27, 90, 91], "otherwis": [2, 14, 27, 29, 31, 81, 115], "chosen": [2, 16, 18, 27, 32, 52, 68, 109, 121, 132], "effici": [2, 3, 16, 27], "explan": [2, 27, 119, 120], "begin": [2, 27, 29, 30, 70, 99, 109, 114], "which": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 19, 20, 21, 24, 26, 27, 29, 30, 32, 35, 36, 39, 42, 47, 58, 60, 64, 68, 71, 72, 73, 78, 93, 101, 104, 109, 112, 113, 121, 123, 124, 125, 137], "rate": [2, 5, 14, 27, 28, 29, 30, 31, 32, 68, 73, 88, 90, 91, 99, 100, 101, 105, 121, 143], "input_window_sampl": [2, 3, 4, 8, 14, 26, 27, 28, 29, 30, 31, 32, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 103, 106], "come": [2, 8, 14, 28, 30, 32, 125, 134], "some": [2, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 22, 26, 27, 28, 30, 35, 68, 71, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 113, 121, 134], "predefin": [2, 8, 28, 30], "convolut": [2, 5, 8, 9, 11, 24, 25, 26, 27, 28, 29, 30, 33, 35, 42, 44, 60, 61, 71, 72, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 114, 126, 134, 136, 142, 143], "neural": [2, 4, 5, 8, 9, 10, 11, 14, 25, 26, 27, 28, 29, 33, 35, 44, 61, 71, 72, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 103, 106, 114, 126, 134, 136, 142, 143], "architectur": [2, 5, 8, 9, 10, 11, 26, 27, 28, 30, 68, 85, 87, 88, 99, 100, 101, 105, 121, 138], "domain": [2, 4, 8, 16, 28, 30, 43, 59, 105, 109, 112], "shallow": [2, 8, 14, 26, 27, 28, 31, 98], "convnet": [2, 8, 26, 27, 28, 86, 97, 98], "visual": [2, 8, 9, 10, 11, 12, 26, 27, 28, 30, 31, 35, 73, 86, 88, 96, 97, 98, 138, 143], "pure": [2, 5, 8, 28, 30, 143], "therefor": [2, 8, 12, 16, 27, 28, 29, 30, 32, 129], "just": [2, 4, 8, 22, 26, 28, 29, 30, 68, 86, 98, 121], "normal": [2, 5, 8, 9, 10, 28, 30, 99, 100, 123, 136, 143], "nn": [2, 3, 4, 5, 8, 9, 10, 11, 14, 26, 27, 28, 29, 30, 31, 32, 68, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 105, 121, 132], "modul": [2, 4, 5, 8, 9, 10, 11, 14, 26, 28, 30, 32, 68, 84, 85, 88, 90, 91, 92, 101, 104, 121, 132, 134, 136, 140, 143], "torch": [2, 3, 4, 5, 8, 9, 10, 11, 14, 22, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 121, 126, 130, 131, 132, 134, 143], "shallowfbcspnet": [2, 3, 4, 8, 14, 26, 27, 28, 29, 30, 31, 32], "util": [2, 3, 4, 5, 8, 9, 10, 11, 14, 18, 22, 26, 27, 28, 30, 31, 32, 68, 121, 143], "set_random_se": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32, 143], "cuda": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32, 68, 109, 112, 121, 134, 140], "is_avail": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32], "gpu": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 32, 68, 121, 140, 143], "devic": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32, 36, 68, 121, 143], "els": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 27, 28, 29, 30, 31, 32, 68, 121], "cpu": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 32, 68, 121], "backend": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32, 134, 143], "cudnn": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32, 134, 143], "benchmark": [2, 3, 4, 5, 8, 9, 10, 11, 15, 23, 24, 27, 28, 29, 30, 31, 32, 71, 75, 77, 86, 98, 111, 114, 120, 134, 142, 143], "set": [2, 4, 8, 9, 10, 11, 12, 14, 16, 17, 19, 22, 26, 27, 29, 30, 31, 32, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 63, 68, 70, 71, 73, 86, 90, 91, 92, 98, 99, 100, 103, 105, 107, 110, 113, 114, 115, 121, 134, 140, 143], "random": [2, 3, 4, 5, 8, 9, 10, 11, 26, 27, 28, 30, 31, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 61, 73, 122, 123, 124, 125, 129, 134, 143], "seed": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 61, 134], "abl": [2, 3, 4, 5, 8, 9, 10, 11, 12, 27, 28, 30, 68, 121, 137], "roughli": [2, 3, 4, 5, 8, 9, 11, 27, 28, 73], "reproduc": [2, 3, 4, 5, 8, 9, 10, 11, 24, 27, 28, 30, 134, 143], "note": [2, 3, 4, 5, 8, 9, 11, 17, 20, 26, 27, 28, 43, 59, 68, 69, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 109, 110, 113, 121, 129, 134], "indetermin": [2, 3, 4, 5, 8, 9, 11, 27, 28], "still": [2, 3, 4, 5, 8, 9, 11, 27, 28, 29, 73], "make": [2, 3, 4, 5, 8, 9, 11, 12, 27, 28, 29, 30, 32, 101, 109, 137, 143], "substanti": [2, 3, 4, 5, 8, 9, 10, 11, 14, 19, 27, 28], "between": [2, 3, 4, 5, 8, 9, 11, 26, 27, 28, 29, 37, 38, 39, 42, 43, 46, 47, 48, 49, 50, 54, 55, 56, 58, 60, 63, 70, 79, 80, 81, 86, 88, 98, 99, 107, 114, 115, 125, 130], "consist": [2, 3, 4, 5, 8, 9, 11, 27, 28, 48, 49, 50, 70, 73], "cost": [2, 3, 4, 5, 8, 9, 11, 27, 28], "increas": [2, 3, 4, 5, 8, 9, 10, 11, 16, 27, 28, 29, 32, 92, 101], "cudnn_benchmark": [2, 3, 4, 5, 8, 9, 11, 27, 28, 134], "fals": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 26, 27, 28, 29, 30, 31, 32, 42, 46, 47, 48, 49, 50, 60, 64, 68, 69, 71, 72, 75, 76, 77, 78, 81, 83, 84, 85, 86, 87, 88, 93, 98, 99, 100, 101, 102, 105, 107, 111, 113, 114, 115, 116, 119, 120, 121, 124, 125, 127, 128, 134, 136, 143], "20200220": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "n_class": [2, 3, 4, 9, 10, 11, 14, 26, 27, 28, 29, 30, 31, 32, 68, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 121, 126, 130, 132], "number": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 22, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 61, 64, 66, 68, 71, 75, 76, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 109, 112, 114, 115, 119, 120, 121, 122, 123, 124, 125, 132, 133], "chan": [2, 3, 4, 8, 27, 28, 29, 30, 32, 73], "n_chan": [2, 8, 11, 26, 27, 28, 30, 31, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 121], "shape": [2, 3, 4, 5, 8, 9, 10, 11, 17, 20, 22, 26, 27, 28, 29, 30, 32, 47, 64, 68, 87, 88, 93, 97, 99, 100, 101, 102, 103, 104, 105, 106, 125, 126, 130], "final_conv_length": [2, 3, 4, 8, 14, 26, 27, 28, 29, 30, 31, 32, 86, 94, 95, 98, 143], "2": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 31, 37, 38, 39, 42, 43, 44, 46, 52, 55, 60, 61, 63, 66, 68, 70, 73, 75, 84, 86, 90, 91, 93, 94, 95, 96, 99, 101, 103, 105, 109, 113, 118, 121, 122, 123, 131, 132, 142], "add_log_softmax": [2, 8, 26, 31, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105], "send": [2, 3, 4, 8, 9, 10, 11, 16, 27, 28, 29, 30, 32], "get_output_shap": [2, 27, 31, 93, 143], "to_dense_prediction_model": [2, 27, 31, 93, 143], "local": [2, 5, 10, 11, 14, 27, 31, 32, 69, 113, 137, 141], "lib": [2, 5, 10, 11, 27, 31, 32], "python3": [2, 5, 10, 11, 27, 31, 32], "site": [2, 5, 10, 11, 27, 31, 32], "packag": [2, 5, 10, 11, 27, 31, 32, 35, 139, 140], "deprec": [2, 5, 10, 19, 31, 90, 143], "87": [2, 5, 16, 31], "futurewarn": [2, 26, 30, 31, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105], "version": [2, 3, 4, 5, 9, 10, 18, 20, 21, 22, 29, 30, 31, 68, 85, 88, 93, 107, 108, 109, 110, 112, 113, 121, 137, 139, 140, 141], "eegmodulemixin": [2, 31, 143], "method": [2, 4, 5, 8, 12, 16, 21, 26, 29, 31, 32, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 68, 69, 71, 72, 78, 84, 85, 87, 88, 92, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 113, 121, 122, 123, 124, 126, 127, 128, 129, 130, 143], "msg": [2, 31], "categori": [2, 4, 31], "calcul": [2, 3, 4, 27, 28, 29, 30, 32, 68, 103, 121], "output": [2, 3, 4, 5, 11, 12, 14, 21, 26, 27, 28, 29, 30, 31, 32, 68, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 112, 113, 114, 115, 121], "dummi": [2, 27], "n_preds_per_input": [2, 27, 31], "create_fixed_length_window": [2, 5, 12, 14, 16, 22, 31, 143], "It": [2, 3, 4, 8, 9, 10, 11, 18, 27, 28, 29, 30, 32, 42, 60, 68, 71, 78, 81, 85, 101, 115, 121, 138], "defin": [2, 5, 9, 10, 11, 12, 14, 20, 21, 27, 28, 30, 40, 54, 57, 68, 78, 84, 88, 92, 103, 115, 121, 124], "start_offset_sampl": [2, 14, 22, 31, 114], "stop_offset_sampl": [2, 14, 22, 31, 114, 143], "none": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 18, 19, 20, 22, 26, 27, 28, 29, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 61, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 128, 129, 134, 136, 143], "window_size_sampl": [2, 5, 8, 9, 10, 11, 12, 14, 17, 19, 22, 27, 31, 79, 80, 81, 114, 115, 116], "window_stride_sampl": [2, 5, 9, 10, 11, 12, 14, 17, 19, 22, 27, 31, 79, 80, 81, 114, 115], "drop_last_window": [2, 12, 14, 17, 19, 22, 27, 31, 79, 80, 81, 114, 115], "targets_from": [2, 78, 114, 121], "last_target_onli": [2, 8, 78, 114, 116], "preload": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 22, 27, 28, 29, 30, 31, 32, 75, 76, 77, 81, 82, 113, 114, 115, 116, 120, 143], "thumb": [2, 8, 27], "": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 21, 22, 26, 27, 28, 30, 31, 32, 40, 42, 44, 47, 48, 49, 50, 57, 60, 61, 64, 68, 69, 70, 72, 73, 74, 75, 76, 77, 84, 91, 92, 94, 95, 100, 102, 105, 108, 109, 111, 113, 121, 122, 126, 129, 130], "consid": [2, 4, 29, 32, 48, 49, 50, 68, 121, 129], "well": [2, 5, 8, 12, 26, 27, 28, 29, 32, 81, 115, 138, 143], "encourag": [2, 8, 24, 27, 28], "find": [2, 4, 8, 30], "wai": [2, 5, 8, 16, 21, 24, 26, 29, 101, 139, 141], "target_transform": [2, 8, 9, 10, 71, 143], "suppli": [2, 3, 5, 8, 9, 10, 11, 27, 28, 29], "eegclassifi": [2, 5, 9, 10, 11, 26, 27, 28, 29, 30, 143], "croppedloss": [2, 27, 31], "criterion": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 68, 121], "criterion__loss_funct": [2, 27, 31], "loss": [2, 3, 4, 5, 8, 9, 10, 11, 14, 26, 27, 28, 29, 30, 31, 32, 68, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 105, 121, 126, 130, 131], "mean": [2, 3, 4, 8, 10, 12, 14, 16, 19, 26, 27, 29, 30, 31, 32, 73, 86, 95, 98, 113, 117, 118, 121, 137], "default": [2, 8, 11, 12, 27, 28, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 61, 68, 69, 75, 76, 77, 78, 81, 84, 85, 86, 88, 90, 91, 92, 93, 107, 108, 109, 110, 112, 113, 115, 121, 129, 134, 143], "found": [2, 8, 10, 12, 16, 18, 19, 20, 21, 26, 27, 28, 29, 30, 32, 69, 113, 114, 115], "motor": [2, 4, 8, 27, 28, 70, 73, 84, 89, 92, 143], "strongli": [2, 8, 27, 28, 90, 91, 92], "hyperparamet": [2, 5, 8, 9, 10, 11, 14, 24, 25, 27, 28, 32, 33, 46, 68, 71, 74, 93, 98, 111, 115, 118, 120, 121, 134, 142, 143], "optim": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32, 68, 73, 121], "cross": [2, 8, 16, 27, 28, 70, 85], "skorch": [2, 3, 4, 5, 8, 9, 10, 11, 17, 26, 27, 28, 29, 30, 31, 68, 79, 80, 81, 121, 143], "callback": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32, 68, 121, 129], "lrschedul": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "helper": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31], "predefined_split": [2, 3, 5, 8, 9, 10, 11, 27, 28, 29, 31], "eegregressor": [2, 8, 26, 31, 143], "croppedtimeseriesepochscor": 2, "timeseriesloss": 2, "valu": [2, 4, 5, 8, 9, 10, 11, 12, 26, 27, 28, 30, 31, 32, 43, 46, 63, 68, 71, 72, 78, 81, 92, 103, 109, 110, 112, 113, 114, 115, 121, 130, 131, 132, 143], "good": [2, 8, 26, 27, 28], "mi": [2, 8], "lr": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32, 68, 121], "0625": [2, 3, 4, 8, 27, 28, 29, 32], "01": [2, 3, 4, 6, 8, 12, 16, 23, 26, 27, 28, 29, 32, 33, 68, 90, 91, 121, 142], "weight_decai": [2, 3, 4, 8, 27, 28, 29, 32], "batch_siz": [2, 3, 4, 5, 8, 9, 10, 11, 14, 22, 27, 28, 29, 30, 31, 32, 37, 46, 47, 55, 63, 64, 68, 85, 87, 88, 93, 97, 99, 100, 101, 102, 103, 104, 106, 121, 126, 130, 132, 135], "27": [2, 4, 9, 11, 16, 27, 29, 73], "64": [2, 3, 4, 8, 10, 11, 14, 16, 17, 19, 27, 28, 29, 32, 84, 95, 100], "n_epoch": [2, 3, 4, 5, 8, 9, 10, 11, 14, 27, 28, 29, 30, 31, 32], "8": [2, 3, 4, 5, 8, 9, 10, 11, 14, 16, 17, 18, 19, 20, 21, 23, 26, 27, 28, 29, 30, 31, 32, 84, 85, 88, 90, 91, 94, 95, 100, 119, 139, 142], "regressor": [2, 8, 26, 31, 143], "aggregate_predict": [2, 68, 121], "mse_loss": [2, 31], "adamw": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "train_split": [2, 3, 4, 5, 8, 9, 10, 11, 26, 27, 28, 29, 30, 31, 68, 121], "optimizer__lr": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 68, 121], "optimizer__weight_decai": [2, 3, 4, 8, 27, 28, 29, 31], "iterator_train__shuffl": [2, 5, 9, 10, 11, 27, 31, 68, 121], "lr_schedul": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "cosineannealinglr": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "t_max": [2, 3, 4, 8, 27, 28, 29, 30, 31, 32], "r2_train": 2, "metric": [2, 5, 9, 10, 11, 27, 28, 32, 136], "r2_score": 2, "lower_is_bett": [2, 5, 8, 9, 10, 11, 127, 128, 129], "on_train": [2, 5, 8, 9, 10, 11, 127, 128], "r2_valid": 2, "verbos": [2, 3, 4, 8, 29, 30, 68, 69, 107, 109, 110, 112, 113, 114, 115, 116, 121, 143], "specifi": [2, 3, 5, 8, 9, 10, 11, 12, 18, 21, 22, 26, 27, 28, 29, 68, 69, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 109, 113, 120, 121], "y": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 20, 22, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 79, 80, 81, 87, 88, 92, 112, 121, 129], "alreadi": [2, 3, 5, 8, 9, 10, 11, 14, 19, 27, 28, 29, 71, 72, 78, 120, 121, 137, 139], "fit": [2, 3, 5, 8, 9, 10, 11, 14, 24, 26, 27, 28, 29, 30, 31, 32, 68, 115, 121], "train_loss": [2, 3, 5, 8, 9, 10, 11, 27, 28, 29, 30, 31, 32, 68, 121], "valid_loss": [2, 3, 5, 8, 9, 10, 11, 26, 27, 28, 29, 30, 31], "dur": [2, 3, 5, 8, 9, 10, 11, 26, 27, 28, 29, 30, 31], "16": [2, 3, 5, 6, 9, 10, 11, 16, 27, 30, 84, 95, 100, 109, 142], "9037": 2, "3086": 2, "5378": 2, "20": [2, 5, 9, 10, 11, 12, 16, 26, 27, 29, 31, 32, 40, 47, 48, 49, 50, 64, 96, 99, 113], "7324": 2, "0006": [2, 3, 8, 27, 28, 29], "5158": 2, "13": [2, 5, 9, 10, 11, 13, 16, 17, 19, 26, 27, 32, 33, 73, 75, 85, 109, 119, 142], "7539": 2, "7": [2, 3, 4, 5, 9, 10, 11, 13, 16, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 31, 32, 33, 35, 73, 84, 92, 93, 99, 142], "1244": 2, "9596": 2, "18": [2, 4, 5, 11, 12, 16, 27, 29, 92], "0720": 2, "4375": 2, "12": [2, 4, 5, 10, 11, 12, 16, 17, 18, 19, 27, 28, 29, 30, 32, 33, 70, 105, 136, 142], "7768": 2, "7402": 2, "6787": 2, "17": [2, 5, 11, 16, 103], "1870": 2, "0005": [2, 3, 22, 28, 31], "4291": 2, "7970": 2, "3910": 2, "5638": 2, "4409": 2, "0004": 2, "4216": 2, "2712": [2, 27], "1840": 2, "4237": 2, "0095": 2, "0002": [2, 3, 28], "4299": 2, "5735": 2, "9203": 2, "3549": 2, "15": [2, 5, 9, 10, 11, 12, 14, 16, 26, 27, 28, 29, 30, 32, 47, 48, 49, 50, 88, 98, 103, 109, 112], "4436": 2, "0001": [2, 30, 96, 118], "4224": 2, "9": [2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 16, 17, 18, 19, 20, 21, 23, 26, 27, 28, 29, 30, 32, 33, 70, 73, 85, 90, 92, 105, 113, 142], "8228": 2, "6181": 2, "3132": 2, "14": [2, 5, 8, 9, 11, 13, 16, 17, 19, 27, 28, 32, 73, 109, 134, 142], "7799": 2, "0000": [2, 3, 8, 27, 28, 29, 30, 31], "4324": 2, "0643": 2, "3047": 2, "3316": 2, "0884": 2, "4195": 2, "def": [2, 3, 5, 8, 9, 10, 11, 12, 14, 16, 29, 31, 32], "pad_and_select_predict": 2, "pred": [2, 8, 32, 126, 130, 131, 133], "pad": [2, 9, 10, 11, 27, 100, 109, 112, 143], "constant": 2, "constant_valu": 2, "mask": [2, 5, 52, 66, 130], "isnan": 2, "squeez": [2, 3, 4, 26, 27, 28, 29, 30, 32], "return": [2, 5, 8, 9, 10, 11, 12, 14, 17, 19, 21, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 76, 77, 78, 79, 80, 81, 82, 85, 87, 88, 93, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 129, 131, 132, 133, 136, 143], "t": [2, 4, 5, 11, 17, 19, 26, 27, 28, 29, 30, 31, 32, 42, 60, 68, 69, 70, 86, 96, 97, 98, 105, 107, 117, 118, 121, 134, 136], "preds_train": [2, 8], "y_train": [2, 8, 9, 10, 11, 29], "predict_tri": [2, 68, 121, 143], "return_target": [2, 68, 121, 132], "preds_valid": [2, 8], "y_valid": [2, 8], "preds_test": [2, 8], "y_test": [2, 8, 29], "decreas": [2, 8, 11], "doe": [2, 8, 14, 16, 18, 27, 29, 32, 45, 68, 84, 93, 115, 121, 137], "divers": [2, 4, 8], "caus": [2, 8], "overfit": [2, 8, 9, 10, 11, 29], "better": [2, 5, 8, 10, 14, 16, 27, 28, 29, 32, 88, 129, 143], "improv": [2, 3, 5, 8, 9, 10, 11, 32, 109, 137, 143], "matplotlib": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 30, 31, 136], "pyplot": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 30, 31], "plt": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 30, 31], "panda": [2, 4, 5, 8, 9, 10, 11, 14, 16, 20, 21, 27, 28, 29, 30, 31, 68, 71, 72, 78, 81, 121], "pd": [2, 4, 5, 8, 9, 10, 11, 14, 16, 27, 28, 29, 30, 31, 71, 72, 78, 122, 123, 124, 125], "line": [2, 8, 14, 27, 28, 31, 70, 137], "line2d": [2, 8, 27, 28], "fig": [2, 4, 5, 8, 9, 10, 11, 16, 27, 28, 29, 30, 31, 136], "ax": [2, 3, 4, 5, 8, 9, 10, 11, 16, 27, 28, 29, 30, 31, 93], "subplot": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 30, 31], "figsiz": [2, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 31, 136], "set_titl": [2, 8, 16, 31], "arang": [2, 8], "label": [2, 3, 5, 8, 9, 10, 11, 12, 16, 22, 26, 27, 28, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 104, 121, 124, 126, 130, 132, 136], "set_ylabel": [2, 5, 8, 9, 10, 11, 16, 27, 28, 31], "legend": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 31], "set_xlabel": [2, 4, 5, 8, 9, 10, 11, 16, 27, 28, 31], "tight_layout": [2, 4, 5, 8, 9, 10, 11, 27, 28, 30], "correl": [2, 8, 27, 29], "coeffici": [2, 8, 46, 63, 131], "corr_coeff": [2, 8], "dim": [2, 8], "rang": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 26, 27, 28, 29, 31, 32, 42, 60, 69, 119, 136], "append": [2, 8, 12, 14, 16, 27, 28, 31, 68, 109, 121], "corrcoef": [2, 8], "print": [2, 4, 5, 8, 9, 10, 11, 14, 17, 20, 21, 22, 26, 27, 28, 29, 30, 32, 68, 121, 137], "dimens": [2, 5, 8, 52, 66, 84, 88, 101, 105, 112, 143], "round": [2, 8], "histori": [2, 5, 8, 9, 10, 11, 27, 28, 31, 68, 121], "throughout": [2, 8, 9, 10, 11, 28, 29, 32], "accuraci": [2, 3, 4, 5, 8, 9, 10, 11, 27, 28, 29, 30, 32, 129, 143], "curv": [2, 8, 28], "results_column": [2, 8, 27, 28], "df": [2, 5, 8, 9, 10, 11, 12, 16, 27, 28], "datafram": [2, 4, 5, 8, 9, 10, 11, 14, 16, 20, 21, 22, 27, 28, 29, 30, 68, 71, 121, 122, 123, 124, 125], "index": [2, 5, 8, 9, 10, 11, 17, 27, 28, 30, 31, 72, 107, 117, 118, 122, 123, 133, 139], "ax1": [2, 5, 8, 9, 10, 11, 27, 28], "loc": [2, 8, 12, 26, 27, 28, 29], "style": [2, 5, 8, 27, 28, 48, 49, 50, 103], "marker": [2, 5, 8, 16, 27, 28], "o": [2, 4, 5, 8, 16, 27, 28, 37, 38, 39, 40, 44, 52, 55, 56, 57, 58, 61, 66, 124], "color": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 136], "tab": [2, 5, 8, 16, 27, 28], "blue": [2, 5, 8, 16, 27, 28], "fontsiz": [2, 8, 12, 27, 28], "tick_param": [2, 5, 8, 12, 27, 28], "axi": [2, 3, 5, 8, 27, 28, 31, 47, 48, 49, 50, 51, 53, 64, 65, 67, 93, 112, 133], "labelcolor": [2, 5, 8, 27, 28], "labels": [2, 8, 12, 27, 28], "ax2": [2, 5, 8, 9, 10, 11, 27, 28], "twinx": [2, 5, 8, 27, 28], "instanti": [2, 3, 4, 8, 14, 26, 27, 28, 32, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 61, 68, 74, 121, 143], "share": [2, 8, 14, 27, 28], "red": [2, 8, 27, 28], "r2": [2, 8], "score": [2, 4, 5, 9, 10, 11, 29, 30, 68, 87, 99, 121, 127, 128, 129, 143], "where": [2, 4, 8, 9, 10, 22, 27, 28, 29, 37, 46, 47, 52, 55, 63, 64, 66, 68, 69, 71, 79, 121, 132, 134, 143], "been": [2, 3, 4, 8, 10, 14, 16, 18, 20, 21, 27, 28, 29, 30, 32, 89, 90, 91, 92, 93, 94, 95, 131, 137, 141, 143], "handl": [2, 3, 4, 8, 27, 28, 30, 113], "black": [2, 8, 12, 27, 28, 70, 73, 136], "linewidth": [2, 8, 27, 28], "linestyl": [2, 8, 12, 27, 28], "h": [2, 4, 5, 8, 27, 28, 37, 40, 44, 52, 55, 57, 61, 66, 84, 87, 89, 124], "get_label": [2, 8, 27, 28], "center": [2, 8, 9, 10, 29, 37, 55], "right": [2, 4, 8, 12, 27, 28, 29, 32, 40, 70, 73, 141], "total": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 70, 142], "script": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 134], "minut": [2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 75], "676": [2, 6, 142], "estim": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32], "usag": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 137, 143], "824": [2, 6, 142], "mb": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 142], "jupyt": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32], "notebook": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32], "plot_bcic_iv_4_ecog_crop": [2, 6, 142], "ipynb": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32], "python": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 35, 107, 134, 138, 139, 141, 143], "sourc": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139], "galleri": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 142], "gener": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 32, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 61, 68, 93, 99, 102, 109, 121, 129, 136, 143], "sphinx": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32], "follow": [3, 4, 5, 9, 10, 11, 14, 26, 29, 32, 85, 90, 91, 109, 112, 115, 121, 139, 140, 141, 143], "wise": [3, 4, 5, 9, 10, 11], "also": [3, 4, 5, 9, 10, 11, 12, 14, 18, 21, 26, 28, 35, 68, 78, 88, 90, 91, 101, 109, 110, 112, 121, 132, 137, 140, 141], "illustr": [3, 29], "effect": [3, 19], "simon": [3, 20, 143], "brandt": [3, 20, 143], "simonbrandt": [3, 20], "protonmail": [3, 20], "c\u00e9dric": [3, 4], "rommel": [3, 4, 143], "cedric": [3, 4, 143], "inria": [3, 4, 11], "fr": [3, 4, 11], "moabbdataset": [3, 4, 18, 20, 21, 27, 28, 29, 30, 32, 143], "dataset_nam": [3, 4, 18, 20, 21, 27, 28, 29, 30, 32, 74], "bnci2014001": [3, 4, 18, 20, 21, 29, 30], "renam": [3, 4, 12, 18, 20, 21, 29, 30, 143], "bnci2014_001": [3, 4, 18, 20, 21, 27, 28, 29, 30, 32], "must": [3, 4, 12, 14, 16, 18, 20, 21, 26, 29, 30, 78, 86, 98, 99, 104, 107, 111, 113, 114, 122, 140, 143], "abbrevi": [3, 4, 18, 20, 21, 29, 30], "its": [3, 4, 9, 10, 16, 18, 20, 21, 26, 29, 30, 31, 68, 71, 111, 121], "bnci2014": [3, 4, 18, 20, 21, 29, 30], "001": [3, 4, 18, 20, 21, 27, 28, 29, 30, 31, 70, 117, 118], "moabb": [3, 4, 15, 18, 21, 23, 24, 27, 28, 29, 30, 32, 70, 71, 73, 74, 111, 120, 140, 141, 142, 143], "is_abbrev": [3, 4, 18, 20, 21, 29, 30], "inform": [3, 4, 12, 14, 17, 18, 20, 26, 29, 30, 42, 60, 68, 71, 78, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 109, 121, 123, 141], "multipli": [3, 4, 5, 9, 10, 12, 27, 28, 29, 30, 32, 84, 90, 91], "cut": [3, 4, 19, 28, 29, 30, 37, 55, 79, 109], "38": [3, 4, 11, 16, 27, 28, 29, 30, 31, 32], "factor": [3, 4, 5, 9, 10, 12, 27, 28, 29, 30, 32, 101, 103, 105, 112], "meg": [3, 4, 20, 27, 28, 29, 30, 32, 35, 109, 110, 138], "stim": [3, 4, 18, 20, 21, 27, 28, 29, 30, 32], "keep": [3, 4, 10, 11, 16, 27, 28, 29, 30, 32, 73, 75, 143], "sensor": [3, 4, 27, 28, 29, 30, 32, 40, 47, 48, 49, 50, 64, 73], "0x7fbb96c18d30": 3, "create_windows_from_ev": [3, 4, 5, 9, 10, 11, 18, 21, 27, 28, 29, 30, 32, 143], "trial_start_offset_second": [3, 4, 27, 28, 29, 30, 32], "start": [3, 4, 12, 14, 16, 22, 27, 28, 29, 30, 32, 52, 66, 68, 81, 107, 112, 114, 115, 121, 139], "offset": [3, 4, 16, 18, 27, 28, 29, 30, 32, 71, 81, 114, 115], "trial_start_offset_sampl": [3, 4, 5, 9, 10, 11, 18, 19, 21, 27, 28, 29, 30, 32, 81, 115], "int": [3, 4, 5, 9, 10, 14, 16, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 61, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 132, 134, 136], "windows_dataset": [3, 4, 5, 8, 9, 10, 11, 17, 18, 19, 27, 28, 29, 30, 31, 32, 79, 80, 81, 114, 115], "trial_stop_offset_sampl": [3, 4, 5, 9, 10, 11, 18, 19, 21, 27, 28, 29, 30, 31, 32, 81, 115, 143], "0train": [3, 4, 18, 20, 21, 27, 28, 29, 30, 32], "1test": [3, 4, 20, 21, 27, 28, 29, 30, 32], "callabl": [3, 26, 41, 54, 68, 71, 72, 78, 86, 98, 111, 121, 129], "custom": [3, 4, 15, 23, 24, 36, 71, 79, 142], "loader": [3, 4, 5, 14, 32], "call": [3, 16, 26, 27, 29, 32, 68, 71, 78, 81, 84, 88, 92, 107, 111, 114, 115, 121, 127, 128, 129], "demonstr": [3, 4, 7, 22, 24, 26, 32], "below": [3, 5, 35, 37, 137, 140, 143], "illutr": 3, "purpos": [3, 14, 16, 32], "chose": 3, "frequencyshift": 3, "randomli": [3, 5, 27, 37, 38, 39, 44, 52, 56, 58, 61, 125], "translat": 3, "within": [3, 4, 73, 84, 88, 92, 103, 124, 143], "given": [3, 4, 5, 21, 32, 38, 39, 40, 42, 51, 53, 54, 68, 69, 82, 109, 110, 113, 121, 132, 143], "probabl": [3, 4, 26, 30, 32, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 68, 84, 85, 86, 89, 98, 102, 103, 121], "actual": [3, 5, 12, 14, 22], "modifi": [3, 5, 10, 12, 42, 60, 68, 93, 107, 108, 110, 111, 119, 121, 134], "max_delta_freq": [3, 43], "shift": [3, 29, 43, 59], "next": [3, 4, 5, 9, 10, 11, 12, 14, 16, 18, 22], "let": [3, 4, 22, 26], "u": [3, 5, 7, 13, 24, 30, 71, 75, 93, 105, 111, 115, 120, 122, 123, 125, 134, 136, 141, 142, 143], "result": [3, 12, 14, 16, 29, 32, 68, 81, 112, 115, 121, 129, 134, 137], "stack": [3, 8], "allow": [3, 5, 14, 26, 29, 30, 32, 41, 68, 81, 90, 91, 115, 121, 143], "fix": [3, 40, 57, 85, 137, 143], "instead": [3, 4, 5, 8, 22, 27, 28, 29, 30, 31, 32, 68, 84, 88, 90, 92, 93, 113, 121, 143], "x_tr": 3, "_": [3, 5, 14, 16, 17, 26, 27, 28, 31, 32, 143], "as_tensor": 3, "float": [3, 5, 26, 31, 32, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 64, 68, 75, 79, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 109, 112, 115, 117, 118, 121, 131, 136], "psd": 3, "plot": [3, 5, 12, 14, 16, 29, 31, 143], "plot_psd": 3, "freq": 3, "time_frequ": 3, "psd_array_multitap": 3, "fmin": 3, "fmax": 3, "100": [3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 20, 26, 27, 28, 29, 30, 31, 32, 37, 52, 70, 85, 86, 105, 112], "log10": 3, "psds_mean": 3, "origin": [3, 11, 17, 19, 26, 29, 46, 47, 48, 49, 50, 52, 63, 64, 66, 71, 81, 88, 89, 90, 91, 92, 94, 95, 115, 119], "k": [3, 5, 9, 10, 11, 26, 27, 28, 30, 31, 32, 37, 44, 47, 48, 49, 50, 52, 55, 61, 64, 66, 86, 92, 96, 97, 98, 136], "r": [3, 5, 9, 10, 11, 26, 27, 28, 29, 30, 31, 37, 44, 52, 55, 61, 66, 86, 90, 91, 94, 95, 96, 97, 98, 136], "titl": [3, 12, 29, 30, 35], "multitap": 3, "gradiomet": 3, "xlabel": [3, 12, 29, 30], "ylabel": [3, 12, 30], "power": [3, 5, 30, 109, 112], "spectral": 3, "densiti": 3, "db": [3, 16, 113], "them": [3, 4, 5, 12, 14, 16, 17, 19, 26, 27, 29, 32, 68, 71, 84, 85, 86, 87, 88, 92, 93, 96, 97, 98, 99, 100, 101, 102, 105, 121, 141], "try": [3, 4, 12, 18, 22, 24, 30, 137, 141], "comput": [3, 4, 5, 9, 10, 11, 18, 22, 35, 48, 49, 50, 68, 70, 81, 84, 88, 90, 91, 92, 94, 95, 99, 113, 115, 117, 118, 121, 126, 127, 128, 130, 134, 137, 141, 143], "list": [3, 5, 11, 14, 16, 21, 22, 26, 27, 28, 29, 31, 32, 35, 36, 40, 41, 48, 49, 50, 57, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 108, 109, 110, 113, 114, 115, 119, 120, 121, 131, 133, 136, 143], "n_channel": [3, 4, 5, 9, 10, 14, 17, 19, 22, 29, 31, 32, 46, 47, 63, 64, 79, 84, 85, 87, 88, 97, 99, 100, 101, 102, 103, 104, 117, 118], "auto": [3, 4, 8, 14, 17, 19, 26, 28, 29, 30, 32, 68, 86, 88, 94, 95, 96, 98, 109, 112, 113, 121, 143], "23": [3, 4, 5, 8, 9, 10, 11, 16, 27, 28, 29, 30, 31, 32, 108], "depreci": [3, 4, 8, 27, 28, 29, 30, 31, 32], "n_time": [3, 4, 5, 8, 9, 10, 11, 12, 14, 17, 19, 26, 27, 28, 29, 30, 31, 32, 46, 63, 79, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 117, 118, 121, 126, 130], "180": [3, 4, 11, 26, 27, 28, 29, 30, 32], "logsoftmax": [3, 4, 26, 27, 28, 29, 30, 32, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 143], "layer": [3, 4, 5, 9, 10, 11, 26, 27, 28, 29, 30, 31, 32, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 143], "adjust": [3, 4, 26, 27, 28, 29, 30, 32, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 105], "accordingli": [3, 4, 9, 26, 27, 28, 29, 30, 32, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 105, 107], "e": [3, 4, 5, 9, 10, 11, 14, 16, 26, 27, 28, 29, 30, 32, 37, 40, 44, 52, 54, 55, 57, 61, 66, 68, 72, 75, 76, 77, 78, 81, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 115, 119, 121, 125, 129, 136, 141, 143], "g": [3, 4, 5, 9, 10, 11, 14, 16, 26, 27, 28, 29, 30, 32, 37, 40, 42, 44, 52, 54, 55, 57, 60, 61, 68, 72, 75, 76, 77, 78, 81, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 111, 115, 119, 121, 125, 129, 136, 143], "crossentropyloss": [3, 4, 9, 10, 11, 26, 27, 28, 29, 30, 32, 68, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 105, 121], "order": [3, 4, 12, 21, 26, 40, 48, 49, 50, 57, 68, 73, 76, 77, 109, 113, 119, 121, 125, 143], "pass": [3, 4, 9, 10, 11, 16, 22, 26, 27, 28, 29, 30, 32, 36, 41, 54, 68, 74, 84, 85, 87, 88, 92, 97, 99, 100, 101, 102, 103, 107, 109, 110, 112, 113, 121, 126, 129, 130, 143], "sequenti": [3, 4, 5, 9, 10, 11, 16, 26, 27, 28, 29, 30, 32, 73, 93], "batch": [3, 4, 5, 26, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 86, 87, 93, 97, 98, 99, 100, 101, 102, 103, 106, 121, 128, 132, 143], "augmenteddataload": [3, 4, 143], "signflip": 3, "freq_shift": 3, "sign_flip": 3, "iter": [3, 4, 5, 20, 22, 46, 68, 93, 108, 121, 132], "argument": [3, 4, 16, 19, 26, 29, 32, 36, 38, 39, 40, 42, 51, 53, 54, 68, 74, 107, 109, 110, 111, 112, 113, 119, 121, 129, 143], "clf": [3, 4, 5, 9, 10, 11, 27, 28, 29, 30], "iterator_train": [3, 4, 68, 121], "tell": [3, 4, 137], "dataload": [3, 4, 5, 14, 32, 36, 68, 121, 132], "iterator_train__transform": [3, 4], "nllloss": [3, 4, 14, 28, 29, 30, 32, 68], "train_accuraci": [3, 27, 28, 29, 30, 32], "valid_acc": [3, 5, 9, 10, 11, 26, 28, 29, 30], "valid_accuraci": [3, 27, 28, 29, 30], "2535": [3, 28], "6458": 3, "1252": 3, "7671": 3, "2639": 3, "3297": 3, "2500": [3, 22, 27, 28, 29, 123], "7607": 3, "5550": 3, "1539": 3, "1231": 3, "5500": [3, 5], "2708": 3, "1567": 3, "2555": 3, "5569": 3, "classifi": [3, 4, 5, 9, 10, 11, 26, 29, 31, 143], "initi": [3, 5, 9, 10, 11, 26, 29, 30, 32, 68, 88, 90, 91, 105, 121], "module_": [3, 9, 10, 11, 26, 68, 121], "var_nam": [3, 4, 11, 26, 27, 28, 29, 32, 93], "depth": [3, 4, 11, 26, 27, 28, 29, 30, 32, 84, 90, 91, 93, 105], "idx": [3, 4, 9, 10, 11, 26, 27, 28, 29, 30, 32], "param": [3, 4, 5, 11, 26, 27, 28, 29, 30, 32, 37, 38, 39, 40, 42, 43, 44, 46, 47, 52], "kernel": [3, 4, 11, 26, 27, 28, 29, 30, 32, 47, 48, 49, 50, 64, 84, 91, 92, 99, 100, 102, 105], "22": [3, 4, 5, 9, 11, 16, 17, 19, 27, 28, 29, 32], "1125": [3, 4, 28, 29, 32], "ensure4d": [3, 4, 26, 27, 28, 29, 32], "ensuredim": [3, 4, 26, 27, 28, 29, 32], "rearrang": [3, 4, 26, 27, 28, 29, 32, 143], "dimshuffl": [3, 4, 26, 27, 28, 29, 32], "combinedconv": [3, 4, 26, 27, 28, 29, 32], "conv_time_spat": [3, 4, 26, 27, 28, 29, 32], "40": [3, 4, 11, 14, 16, 26, 27, 28, 29, 31, 32, 33, 88, 98, 142], "1101": [3, 4, 28, 29, 32], "36": [3, 4, 9, 11, 16, 26, 27, 28, 29, 32, 33, 142], "240": [3, 4, 17, 26, 27, 28, 29, 32], "batchnorm2d": [3, 4, 26, 27, 28, 29, 32, 86, 90, 91, 98], "bnorm": [3, 4, 26, 27, 28, 29, 32], "80": [3, 4, 5, 10, 11, 16, 19, 26, 27, 28, 29, 32, 73, 101], "express": [3, 4, 26, 27, 28, 29, 32], "conv_nonlin_exp": [3, 4, 26, 27, 28, 29, 32], "avgpool2d": [3, 4, 26, 27, 28, 29, 32], "pool": [3, 4, 26, 27, 28, 29, 32, 84, 86, 88, 90, 91, 93, 98, 100, 103, 105], "69": [3, 4, 5, 16, 28, 29, 32], "75": [3, 4, 5, 9, 14, 16, 26, 27, 28, 29, 32, 88, 98, 103], "pool_nonlin_exp": [3, 4, 26, 27, 28, 29, 32], "dropout": [3, 4, 5, 9, 10, 26, 27, 28, 29, 30, 32, 84, 86, 88, 89, 90, 91, 98, 99, 100, 101, 102, 103], "drop": [3, 4, 10, 14, 19, 26, 27, 28, 29, 32, 38, 56, 81, 108, 115, 119], "final_lay": [3, 4, 11, 26, 27, 28, 29, 32], "conv2d": [3, 4, 9, 26, 27, 28, 29, 32], "conv_classifi": [3, 4, 26, 27, 28, 29, 32], "044": [3, 4, 28, 29, 32], "47": [3, 4, 5, 9, 10, 11, 16, 28, 29, 32], "364": [3, 4, 28, 29, 32], "trainabl": [3, 4, 11, 26, 27, 28, 29, 32], "non": [3, 4, 11, 16, 22, 26, 27, 28, 29, 30, 32, 68, 73, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 105, 109, 121, 143], "mult": [3, 4, 11, 26, 27, 28, 29, 32], "add": [3, 4, 5, 11, 26, 27, 28, 29, 32, 43, 44, 59, 61, 68, 71, 72, 78, 109, 121, 129, 143], "m": [3, 4, 5, 9, 10, 11, 12, 16, 22, 26, 27, 28, 29, 30, 31, 32, 37, 40, 44, 47, 48, 49, 50, 52, 55, 57, 61, 64, 66, 84, 85, 86, 94, 95, 96, 97, 98, 100, 105, 109, 122, 136, 141], "forward": [3, 4, 5, 11, 26, 27, 28, 29, 32, 41, 54, 68, 84, 85, 87, 88, 92, 97, 99, 100, 101, 102, 103, 104, 105, 109, 111, 113, 121, 126, 130, 132], "backward": [3, 4, 11, 14, 26, 27, 28, 29, 32, 93, 109, 143], "35": [3, 4, 11, 16, 27, 28, 29, 31, 32], "04": [3, 4, 11, 16, 23, 26, 27, 28, 29, 32, 142], "50": [3, 4, 5, 9, 10, 11, 14, 16, 19, 27, 28, 29, 32, 70, 86], "would": [3, 26, 27, 29, 32, 68, 86, 98, 121], "equival": 3, "although": [3, 68, 84, 88, 92, 121], "composit": [3, 41], "composed_transform": 3, "possibl": [3, 4, 11, 12, 16, 18, 26, 68, 70, 114, 121, 134, 137, 143], "most": [3, 9, 10, 11, 14, 124, 137, 140], "windowsdataset": [3, 18, 26, 71, 79, 80, 81, 82, 114, 115, 120, 121, 143], "through": [3, 4, 11, 12, 14, 16, 20, 22, 27, 47, 64, 72, 78, 85, 87, 99, 100, 101, 143], "commonli": 3, "done": [3, 11, 16, 18, 26, 27, 84, 114, 115], "advis": [3, 27, 30, 42, 60, 121], "abov": [3, 14, 16, 22, 27, 29, 137, 139], "compat": [3, 14, 17, 19, 30, 68, 79, 80, 81, 121, 143], "370": [3, 6, 142], "706": [3, 6, 142], "plot_data_augment": [3, 6, 142], "inde": 4, "known": [4, 68], "often": [4, 9, 10, 11, 28, 30], "depend": [4, 5, 9, 10, 11, 12, 14, 16, 26, 29, 30, 32, 35, 68, 73, 101, 121, 132, 139, 141, 143], "task": [4, 9, 10, 11, 26, 30, 42, 60, 70, 72, 124], "phenomenon": 4, "studi": [4, 5, 7, 24, 85], "methodologi": 4, "propos": [4, 38, 39, 42, 52, 56, 58, 60, 66, 85, 92, 143], "openli": [4, 5, 9, 10, 11], "could": [4, 5, 14, 29, 32, 93, 141], "brain": [4, 24, 25, 26, 27, 29, 30, 31, 33, 35, 71, 74, 86, 90, 91, 93, 94, 95, 96, 97, 98, 111, 115, 118, 120, 134, 136, 138, 142], "recent": [4, 26, 137], "shown": [4, 5, 9, 11, 16, 29, 32, 70, 73], "artifici": 4, "cast": [4, 41], "paradigm": [4, 5, 68, 70, 121, 132], "present": [4, 12, 29, 32, 70, 73, 85, 108], "both": [4, 5, 16, 22, 30, 70, 73, 99, 100, 105], "pretext": 4, "approach": [4, 5, 9, 10, 11, 16, 24, 30, 101, 122], "demand": 4, "intens": 4, "comparison": [4, 14, 27, 28], "strength": 4, "context": [4, 5, 29, 35, 101, 124], "bruno": [4, 143], "aristimunha": [4, 143], "ufabc": 4, "br": 4, "bnci": [4, 70], "websit": 4, "There": [4, 24, 26, 86, 98, 139, 141], "subject": [4, 5, 9, 10, 11, 12, 14, 18, 19, 20, 21, 22, 29, 37, 44, 52, 55, 61, 66, 69, 70, 72, 73, 74, 75, 123], "electrod": [4, 20, 70, 73, 113], "while": [4, 5, 14, 29, 32, 73, 84, 88, 92, 99, 133], "do": [4, 12, 14, 26, 27, 29, 32, 68, 79, 80, 81, 105, 114, 115, 121, 125, 134, 141, 143], "imageri": [4, 70, 84, 89, 92, 143], "144": 4, "focu": 4, "relat": [4, 5, 26, 27, 35, 73, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 121, 143], "activ": [4, 19, 26, 68, 73, 84, 85, 86, 90, 91, 92], "0x7fbad958c310": 4, "out": [4, 8, 9, 10, 26, 37, 52, 55, 66, 68, 70, 85, 121, 122, 130, 137], "provind": 4, "slicedataset": [4, 29, 30], "eval_set": [4, 30], "three": [4, 16, 29, 32, 68, 69, 88, 90, 91, 121, 137], "categor": [4, 122], "aggreg": [4, 88], "sever": [4, 12, 18, 24, 114, 115, 138], "being": [4, 10, 14, 27, 68, 73, 121], "spatial": [4, 26, 42, 60, 86, 98, 105, 143], "paper": [4, 11, 35, 47, 48, 49, 50, 64, 84, 88, 89, 90, 91, 92, 94, 95, 101, 143], "ftsurrog": 4, "smoothtimemask": 4, "channelsdropout": 4, "respect": [4, 5, 30], "two": [4, 5, 9, 10, 11, 12, 14, 16, 18, 27, 29, 32, 46, 52, 63, 70, 73, 75, 92, 99, 109, 112, 113, 124, 125, 131], "insid": [4, 29, 30, 90, 91, 141], "rememb": [4, 29, 32], "\u03c6max": 4, "2\u03c0": 4, "p_drop": [4, 38, 56], "linspac": [4, 12], "transforms_freq": 4, "phase_noise_magnitud": [4, 42, 60], "phase_freq": 4, "random_st": [4, 5, 8, 30, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 61, 122, 123, 124, 125], "transforms_tim": 4, "mask_len_sampl": [4, 52, 66], "transforms_spati": 4, "prob": 4, "gridsearchcv": [4, 29, 30, 129, 143], "control": [4, 5, 10, 29, 68, 99, 107, 109, 110, 112, 113, 114, 115, 120, 121, 143], "over": [4, 10, 16, 29, 31, 32, 42, 47, 48, 49, 50, 60, 64, 68, 121, 143], "framework": 4, "necessari": [4, 68, 113, 121], "slicedata": 4, "mandatori": 4, "eval": [4, 30, 32, 143], "train_x": [4, 30], "train_i": [4, 30], "kfold": [4, 29, 30], "model_select": [4, 5, 8, 29, 30], "cv": [4, 29, 30], "n_split": [4, 29, 30], "shuffl": [4, 8, 14, 29, 30, 32, 39, 46, 58, 68, 121, 143], "fit_param": [4, 30, 121], "param_grid": [4, 29, 30], "return_train_scor": [4, 29, 30], "refit": [4, 29, 30], "error_scor": [4, 29, 30], "rais": [4, 14, 26, 29, 30, 31, 68, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 108, 115, 120, 143], "fold": [4, 30, 32], "candid": [4, 29, 30], "x27": 4, "lt": 4, "gt": 4, "uniniti": [4, 68, 121], "ou": 4, "environ": [4, 69, 134], "rerun": 4, "cell": 4, "represent": [4, 37, 44, 46, 52, 55, 61, 63, 66, 85, 143], "trust": 4, "On": [4, 27, 30, 31, 72, 78], "github": [4, 30, 85, 137, 139, 143], "unabl": 4, "render": 4, "page": [4, 29, 32, 35, 137, 143], "nbviewer": 4, "nbsp": 4, "document": [4, 5, 10, 12, 35, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 105, 107, 109, 110, 112, 113, 137, 141, 143], "gridsearchcvifittedgridsearchcv": 4, "analysi": [4, 5, 9, 10, 11, 26, 35, 138], "wa": [4, 5, 9, 10, 11, 27, 28, 29, 32, 68, 70, 73, 85, 88, 101, 121, 122, 143], "search_result": [4, 29, 30], "cv_results_": [4, 29, 30], "best_run": [4, 29, 30], "rank_test_scor": [4, 29, 30], "best_aug": 4, "validation_scor": 4, "around": [4, 10, 32, 47, 48, 49, 50, 64, 85, 115, 122], "mean_test_scor": [4, 30], "training_scor": 4, "mean_train_scor": [4, 30], "report_messag": 4, "gave": [4, 30], "format": [4, 14, 17, 19, 26, 79, 80, 81], "eval_x": [4, 30], "eval_i": [4, 30], "f": [4, 5, 10, 11, 12, 14, 16, 17, 18, 22, 26, 27, 28, 29, 30, 31, 32, 44, 61, 86, 90, 91, 96, 97, 98, 103, 136], "2f": [4, 29, 30, 32], "accuracyof": 4, "08": [4, 16, 29], "26": [4, 5, 9, 10, 11, 16, 20, 27, 100], "39": [4, 5, 6, 11, 16, 22, 142], "bar": 4, "param_iterator_train__transform": 4, "yerr": 4, "std_train_scor": 4, "rot": 4, "45": [4, 5, 11, 16, 29, 32], "c0": 4, "c1": 4, "c2": 4, "strategi": [4, 25, 29, 30], "set_ylim": [4, 27, 28], "32": [4, 5, 9, 10, 11, 16, 26, 27, 29, 33, 84, 94, 103, 142], "c": [4, 5, 9, 10, 11, 20, 27, 28, 29, 30, 42, 60, 85, 87, 92, 94, 95, 105, 122, 137], "paillard": 4, "moreau": [4, 143], "gramfort": [4, 5, 9, 10, 35, 100, 124, 143], "2022": [4, 30, 84, 88, 89, 90, 91], "systemat": 4, "arxiv": [4, 5, 31, 37, 38, 39, 40, 42, 44, 46, 52, 55, 56, 57, 58, 60, 61, 63, 66, 94, 95, 102, 124, 131], "ab": [4, 5, 46, 63, 131], "2206": 4, "14483": 4, "banvil": [4, 5, 9, 14, 16, 20, 124, 143], "chehab": [4, 5, 11, 124, 143], "hyv\u00e4rinen": [4, 5, 124], "engemann": [4, 5, 35, 124, 143], "2021": [4, 10, 11, 90, 91, 92, 101, 105, 122], "uncov": [4, 5, 124], "structur": [4, 5, 16, 17, 19, 123, 124, 143], "clinic": [4, 5, 7, 24, 124], "journal": [4, 28, 29, 30, 35, 92], "engin": [4, 5, 9, 10, 28, 29, 30, 47, 48, 49, 50, 64, 87, 88, 90, 91, 92, 100, 101], "046020": 4, "31": [4, 5, 6, 9, 10, 11, 16, 26, 27, 30, 32, 88, 142], "872": [4, 6, 142], "98": [4, 6, 16, 27, 142], "plot_data_augmentation_search": [4, 6, 142], "access": [5, 9, 10, 11, 12, 14, 26, 85, 89, 123, 139], "physionet": [5, 7, 13, 16, 24, 71, 75, 93, 100, 101, 104, 105, 111, 115, 120, 123, 125, 134, 136, 142, 143], "ssl": [5, 27], "leverag": [5, 101], "unlabel": 5, "design": [5, 16, 85, 101, 109], "prior": [5, 93], "understand": [5, 24, 29], "under": [5, 14, 69, 120, 141, 143], "autocorrel": 5, "requir": [5, 11, 12, 14, 16, 17, 22, 54, 68, 73, 78, 121, 143], "anoth": [5, 21, 29, 32, 124], "interest": [5, 12, 22, 26], "onc": [5, 16, 29, 109, 114, 124, 141], "reus": [5, 9, 11], "featur": [5, 9, 10, 26, 29, 87, 88, 90, 91, 92, 93, 99, 100, 101, 105, 137, 141, 143], "extractor": [5, 9, 10, 87, 99, 100, 101, 105], "weight": [5, 9, 10, 11, 29, 30, 32, 84, 85, 136], "downstream": 5, "help": [5, 9, 10, 21, 113], "reduc": [5, 10, 14, 16, 75, 115], "quantiti": 5, "compar": [5, 14, 16, 22, 27, 29, 32], "strictli": 5, "rp": 5, "simpl": [5, 12, 16, 24, 25, 32, 33, 85, 93, 98, 142], "whether": [5, 14, 26, 38, 39, 40, 42, 47, 48, 49, 50, 51, 53, 54, 60, 64, 68, 71, 78, 79, 80, 81, 82, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 105, 114, 119, 120, 121, 124, 129, 134, 137], "close": [5, 16, 18, 124, 137], "far": [5, 124], "apart": 5, "yield": [5, 14, 20, 70, 103, 137], "physiolog": [5, 9, 10, 11], "relev": [5, 29, 35, 68, 121], "boost": 5, "classif": [5, 9, 10, 11, 26, 27, 30, 37, 42, 44, 52, 55, 60, 61, 66, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "regim": 5, "hubert": [5, 9, 14, 16, 20, 143], "jbanvil": [5, 9, 14, 16, 20], "few": [5, 9, 10, 11, 14, 16, 26, 143], "sleep_physionet": [5, 9, 10, 11], "sleepphysionet": [5, 9, 10, 11, 16, 143], "recording_id": [5, 9, 10, 11, 12, 14, 16, 22, 75, 76, 77], "crop_wake_min": [5, 9, 10, 11, 16, 75], "microvolt": [5, 9, 10], "lowpass": [5, 9, 10, 16], "sinc": [5, 9, 10, 11, 12, 22, 26, 30, 68, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 121, 137], "don": [5, 11, 17, 19, 68, 121], "resampl": [5, 12, 14, 18, 20, 75, 109, 143], "0x7fbadc8230d0": 5, "As": [5, 16, 26, 27, 29, 68, 121], "conveni": [5, 113], "later": [5, 12, 22, 72, 73, 76, 77, 86], "window_size_": [5, 9, 10, 11], "map": [5, 9, 10, 11, 12, 22, 26, 27, 28, 29, 30, 31, 35, 68, 81, 84, 86, 96, 97, 98, 104, 114, 115, 121, 136], "merg": [5, 9, 10, 11, 143], "aasm": [5, 9, 10, 11], "w": [5, 9, 10, 11, 12, 27, 28, 29, 30], "z": [5, 9, 10, 31, 47, 50, 64, 102], "scale": [5, 9, 10, 11, 12, 16, 88, 90, 91, 92, 143], "standard_scal": [5, 9, 10], "channel_wis": [5, 9, 10, 11, 16], "0x7fbad9589870": 5, "new": [5, 9, 10, 11, 20, 40, 57, 68, 85, 88, 107, 108, 109, 110, 112, 113, 121, 137, 141], "receiv": [5, 88], "pair": [5, 124], "indic": [5, 9, 10, 21, 31, 46, 63, 71, 109, 110, 113, 123, 124, 125, 143], "when": [5, 9, 10, 11, 14, 16, 22, 27, 29, 30, 32, 35, 41, 42, 47, 48, 49, 50, 54, 60, 64, 68, 69, 74, 79, 80, 81, 84, 88, 105, 108, 109, 110, 113, 114, 115, 120, 121, 134, 137, 143], "train_test_split": [5, 8, 29], "uniqu": [5, 9, 10, 11, 21, 68, 72, 121], "subj_train": 5, "subj_test": 5, "test_siz": [5, 8, 29], "subj_valid": 5, "relativepositioningdataset": 5, "__getitem__": [5, 68, 121], "expect": [5, 14, 26, 32, 68, 121], "__init__": [5, 32], "list_of_d": [5, 71], "super": [5, 32, 127, 128], "return_pair": 5, "ind1": 5, "ind2": 5, "properti": [5, 71, 143], "_return_pair": 5, "setter": 5, "split_id": [5, 9, 10, 11, 12, 71, 143], "dict": [5, 9, 10, 11, 21, 26, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 52, 71, 72, 74, 78, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 109, 114, 115, 119, 121, 143], "item": [5, 14, 19, 20, 26, 27, 28, 32], "main": [5, 90, 91, 92], "tau_po": [5, 124], "tau_neg": [5, 124], "neg": [5, 27, 31, 68, 124], "separ": [5, 29, 32, 70, 109, 115, 124], "less": [5, 27, 29, 32], "min": [5, 12, 29, 75, 109], "n_exampl": [5, 124], "regular": [5, 117, 118], "instanc": [5, 32, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 61, 68, 84, 88, 92, 107, 108, 109, 110, 113, 121, 123, 143], "000": [5, 16, 17, 18, 19, 22, 23, 31, 34, 142], "lower": [5, 9, 12, 29, 32, 37, 55, 109, 129], "250": [5, 20, 27, 70, 84, 88, 92, 96], "relativepositioningsampl": 5, "60": [5, 10, 12, 16, 19, 32], "n_examples_train": 5, "len": [5, 8, 9, 10, 11, 12, 14, 17, 20, 22, 29, 32, 73, 119], "n_examples_valid": 5, "n_examples_test": 5, "train_sampl": [5, 9, 10, 11], "get_metadata": [5, 9, 10, 11, 27, 28, 29, 31, 71, 123], "same_rec_neg": [5, 124], "valid_sampl": [5, 9, 10, 11], "presampl": [5, 124], "test_sampl": 5, "introduc": [5, 9, 10, 11, 14, 15, 24, 25, 27, 31], "four": [5, 9, 47, 70, 73], "embedd": 5, "dimension": [5, 68, 85, 88, 121, 132], "last": [5, 22, 27, 31, 32, 52, 66, 73, 75, 79, 80, 81, 84, 88, 109, 112, 114, 115, 143], "embed": [5, 9, 10, 84, 85, 88], "after": [5, 12, 16, 21, 26, 28, 29, 32, 70, 75, 86, 98, 99, 100, 126, 129, 143], "tempor": [5, 9, 10, 14, 26, 84, 86, 88, 89, 91, 98, 99, 100, 101, 102, 103, 105, 143], "wrap": [5, 26, 32, 71], "siames": 5, "contrastivenet": 5, "sleepstagerchambon2018": [5, 9, 26], "input_size_sampl": [5, 9, 10, 11], "emb_siz": [5, 85], "emb": [5, 85], "n_output": [5, 9, 10, 11, 26, 31, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 121], "n_conv_ch": [5, 100], "apply_batch_norm": [5, 99, 100], "linear": [5, 9, 10, 26, 30, 46, 63, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 105, 109], "top": [5, 9, 10, 11, 35], "x1": [5, 124], "x2": [5, 124], "z1": 5, "z2": 5, "flatten": [5, 9, 10, 11], "similar": [5, 27, 107], "account": [5, 71, 114], "smaller": [5, 27, 32, 81, 90, 91, 115], "checkpoint": [5, 32], "earlystop": [5, 29, 32], "epochscor": [5, 8, 9, 10, 11, 68, 121], "5e": 5, "128": [5, 10, 11, 68, 73, 90, 91, 100, 105, 121], "512": [5, 11], "enough": [5, 73], "num_work": [5, 14, 32, 132], "cp": 5, "dirnam": 5, "f_criterion": 5, "f_optim": 5, "f_histori": 5, "early_stop": 5, "patienc": 5, "train_acc": 5, "bcewithlogitsloss": [5, 68, 121], "adam": [5, 9, 10, 11, 14, 31], "max_epoch": [5, 29, 32, 68, 121], "iterator_train__sampl": [5, 9, 10, 11], "iterator_valid__sampl": [5, 9, 10, 11], "iterator_train__num_work": 5, "iterator_valid__num_work": 5, "load_param": 5, "lowest": 5, "pt": [5, 84], "delet": [5, 22, 71, 120], "file": [5, 6, 12, 13, 14, 16, 17, 18, 19, 23, 26, 33, 34, 71, 75, 76, 82, 107, 125, 137, 142, 143], "5234": 5, "7013": 5, "6680": 5, "6320": 5, "1686": 5, "5938": 5, "7149": 5, "4880": 5, "8358": 5, "9130": 5, "4922": 5, "0040": 5, "6440": 5, "6172": 5, "8862": 5, "7031": 5, "6120": 5, "5990": 5, "8866": 5, "5391": [5, 27, 28, 29, 30, 31], "6751": 5, "5920": 5, "6213": 5, "8853": 5, "6719": 5, "6227": 5, "6263": 5, "6562": 5, "6309": 5, "6240": 5, "6117": 5, "8836": 5, "6641": 5, "6272": 5, "6480": 5, "5950": 5, "8611": 5, "6328": 5, "6238": 5, "5797": 5, "8842": 5, "6406": [5, 30], "6177": 5, "6800": 5, "5746": 5, "8826": 5, "6250": 5, "6323": 5, "7040": 5, "5787": 5, "8748": 5, "6094": 5, "6281": 5, "6760": 5, "5772": 5, "8744": 5, "6422": 5, "6880": 5, "5790": 5, "8755": 5, "6840": 5, "5765": 5, "8717": 5, "6170": 5, "6920": 5, "5730": 5, "7578": 5, "5608": 5, "6960": 5, "5676": 5, "8828": 5, "6875": 5, "5936": 5, "7120": 5, "5612": 5, "8848": 5, "7734": 5, "5472": 5, "7080": 5, "8830": 5, "19": [5, 9, 10, 11, 16, 27, 107, 113], "7656": 5, "5245": 5, "5400": 5, "8767": 5, "5641": 5, "7160": 5, "5333": 5, "9232": 5, "21": [5, 9, 10, 11, 16, 27, 31, 113], "7422": 5, "5307": 5, "7200": [5, 10], "5272": 5, "8864": 5, "7109": 5, "5499": 5, "7360": 5, "5211": [5, 22], "8721": 5, "6259": 5, "7400": 5, "5164": 5, "8739": 5, "5712": 5, "5120": 5, "8878": 5, "5030": 5, "7280": 5, "8986": 5, "balanc": [5, 9, 10, 11, 122, 143], "to_list": [5, 9, 10, 11], "ys1": 5, "ys2": 5, "y1": 5, "y2": 5, "zip": [5, 12, 16, 24], "l": [5, 9, 10, 11, 12, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 84, 86, 96, 97, 98, 105, 122, 136], "orang": [5, 12, 16], "lines1": 5, "labels1": 5, "get_legend_handles_label": 5, "lines2": 5, "labels2": 5, "displai": [5, 9, 10, 11, 27, 28, 29, 32, 73, 134], "confus": [5, 9, 10, 11, 136, 143], "matrix": [5, 9, 10, 11, 39, 40, 47, 57, 58, 64, 88, 136, 143], "report": [5, 9, 10, 11, 14, 29, 32, 76, 77, 84, 137], "confusion_matrix": [5, 9, 10, 11, 27, 28, 136], "classification_report": [5, 9, 10, 11], "switch": [5, 32, 143], "y_pred": [5, 9, 10, 11, 27, 28, 68, 105, 128], "y_true": [5, 9, 10, 11, 27, 28, 68], "90": [5, 16, 29, 136], "41": [5, 11, 16, 27], "88": [5, 16], "precis": [5, 9, 10, 11, 136], "recal": [5, 9, 10, 11], "f1": [5, 9, 10, 11, 84, 95, 129], "support": [5, 9, 10, 11, 18, 27, 32, 68, 109, 112, 113, 119, 121, 143], "74": [5, 16, 27], "71": [5, 16], "121": [5, 12], "68": [5, 16, 27], "129": [5, 11], "macro": [5, 9, 10, 11], "avg": [5, 9, 10, 11], "logist": 5, "balanced_accuracy_scor": [5, 11], "linear_model": 5, "logisticregress": 5, "standardscal": 5, "make_pipelin": 5, "singl": [5, 9, 10, 27, 30, 41, 42, 43, 59, 60, 68, 87, 101, 113, 121, 132, 143], "no_grad": [5, 32], "feat": 5, "batch_x": [5, 22], "concaten": [5, 9, 10, 71, 84, 104, 109, 114, 115], "log_reg": 5, "penalti": 5, "l2": [5, 84], "class_weight": [5, 9, 10, 11], "solver": 5, "lbfg": 5, "multi_class": 5, "multinomi": 5, "clf_pipe": 5, "train_y_pr": 5, "valid_y_pr": 5, "test_y_pr": 5, "train_bal_acc": [5, 9, 10, 11], "valid_bal_acc": [5, 9, 10, 11], "test_bal_acc": 5, "bal": 5, "acc": [5, 29, 32], "4f": 5, "_logist": 5, "469": 5, "convergencewarn": 5, "fail": [5, 12], "converg": [5, 29, 31], "statu": 5, "stop": [5, 32, 37, 55, 81, 109, 114, 115, 133, 143], "NO": 5, "reach": [5, 9, 10, 32], "max_it": 5, "scikit": [5, 24, 25, 33, 68, 71, 74, 93, 98, 111, 115, 118, 120, 121, 134, 136, 142, 143], "altern": [5, 26, 32, 68, 121], "option": [5, 10, 18, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 61, 68, 71, 74, 81, 84, 85, 91, 92, 93, 109, 112, 115, 121, 132, 136, 141, 143], "n_iter_i": 5, "_check_optimize_result": 5, "8924": 5, "5215": 5, "6011": 5, "107": [5, 26], "70": [5, 16, 27], "350": 5, "77": [5, 11, 16], "79": [5, 16], "58": [5, 11, 16], "66": [5, 16], "142": [5, 143], "43": [5, 10, 11, 16, 27], "109": 5, "81": [5, 16, 19], "62": [5, 14, 16, 26, 27], "562": 5, "86": [5, 11, 16, 27], "48": [5, 10, 11, 16, 18, 20, 21, 27, 28, 29, 30, 32, 70, 92], "61": [5, 9, 16, 26, 27], "105": 5, "46": [5, 11, 16, 26], "170": [5, 143], "1088": [5, 103], "57": [5, 14, 16, 26], "much": [5, 27, 68, 112, 121], "chanc": [5, 9, 10], "level": [5, 9, 10, 22, 69, 107, 109, 110, 112, 113, 143], "problem": [5, 26, 42, 60, 137, 140], "quick": [5, 123], "2d": [5, 136], "space": [5, 16], "pca": 5, "decomposit": 5, "cm": [5, 70, 136], "n_compon": 5, "tsne": 5, "compon": [5, 9, 10, 11, 73, 90, 91], "fit_transform": 5, "get_cmap": 5, "viridi": 5, "enumer": [5, 12, 29, 32], "n1": [5, 9, 10, 11], "n2": [5, 9, 10, 11], "n3": [5, 9, 10, 11], "scatter": [5, 16, 31], "alpha": [5, 9, 10, 11, 12, 46, 84, 90, 91], "advanced_train": [5, 6, 142], "plot_relative_posit": [5, 6, 142], "472": [5, 143], "matplotlibdeprecationwarn": 5, "minor": 5, "releas": [5, 90, 137, 141], "colormap": [5, 136], "obj": 5, "0x7fbb96ba06d0": 5, "nonlinear": [5, 29, 68, 84, 96, 121], "project": [5, 12, 14, 19, 26, 76, 77, 113], "umap": 5, "might": [5, 14, 16, 26, 29, 30, 32, 115, 123], "insight": 5, "explor": [5, 29], "ag": [5, 12, 18, 22, 70, 73, 76, 77], "sex": 5, "specif": [5, 9, 10, 11, 16, 18, 30, 68, 82, 99, 107, 121, 123, 139], "subset": [5, 8, 20, 29, 31, 71, 109, 110, 143], "achiev": [5, 9, 10, 11], "reason": [5, 10, 29, 32, 68, 121, 129], "avenu": 5, "entir": [5, 14, 20, 29, 32, 143], "describ": [5, 11, 26, 27, 28, 29, 32, 73, 86, 87, 90, 91, 92, 93, 96, 98, 99, 100, 101, 105], "discov": 5, "2020": [5, 37, 38, 39, 44, 52, 55, 56, 58, 61, 66, 90, 91, 99, 103, 124], "preprint": [5, 31, 37, 38, 39, 40, 42, 44, 52, 55, 56, 57, 58, 60, 61, 66, 94, 95, 102, 124], "2007": [5, 37, 44, 52, 55, 61, 66, 124], "16104": [5, 124], "kemp": [5, 9, 10, 11], "b": [5, 9, 10, 11, 16, 27, 40, 57, 85, 88, 94, 95, 105], "zwinderman": [5, 9, 10, 11], "tuk": [5, 9, 10, 11], "kamphuisen": [5, 9, 10, 11], "obery": 5, "2000": [5, 9, 10, 11, 22, 30, 123], "neuron": [5, 9, 10, 11], "feedback": [5, 9, 10, 11, 70], "loop": [5, 9, 10, 11, 14, 68, 121], "slow": [5, 9, 10, 11, 16, 134, 143], "wave": [5, 9, 10, 11], "microcontinu": [5, 9, 10, 11], "ieee": [5, 9, 10, 11, 47, 48, 49, 50, 64, 84, 87, 88, 89, 90, 91, 100, 101], "transact": [5, 10, 84, 87, 88, 90, 91, 100, 101], "biomed": 5, "1185": [5, 9, 10, 11, 22], "1194": [5, 9, 10, 11], "goldberg": [5, 9, 10, 11], "amar": [5, 9, 10, 11], "glass": [5, 9, 10, 11], "hausdorff": [5, 9, 10, 11], "ivanov": [5, 9, 10, 11], "p": [5, 9, 10, 27, 28, 29, 30, 31, 37, 44, 52, 55, 61, 66, 94, 95, 100], "mark": [5, 9, 10, 11], "stanlei": [5, 9, 10, 11], "physiobank": [5, 9, 10, 11], "physiotoolkit": [5, 9, 10, 11], "research": [5, 9, 10, 11, 30, 35, 138], "resourc": [5, 7, 9, 10, 11, 13, 16, 24, 71, 76, 111, 114, 120, 142, 143], "complex": [5, 9, 10, 11, 29, 32, 73, 99], "circul": [5, 9, 10, 11], "101": [5, 9, 10, 11, 12], "e215": [5, 9, 10, 11], "e220": [5, 9, 10, 11], "chambon": [5, 9, 10, 100], "galtier": [5, 9, 10, 100], "arnal": [5, 9, 10, 100], "wainrib": [5, 9, 10, 100], "2018": [5, 9, 10, 28, 29, 30, 40, 42, 44, 46, 57, 60, 61, 63, 95, 100, 102], "multivari": [5, 9, 10, 100], "multimod": [5, 9, 10, 100], "tran": [5, 9, 10], "system": [5, 9, 10, 47, 64, 85, 87, 88, 90, 91, 100, 101, 140], "rehabilit": [5, 9, 10, 87, 88, 90, 91, 100, 101], "758": [5, 9, 10, 100], "769": [5, 9, 10, 100], "262": [5, 6, 142], "149": [5, 22], "03": [6, 9, 10, 11, 13, 16, 23, 27, 142], "28": [6, 9, 11, 16, 29, 30, 33, 90, 91, 142], "179": 6, "execut": [6, 11, 12, 13, 14, 16, 17, 19, 23, 33, 34, 73, 120, 142], "auto_exampl": [6, 13, 23, 33, 34], "mem": [6, 13, 16, 23, 33, 34, 142], "148": [6, 142, 143], "00": [6, 10, 13, 16, 23, 26, 27, 29, 32, 33, 34, 142], "analaysi": [7, 24], "sleep": [7, 13, 16, 24, 30, 42, 60, 71, 75, 85, 87, 93, 99, 100, 101, 104, 105, 111, 115, 120, 122, 123, 125, 134, 136, 142, 143], "cognit": [7, 24], "experi": [7, 14, 24, 29, 32, 69, 73], "stage": [7, 13, 24, 29, 30, 32, 71, 75, 87, 93, 99, 100, 101, 104, 105, 111, 115, 120, 122, 123, 125, 134, 136, 142, 143], "chambon2018": [7, 13, 24, 71, 75, 93, 100, 104, 111, 115, 120, 123, 125, 134, 136, 142], "eldele2021": [7, 13, 24, 71, 75, 93, 101, 104, 111, 115, 120, 123, 125, 134, 136, 142], "big": [7, 13, 24, 71, 76, 111, 114, 120, 142, 143], "tuh": [7, 13, 14, 15, 23, 24, 71, 77, 85, 111, 114, 120, 142, 143], "corpu": [7, 13, 14, 15, 23, 24, 71, 76, 77, 85, 111, 114, 120, 142, 143], "bcicomp": 8, "0x7fbb96e58970": 8, "decid": [8, 28, 38, 39, 40, 42, 51, 53, 54], "about": [8, 9, 10, 12, 26, 30, 72, 78, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 134, 137], "length": [8, 9, 11, 12, 14, 16, 26, 27, 30, 46, 63, 71, 81, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 114, 115, 143], "preced": 8, "create_windows_from_target_channel": [8, 143], "cnosid": 8, "finer": [8, 143], "fexion": 8, "idx_train": 8, "idx_valid": 8, "n_out_chan": 8, "long": [8, 14, 29, 30, 73, 87], "respons": [8, 9, 10, 11, 28, 30], "manag": [8, 9, 10, 11, 28, 30, 31], "inherit": [8, 9, 10, 11, 26, 28, 30, 68, 121], "neuralnetregressor": 8, "logic": [8, 9, 10, 11, 28, 30, 32], "pearson": 8, "pearson_r_scor": 8, "net": [8, 26, 68, 101, 105, 121, 127, 128, 129], "mseloss": [8, 121], "valid_pearson_r": 8, "train_pearson_r": 8, "train_r2": 8, "valid_r2": 8, "5083": 8, "1251": [8, 22], "5570": 8, "7337": 8, "1507": 8, "6139": 8, "2937": 8, "7986": 8, "3712": 8, "3153": 8, "2582": 8, "1510": 8, "3971": 8, "2060": 8, "401": [8, 13, 142], "112": 8, "plot_bcic_iv_4_ecog_tri": [8, 13, 142], "test": [9, 10, 11, 16, 21, 24, 25, 27, 28, 30, 33, 68, 71, 73, 74, 93, 98, 111, 115, 118, 120, 121, 134, 142, 143], "adapt": [9, 11, 16, 89, 90, 91, 101, 102, 103], "distribut": [9, 10, 29, 46, 139], "individu": [9, 10, 11, 12, 26, 27, 68, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 121, 143], "integr": [9, 10, 32, 143], "omit": [9, 37], "downsampl": [9, 10, 112], "apply_on_arrai": [9, 10, 12, 111], "0x7fbad2d37a60": 9, "0x7fbad159a890": 9, "take": [9, 10, 11, 16, 17, 29, 31, 54, 82, 84, 85, 88, 92, 101], "everi": [9, 10, 11, 12, 14, 18, 22, 29, 32, 73, 84, 88, 92], "consecut": [9, 10, 11, 52, 66, 104, 115, 122, 125], "simplifi": [9, 10, 123, 143], "rather": [9, 10], "freez": [9, 10, 143], "sequencesampl": [9, 10, 11, 143], "n_window": [9, 10, 11, 22, 84, 122, 125], "n_windows_strid": [9, 10, 11, 125], "maxim": [9, 10, 30, 37], "overlap": [9, 10, 11, 79, 80, 81, 109, 114, 115], "372": 9, "383": 9, "implement": [9, 10, 14, 16, 26, 29, 46, 54, 63, 68, 84, 89, 90, 91, 92, 94, 95, 121, 131, 132, 138, 143], "get_center_label": [9, 10], "isinst": [9, 10], "ceil": [9, 10, 103], "astyp": [9, 10], "appear": [9, 10, 11, 70], "lot": [9, 10, 11, 68, 121], "night": [9, 10, 11], "spent": [9, 10, 11], "imbalanc": [9, 10, 11], "avoid": [9, 10, 11, 12, 14, 16, 22, 27, 29, 75, 143], "frequent": [9, 10, 11], "compute_class_weight": [9, 10, 11], "vector": [9, 10, 109, 112], "timedistribut": [9, 10, 143], "feat_extractor": [9, 10], "return_feat": [9, 10, 87, 99, 100, 101], "start_dim": [9, 10], "len_last_lay": [9, 10], "neuralnetclassifi": [9, 10, 11, 28, 30], "mass": 9, "ss3": 9, "speak": [9, 11, 14], "recommend": [9, 11, 16, 29, 30, 35, 88, 140, 141], "balanced_accuraci": [9, 10], "criterion__weight": [9, 10, 11], "tensor": [9, 10, 11, 22, 26, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 85, 87, 88, 92, 97, 99, 100, 101, 102, 103, 104, 121, 126, 130, 131], "2136": 9, "5768": 9, "0888": 9, "6372": 9, "6471": 9, "2036": 9, "4788": 9, "6676": 9, "5103": 9, "2324": 9, "4033": 9, "0966": 9, "2102": 9, "6337": 9, "5178": 9, "2888": 9, "3407": 9, "1149": [9, 29], "2465": 9, "6790": 9, "4997": 9, "3993": 9, "2126": 9, "4517": 9, "4013": 9, "6235": 9, "1726": 9, "5294": 9, "0967": 9, "2768": 9, "4076": [9, 30], "6179": 9, "9114": 9, "5755": 9, "9662": 9, "5927": 9, "5671": [9, 22], "3689": 9, "5050": 9, "6251": 9, "8904": 9, "7076": 9, "5786": 9, "2952": 9, "5144": 9, "6877": 9, "8148": 9, "7154": 9, "5876": 9, "3450": 9, "5018": 9, "6860": 9, "7449": 9, "5196": 9, "5269": 9, "6322": 9, "5206": 9, "spatial_conv": 9, "kernel_s": [9, 10, 93, 102, 143], "feature_extractor": [9, 10], "ident": [9, 11, 32, 45, 68, 86, 121], "relu": [9, 10, 92], "maxpool2d": 9, "dilat": [9, 10, 11, 27, 93], "ceil_mod": [9, 10], "end_dim": [9, 10], "inplac": [9, 10, 16], "in_featur": [9, 10], "816": 9, "out_featur": [9, 10], "bia": [9, 10, 11], "sharex": [9, 10, 11], "plot_confusion_matrix": [9, 10, 11, 27, 28, 143], "confusion_mat": [9, 10, 11, 27, 28, 136], "class_nam": [9, 10, 11, 27, 28, 136], "wake": [9, 10, 11, 75], "rem": [9, 10, 11], "33": [9, 11, 16, 26], "56": [9, 11, 16, 27], "34": [9, 11, 13, 16, 30], "42": [9, 11, 16, 27, 30], "194": 9, "37": [9, 11, 13, 16, 22, 26, 27, 142], "hypnogram": [9, 10, 11], "overlaid": [9, 10, 11], "correctli": [9, 10, 11, 93, 141, 143], "identifi": [9, 10, 11, 81, 115], "amount": [9, 10, 11, 16, 112], "expert": [9, 10, 11], "annot": [9, 10, 11, 18, 19, 21, 27, 28, 29, 30, 32, 109, 143], "text": [9, 10, 11, 29, 136], "150": [9, 10, 11, 73], "22222222222223": [9, 10, 11], "despit": [9, 10, 11], "held": [9, 10], "includ": [9, 11, 12, 14, 28, 29, 30, 32, 39, 58, 74, 107, 109, 110, 114, 115, 137, 138], "especi": [9, 30, 32], "ah": [9, 10, 11], "hac": [9, 10, 11], "jjl": [9, 10, 11], "obery\u00e9": [9, 10, 11], "bme": [9, 10, 11], "al": [9, 10, 11, 26, 73, 85, 86, 87, 89, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 129], "lan": [9, 10, 11], "jm": [9, 10, 11], "pch": [9, 10, 11], "rg": [9, 10, 11], "mietu": [9, 10, 11], "je": [9, 10, 11], "moodi": [9, 10, 11], "gb": [9, 10, 11], "peng": [9, 10, 11, 44, 61], "he": [9, 10, 11], "777": [9, 13, 142], "plot_sleep_staging_chambon2018": [9, 13, 142], "attent": [10, 84, 85, 88, 101], "divyesh": [10, 143], "narayanan": [10, 143], "400": [10, 11, 143], "speed": [10, 11, 16, 143], "0x7fbac09fa5c0": 10, "fpz": 10, "cz": [10, 12, 26, 113, 119], "give": [10, 12, 22, 26, 47, 64, 109, 137], "pz": [10, 12], "oz": 10, "130": [10, 19], "reject": [10, 19, 114, 115, 116], "flat": [10, 19, 38, 56, 114, 115, 116], "bad": [10, 14, 19, 109, 110, 113, 137], "slower": [10, 14, 19], "futur": [10, 19, 26, 30, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105], "0x7fbac09db5b0": 10, "133": [10, 11], "sleepstagereldele2021": [10, 26, 143], "1471": 10, "1811": 10, "3459": 10, "1795": 10, "4760": 10, "3109": 10, "2781": 10, "8815": 10, "1955": 10, "2186": 10, "1547": 10, "0636": 10, "4518": 10, "4929": 10, "2331": 10, "2295": 10, "1885": 10, "0085": 10, "_mrcnn": 10, "gelu": 10, "approxim": [10, 48, 49, 50], "features1": 10, "conv1d": [10, 11, 105], "batchnorm1d": [10, 11], "ep": [10, 118], "05": [10, 11, 12, 16, 103], "momentum": [10, 26, 86, 90, 91, 98], "affin": 10, "track_running_stat": 10, "maxpool1d": [10, 11], "features2": 10, "afr": [10, 101], "_sebasicblock": 10, "conv1": 10, "bn1": 10, "conv2": 10, "bn2": 10, "se": 10, "_selay": 10, "avg_pool": 10, "adaptiveavgpool1d": [10, 103], "output_s": [10, 93, 104], "fc": [10, 101], "sigmoid": [10, 68, 121], "_tce": 10, "modulelist": 10, "_encoderlay": 10, "self_attn": 10, "_multiheadedattent": 10, "conv": [10, 11, 105], "_causalconv1d": 10, "feed_forward": 10, "_positionwisefeedforward": 10, "w_1": 10, "120": [10, 73, 101], "w_2": 10, "sublayer_output": 10, "_sublayeroutput": 10, "norm": [10, 84], "layernorm": 10, "06": [10, 11, 13, 16, 27, 33, 142], "elementwise_affin": 10, "n4": 10, "_classif": 10, "1509": 10, "undefinedmetricwarn": 10, "ill": 10, "zero_divis": 10, "behavior": [10, 30, 32, 68, 121, 143], "_warn_prf": 10, "averag": [10, 12, 27, 29, 31, 32, 68, 84, 93, 113, 121, 126], "capit": 10, "07": [10, 16, 27, 29], "faster": [10, 16, 27, 68, 112, 121], "89": [10, 16, 27], "eldel": [10, 101], "et": [10, 26, 73, 85, 86, 87, 89, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 129], "With": [10, 101], "vol": [10, 101], "29": [10, 11, 16, 27, 31, 101], "pp": [10, 37, 44, 47, 48, 49, 50, 52, 55, 61, 64, 66, 88, 101], "809": [10, 101], "818": [10, 101], "1109": [10, 84, 89, 90, 91, 101], "tnsre": [10, 90, 91, 101], "3076234": [10, 101], "052": [10, 13, 142], "plot_sleep_staging_eldele2021": [10, 13, 142], "look": [11, 12, 17, 22, 26, 29, 69, 123], "simpler": 11, "current": [11, 68, 113, 121, 137], "seq2seq": 11, "written": [11, 120, 139], "veri": [11, 29, 32, 71, 115], "short": [11, 12, 29, 32, 70, 87], "too": 11, "small": [11, 12, 27, 29, 137], "theo": [11, 143], "gnassoun": [11, 143], "omar": [11, 143], "emir": 11, "zero": [11, 16, 52, 66, 109, 112, 115, 118, 143], "median": 11, "unit": [11, 26, 109, 141], "interquartil": 11, "upsampl": [11, 105, 112], "light": [11, 136], "No": [11, 19, 26, 29, 32, 70], "robust_scal": 11, "0x7fbad9646680": 11, "shorter": [11, 143], "fulli": [11, 29, 30, 84, 88, 90, 91, 92], "usleep": [11, 26, 143], "in_chan": [11, 26, 31, 86, 94, 95, 96, 97, 98, 103, 105, 106], "with_skip_connect": [11, 105], "balanced_accuracy_multi": 11, "deactiv": 11, "set_param": [11, 68, 121], "callbacks__valid_acc": 11, "306": 11, "even": [11, 26, 29, 32, 68, 69, 105, 121], "odd": [11, 92, 105], "trigger": 11, "intern": [11, 14, 16, 20, 21, 44, 46, 47, 48, 49, 50, 61, 63, 64, 111], "aten": 11, "src": 11, "nativ": 11, "cpp": 11, "1040": 11, "2040": 11, "6129": 11, "1707": 11, "5807": 11, "2386": 11, "2224": 11, "5430": 11, "1594": 11, "5866": 11, "7220": 11, "3464": 11, "4928": 11, "1853": 11, "6026": 11, "7329": 11, "3000": [11, 22, 31], "encod": [11, 85, 101, 105], "_encoderblock": 11, "1500": [11, 26, 103, 123], "block_prepool": 11, "102": 11, "maxpool": [11, 105], "750": 11, "405": 11, "375": 11, "726": 11, "188": [11, 13, 142], "constantpad1d": 11, "377": 11, "94": [11, 16], "160": [11, 73], "004": 11, "960": 11, "49": [11, 16, 27], "565": 11, "876": 11, "108": 11, "536": 11, "152": [11, 143], "115": 11, "368": 11, "214": 11, "228": 11, "338": 11, "bottom": 11, "302": 11, "452": 11, "698": 11, "elu": [11, 84, 85, 86, 90, 91, 96], "604": 11, "_decoderblock": 11, "block_preskip": 11, "898": 11, "block_postskip": 11, "428": [11, 143], "641": 11, "786": 11, "65": [11, 16], "304": [11, 143], "323": 11, "912": 11, "156": 11, "216": 11, "163": 11, "620": 11, "863": 11, "154": [11, 19, 23, 142], "83": [11, 16, 22, 32], "237": 11, "635": 11, "110": 11, "515": [11, 143], "520": [11, 143], "324": 11, "060": 11, "660": 11, "44": [11, 16, 27, 30, 73], "376": 11, "645": 11, "195": 11, "363": 11, "727": 11, "225": 11, "161": [11, 143], "126": 11, "51": [11, 16, 27], "522": 11, "tanh": 11, "avgpool1d": 11, "482": 11, "011": 11, "02": [11, 13, 16, 23, 26, 27, 33, 85, 142], "91": [11, 16], "93": [11, 16, 44, 61], "52": [11, 16, 23, 26, 142], "197": [11, 143], "84": [11, 16, 27], "399": 11, "perslev": [11, 105, 122], "darkner": [11, 105, 122], "kempfner": [11, 105, 122], "nikol": [11, 105, 122], "jennum": [11, 105, 122], "pj": [11, 105, 122], "igel": [11, 105, 122], "resili": [11, 105, 122], "npj": [11, 105, 122], "digit": [11, 22, 105, 122], "med": [11, 105, 122], "72": [11, 16, 30, 105, 122], "plot_sleep_staging_usleep": [11, 13, 142], "showcas": [12, 29, 32], "templ": [12, 76, 77, 143], "univers": [12, 73, 76, 77, 143], "hospit": [12, 76, 77, 143], "www": [12, 14, 35, 69, 76, 77], "isip": [12, 14, 76, 77], "piconepress": [12, 14, 76, 77], "tuh_eeg": [12, 14, 22, 76, 77], "shtml": [12, 76, 77], "c_tueg": [12, 76], "luka": [12, 17, 18, 19, 20, 21, 22, 31, 35, 143], "gemein": [12, 17, 18, 19, 20, 21, 22, 31, 143], "tempfil": [12, 16, 18], "error": [12, 22, 27, 30, 31, 81, 108, 114, 115, 116, 121, 137, 143], "messag": [12, 14, 22, 137], "creation": [12, 22], "mock": [12, 22], "want": [12, 14, 18, 21, 22, 24, 28, 29, 30, 32, 68, 121, 138, 141], "disconsid": 12, "section": [12, 22, 73, 140], "_tuhmock": [12, 22], "noqa": [12, 22], "f811": [12, 22], "firstli": [12, 21], "complet": [12, 14, 16, 27, 68, 121], "read": [12, 14, 16, 17, 18, 19, 76, 77, 82, 115], "tuh_path": [12, 14, 22], "pars": 12, "path": [12, 14, 16, 17, 18, 19, 22, 32, 69, 71, 76, 77, 82, 83], "patient": [12, 69], "id": [12, 18, 20, 21, 27, 28, 29, 30, 32, 71, 76, 77, 82, 114, 115, 143], "sort": [12, 27, 28, 143], "chronolog": [12, 76, 77], "year": [12, 35], "month": [12, 35], "dai": [12, 70], "segment": [12, 16, 29, 32, 88, 109], "regard": 12, "gender": [12, 18, 22, 76, 77], "insert": [12, 22, 93], "job": [12, 68, 76, 82, 109, 112, 114, 115, 120, 121], "load": [12, 16, 17, 19, 22, 23, 69, 71, 74, 75, 77, 82, 86, 98, 111, 114, 115, 120, 142, 143], "target_nam": [12, 14, 18, 22, 31, 71, 72, 76, 77, 82, 143], "add_physician_report": [12, 22, 76, 77], "__name__": 12, "statist": 12, "plt_histogram": 12, "df_of_ages_gend": 12, "ylim": 12, "show_titl": 12, "dafaram": 12, "male_df": 12, "female_df": 12, "figur": [12, 27, 28, 29, 70, 84, 136], "suptitl": 12, "95": [12, 16, 68, 121], "male": 12, "hist": 12, "bin": 12, "green": 12, "orient": 12, "horizont": 12, "axhlin": 12, "1f": [12, 32], "std": [12, 29, 44, 61, 73], "barh": [12, 29], "height": [12, 29], "width": [12, 30, 103, 109], "xlim": 12, "upper": [12, 16, 109], "left": [12, 27, 28, 29, 40, 68, 70, 73, 121], "ytick": 12, "gca": 12, "invert_xaxi": 12, "femal": [12, 73], "122": 12, "subplots_adjust": 12, "wspace": 12, "hspace": 12, "count": [12, 68, 121], "labelpad": 12, "durat": [12, 29, 30, 31, 107, 109, 115], "least": [12, 109, 123, 124, 133], "five": [12, 69], "select_by_dur": 12, "inf": 12, "determin": [12, 30, 68, 91, 121], "d_i": 12, "ones": [12, 26, 122, 143], "split": [12, 15, 20, 23, 24, 26, 31, 68, 71, 74, 86, 98, 115, 121, 142, 143], "discard": [12, 75], "incomplet": 12, "configur": [12, 16, 27, 29, 32], "subdivis": 12, "le": 12, "repres": [12, 21, 48, 49, 50, 88], "re": [12, 21, 68, 113, 121, 137], "referenc": [12, 113], "short_ch_nam": 12, "a1": 12, "a2": 12, "fp1": 12, "fp2": 12, "f3": 12, "f4": 12, "c3": [12, 26], "c4": [12, 26], "p3": 12, "p4": 12, "o1": [12, 119], "o2": 12, "f7": 12, "f8": 12, "t3": 12, "t4": 12, "t5": 12, "t6": 12, "fz": 12, "subdivid": 12, "refer": [12, 35, 37, 38, 39, 40, 42, 44, 46, 47, 48, 49, 50, 52, 55, 56, 57, 58, 60, 61, 63, 64, 66, 69, 70, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 113, 119, 122, 124, 131, 136], "ar_ch_nam": 12, "ref": 12, "le_ch_nam": 12, "ar_ch_map": 12, "ch_name": [12, 14, 17, 26, 79, 108, 119], "le_ch_map": 12, "ch_map": 12, "select_by_channel": 12, "endswith": 12, "seta": 12, "kei": [12, 21, 26, 27, 28, 71, 72, 78, 114, 115], "recod": 12, "setb": 12, "issubset": 12, "region": [12, 109], "micro": 12, "volt": 12, "clip": 12, "outlier": 12, "800": [12, 18], "common": [12, 14, 113, 140, 143], "custom_rename_channel": 12, "unexpect": [12, 137], "rename_channel": 12, "custom_crop": 12, "include_tmax": [12, 107], "bigger": 12, "set_eeg_refer": [12, 113], "ref_channel": [12, 113], "ch_type": [12, 26, 113], "pick_channel": [12, 108, 111], "a_min": 12, "a_max": 12, "parallel": [12, 14, 15, 23, 24, 71, 75, 76, 82, 90, 91, 92, 109, 111, 112, 114, 115, 120, 142, 143], "addition": [12, 18, 26, 35, 68, 121, 132], "serial": [12, 15, 18, 23, 24, 71, 75, 111, 114, 120, 142, 143], "lazi": [12, 15, 16, 23, 24, 77, 86, 98, 114, 142, 143], "capabl": [12, 16, 29, 32, 68, 121], "automat": [12, 14, 26, 69, 87, 103, 113, 143], "reload": [12, 16, 120], "machin": [12, 14, 16, 29, 32, 35, 37, 40, 44, 52, 55, 57, 61, 66, 68, 121], "build": [12, 27, 32, 139, 141], "core": [12, 16, 32], "out_path": 12, "mkdtemp": [12, 18], "directori": [12, 16, 18, 27, 69, 71, 76, 77, 82, 120, 141], "tuh_preproc": 12, "concat_d": [12, 16, 18, 114, 115, 116, 120], "save_dir": [12, 16, 120], "readi": [12, 16, 17, 18, 19, 31], "model": [12, 14, 21, 33, 35, 44, 61, 68, 71, 72, 74, 111, 114, 115, 118, 120, 121, 126, 127, 128, 129, 130, 131, 132, 134, 135, 138, 142, 143], "train": [12, 14, 20, 21, 33, 68, 71, 73, 74, 78, 85, 93, 98, 111, 115, 118, 120, 121, 134, 142, 143], "disk": [12, 14, 16, 76, 77, 115], "tuh_window": [12, 22], "928": [12, 13, 142], "plot_tuh_eeg_corpu": [12, 13, 142], "346": 13, "applied_exampl": [13, 142], "111": [13, 142], "sake": 14, "etc": [14, 28, 30, 85, 111], "preprocess": [14, 15, 18, 19, 20, 21, 22, 23, 24, 26, 31, 71, 75, 138, 142, 143], "continu": [14, 16, 20, 72, 73, 79, 80, 81, 114, 115, 140, 143], "fast": [14, 16, 32, 134], "expens": [14, 68, 121], "ultim": 14, "becom": [14, 16, 29], "imposs": 14, "tb": 14, "potenti": [14, 16, 32, 140], "issu": [14, 16, 137, 143], "overhead": [14, 115], "accommod": 14, "window": [14, 16, 18, 19, 21, 26, 68, 71, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 112, 114, 115, 121, 122, 123, 124, 125, 132, 133, 143], "overal": 14, "though": [14, 16, 29, 32], "impact": [14, 27, 30], "dispatch": 14, "enabl": [14, 16, 27, 32, 68, 70, 103, 121, 143], "fif": [14, 16, 18, 71, 82, 143], "edf": [14, 16, 17, 19, 22], "itertool": [14, 16], "product": [14, 16], "seaborn": [14, 29, 30], "sn": [14, 29, 30], "tuhabnorm": [14, 18, 143], "deep4net": [14, 26, 31, 143], "affect": [14, 27, 129], "algorithm": [14, 26, 28, 29, 30, 32], "set_num_thread": 14, "thread": 14, "autom": [14, 29], "abnorm": [14, 77, 85], "slide": [14, 31, 84, 114], "bundl": 14, "prepar": [14, 16, 20, 32], "load_example_data": 14, "window_len_": 14, "n_record": [14, 123], "creat": [14, 16, 17, 18, 19, 20, 21, 31, 68, 71, 78, 79, 80, 81, 113, 114, 115, 121, 132, 143], "bool": [14, 26, 42, 46, 47, 48, 49, 50, 60, 64, 68, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 109, 110, 111, 112, 113, 114, 115, 119, 120, 121, 124, 125, 129, 132, 134, 136], "windows_d": [14, 16], "assum": [14, 26, 68, 107, 121, 126, 130, 143], "patholog": [14, 18, 77], "window_len_sampl": 14, "xxx": 14, "itself": [14, 29, 30, 137], "drop_bad": [14, 81, 115], "create_example_model": 14, "kind": [14, 26], "str": [14, 22, 26, 27, 28, 29, 36, 68, 69, 71, 72, 74, 76, 77, 78, 81, 82, 86, 88, 93, 98, 107, 108, 109, 110, 111, 112, 113, 114, 115, 120, 121, 129, 136], "n_filters_tim": [14, 26, 31, 86, 88, 98], "filter_time_length": [14, 26, 86, 88, 98], "n_filters_spat": [14, 26, 31, 86, 98], "pool_time_length": [14, 26, 86, 88, 98], "pool_time_strid": [14, 26, 86, 88, 98], "split_first_lay": [14, 26, 86, 96, 98], "batch_norm": [14, 26, 86, 98], "batch_norm_alpha": [14, 26, 86, 90, 91, 96, 98], "drop_prob": [14, 26, 30, 86, 88, 89, 90, 91, 94, 95, 98, 102, 103], "elif": [14, 31], "n_filters_2": [14, 31, 86], "filter_length_2": [14, 86], "n_filters_3": [14, 31, 86], "filter_length_3": [14, 86], "n_filters_4": [14, 31, 86], "filter_length_4": [14, 86], "first_pool_mod": [14, 86], "max": [14, 16, 26, 29, 86, 94, 98, 100, 103, 105, 109, 118], "later_pool_mod": [14, 86], "double_time_conv": 14, "stride_before_pool": [14, 31, 86], "valueerror": [14, 26, 31, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105], "run_train": 14, "serv": [14, 70, 72, 78], "loss_val": 14, "zero_grad": [14, 32], "256": [14, 26, 85, 143], "minibatch": 14, "pin_memori": 14, "pin": 14, "n_repetit": 14, "repeat": [14, 137], "get": [14, 16, 17, 22, 27, 28, 29, 32, 68, 121], "folder": [14, 32, 69], "storag": 14, "tuh_eeg_abnorm": 14, "v2": 14, "cycl": 14, "combin": [14, 16, 71], "all_result": 14, "win_len_": 14, "model_kind": 14, "repetit": [14, 16, 73], "nrepetit": 14, "n": [14, 16, 22, 26, 27, 28, 29, 30, 32, 34, 37, 38, 39, 44, 46, 52, 55, 56, 58, 61, 63, 66, 84, 85, 94, 95, 100, 131], "data_loading_start": 14, "data_loading_end": 14, "training_setup_start": 14, "worker_init_fn": 14, "training_setup_end": 14, "model_training_start": 14, "trained_model": 14, "model_training_end": 14, "del": 14, "data_prepar": 14, "training_setup": 14, "model_train": 14, "csv": 14, "results_df": 14, "fname": 14, "lazy_vs_eager_loading_result": 14, "to_csv": 14, "summar": 14, "catplot": 14, "row": [14, 22, 40, 71, 93, 136], "hue": 14, "col": 14, "strip": 14, "hardwar": [14, 16], "pretti": [14, 137], "worker": [14, 32, 132, 143], "speedup": 14, "benchmark_lazy_eager_load": [14, 23, 142], "basic": [15, 27, 29, 32, 33, 54, 71, 74, 92, 93, 98, 111, 115, 118, 120, 134, 136, 142, 143], "eager": [15, 23, 24, 77, 86, 98, 114, 142], "discret": [15, 23, 24, 71, 76, 114, 142, 143], "simplest": 16, "scenario": [16, 115], "act": [16, 113], "stai": [16, 27, 70], "aris": 16, "bottleneck": [16, 32, 90, 91, 103], "consider": 16, "solut": [16, 113], "clear": 16, "downsid": 16, "write": [16, 18], "cours": [16, 69], "whenev": 16, "up": [16, 17, 70, 105, 112, 143], "significantli": 16, "joblib": [16, 120], "made": [16, 27, 92, 143], "remain": [16, 29, 32], "tradeoff": 16, "memory_profil": 16, "memory_usag": 16, "goe": 16, "prepare_data": 16, "n_rec": 16, "tmp_dir": 16, "temporarydirectori": 16, "overwrit": [16, 18, 68, 71, 72, 76, 77, 78, 83, 120, 121], "measur": 16, "peak": [16, 114, 115], "character": 16, "n_repet": 16, "all_n_rec": 16, "all_n_job": 16, "proc": 16, "time_taken": 16, "max_mem": 16, "1m": [16, 27], "2k": 16, "475kb": 16, "131k": 16, "616kb": 16, "193k": 16, "549kb": 16, "311k": 16, "09": [16, 27], "733kb": 16, "393k": 16, "594kb": 16, "524k": 16, "742kb": 16, "606k": 16, "723kb": 16, "688k": 16, "710kb": 16, "770k": 16, "700kb": 16, "852k": 16, "701kb": 16, "934k": 16, "695kb": 16, "02m": 16, "703kb": 16, "10m": 16, "711kb": 16, "18m": 16, "720kb": 16, "26m": [16, 27], "714kb": 16, "34m": 16, "719kb": 16, "43m": 16, "726kb": 16, "51m": 16, "732kb": 16, "59m": 16, "67m": 16, "77m": 16, "756kb": 16, "85m": 16, "758kb": 16, "93m": 16, "745kb": 16, "735kb": 16, "746kb": 16, "753kb": 16, "757kb": 16, "42m": 16, "751kb": 16, "749kb": 16, "748kb": 16, "738kb": [16, 27], "75m": 16, "83m": 16, "752kb": 16, "92m": 16, "759kb": 16, "00m": 16, "08m": 16, "16m": 16, "763kb": 16, "24m": 16, "33m": 16, "762kb": 16, "41m": 16, "49m": 16, "57m": 16, "65m": 16, "74m": 16, "82m": 16, "741kb": 16, "90m": 16, "98m": 16, "731kb": 16, "06m": 16, "730kb": 16, "15m": 16, "23m": 16, "721kb": 16, "31m": 16, "725kb": 16, "39m": 16, "47m": 16, "55m": [16, 27], "64m": 16, "72m": [16, 27], "737kb": [16, 27], "80m": [16, 27], "744kb": 16, "88m": 16, "96m": 16, "05m": 16, "724kb": 16, "13m": 16, "21m": 16, "29m": 16, "37m": 16, "46m": 16, "54m": 16, "62m": [16, 27], "70m": 16, "734kb": 16, "78m": 16, "87m": 16, "750kb": 16, "95m": 16, "767kb": 16, "03m": 16, "771kb": 16, "11m": 16, "780kb": 16, "19m": 16, "774kb": 16, "28m": 16, "764kb": 16, "36m": 16, "44m": 16, "760kb": 16, "52m": 16, "60m": 16, "59": [16, 27], "68m": 16, "743kb": 16, "755kb": 16, "775kb": 16, "779kb": 16, "761kb": 16, "27m": 16, "736kb": 16, "739kb": 16, "01m": 16, "09m": 16, "722kb": 16, "50m": 16, "712kb": 16, "91m": 16, "99m": 16, "727kb": 16, "32m": 16, "40m": 16, "715kb": 16, "729kb": 16, "73m": 16, "707kb": 16, "81m": 16, "716kb": 16, "2m": [16, 27], "740kb": 16, "3m": [16, 27], "4m": [16, 27], "5m": [16, 27, 85], "6m": [16, 27], "7m": 16, "54": 16, "8m": [16, 27], "9m": [16, 27], "0m": [16, 27], "53": [16, 22], "754kb": 16, "769kb": 16, "766kb": 16, "765kb": 16, "770kb": 16, "773kb": 16, "821kb": 16, "747kb": 16, "805kb": 16, "793kb": 16, "768kb": 16, "776kb": 16, "783kb": 16, "789kb": 16, "785kb": 16, "717kb": 16, "728kb": 16, "713kb": 16, "777kb": 16, "778kb": 16, "781kb": 16, "772kb": 16, "787kb": 16, "63": 16, "718kb": 16, "67": [16, 105], "73": 16, "76": [16, 27], "786kb": 16, "646kb": 16, "78": [16, 75], "792kb": 16, "791kb": 16, "782kb": 16, "801kb": 16, "82": [16, 29, 44, 61], "85": [16, 27, 28], "795kb": 16, "803kb": 16, "797kb": 16, "798kb": 16, "809kb": 16, "811kb": 16, "813kb": 16, "812kb": 16, "794kb": 16, "92": [16, 27], "826kb": 16, "817kb": 16, "790kb": 16, "96": [16, 27], "651kb": 16, "648kb": 16, "831kb": 16, "97": 16, "836kb": 16, "832kb": 16, "655kb": 16, "99": 16, "686kb": 16, "684kb": 16, "693kb": 16, "692kb": 16, "698kb": 16, "702kb": 16, "709kb": 16, "706kb": 16, "278gb": 16, "90k": 16, "2mb": [16, 27], "01m09": 16, "mne_data": [16, 17, 19, 27, 69], "sc4001e0": 16, "psg": 16, "detect": [16, 17, 19, 30, 73], "sc4011e0": 16, "2507000": 16, "25070": 16, "sec": [16, 17, 18, 19, 31], "contigu": [16, 52, 66], "fir": [16, 109], "phase": [16, 42, 60, 109], "causal": [16, 109], "firwin": [16, 109], "ham": [16, 109], "0194": 16, "passband": 16, "rippl": 16, "stopband": 16, "attenu": [16, 109], "edg": [16, 109], "transit": [16, 37, 55, 109], "bandwidth": [16, 37, 55], "450": 16, "tmp": [16, 18], "tmp48edrqvp": 16, "3260000": 16, "32600": 16, "708": [16, 18], "subdirectori": [16, 18, 71, 120], "open": [16, 18, 137, 138, 140], "isotrak": 16, "2884000": 16, "5391000": 16, "28840": 16, "53910": 16, "1975000": 16, "5235000": 16, "19750": 16, "52350": 16, "700": [16, 18], "match": [16, 18, 19, 26, 30, 71, 84], "exist": [16, 18, 22, 29, 31, 69, 71, 72, 78, 113, 120], "encount": [16, 18, 137], "mix": [16, 18, 46, 63, 131], "i_d": [16, 18], "tmp370xt6nl": 16, "tmp9h9uj0na": 16, "tmpicawmobg": 16, "sub_df": 16, "groupbi": 16, "mib": 16, "without": [16, 26, 27, 29, 30, 32, 68, 121, 131, 143], "circl": 16, "advantag": [16, 29, 90, 91], "togeth": [16, 27, 143], "648": [16, 23, 142], "119": 16, "plot_benchmark_preprocess": [16, 23, 142], "create_from_x_i": 17, "fetch": [17, 19, 20, 21, 70, 73, 74], "imagin": [17, 19], "hand": [17, 19, 24, 28, 30, 70, 73], "feet": [17, 18, 19, 21, 27, 28, 29, 30, 32, 70, 73], "event_cod": [17, 19], "yet": [17, 19, 93, 141], "physionet_path": [17, 19], "eegbci": [17, 19], "load_data": [17, 19], "update_path": [17, 19], "io": [17, 19, 27, 72, 107, 109, 119], "read_raw_edf": [17, 19], "stim_channel": [17, 19], "eegmmidb": [17, 19], "s022": [17, 19], "s022r05": [17, 19], "19999": [17, 19], "124": [17, 19, 27], "994": [17, 19], "s022r06": [17, 19], "s022r09": [17, 19], "s022r10": [17, 19], "s022r13": [17, 19], "s022r14": [17, 19], "ani": [17, 18, 26, 27, 29, 32, 68, 101, 109, 113, 121, 141], "get_data": 17, "500": [17, 19, 28, 123, 143], "rawarrai": [17, 19, 31, 81], "float64": [17, 19, 31], "20000": 17, "manipul": 17, "x_i": 17, "y_i": 17, "window_ind": 17, "start_ind": 17, "stop_ind": 17, "662": [17, 23, 142], "plot_custom_dataset_exampl": [17, 23, 142], "load_concat_dataset": [18, 143], "event": [18, 19, 20, 21, 26, 27, 28, 29, 30, 32, 75, 81, 114, 115], "skip": [18, 22, 29, 32, 92, 105], "fn": [18, 111], "0x7fbadc820460": 18, "concat": [18, 71, 84, 114, 115, 120], "json": [18, 71, 82, 143], "hold": [18, 71, 72, 78, 114, 115], "due": [18, 32, 143], "tmpdir": 18, "temporari": [18, 143], "tmpmuf6du08": 18, "complianc": 18, "upon": [18, 26], "dataset_load": 18, "ids_to_load": [18, 82], "3868": 18, "386": 18, "left_hand": [18, 21, 27, 28, 29, 30, 32], "right_hand": [18, 21, 27, 28, 29, 30, 32], "tongu": [18, 21, 27, 28, 29, 30, 32, 70], "again": [18, 22, 29], "epo": [18, 71, 82], "windows_dataset_load": 18, "217": [18, 23, 142], "288": [18, 70, 143], "plot_load_save_dataset": [18, 23, 142], "create_from_mne_raw": 19, "create_from_mne_epoch": 19, "t0": 19, "t1": 19, "t2": 19, "point": [19, 20, 26, 70, 113, 117, 118], "beforehand": 19, "list_of_epoch": [19, 80], "baselin": [19, 26], "Not": [19, 26], "metadata": [19, 26, 71, 78, 114, 121, 122, 123, 124, 125], "correct": [19, 26, 32, 68, 89, 90, 91, 92, 94, 95, 121, 143], "ad": [19, 27, 71, 76, 77, 103, 105, 113, 143], "plot_mne_dataset_exampl": [19, 23, 142], "daniel": [20, 35, 143], "wilson": [20, 143], "dan": [20, 143], "wil": 20, "break": [20, 70], "place": [20, 31, 93, 107, 119], "legaci": 20, "inst": [20, 108, 109, 110, 113], "criteria": [20, 68, 121], "subset_nam": 20, "232164": 20, "281": [20, 23, 142], "313": [20, 21, 23, 142], "plot_moabb_dataset_exampl": [20, 23, 142], "aim": [21, 22], "dictionari": [21, 26, 68, 71, 74, 109, 121], "string": [21, 22, 26, 35, 40, 48, 49, 50, 68, 71, 109, 110, 111, 120, 121, 129], "entri": [21, 108], "0x7fbad97f8e50": 21, "0x7fbad99946a0": 21, "0x7fbad99977f0": 21, "0x7fbad9997790": 21, "0x7fbad9994c70": 21, "0x7fbad9743f10": 21, "integ": [21, 22, 27, 28, 40, 52, 57, 66, 71, 109, 110], "0x7fbba470de10": 21, "0x7fbb976c8760": 21, "0x7fbb976cb100": 21, "0x7fbb976c8520": 21, "0x7fbb976ca110": 21, "0x7fbb976cae00": 21, "0x7fbb976cac50": 21, "similarli": [21, 32], "0x7fbb976ca2f0": 21, "0x7fbb976ca710": 21, "0x7fbb976c8c70": 21, "0x7fbb976cb940": 21, "0x7fbb976cba60": 21, "0x7fbb976ca290": 21, "0x7fbb976c9330": 21, "0x7fbb976c8250": 21, "0x7fbb976ca470": 21, "0x7fbb976c92d0": 21, "0x7fbb976c9d80": 21, "979": [21, 23, 142], "plot_split_dataset": [21, 23, 142], "welcom": 22, "ll": 22, "guid": [22, 29, 140], "log": [22, 26, 27, 32, 68, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 105, 107, 109, 110, 112, 113, 114, 115, 121, 143], "excess": 22, "v1": [22, 32], "02_tcp_le": 22, "00000058": 22, "s001": 22, "01_tcp_ar": 22, "099": 22, "00009932": 22, "s004": 22, "03_tcp_ar_a": 22, "123": 22, "00012331": 22, "s0": 22, "00000000": 22, "00014928": 22, "ndarrai": [22, 47, 64, 68, 112, 117, 118, 121, 125, 132, 133], "92922518": 22, "22477157": 22, "12493701": 22, "28417889": 22, "13578887": 22, "56835277": 22, "25153176": 22, "7638324": 22, "14345092": 22, "30167542": 22, "68056549": 22, "70380673": 22, "70052629": 22, "21543634": 22, "96330007": 22, "02736802": 22, "65902848": 22, "15756383": 22, "38658058": 22, "04194231": 22, "15447331": 22, "set_descript": [22, 32, 71, 72, 78], "ind": 22, "16017832": 22, "11754766": 22, "6515615": 22, "50407195": 22, "7429778": 22, "9292252": 22, "86039335": 22, "5169721": 22, "0308012": 22, "1209397": 22, "5210943": 22, "2247716": 22, "373041": 22, "14827406": 22, "25829056": 22, "1486133": 22, "15352039": 22, "30362263": 22, "939559": 22, "5686462": 22, "5503989": 22, "3299779": 22, "3865806": 22, "7443461": 22, "1792846": 22, "25878426": 22, "5670986": 22, "2997373": 22, "0537782": 22, "4429058": 22, "05458383": 22, "000525": 22, "66521484": 22, "15447332": 22, "dtype": [22, 30, 143], "float32": 22, "2600": 22, "3600": [22, 75], "dl": 22, "batch_i": 22, "batch_ind": 22, "simpli": [22, 26], "8024": 22, "4564": 22, "4433": 22, "7404": 22, "2522": [22, 30], "0508": 22, "4418": 22, "5201": 22, "2037": 22, "0273": 22, "0506": 22, "1677": 22, "1145": 22, "7075": 22, "1768": 22, "0260": 22, "7216": 22, "2742": 22, "3986": 22, "3912": 22, "8000": 22, "0593": 22, "8097": 22, "1729": 22, "6267": 22, "8419": 22, "3996": 22, "6685": 22, "9266": 22, "1319": 22, "1409": 22, "6246": 22, "6229": 22, "5953": 22, "3169": 22, "4604": 22, "2885": 22, "0168": 22, "6279": 22, "6533": 22, "7673": 22, "6671": 22, "0448": 22, "1422": 22, "5395": 22, "4664": 22, "1882": 22, "2031": 22, "6282": 22, "4535": 22, "8585": 22, "2657": 22, "9942": 22, "3878": 22, "1360": 22, "9132": 22, "9481": 22, "5033": 22, "3406": 22, "6089": 22, "9883": 22, "2919": 22, "3796": 22, "8036": 22, "7666": 22, "8174": 22, "3829": 22, "1508": 22, "8516": 22, "0426": 22, "1322": 22, "4122": 22, "2526": 22, "9711": 22, "6890": 22, "4660": 22, "5510": 22, "3613": 22, "0280": 22, "1350": 22, "2249": 22, "9406": 22, "7754": 22, "7664": 22, "1807": 22, "8206": 22, "1281": 22, "1607": 22, "9353": 22, "0165": [22, 29], "6509": 22, "7276": 22, "2137": 22, "5619": 22, "0408": 22, "9825": 22, "3648": 22, "6978": 22, "8943": 22, "2374": 22, "4398": 22, "8218": 22, "5172": 22, "2975": 22, "0311": 22, "1602": 22, "1175": 22, "6516": 22, "5041": 22, "7430": 22, "9292": 22, "8604": 22, "5170": 22, "0308": 22, "1209": 22, "2248": 22, "3730": 22, "1483": 22, "2583": 22, "1486": 22, "1535": 22, "1249": 22, "3036": 22, "9396": 22, "5686": 22, "5504": [22, 30], "3300": 22, "3866": 22, "7443": 22, "1793": 22, "2588": 22, "2997": 22, "0419": 22, "0538": 22, "4429": 22, "0546": 22, "6652": 22, "1545": 22, "113": [22, 23, 142], "plot_tuh_discrete_multitarget": [22, 23, 142], "053": 23, "datasets_io": [23, 142], "118": [23, 142], "287": [23, 142, 143], "fundament": [24, 25], "tune": [24, 25, 32, 33, 71, 74, 88, 93, 98, 111, 115, 118, 120, 134, 142, 143], "fake": [24, 25, 26, 33, 71, 72, 86, 93, 98, 106, 114, 126, 134, 142, 143], "auto_examples_python": 24, "auto_examples_jupyt": 24, "develop": [26, 29, 32, 137, 141], "particular": 26, "pierr": [26, 143], "guetschel": [26, 143], "suppos": 26, "stumbl": 26, "schirrmeist": [26, 27, 28, 29, 30, 31, 35, 73, 86, 96, 97, 98, 136, 143], "2017": [26, 27, 28, 29, 30, 31, 35, 47, 48, 49, 50, 64, 73, 86, 87, 96, 97, 98, 136], "articl": [26, 35], "mention": [26, 29], "novel": [26, 90, 91], "shallowconvnet": [26, 31], "fortun": 26, "publish": 26, "what": [26, 29, 68, 84, 114, 115, 121], "exact": 26, "visit": [26, 29], "api": [26, 141], "models_dict": [26, 68, 121, 143], "atcnet": [26, 143], "biot": [26, 143], "deepsleepnet": [26, 143], "eegconform": [26, 143], "eegitnet": [26, 143], "eegincept": [26, 91, 143], "eeginceptionerp": [26, 90, 143], "eeginceptionmi": [26, 143], "eegnetv1": 26, "eegnetv4": 26, "eegresnet": [26, 143], "hybridnet": 26, "sleepstagerblanco2020": [26, 143], "tcn": [26, 84, 143], "tidnet": [26, 143], "investig": 26, "docstr": [26, 143], "__doc__": 26, "schirrmeister2017": [26, 73, 86, 96, 97, 98], "conv_nonlin": [26, 98], "pool_mod": [26, 94, 95, 98], "pool_nonlin": [26, 98], "normalis": [26, 86, 98], "chs_info": [26, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 121], "fill": [26, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105], "ch": [26, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105], "detail": [26, 29, 32, 46, 63, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 112, 113, 119, 120, 134, 141], "input_window_second": [26, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 121], "alia": [26, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105], "softmax": [26, 27, 31, 68, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 105, 121], "doc": [26, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 105, 134, 141, 143], "infer": [26, 29, 30, 68, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 115, 121, 129], "attempt": [26, 84, 85, 86, 87, 93, 96, 97, 98, 99, 100, 101, 102, 105, 113], "springenberg": [26, 27, 28, 29, 30, 31, 35, 86, 96, 97, 98, 136], "fieder": [26, 27, 28, 29, 30, 31, 35, 86, 96, 97, 98, 136], "glasstett": [26, 27, 28, 29, 30, 31, 35, 86, 96, 97, 98, 136], "eggensperg": [26, 27, 28, 29, 30, 31, 35, 86, 96, 97, 98, 136], "tangermann": [26, 27, 28, 29, 30, 31, 35, 86, 96, 97, 98, 136], "hutter": [26, 27, 28, 29, 30, 35, 86, 96, 97, 98, 136], "ball": [26, 27, 28, 29, 30, 31, 35, 73, 86, 96, 97, 98, 136], "aug": [26, 35, 86, 96, 97, 98, 136], "dx": [26, 35, 86, 90, 91, 96, 97, 98, 136], "1002": [26, 27, 28, 29, 30, 35, 86, 96, 97, 98, 136], "hbm": [26, 27, 28, 29, 30, 35, 86, 96, 97, 98, 136], "23730": [26, 27, 28, 29, 30, 35, 86, 96, 97, 98, 136], "__str__": 26, "976": [26, 27], "882": 26, "202": 26, "quit": [26, 29], "popular": 26, "collect": [26, 68, 73, 121], "1024": 26, "simul": 26, "create_info": 26, "randn": 26, "256hz": 26, "epochsarrai": 26, "randint": [26, 31], "99609": 26, "off": [26, 29, 30, 109], "wrapper": [26, 28, 29, 85], "form": [26, 46, 63, 70, 71, 72, 78], "facilit": [26, 143], "easiest": [26, 29], "former": [26, 68, 84, 88, 92, 121], "prefix": [26, 68, 121], "module__": 26, "validsplit": [26, 30, 68, 121], "module__final_conv_length": 26, "along": [26, 72, 78, 112, 140, 143], "3090": 26, "0155": 26, "0090": 26, "0081": 26, "0079": 26, "0078": [26, 30], "0077": 26, "0080": 26, "840": 26, "924": 26, "844": 26, "pre": [26, 79, 85, 113, 143], "via": [26, 28, 29, 30, 105, 109, 139, 140, 143], "And": [26, 27], "nan": [26, 130], "unit_mul": 26, "fiff_unitm_non": 26, "cal": 26, "fiffv_eeg_ch": 26, "coil_typ": 26, "fiffv_coil_eeg": 26, "fiff_unit_v": 26, "coord_fram": 26, "fiffv_coord_head": 26, "scanno": 26, "logno": 26, "target_from": 26, "miss": [26, 32, 84, 85, 88, 90, 92, 94, 95, 96, 97, 99, 105, 143], "manual": [26, 27, 29, 140], "888": [26, 33, 142], "plot_basic_training_epoch": [26, 33, 142], "push": [27, 68, 121], "produc": [27, 29, 32, 101], "neighbour": 27, "simultan": [27, 90, 91], "sub": [27, 143], "afterward": [27, 29, 84, 88, 92, 113], "implicitli": [27, 29, 32], "timestep": 27, "user": [27, 68, 121, 137, 139, 140, 143], "mostli": 27, "runtim": 27, "rule": [27, 68, 121], "mathemat": 27, "neighbourhood": 27, "At": [27, 70], "redund": 27, "lead": [27, 29, 68, 113, 121], "gradient": [27, 143], "likelihood": [27, 68], "typic": [27, 68, 107, 121], "locat": [27, 69], "anyth": [27, 68], "runtimewarn": 27, "config": [27, 69], "mne_datasets_bnci_path": 27, "set_config": 27, "get_config": 27, "urllib3": 27, "connectionpool": 27, "1061": 27, "insecurerequestwarn": 27, "unverifi": 27, "request": [27, 113, 137], "host": 27, "lampx": 27, "tugraz": 27, "certif": 27, "verif": 27, "readthedoc": 27, "en": 27, "advanc": [27, 139], "19k": 27, "8kb": 27, "8k": 27, "107kb": 27, "3k": 27, "231kb": 27, "209k": 27, "405kb": 27, "432k": 27, "889k": 27, "41mb": 27, "72mb": 27, "31mb": 27, "56mb": 27, "66m": 27, "3mb": 27, "9mb": 27, "8mb": 27, "4mb": 27, "6mb": 27, "189gb": 27, "1kb": 27, "106kb": 27, "230kb": 27, "403kb": 27, "7mb": 27, "1mb": 27, "0mb": 27, "234gb": 27, "0x7fbad97bb730": 27, "definit": [27, 68, 121], "torchinfo": [27, 28, 29, 32, 93, 143], "tabl": [27, 28, 29, 30, 32, 84, 93, 143], "804": 27, "dens": [27, 93, 99, 100], "explicit": [27, 129], "deep4": [27, 28, 143], "nll_loss": 27, "4632": 27, "9341": 27, "2483": 27, "2539": 27, "2141": 27, "percent": [27, 28], "misclass": [27, 28], "assign": [27, 28, 133], "train_misclass": [27, 28], "valid_misclass": [27, 28], "misclassif": [27, 28], "get_ylim": [27, 28], "room": [27, 28], "matric": [27, 28, 48, 49, 50, 68, 121], "label_dict": [27, 28], "i_class": [27, 28], "window_kwarg": [27, 28, 71], "kv": [27, 28], "conf": [27, 28], "640x480": [27, 28], "m\u00fcller": [27, 28, 29, 30], "aertsen": [27, 28, 29, 30], "birbaum": [27, 28, 29, 30], "braun": [27, 28, 29, 30], "brunner": [27, 28, 29, 30], "leeb": [27, 28, 29, 30], "mehr": [27, 28, 29, 30], "mueller": [27, 28, 29, 30], "putz": [27, 28, 29, 30], "nolt": [27, 28, 29, 30], "2012": [27, 28, 29, 30], "review": [27, 28, 29, 30], "frontier": [27, 28, 29, 30, 35], "neurosci": [27, 28, 29, 30, 35], "burgard": [27, 28, 29, 30, 35], "hum": [27, 28, 29, 30], "5420": [27, 28, 29, 30, 31], "801": [27, 33, 142], "780": [27, 33, 142], "plot_bcic_iv_2a_moabb_crop": [27, 33, 142], "classic": 28, "0x7fbbaa106770": 28, "benefici": 28, "6001": [28, 29], "6724": 28, "5644": 28, "2570": 28, "9811": 28, "4317": 28, "2569": [28, 29], "1473": 28, "0235": 28, "4329": 28, "0680": 28, "2431": 28, "9948": 28, "4582": 28, "jayaram": [28, 29, 30], "vinai": [28, 29, 30], "alexandr": [28, 29, 30, 35], "barach": [28, 29, 30], "trustworthi": [28, 29, 30], "066011": [28, 29, 30], "192": [28, 33, 142], "298": [28, 32], "plot_bcic_iv_2a_moabb_tri": [28, 33, 142], "properli": [29, 109, 112, 113], "exclus": [29, 32], "elabor": [29, 32], "feel": [29, 32], "free": [29, 32], "distinguish": 29, "scheme": [29, 32, 113, 143], "answer": [29, 32], "reliabl": [29, 32], "sound": [29, 32], "divis": [29, 32, 99, 101, 118], "But": [29, 32], "stori": [29, 32], "learnabl": 29, "connect": [29, 30, 84, 88, 92, 99, 105], "bias": 29, "capac": [29, 30], "ml": [29, 32], "degre": [29, 32, 47, 48, 49, 50, 64], "freedom": [29, 32], "kept": [29, 32], "leakag": [29, 32], "memor": [29, 32], "longer": [29, 32, 68, 121], "independ": [29, 32, 42, 60, 109, 143], "never": [29, 32], "explicitli": [29, 32, 109, 110, 113], "recogn": [29, 32], "behind": [29, 32], "alwai": [29, 32, 35, 54, 68, 121], "readabl": [29, 32, 109], "reiniti": [29, 32], "rescal": [29, 30], "varianc": [29, 30, 118], "0x7fbba48886a0": 29, "One": [29, 30, 70, 90, 91], "demarc": [29, 30], "stimulu": [29, 30], "trial_stop_offset_second": [29, 30], "0test": 29, "matter": [29, 32, 76, 77], "distinct": [29, 32], "previous": [29, 32], "credibl": [29, 32], "test_acc": [29, 32], "2365": 29, "2351": 29, "1140": 29, "patch": 29, "font_scal": 29, "plot_simple_train_test": 29, "all_dataset": 29, "bd_cmap": 29, "3a6190": 29, "683e00": 29, "ddf2ff": 29, "2196f3": 29, "ndataset": 29, "nsplit": 29, "invert_yaxi": 29, "ncol": 29, "bbox_to_anchor": 29, "set_xlim": 29, "risk": [29, 46, 63, 131], "tweak": 29, "until": [29, 70], "realli": 29, "unreli": 29, "ratio": 29, "leav": [29, 143], "empti": [29, 68, 109, 113], "x_train": 29, "train_indic": 29, "val_indic": 29, "indices_": 29, "train_subset": 29, "val_subset": 29, "meaning": 29, "3348": 29, "2877": 29, "3448": [29, 30], "0761": 29, "0399": 29, "3522": 29, "0681": 29, "3621": 29, "5752": 29, "8934": 29, "compact": [29, 94, 95], "plot_train_valid_test": 29, "n_train": 29, "n_val": 29, "n_test": 29, "suffici": 29, "compens": [29, 109], "unseen": 29, "holdout": 29, "highli": 29, "cross_val_scor": 29, "splitter": 29, "train_val_split": 29, "By": [29, 30, 31, 46, 68, 121], "processor": [29, 30], "cv_result": 29, "2565": 29, "2217": 29, "9520": 29, "2609": 29, "8484": 29, "2171": 29, "8940": 29, "2652": 29, "0127": 29, "8375": 29, "2870": [29, 30], "1441": 29, "8450": 29, "0173": 29, "8318": 29, "2641": 29, "1313": 29, "8425": 29, "2727": 29, "0366": 29, "8378": 29, "3853": 29, "0511": 29, "8314": 29, "9833": 29, "8259": 29, "plot_k_fold": 29, "fraction": [29, 31], "ii": 29, "tr_idx": 29, "val_idx": 29, "n_train2": 29, "rotat": [29, 47, 48, 49, 50, 64, 136], "verticalalign": 29, "horizontalalign": 29, "transax": 29, "earli": 29, "rough": 29, "quickli": 29, "messi": 29, "jointli": 29, "analog": [29, 129], "grid": [29, 30], "tupl": [29, 30, 46, 54, 63, 68, 72, 75, 85, 93, 106, 112, 119, 121, 124, 136], "00625": [29, 30], "000625": 29, "best_paramet": 29, "3565": 29, "4721": 29, "0063": [29, 30], "9490": 29, "3913": [29, 30], "1627": 29, "8288": 29, "4000": 29, "8493": 29, "9486": 29, "8400": 29, "2016": [29, 94], "1267": 29, "2847": 29, "0208": 29, "1192": 29, "replac": [29, 52, 66, 143], "091": [29, 33, 142], "430": 29, "plot_how_train_test_and_tun": [29, 33, 142], "sensit": [30, 70, 136], "hyeperparamet": 30, "signific": 30, "discrimin": 30, "pathologi": 30, "playbook": 30, "googl": 30, "0x7fbac0def0d0": 30, "functool": 30, "partial": 30, "analyz": 30, "initialis": [30, 121], "slice": [30, 109, 110, 114, 115], "fine": 30, "learning_r": 30, "0000625": 30, "module__drop_prob": 30, "got": 30, "3130": 30, "8104": 30, "3793": 30, "1239": 30, "6010": 30, "7925": 30, "5862": 30, "7020": 30, "5552": 30, "1558": 30, "0195": 30, "5547": 30, "4522": 30, "0370": 30, "4483": 30, "7048": 30, "5397": 30, "2348": 30, "6052": 30, "2759": 30, "2581": 30, "5424": 30, "5181": 30, "5275": 30, "5536": 30, "5301": 30, "3103": 30, "4240": 30, "5512": 30, "2916": 30, "5368": 30, "6926": 30, "6754": 30, "5377": 30, "4957": 30, "1572": 30, "4138": 30, "7131": 30, "5394": 30, "9938": 30, "1901": 30, "5371": 30, "3739": 30, "4401": 30, "4828": 30, "8599": 30, "5496": 30, "2174": 30, "0672": 30, "5526": 30, "6373": 30, "8733": 30, "5370": 30, "2783": 30, "6966": 30, "2069": 30, "8291": 30, "5359": 30, "5263": 30, "3642": 30, "5541": 30, "4261": 30, "3976": 30, "8938": 30, "5502": 30, "5304": 30, "6155": 30, "8008": 30, "5477": 30, "2435": 30, "2416": 30, "7621": 30, "5542": 30, "6460": 30, "2773": 30, "5353": 30, "9100": 30, "9077": 30, "5380": 30, "0091": 30, "3657": 30, "5285": 30, "5522": 30, "7658": 30, "0842": 30, "5452": 30, "2957": 30, "2414": 30, "4293": 30, "0874": 30, "5000": 30, "9042": 30, "3966": 30, "0486": 30, "0897": 30, "pivot": 30, "heatmap": 30, "pivot_t": 30, "param_optimizer__lr": 30, "param_module__drop_prob": 30, "fmt": 30, "3f": 30, "cmap": 30, "ylgnbu": 30, "cbar": 30, "model_build": [30, 32, 33, 142], "plot_hyperparameter_tuning_with_scikit": [30, 33, 142], "332": 30, "constructor": 30, "numer": [30, 115], "sequenc": [30, 36, 41, 68, 102, 104, 121, 122, 125, 132, 140, 143], "varun": 30, "godbol": 30, "georg": 30, "dahl": 30, "justin": 30, "gilmer": 30, "christoph": 30, "shallu": 30, "zachari": 30, "nado": 30, "tuning_playbook": 30, "385": [30, 33, 142], "542": [30, 33, 142], "sara": [31, 143], "sedlar": [31, 143], "n_fake_rec": 31, "sinusoid": 31, "gaussian": [31, 44, 61], "nois": [31, 44, 61, 70], "n_fake_ch": 31, "fake_dur": 31, "fake_sfreq": 31, "basedataset": [31, 36, 71, 78, 82, 120, 143], "create_mne_dummy_raw": 31, "fake_regression_dataset": 31, "n_fake_target": 31, "fake_data_split": 31, "target_subset": 31, "sin": 31, "pi": [31, 42, 60], "_data": 31, "expand_dim": 31, "fake_descript": 31, "n_fake_chan": 31, "2999": 31, "990": 31, "model_nam": 31, "deepconvnet": 31, "unknown": [31, 129], "610": 31, "minim": [31, 46, 63, 131, 137], "mse": 31, "ground": [31, 70, 73], "truth": 31, "period": 31, "schedul": [31, 32], "optimizer_lr": 31, "optimizer_weight_decai": 31, "neg_root_mean_squared_error": 31, "train_neg_root_mean_squared_error": 31, "valid_neg_root_mean_squared_error": 31, "2505": 31, "1215": 31, "9371": 31, "9685": 31, "0010": 31, "9971": 31, "9601": 31, "1443": 31, "2920": 31, "5329": 31, "9516": 31, "3129": 31, "0412": 31, "2603": 31, "4996": 31, "9507": 31, "root": [31, 141], "squar": [31, 98, 121], "rmse": 31, "0x7fbad9892950": 31, "versu": 31, "trend": 31, "y_estim": 31, "ravel": 31, "y_gt": 31, "to_numpi": [31, 127, 128, 129], "polyfit": 31, "poly1d": 31, "kingma": 31, "diederik": 31, "jimmi": 31, "ba": 31, "stochast": 31, "1412": 31, "6980": 31, "2014": [31, 70], "reddi": 31, "sashank": 31, "satyen": 31, "kale": 31, "sanjiv": 31, "kumar": 31, "beyond": [31, 46, 63, 131], "1904": 31, "09237": 31, "481": [31, 33, 142], "plot_regress": [31, 33, 142], "goal": [32, 90, 91, 92], "percept": 32, "adjustmenty": 32, "third": 32, "0x7fbad953d900": 32, "real": 32, "world": 32, "updat": [32, 68, 69, 71, 72, 78, 81, 115, 119, 121, 140, 143], "tqdm": 32, "train_one_epoch": 32, "loss_fn": 32, "print_batch_stat": 32, "progress_bar": 32, "disabl": [32, 68, 109, 121], "batch_idx": 32, "argmax": 32, "sum": [32, 143], "6f": 32, "accumul": 32, "doesn": [32, 68, 69, 121], "test_model": 32, "n_batch": [32, 126, 130], "test_loss": 32, "batch_loss": 32, "nnloss": 32, "seamlessli": 32, "train_load": 32, "test_load": 32, "test_accuraci": 32, "590727": 32, "73it": 32, "602779": 32, "10it": 32, "717662": 32, "32it": 32, "489191": 32, "36it": 32, "812099": 32, "09it": 32, "63it": 32, "819803": 32, "713765": 32, "94it": 32, "059528": 32, "284172": 32, "90it": 32, "808160": 32, "41it": 32, "337086": 32, "642491": 32, "217304": 32, "62it": 32, "259046": 32, "22it": 32, "252112": 32, "39it": 32, "289975": 32, "49it": 32, "948479": 32, "28it": 32, "84it": 32, "608116": 32, "350593": 32, "08it": 32, "812453": 32, "045583": 32, "459187": 32, "055186": 32, "193383": 32, "nice": 32, "interfac": [32, 35, 90, 91, 94, 95], "previou": [32, 143], "torchmetr": 32, "litmodul": 32, "lightningmodul": 32, "training_step": 32, "y_hat": 32, "test_step": 32, "multiclass": 32, "num_class": 32, "log_dict": 32, "configure_optim": 32, "trainer": 32, "lit_model": 32, "tpu": 32, "ipu": 32, "hpu": 32, "connector": 32, "logger_connector": 32, "tensorboardx": 32, "conflict": [32, 68, 121], "ecosystem": 32, "logger": 32, "csvlogger": 32, "unless": [32, 121], "tensorboard": 32, "pip": [32, 139, 140, 141, 143], "instal": [32, 68, 109, 112, 121, 143], "extra": [32, 143], "lightning_log": 32, "189": 32, "data_connector": 32, "441": 32, "train_dataload": 32, "fit_loop": 32, "interv": [32, 73, 115, 143], "log_every_n_step": 32, "77it": 32, "76it": 32, "v_num": 32, "13it": 32, "29it": 32, "31it": 32, "70it": 32, "55it": 32, "59it": 32, "54it": 32, "57it": 32, "98it": 32, "97it": 32, "96it": 32, "checkpoint_connector": 32, "145": 32, "ckpt_path": 32, "silenc": 32, "restor": [32, 68], "state": [32, 122, 123, 124, 125], "version_0": 32, "ckpt": 32, "test_dataload": 32, "71it": 32, "85it": 32, "82it": 32, "28125": 32, "1977527141571045": 32, "567": [32, 33, 142], "448": [32, 33, 142], "plot_train_in_pure_pytorch_and_pytorch_lightn": [32, 33, 142], "404": 33, "429": [33, 142, 143], "297": [33, 142], "scientif": 35, "softwar": [35, 137], "canon": 35, "hbm23730": 35, "robin": [35, 143], "tibor": [35, 143], "jost": 35, "tobia": 35, "dominiqu": 35, "josef": 35, "martin": [35, 143], "katharina": 35, "michael": 35, "frank": 35, "wolfram": 35, "tonio": 35, "issn": 35, "1097": 35, "0193": 35, "url": 35, "keyword": [35, 36, 74, 107, 109, 110, 111, 112, 113, 119], "electroencephalographi": 35, "interpret": [35, 40, 57, 109, 110, 121], "built": [35, 137], "zenodo": 35, "ask": [35, 70], "3389": 35, "fnin": 35, "2013": 35, "00267": 35, "luessi": 35, "larson": 35, "eric": 35, "deni": [35, 143], "strohmeier": 35, "brodbeck": 35, "christian": 35, "goj": 35, "roman": 35, "ja": 35, "mainak": 35, "brook": 35, "teon": 35, "parkkonen": 35, "lauri": 35, "h\u00e4m\u00e4l\u00e4inen": 35, "matti": 35, "volum": 35, "267": 35, "frontiersin": 35, "1662": 35, "453x": 35, "appropri": [35, 140], "kwarg": [36, 68, 93, 111, 121, 127, 128, 129], "max_freq": 37, "band": [37, 55, 109, 119, 143], "desir": [37, 47, 55, 64, 70, 107, 113], "suggest": [37, 40, 44, 47, 48, 49, 50, 52, 55, 57, 61, 64, 81, 115], "distanc": [37, 55, 70], "admiss": 37, "1hz": 37, "nyquist": 37, "cheng": [37, 44, 52, 55, 61, 66], "goh": [37, 44, 52, 55, 61, 66], "dogrusoz": [37, 44, 52, 55, 61, 66], "tuzel": [37, 44, 52, 55, 61, 66], "azemi": [37, 44, 52, 55, 61, 66], "awar": [37, 44, 52, 55, 61, 66], "biosign": [37, 44, 52, 55, 61, 66, 85], "04871": [37, 44, 52, 55, 61, 66], "mohsenvand": [37, 44, 52, 55, 61, 66], "izadi": [37, 44, 52, 55, 61, 66], "mae": [37, 44, 52, 55, 61, 66], "electroencephalogram": [37, 44, 52, 55, 61, 66], "health": [37, 44, 52, 55, 61, 66, 85], "238": [37, 44, 52, 55, 61, 66], "253": [37, 44, 52, 55, 61, 66], "pmlr": [37, 44, 52, 55, 61, 66], "get_augmentation_param": [37, 38, 39, 40, 42, 43, 44, 46, 47, 52, 54, 143], "freqs_to_notch": [37, 55], "greater": [37, 55], "static": [37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 51, 52, 53, 69], "cmsaugment": [38, 39, 56, 58], "polici": [38, 39, 56, 58], "proba_drop": 38, "eras": 38, "saeed": [38, 39, 56, 58], "grangier": [38, 39, 56, 58], "pietquin": [38, 39, 56, 58], "zeghidour": [38, 39, 56, 58], "heterogen": [38, 39, 56, 58], "differenti": [38, 39, 56, 58], "reorder": [38, 39, 56, 58], "2010": [38, 39, 56, 58, 73], "13694": [38, 39, 56, 58], "p_shuffl": [39, 58], "permut": [39, 40, 46, 57, 58, 63], "carri": [39, 58, 70], "ordered_ch_nam": [40, 48, 49, 50], "invert": 40, "side": [40, 109], "nomenclatur": 40, "deiss": [40, 57], "biswal": [40, 57], "jin": [40, 57], "sun": [40, 57, 85], "westov": [40, 57, 85], "hamlet": [40, 57], "co": [40, 57], "techniqu": [40, 57, 109, 113], "1803": [40, 57, 102], "09702": [40, 57], "accord": [40, 57, 113], "channel_indep": [42, 60], "ft": [42, 60, 84], "surrog": [42, 60], "perturb": [42, 60], "uniformli": [42, 46, 47, 48, 49, 50, 60, 122], "schwabed": [42, 60], "snyder": [42, 60], "cakmak": [42, 60], "nemati": [42, 60], "clifford": [42, 60], "address": [42, 60], "imbal": [42, 60, 75], "noisi": [42, 60], "fourier": [42, 60], "1806": [42, 60], "08675": [42, 60], "magnitud": [42, 52], "cliffordlab": [42, 60], "tf": [42, 60], "draw": [42, 60], "maximum": [43, 47, 48, 49, 50, 84, 114], "absolut": 43, "delta_freq": [43, 59], "amplitud": [43, 59, 114, 115, 143], "white": [44, 61], "deviat": [44, 61], "wang": [44, 61], "zhong": [44, 61], "jiang": [44, 61], "liu": [44, 61, 88], "emot": [44, 61], "recognit": [44, 61], "confer": [44, 46, 47, 48, 49, 50, 61, 63, 64, 85], "multimedia": [44, 61], "beta_per_sampl": 46, "drawn": 46, "beta": 46, "hongyi": [46, 63, 131], "zhang": [46, 63, 92, 131], "moustapha": [46, 63, 131], "ciss": [46, 63, 131], "yann": [46, 63, 131], "dauphin": [46, 63, 131], "david": [46, 63, 131], "lopez": [46, 63, 131], "paz": [46, 63, 131], "empir": [46, 63, 102, 131], "iclr": [46, 63], "onlin": [46, 63, 86, 90, 91, 96, 97, 98, 131, 136], "1710": [46, 63, 131], "09412": [46, 63, 131], "facebookresearch": [46, 63, 131], "cifar10": [46, 63, 131], "interpol": [46, 47, 48, 49, 50, 63, 64], "lam": [46, 63], "idx_perm": [46, 63], "sensors_positions_matrix": [47, 64], "max_degre": [47, 48, 49, 50], "spherical_splin": [47, 48, 49, 50, 64], "angl": [47, 48, 49, 50, 64, 136], "3d": [47, 64, 143], "cartesian": [47, 64], "coordin": [47, 64], "ten_twenty_montag": [47, 64], "make_standard_montag": [47, 64], "standard_1020": [47, 64], "get_posit": [47, 64], "ch_po": [47, 64], "spheric": [47, 48, 49, 50, 64], "spline": [47, 48, 49, 50, 64], "scipi": [47, 48, 49, 50, 64, 68, 109, 112, 121], "rbf": [47, 48, 49, 50, 64], "quadrat": [47, 48, 49, 50, 64], "krell": [47, 48, 49, 50, 64], "kim": [47, 48, 49, 50, 64, 92], "electroencephalograph": [47, 48, 49, 50, 64], "39th": [47, 48, 49, 50, 64], "annual": [47, 48, 49, 50, 64], "medicin": [47, 48, 49, 50, 64], "biologi": [47, 48, 49, 50, 64], "societi": [47, 48, 49, 50, 64], "embc": [47, 48, 49, 50, 64], "471": [47, 48, 49, 50, 64], "474": [47, 48, 49, 50, 64], "element": [47, 52, 64], "montag": [48, 49, 50, 70], "flip": [51, 53, 65, 67], "sign": [51, 65], "smoothli": [52, 66], "Will": 52, "mask_start_per_sampl": [52, 66], "resp": 54, "uniform": 54, "arg": [68, 93, 121], "iterator_train__drop_last": [68, 121, 143], "uninstanti": [68, 121], "get_loss": 68, "classes_": 68, "attributeerror": 68, "sgd": [68, 121], "outcom": [68, 121], "keyboard": [68, 121], "interrupt": [68, 121], "mini": [68, 121], "iterator_train__batch_s": [68, 121], "iterator_test__batch_s": [68, 121], "iterator_valid": [68, 121], "incom": [68, 121], "__len__": [68, 121], "deal": [68, 121], "box": [68, 121], "dataset__": [68, 121], "initialz": [68, 121], "dataset_train": [68, 121, 127, 128, 129], "dataset_valid": [68, 121, 127, 128, 129], "get_default_callback": [68, 121], "resolv": [68, 121], "suffix": [68, 121], "epochscoring_1": [68, 121], "print_log": [68, 121], "callbacks__print_log__keys_ignor": [68, 121], "predict_nonlinear": [68, 121], "pickleabl": [68, 121], "accept": [68, 81, 104, 115, 121], "predict_proba": [68, 121, 143], "whatev": [68, 121], "anywher": [68, 121], "notabl": [68, 121], "unaffect": [68, 121], "warm_start": [68, 121], "cold": [68, 121], "warm": [68, 121], "summari": [68, 93, 103, 121], "regardless": [68, 121], "acceler": [68, 121], "sent": [68, 121], "unmodifi": [68, 121], "compil": [68, 121], "volta": [68, 121], "amper": [68, 121], "dunder": [68, 121], "notat": [68, 121], "compile__dynam": [68, 121], "dynam": [68, 121], "use_cach": [68, 121, 127, 128], "overrid": [68, 69, 121], "cach": [68, 121], "batchscor": [68, 121], "certain": [68, 121], "situat": [68, 121], "tight": [68, 121], "cumbersom": [68, 121], "global": [68, 121, 129], "honor": [68, 121], "prefer": [68, 121], "model_evalu": [68, 121], "prefixes_": [68, 121], "special": [68, 121], "neuralnet": [68, 121], "optimizer__momentum": [68, 121], "popul": [68, 121, 143], "cuda_dependent_attributes_": [68, 121], "whose": [68, 81, 115, 121], "unpickl": [68, 121], "expand": [68, 105, 121], "initialized_": [68, 121], "criterion_": [68, 121], "callbacks_": [68, 121], "_modul": [68, 121], "_criteria": [68, 121], "_optim": [68, 121], "get_iter": [68, 121], "drop_index": [68, 121], "iterator_test": [68, 121], "spars": [68, 121], "csr": [68, 121], "y_proba": [68, 121], "trial_predict": [68, 121, 132], "n_trial": [68, 79, 121, 132], "n_predict": [68, 121, 126, 130, 132], "trial_label": [68, 121, 132], "n_target": [68, 121, 132], "bbci": 69, "de": 69, "desc_4": 69, "pdf": 69, "force_upd": 69, "mne_datasets_": 69, "_path": 69, "forc": 69, "iia": 70, "r382d436f3223": 70, "cue": [70, 73], "imag": [70, 90, 91], "inat": 70, "movement": [70, 73], "compris": 70, "sit": 70, "comfort": 70, "armchair": 70, "front": 70, "screen": 70, "fixat": 70, "acoust": 70, "tone": 70, "arrow": [70, 73], "down": [70, 99, 105, 112, 134], "foot": 70, "prompt": [70, 137], "disappear": 70, "twenti": 70, "agcl": 70, "inter": [70, 73], "monopolarli": 70, "mastoid": [70, 113], "amplifi": 70, "\u03bcv": 70, "notch": 70, "suppress": [70, 109], "raw_preproc_kwarg": 71, "window_preproc_kwarg": 71, "old": [71, 120, 143], "datapoint": 71, "gamma": 73, "subj": 73, "500hz": 73, "r5e478952091a": 73, "cover": [73, 136], "cortex": 73, "healthi": [73, 75], "963": 73, "divid": [73, 79, 80, 81, 114], "rest": [73, 113], "approx": 73, "880": 73, "except": [73, 75], "acquir": 73, "lab": 73, "invas": 73, "2008": [73, 87], "darva": 73, "direct": [73, 137], "grai": 73, "back": 73, "had": [73, 90, 91, 93], "clench": 73, "toe": 73, "downward": 73, "tap": 73, "leftward": 73, "rightward": 73, "relax": 73, "upward": 73, "littl": 73, "proxim": 73, "muscular": 73, "volv": 73, "pace": 73, "maintain": 73, "pseudo": 73, "ideal": 73, "260": 73, "stimuli": 73, "bci2000": 73, "schalk": 73, "2004": 73, "approv": 73, "ethic": 73, "committe": 73, "freiburg": 73, "dataset_kwarg": 74, "load_eeg_onli": 75, "content": 75, "edfx": 75, "overnight": 75, "auto_tutori": 75, "plot_sleep": 75, "eog": [75, 105], "emg": 75, "temperatur": 75, "respir": 75, "3h": 75, "parent": [76, 77], "ascend": [76, 77], "preserv": [76, 77], "physician": [76, 77], "c_tuab": 77, "i_window_in_tri": [78, 123, 133], "i_start_in_tri": [78, 123], "i_stop_in_tri": [78, 123, 133], "applic": [78, 109], "drop_bad_window": [81, 115], "accepted_bads_ratio": [81, 115], "onset": [81, 115], "fall": [81, 115], "outsid": [81, 115], "proport": [81, 90, 91, 115], "withinconsist": 81, "exceed": [81, 115], "pathlib": 82, "concat_dataset": [82, 83], "conv_block_n_filt": 84, "conv_block_kernel_length_1": 84, "conv_block_kernel_length_2": 84, "conv_block_pool_size_1": 84, "conv_block_pool_size_2": 84, "conv_block_depth_mult": 84, "conv_block_dropout": 84, "att_head_dim": 84, "att_num_head": [84, 85], "att_dropout": 84, "tcn_depth": 84, "tcn_kernel_s": 84, "tcn_n_filter": 84, "tcn_dropout": 84, "tcn_activ": 84, "max_norm_const": 84, "input_size_": [84, 99, 100, 101, 105], "offici": [84, 140], "tensorflow": 84, "block": [84, 90, 91, 92, 102, 105], "denot": 84, "kc": 84, "p2": 84, "depthwis": [84, 90, 91], "pc": 84, "head": [84, 85, 88, 101, 123], "dh": 84, "1_": 84, "pa": 84, "residu": [84, 96], "kt": 84, "slid": 84, "feed": [84, 101], "logit": 84, "contrari": 84, "constraint": 84, "impos": 84, "altaheri": 84, "muhammad": 84, "alsulaiman": 84, "physic": 84, "industri": 84, "informat": 84, "tii": 84, "3197419": 84, "overridden": [84, 88, 92], "subclass": [84, 88, 92], "recip": [84, 88, 92], "care": [84, 88, 92], "regist": [84, 88, 92], "hook": [84, 88, 92, 143], "latter": [84, 88, 92], "silent": [84, 88, 92], "n_layer": 85, "hop_length": 85, "return_featur": [85, 88], "wild": 85, "yang2023": 85, "languag": 85, "biotencod": 85, "classificationhead": [85, 88], "ecg": 85, "yang": 85, "code2023": 85, "400k": 85, "heart": 85, "linearattentiontransform": 85, "patchfrequencyembed": 85, "2023": 85, "novemb": 85, "thirti": 85, "seventh": 85, "neurip": [85, 90, 91], "ycq091044": 85, "2024": 85, "first_conv_nonlin": 86, "first_pool_nonlin": 86, "later_conv_nonlin": 86, "later_pool_nonlin": 86, "supratak": 87, "bidirect": 87, "supratak2017": 87, "dong": 87, "wu": 87, "guo": 87, "1998": 87, "att_depth": 88, "att_head": 88, "att_drop_prob": 88, "final_fc_length": 88, "conform": 88, "methodolog": 88, "song2022": 88, "conformercod": 88, "tradit": 88, "n_timestep": 88, "compos": 88, "patchembed": 88, "transformerencod": 88, "recombin": 88, "song": [88, 143], "zheng": 88, "q": 88, "gao": 88, "710": 88, "719": 88, "ieeexplor": 88, "9991178": 88, "eeyhsong": 88, "get_fc_siz": 88, "in_channel": [89, 90, 91, 92], "itnet": [89, 143], "incept": [89, 90, 91, 92, 143], "salami": 89, "salami2022": 89, "abbassalami": 89, "guarante": [89, 90, 91, 92, 94, 95], "reimplement": [89, 90, 91, 92, 94, 95], "andreu": 89, "perez": 89, "gillmeist": 89, "3161489": 89, "scales_samples_": [90, 91], "125": [90, 91, 100], "n_filter": [90, 91, 92, 102], "depth_multipli": [90, 91], "pooling_s": [90, 91], "erp": [90, 91], "AND": 90, "WILL": 90, "BE": 90, "IN": 90, "THE": 90, "OF": 90, "santamaria2020": [90, 91], "inceptionnet": [90, 91, 92], "largest": [90, 91], "associ": [90, 91], "winner": [90, 91], "beetl": [90, 91], "r15fdf33b022f": 90, "santamaria": [90, 91], "vazquez": [90, 91], "martinez": [90, 91], "cagig": [90, 91], "vaquerizo": [90, 91], "villar": [90, 91], "hornero": [90, 91], "assist": [90, 91], "3048106": [90, 91], "grifcc": [90, 91], "r37c4761d4e92": 91, "n_conv": 92, "kernel_unit_": 92, "input_window_": 92, "vision": 92, "wide": 92, "branch": 92, "1d": 92, "bose": 92, "eskandarian": 92, "accur": 92, "robust": 92, "046014": 92, "mixin": 93, "output_shap": [93, 106], "get_torchinfo_statist": 93, "col_nam": 93, "input_s": 93, "num_param": 93, "row_set": 93, "modelstatist": 93, "load_state_dict": 93, "state_dict": 93, "intermedi": 93, "bug": 93, "second_kernel_s": 94, "third_kernel_s": [94, 95], "eegnet": [94, 95], "lawhern": [94, 95], "solon": [94, 95], "waytowich": [94, 95], "gordon": [94, 95], "hung": [94, 95], "lanc": [94, 95], "1611": [94, 95], "08024": [94, 95], "f2": 95, "kernel_length": 95, "v4": 95, "eegnet4": 95, "final_pool_length": [96, 143], "n_first_filt": 96, "n_layers_per_block": 96, "first_filter_length": 96, "batch_norm_epsilon": 96, "conv_weight_init_fn": 96, "hybrid": 97, "safe_log": 98, "n_conv_chan": 99, "n_group": 99, "max_pool_s": 99, "blanco": 99, "blanco2020": 99, "seven": 99, "group": 99, "fernandez": 99, "rivero": 99, "pazo": 99, "soft": 99, "4067": 99, "4079": 99, "1007": 99, "s00500": 99, "04174": 99, "time_conv_size_": [100, 105], "max_pool_size_": 100, "pad_size_": 100, "half": [100, 109], "n_tce": 101, "d_model": 101, "d_ff": 101, "n_attn_head": 101, "after_reduced_cnn_s": 101, "multi": 101, "resolut": 101, "mrcnn": 101, "recalibr": 101, "tce": 101, "mechan": [101, 143], "captur": 101, "among": 101, "100hz": 101, "125hz": 101, "shh": 101, "unintend": 101, "clone": [101, 143], "positionwisefeedforward": 101, "emadeldeen24": 101, "attnsleep": 101, "sleepdata": 101, "n_block": 102, "n_in_chan": 102, "bai": 102, "bai2018": 102, "locuslab": 102, "kolter": 102, "koltun": 102, "recurr": 102, "01271": 102, "s_growth": 103, "t_filter": 103, "temp_lay": 103, "spat_lay": 103, "temp_span": 103, "thinker": [103, 143], "invari": [103, 143], "densenet": 103, "kosta": 103, "growth": 103, "densefilt": 103, "percentag": 103, "temp_len": 103, "spoclab": 103, "ca": 103, "thinkerinvari": 103, "rudzicz": 103, "across": [103, 113, 122, 126], "peopl": 103, "eng": 103, "056008": 103, "1741": 103, "2552": 103, "abb7a7": 103, "stager": 104, "middl": 104, "seq_len": 104, "n_time_filt": 105, "complexity_factor": 105, "0703125": 105, "ensure_odd_conv_s": 105, "autoencod": 105, "shrink": 105, "fewer": [105, 109], "2x2": 105, "halv": 105, "ne": 105, "subsequ": 107, "time_as_index": 107, "first_samp": 107, "last_samp": 107, "exce": 107, "exclud": [107, 109, 110, 113], "on_miss": [108, 114, 115], "emit": 108, "evok": [108, 109, 110, 113], "reorder_channel": 108, "drop_channel": 108, "filter_length": 109, "l_trans_bandwidth": 109, "h_trans_bandwidth": 109, "iir_param": 109, "fir_window": 109, "fir_design": 109, "skip_by_annot": 109, "bad_acq_skip": 109, "reflect_limit": [109, 112], "iir": 109, "meg0111": [109, 110], "meg2623": [109, 110], "reciproc": 109, "shortest": 109, "firwin2": 109, "5500m": 109, "doubl": 109, "cupi": [109, 112], "filtfilt": 109, "4th": 109, "butterworth": 109, "construct_iir_filt": 109, "symmetr": 109, "construct": [109, 113], "delai": [109, 143], "twice": 109, "minimum": 109, "weaker": 109, "lfilter": 109, "hann": 109, "blackman": 109, "concatenate_raw": 109, "acquisit": 109, "reflect": [109, 112], "mirror": [109, 112], "create_filt": 109, "savgol_filt": 109, "notch_filt": 109, "filter_data": 109, "apply_funct": 111, "raw_or_epoch": 111, "npad": 112, "boxcar": 112, "joint": 113, "virtual": 113, "infin": 113, "footcit": 113, "yao2001": 113, "apply_proj": 113, "seeg": 113, "projector": 113, "set_bipolar_refer": 113, "bipolar": 113, "m1": 113, "m2": 113, "concatdataset": 114, "ie": 114, "winddow_size_sampl": 114, "exactli": 115, "inconsist": 115, "demeanin": 117, "exponent": [117, 118], "m_t": [117, 118], "mathrm": [117, 118], "factornew": [117, 118], "cdot": [117, 118], "x_t": [117, 118], "m_": [117, 118], "deman": 117, "_t": [117, 118], "demean": 117, "Then": 118, "v_t": 118, "v_": 118, "sqrt": 118, "stabil": 118, "frequency_band": 119, "drop_original_sign": 119, "order_by_frequency_band": 119, "mne_filter_kwarg": 119, "unfilt": 119, "cz_4": 119, "o1_4": 119, "cz_8": 119, "o1_8": 119, "fileexistserror": 120, "n_sequenc": [122, 125], "inspir": 122, "perslev2021": 122, "recordingsampl": [122, 124, 125], "randomst": [122, 123, 124, 125], "sample_class": 122, "rec_ind": [122, 123], "session_t": 123, "run_0": 123, "multiindex": 123, "sample_record": 123, "sample_window": 123, "tau_max": 124, "banville2020": 124, "file_id": 125, "ensembl": [125, 143], "loss_funct": [126, 130], "target_extractor": [127, 128, 129], "on_epoch_end": [127, 128, 129], "on_batch_end": 128, "recomput": 129, "slightli": 129, "scorer": 129, "signatur": 129, "scalar": 129, "wors": 129, "tri": 129, "timeseri": 130, "window_len": 130, "mixup": [131, 143], "duplic": [133, 143], "2darrai": 133, "preds_per_tri": 133, "lack": 134, "pythonhashse": 134, "forum": 134, "ai": 134, "solv": [134, 143], "31628": 134, "use_deterministic_algorithm": 134, "linearsegmentedcolormap": 136, "textcolor": 136, "vmin": 136, "vmax": 136, "fontweight": 136, "rotate_row_label": 136, "rotate_col_label": 136, "with_f1_scor": 136, "norm_ax": 136, "rotate_precis": 136, "class_names_fonts": 136, "font": 136, "bold": 136, "heavi": 136, "ultrabold": 136, "ultralight": 136, "hard": 137, "happen": [137, 143], "mistak": 137, "corrupt": 137, "irregular": 137, "chat": 137, "bear": 137, "tracker": 137, "sure": 137, "ve": 137, "shell": 137, "__version__": [137, 141], "latest": [137, 140, 141], "replic": 137, "link": [137, 143], "anonym": 137, "portion": 137, "persist": 137, "smallest": 137, "past": 137, "backtick": 137, "contributor": [137, 141], "snippet": 137, "toolbox": 138, "electrophysiolog": 138, "fetcher": 138, "neuroscientist": 138, "who": 138, "neurophysiolog": 138, "pypi": 139, "repositori": 139, "beginn": 139, "familiar": 139, "instruct": 139, "contribut": [139, 141], "braincod": 140, "command": [140, 141], "nvidia": 140, "driver": 140, "cuda_path": 140, "troubleshoot": 140, "thing": 141, "enter": 141, "git": 141, "cd": 141, "repo": 141, "zipbal": 141, "master": 141, "egg": 141, "edit": 141, "verifi": 141, "guidelin": 141, "982": 142, "whats_new": 143, "incompat": 143, "gh": 143, "570": 143, "561": 143, "checker": 143, "569": 143, "431": 143, "mohammad": 143, "javad": 143, "oskar": 143, "st\u00f8rmer": 143, "417": 143, "454": 143, "yonghao": 143, "einop": 143, "466": 143, "467": 143, "marco": 143, "zamboni": 143, "468": 143, "refactor": 143, "470": 143, "conda": 143, "yml": 143, "ci": 143, "479": 143, "action": 143, "489": 143, "485": 143, "490": 143, "487": 143, "473": 143, "488": 143, "495": 143, "sylvain": 143, "chevalli": 143, "494": 143, "bruna": 143, "lope": 143, "491": 143, "enforc": 143, "497": 143, "env": 143, "505": 143, "friendli": 143, "\u015bliwowski": 143, "shallowfbcsp": 143, "503": 143, "sampler": 143, "504": 143, "th\u00e9o": 143, "dropchannel": 143, "seteegrefer": 143, "514": 143, "517": 143, "523": 143, "remi": 143, "delboui": 143, "524": 143, "535": 143, "529": 143, "528": 143, "539": 143, "541": 143, "hint": 143, "551": 143, "valentin": 143, "ioven": 143, "pyproject": 143, "toml": 143, "553": 143, "commit": 143, "556": 143, "461": 143, "e231": 143, "whitespac": 143, "untrac": 143, "flake8": 143, "460": 143, "transposit": 143, "_frequency_shift": 143, "446": 143, "matthieu": 143, "terri": 143, "451": 143, "465": 143, "wrong": 143, "538": 143, "546": 143, "397": 143, "flag": 143, "513": 143, "390": 143, "ghaith": 143, "bouallegu": 143, "371": 143, "389": 143, "exemplifi": 143, "349": 143, "unifi": 143, "378": 143, "wimpff": 143, "391": 143, "406": 143, "recoding_id": 143, "402": 143, "ft_surrog": 143, "409": 143, "get_param": 143, "388": 143, "alex": 143, "413": 143, "zscore": 143, "mnepreproc": 143, "numpypreproc": 143, "415": 143, "411": 143, "263": 143, "ann": 143, "kathrin": 143, "kiessner": 143, "henrik": 143, "bonsmann": 143, "vytauta": 143, "jankauska": 143, "274": 143, "254": 143, "thoma": 143, "aggregate_proba": 143, "294": 143, "312": 143, "balancedsequencesampl": 143, "295": 143, "277": 143, "318": 143, "261": 143, "cloneabl": 143, "347": 143, "353": 143, "333": 143, "365": 143, "367": 143, "mismatch": 143, "327": 143, "propag": 143, "269": 143, "favour": 143, "292": 143, "199": 143, "198": 143, "178": 143, "138": 143, "147": 143, "realiz": 143, "filterbank": 143, "158": 143, "159": 143, "timecrop": 143, "164": 143, "185": 143, "282": 143, "341": 143, "accident": 143, "167": 143, "compute_amplitude_gradi": 143, "4d": 143, "166": 143, "incorrect": 143, "146": 143, "169": 143, "window_s": 143, "171": 143, "155": 143, "223": 143, "favor": 143}, "objects": {"": [[0, 0, 0, "-", "braindecode"]], "braindecode.augmentation": [[36, 1, 1, "", "AugmentedDataLoader"], [37, 1, 1, "", "BandstopFilter"], [38, 1, 1, "", "ChannelsDropout"], [39, 1, 1, "", "ChannelsShuffle"], [40, 1, 1, "", "ChannelsSymmetry"], [41, 1, 1, "", "Compose"], [42, 1, 1, "", "FTSurrogate"], [43, 1, 1, "", "FrequencyShift"], [44, 1, 1, "", "GaussianNoise"], [45, 1, 1, "", "IdentityTransform"], [46, 1, 1, "", "Mixup"], [47, 1, 1, "", "SensorsRotation"], [48, 1, 1, "", "SensorsXRotation"], [49, 1, 1, "", "SensorsYRotation"], [50, 1, 1, "", "SensorsZRotation"], [51, 1, 1, "", "SignFlip"], [52, 1, 1, "", "SmoothTimeMask"], [53, 1, 1, "", "TimeReverse"], [54, 1, 1, "", "Transform"]], "braindecode.augmentation.BandstopFilter": [[37, 2, 1, "", "get_augmentation_params"], [37, 2, 1, "", "operation"]], "braindecode.augmentation.ChannelsDropout": [[38, 2, 1, "", "get_augmentation_params"], [38, 2, 1, "", "operation"]], "braindecode.augmentation.ChannelsShuffle": [[39, 2, 1, "", "get_augmentation_params"], [39, 2, 1, "", "operation"]], "braindecode.augmentation.ChannelsSymmetry": [[40, 2, 1, "", "get_augmentation_params"], [40, 2, 1, "", "operation"]], "braindecode.augmentation.Compose": [[41, 2, 1, "", "forward"]], "braindecode.augmentation.FTSurrogate": [[42, 2, 1, "", "get_augmentation_params"], [42, 2, 1, "", "operation"]], "braindecode.augmentation.FrequencyShift": [[43, 2, 1, "", "get_augmentation_params"], [43, 2, 1, "", "operation"]], "braindecode.augmentation.GaussianNoise": [[44, 2, 1, "", "get_augmentation_params"], [44, 2, 1, "", "operation"]], "braindecode.augmentation.IdentityTransform": [[45, 2, 1, "", "operation"]], "braindecode.augmentation.Mixup": [[46, 2, 1, "", "get_augmentation_params"], [46, 2, 1, "", "operation"]], "braindecode.augmentation.SensorsRotation": [[47, 2, 1, "", "get_augmentation_params"], [47, 2, 1, "", "operation"]], "braindecode.augmentation.SignFlip": [[51, 2, 1, "", "operation"]], "braindecode.augmentation.SmoothTimeMask": [[52, 2, 1, "", "get_augmentation_params"], [52, 2, 1, "", "operation"]], "braindecode.augmentation.TimeReverse": [[53, 2, 1, "", "operation"]], "braindecode.augmentation.Transform": [[54, 2, 1, "", "forward"], [54, 2, 1, "", "get_augmentation_params"]], "braindecode.augmentation.functional": [[55, 3, 1, "", "bandstop_filter"], [56, 3, 1, "", "channels_dropout"], [57, 3, 1, "", "channels_permute"], [58, 3, 1, "", "channels_shuffle"], [59, 3, 1, "", "frequency_shift"], [60, 3, 1, "", "ft_surrogate"], [61, 3, 1, "", "gaussian_noise"], [62, 3, 1, "", "identity"], [63, 3, 1, "", "mixup"], [64, 3, 1, "", "sensors_rotation"], [65, 3, 1, "", "sign_flip"], [66, 3, 1, "", "smooth_time_mask"], [67, 3, 1, "", "time_reverse"]], "braindecode.classifier": [[68, 1, 1, "", "EEGClassifier"]], "braindecode.classifier.EEGClassifier": [[68, 4, 1, "", "_criteria"], [68, 4, 1, "", "_modules"], [68, 4, 1, "", "_optimizers"], [68, 4, 1, "", "callbacks_"], [68, 4, 1, "", "classes_"], [68, 4, 1, "", "criterion_"], [68, 4, 1, "", "cuda_dependent_attributes_"], [68, 2, 1, "", "get_iterator"], [68, 2, 1, "", "get_loss"], [68, 4, 1, "", "initialized_"], [68, 4, 1, "", "module_"], [68, 2, 1, "", "predict"], [68, 2, 1, "", "predict_proba"], [68, 2, 1, "", "predict_trials"], [68, 4, 1, "", "prefixes_"]], "braindecode.datasets": [[69, 1, 1, "", "BCICompetitionIVDataset4"], [70, 1, 1, "", "BNCI2014001"], [71, 1, 1, "", "BaseConcatDataset"], [72, 1, 1, "", "BaseDataset"], [73, 1, 1, "", "HGD"], [74, 1, 1, "", "MOABBDataset"], [75, 1, 1, "", "SleepPhysionet"], [76, 1, 1, "", "TUH"], [77, 1, 1, "", "TUHAbnormal"], [78, 1, 1, "", "WindowsDataset"], [79, 3, 1, "", "create_from_X_y"], [80, 3, 1, "", "create_from_mne_epochs"], [81, 3, 1, "", "create_from_mne_raw"]], "braindecode.datasets.BCICompetitionIVDataset4": [[69, 2, 1, "", "download"]], "braindecode.datasets.BaseConcatDataset": [[71, 2, 1, "", "get_metadata"], [71, 2, 1, "", "save"], [71, 2, 1, "", "set_description"], [71, 2, 1, "", "split"]], "braindecode.datasets.BaseDataset": [[72, 2, 1, "", "set_description"]], "braindecode.datasets.WindowsDataset": [[78, 2, 1, "", "set_description"]], "braindecode.datautil": [[82, 3, 1, "", "load_concat_dataset"], [83, 3, 1, "", "save_concat_dataset"]], "braindecode.models": [[84, 1, 1, "", "ATCNet"], [85, 1, 1, "", "BIOT"], [86, 1, 1, "", "Deep4Net"], [87, 1, 1, "", "DeepSleepNet"], [88, 1, 1, "", "EEGConformer"], [89, 1, 1, "", "EEGITNet"], [90, 1, 1, "", "EEGInception"], [91, 1, 1, "", "EEGInceptionERP"], [92, 1, 1, "", "EEGInceptionMI"], [93, 1, 1, "", "EEGModuleMixin"], [94, 1, 1, "", "EEGNetv1"], [95, 1, 1, "", "EEGNetv4"], [96, 1, 1, "", "EEGResNet"], [97, 1, 1, "", "HybridNet"], [98, 1, 1, "", "ShallowFBCSPNet"], [99, 1, 1, "", "SleepStagerBlanco2020"], [100, 1, 1, "", "SleepStagerChambon2018"], [101, 1, 1, "", "SleepStagerEldele2021"], [102, 1, 1, "", "TCN"], [103, 1, 1, "", "TIDNet"], [104, 1, 1, "", "TimeDistributed"], [105, 1, 1, "", "USleep"], [106, 3, 1, "", "get_output_shape"]], "braindecode.models.ATCNet": [[84, 2, 1, "", "forward"]], "braindecode.models.BIOT": [[85, 2, 1, "", "forward"]], "braindecode.models.DeepSleepNet": [[87, 2, 1, "", "forward"]], "braindecode.models.EEGConformer": [[88, 2, 1, "", "forward"], [88, 2, 1, "", "get_fc_size"]], "braindecode.models.EEGInceptionMI": [[92, 2, 1, "", "forward"]], "braindecode.models.EEGModuleMixin": [[93, 2, 1, "", "get_output_shape"], [93, 2, 1, "", "get_torchinfo_statistics"], [93, 2, 1, "", "load_state_dict"], [93, 2, 1, "", "to_dense_prediction_model"]], "braindecode.models.HybridNet": [[97, 2, 1, "", "forward"]], "braindecode.models.SleepStagerBlanco2020": [[99, 2, 1, "", "forward"]], "braindecode.models.SleepStagerChambon2018": [[100, 2, 1, "", "forward"]], "braindecode.models.SleepStagerEldele2021": [[101, 2, 1, "", "forward"]], "braindecode.models.TCN": [[102, 2, 1, "", "forward"]], "braindecode.models.TIDNet": [[103, 2, 1, "", "forward"]], "braindecode.models.TimeDistributed": [[104, 2, 1, "", "forward"]], "braindecode.models.USleep": [[105, 2, 1, "", "forward"]], "braindecode.preprocessing": [[107, 1, 1, "", "Crop"], [108, 1, 1, "", "DropChannels"], [109, 1, 1, "", "Filter"], [110, 1, 1, "", "Pick"], [111, 1, 1, "", "Preprocessor"], [112, 1, 1, "", "Resample"], [113, 1, 1, "", "SetEEGReference"], [114, 3, 1, "", "create_fixed_length_windows"], [115, 3, 1, "", "create_windows_from_events"], [116, 3, 1, "", "create_windows_from_target_channels"], [117, 3, 1, "", "exponential_moving_demean"], [118, 3, 1, "", "exponential_moving_standardize"], [119, 3, 1, "", "filterbank"], [120, 3, 1, "", "preprocess"]], "braindecode.preprocessing.Preprocessor": [[111, 2, 1, "", "apply"]], "braindecode.regressor": [[121, 1, 1, "", "EEGRegressor"]], "braindecode.regressor.EEGRegressor": [[121, 4, 1, "", "_criteria"], [121, 4, 1, "", "_modules"], [121, 4, 1, "", "_optimizers"], [121, 4, 1, "", "callbacks_"], [121, 4, 1, "", "criterion_"], [121, 4, 1, "", "cuda_dependent_attributes_"], [121, 2, 1, "", "fit"], [121, 2, 1, "", "get_iterator"], [121, 4, 1, "", "initialized_"], [121, 4, 1, "", "module_"], [121, 2, 1, "", "predict_proba"], [121, 2, 1, "", "predict_trials"], [121, 4, 1, "", "prefixes_"]], "braindecode.samplers": [[122, 1, 1, "", "BalancedSequenceSampler"], [123, 1, 1, "", "RecordingSampler"], [124, 1, 1, "", "RelativePositioningSampler"], [125, 1, 1, "", "SequenceSampler"]], "braindecode.samplers.BalancedSequenceSampler": [[122, 2, 1, "", "sample_class"]], "braindecode.samplers.RecordingSampler": [[123, 4, 1, "", "info"], [123, 4, 1, "", "n_recordings"], [123, 2, 1, "", "sample_recording"], [123, 2, 1, "", "sample_window"]], "braindecode.samplers.RelativePositioningSampler": [[124, 2, 1, "", "presample"]], "braindecode.samplers.SequenceSampler": [[125, 4, 1, "", "file_ids"], [125, 4, 1, "", "info"]], "braindecode.training": [[126, 1, 1, "", "CroppedLoss"], [127, 1, 1, "", "CroppedTimeSeriesEpochScoring"], [128, 1, 1, "", "CroppedTrialEpochScoring"], [129, 1, 1, "", "PostEpochTrainScoring"], [130, 1, 1, "", "TimeSeriesLoss"], [131, 3, 1, "", "mixup_criterion"], [132, 3, 1, "", "predict_trials"], [133, 3, 1, "", "trial_preds_from_window_preds"]], "braindecode.training.CroppedLoss": [[126, 2, 1, "", "forward"]], "braindecode.training.CroppedTimeSeriesEpochScoring": [[127, 2, 1, "", "on_epoch_end"]], "braindecode.training.CroppedTrialEpochScoring": [[128, 2, 1, "", "on_batch_end"], [128, 2, 1, "", "on_epoch_end"]], "braindecode.training.PostEpochTrainScoring": [[129, 2, 1, "", "on_epoch_end"]], "braindecode.training.TimeSeriesLoss": [[130, 2, 1, "", "forward"]], "braindecode.util": [[134, 3, 1, "", "set_random_seeds"]], "braindecode.visualization": [[135, 3, 1, "", "compute_amplitude_gradients"], [136, 3, 1, "", "plot_confusion_matrix"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"]}, "titleterms": {"api": [0, 143], "refer": [0, 4, 5, 9, 10, 11, 26, 27, 28, 29, 30, 31, 137], "classifi": [0, 68], "regressor": [0, 121], "model": [0, 2, 3, 4, 5, 8, 9, 10, 11, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106], "train": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 126, 127, 128, 129, 130, 131, 132, 133], "dataset": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "preprocess": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 27, 28, 29, 30, 32, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120], "data": [0, 3, 4, 12, 15, 22, 24, 26, 27, 28, 29, 31], "util": [0, 29, 134], "sampler": [0, 5, 9, 10, 11, 122, 123, 124, 125], "augment": [0, 3, 4, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "visual": [0, 3, 5, 29, 135, 136], "advanc": [1, 24], "neural": [1, 24, 30, 31], "network": [1, 9, 11, 24, 30, 31], "strategi": [1, 24], "finger": [2, 8], "flexion": [2, 8], "crop": [2, 27, 107], "decod": [2, 8, 27, 28], "bcic": [2, 3, 4, 8, 27], "iv": [2, 3, 4, 8, 27], "4": [2, 8], "ecog": [2, 8], "load": [2, 3, 4, 5, 8, 9, 10, 11, 14, 15, 18, 21, 24, 26, 27, 28, 29, 30, 32], "prepar": [2, 8, 28], "split": [2, 3, 4, 5, 8, 9, 10, 11, 21, 27, 28, 29, 30, 32], "test": [2, 5, 8, 29, 31, 32, 141], "creat": [2, 3, 4, 5, 8, 9, 10, 11, 12, 22, 27, 28, 29, 30, 32], "cut": [2, 8, 12, 27, 32], "comput": [2, 6, 8, 12, 13, 23, 27, 28, 30, 32, 33, 34, 142], "window": [2, 3, 4, 5, 8, 9, 10, 11, 12, 22, 27, 28, 29, 30, 31, 32], "plot": [2, 4, 8, 9, 10, 11, 27, 28, 30], "result": [2, 4, 5, 8, 9, 10, 11, 27, 28, 30], "2a": [3, 4, 27], "thi": [3, 4, 5, 12, 21, 26, 27, 28, 29, 30, 32], "exampl": [3, 4, 5, 7, 12, 17, 18, 19, 20, 21, 24, 26, 27, 28, 29, 30, 32, 36, 38, 41, 42, 43, 51, 52, 54, 69, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 86, 93, 98, 100, 101, 104, 105, 106, 111, 114, 115, 116, 118, 120, 123, 124, 125, 126, 127, 128, 130, 134, 136], "cover": [3, 4, 5, 12, 21, 26, 27, 28, 29, 30, 32], "extract": [3, 4, 5, 9, 10, 11, 28, 29, 30], "valid": [3, 4, 5, 8, 9, 10, 11, 28, 29, 30], "defin": [3, 4, 29, 31, 32], "transform": [3, 4, 32, 54], "manipul": 3, "one": 3, "session": 3, "an": [3, 4], "eegclassifi": [3, 4, 68], "desir": [3, 4], "manual": 3, "compos": [3, 41], "set": [3, 5, 28], "level": 3, "search": 4, "best": [4, 30], "list": 4, "analys": 4, "fit": 4, "self": 5, "supervis": 5, "learn": [5, 26, 30], "eeg": [5, 12, 22, 28], "rel": 5, "posit": 5, "raw": [5, 32], "record": [5, 12], "inspect": 5, "pretext": 5, "task": 5, "perform": 5, "us": [5, 9, 10, 11, 12, 36, 38, 41, 42, 43, 51, 52, 54, 69, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 86, 93, 98, 100, 101, 104, 105, 106, 111, 114, 115, 116, 118, 120, 123, 124, 125, 126, 127, 128, 130, 134, 136], "represent": 5, "sleep": [5, 9, 10, 11], "stage": [5, 9, 10, 11], "conclus": 5, "time": [6, 13, 23, 33, 34, 142], "appli": [7, 24], "real": [7, 24], "world": [7, 24], "physionet": [9, 10, 11], "chambon2018": 9, "sequenc": [9, 10, 11], "eldele2021": 10, "u": 11, "process": 12, "big": 12, "resourc": 12, "tuh": [12, 22, 76], "corpu": [12, 22], "tuhmock": 12, "select": 12, "combin": 12, "step": 12, "benchmark": [14, 16], "eager": 14, "lazi": 14, "organ": [15, 24], "parallel": 16, "serial": 16, "custom": 17, "save": 18, "mne": [19, 26, 35], "moabb": 20, "By": 21, "descript": 21, "inform": 21, "row": 21, "index": 21, "observ": 21, "multipl": 22, "discret": 22, "target": 22, "templ": 22, "univers": 22, "hospit": 22, "explor": [22, 26], "dataload": 22, "basic": [24, 25, 28], "build": [24, 25], "simpl": [26, 29], "epoch": 26, "find": 26, "you": [26, 30], "want": 26, "braindecod": [26, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141], "onlin": 26, "document": 26, "examin": 26, "your": [26, 29, 32, 141], "own": 26, "scikit": [26, 30], "compat": 26, "paramet": 27, "confus": [27, 28], "matrix": [27, 28], "brain": 28, "how": [29, 32, 35, 137], "tune": [29, 30], "why": [29, 30, 32], "should": [29, 32], "i": [29, 32, 137, 141], "care": [29, 32], "about": [29, 32], "evalu": [29, 31, 32], "etc": [29, 32], "option": [29, 32], "1": [29, 32, 143], "let": 29, "": [29, 143], "first": 29, "function": [29, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "2": [29, 32], "val": 29, "second": 29, "3": 29, "k": 29, "fold": 29, "cross": 29, "third": 29, "hyperparamet": [29, 30], "do": [30, 137], "need": 30, "get": [30, 137], "convolut": 31, "regress": 31, "fake": 31, "gener": 31, "cnn": 31, "choos": 31, "between": 31, "gpu": 31, "cpu": 31, "processor": 31, "pytorch": 32, "structur": 32, "offlin": 32, "pure": 32, "loop": 32, "lightn": 32, "cite": [35, 137], "other": 35, "algorithm": 35, "augmenteddataload": 36, "bandstopfilt": 37, "channelsdropout": 38, "channelsshuffl": 39, "channelssymmetri": 40, "ftsurrog": 42, "frequencyshift": 43, "gaussiannois": 44, "identitytransform": 45, "mixup": [46, 63], "sensorsrot": 47, "sensorsxrot": 48, "sensorsyrot": 49, "sensorszrot": 50, "signflip": 51, "smoothtimemask": 52, "timerevers": 53, "bandstop_filt": 55, "channels_dropout": 56, "channels_permut": 57, "channels_shuffl": 58, "frequency_shift": 59, "ft_surrog": 60, "gaussian_nois": 61, "ident": 62, "sensors_rot": 64, "sign_flip": 65, "smooth_time_mask": 66, "time_revers": 67, "bcicompetitionivdataset4": 69, "bnci2014001": 70, "summari": [70, 73], "baseconcatdataset": 71, "basedataset": 72, "hgd": 73, "moabbdataset": 74, "sleepphysionet": 75, "tuhabnorm": 77, "windowsdataset": 78, "create_from_x_i": 79, "create_from_mne_epoch": 80, "create_from_mne_raw": 81, "datautil": [82, 83], "load_concat_dataset": 82, "save_concat_dataset": 83, "atcnet": 84, "biot": 85, "deep4net": 86, "deepsleepnet": 87, "eegconform": 88, "eegitnet": 89, "eegincept": 90, "eeginceptionerp": 91, "eeginceptionmi": 92, "eegmodulemixin": 93, "eegnetv1": 94, "eegnetv4": 95, "eegresnet": 96, "hybridnet": 97, "shallowfbcspnet": 98, "sleepstagerblanco2020": 99, "sleepstagerchambon2018": 100, "sleepstagereldele2021": 101, "tcn": 102, "tidnet": 103, "timedistribut": 104, "usleep": 105, "get_output_shap": 106, "dropchannel": 108, "filter": 109, "pick": 110, "preprocessor": 111, "resampl": 112, "seteegrefer": 113, "create_fixed_length_window": 114, "create_windows_from_ev": 115, "create_windows_from_target_channel": 116, "exponential_moving_demean": 117, "exponential_moving_standard": 118, "filterbank": 119, "eegregressor": 121, "balancedsequencesampl": 122, "recordingsampl": 123, "relativepositioningsampl": 124, "sequencesampl": 125, "croppedloss": 126, "croppedtimeseriesepochscor": 127, "croppedtrialepochscor": 128, "postepochtrainscor": 129, "timeseriesloss": 130, "mixup_criterion": 131, "predict_tri": 132, "trial_preds_from_window_pr": 133, "set_random_se": 134, "compute_amplitude_gradi": 135, "plot_confusion_matrix": 136, "frequent": 137, "ask": 137, "question": 137, "faq": 137, "help": 137, "can": 137, "t": 137, "python": 137, "work": [137, 141], "still": 137, "think": 137, "found": 137, "bug": [137, 143], "what": [137, 143], "homepag": 138, "instal": [139, 140, 141], "from": [140, 141], "pypi": 140, "sourc": 141, "clone": 141, "repositori": 141, "github": 141, "new": 143, "current": 143, "0": 143, "9": 143, "dev0": 143, "enhanc": 143, "chang": 143, "8": 143, "11": 143, "2022": 143, "7": 143, "10": 143, "version": 143, "6": 143, "2021": 143, "12": 143, "06": 143, "5": 143, "07": 143, "14": 143, "author": 143}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"API Reference": [[0, "api-reference"]], "Classifier": [[0, "classifier"]], "Regressor": [[0, "regressor"]], "Models": [[0, "models"]], "Training": [[0, "training"], [2, "training"], [5, "training"], [8, "training"], [9, "training"], [10, "training"], [11, "training"], [27, "training"], [30, "training"]], "Datasets": [[0, "datasets"]], "Preprocessing": [[0, "preprocessing"], [2, "preprocessing"], [3, "preprocessing"], [4, "preprocessing"], [5, "preprocessing"], [8, "preprocessing"], [9, "preprocessing"], [10, "preprocessing"], [11, "preprocessing"], [12, "preprocessing"], [28, "preprocessing"], [30, "preprocessing"]], "Data Utils": [[0, "data-utils"]], "Samplers": [[0, "samplers"]], "Augmentation": [[0, "augmentation"]], "Utils": [[0, "utils"]], "Visualization": [[0, "visualization"]], "Advanced neural network training strategies": [[1, "advanced-neural-network-training-strategies"], [24, "advanced-neural-network-training-strategies"]], "Fingers flexion cropped decoding on BCIC IV 4 ECoG Dataset": [[2, "fingers-flexion-cropped-decoding-on-bcic-iv-4-ecog-dataset"]], "Loading and preparing the dataset": [[2, "loading-and-preparing-the-dataset"], [8, "loading-and-preparing-the-dataset"]], "Loading": [[2, "loading"], [3, "loading"], [4, "loading"], [8, "loading"], [9, "loading"], [10, "loading"], [11, "loading"], [30, "loading"]], "Split dataset into train and test": [[2, "split-dataset-into-train-and-test"], [29, "split-dataset-into-train-and-test"], [32, "split-dataset-into-train-and-test"]], "Create model": [[2, "create-model"], [3, "create-model"], [4, "create-model"], [8, "create-model"], [9, "create-model"], [10, "create-model"], [11, "create-model"], [29, "create-model"], [30, "create-model"]], "Cut Compute Windows": [[2, "cut-compute-windows"], [8, "cut-compute-windows"], [12, "cut-compute-windows"], [32, "cut-compute-windows"]], "Plot Results": [[2, "plot-results"], [8, "plot-results"], [27, "plot-results"]], "Data Augmentation on BCIC IV 2a Dataset": [[3, "data-augmentation-on-bcic-iv-2a-dataset"]], "This example covers:": [[3, "this-example-covers"], [4, "this-example-covers"], [5, "this-example-covers"], [12, "this-example-covers"], [21, "this-example-covers"], [26, "this-example-covers"], [27, "this-example-covers"], [28, "this-example-covers"], [29, "this-example-covers"], [30, "this-example-covers"], [32, "this-example-covers"]], "Loading and preprocessing the dataset": [[3, "loading-and-preprocessing-the-dataset"], [4, "loading-and-preprocessing-the-dataset"], [5, "loading-and-preprocessing-the-dataset"], [9, "loading-and-preprocessing-the-dataset"], [10, "loading-and-preprocessing-the-dataset"], [11, "loading-and-preprocessing-the-dataset"], [27, "loading-and-preprocessing-the-dataset"], [30, "loading-and-preprocessing-the-dataset"]], "Extracting windows": [[3, "extracting-windows"], [4, "extracting-windows"], [5, "extracting-windows"]], "Split dataset into train and valid": [[3, "split-dataset-into-train-and-valid"], [4, "split-dataset-into-train-and-valid"], [9, "split-dataset-into-train-and-valid"], [10, "split-dataset-into-train-and-valid"], [11, "split-dataset-into-train-and-valid"], [30, "split-dataset-into-train-and-valid"]], "Defining a Transform": [[3, "defining-a-transform"]], "Manipulating one session and visualizing the transformed data": [[3, "manipulating-one-session-and-visualizing-the-transformed-data"]], "Training a model with data augmentation": [[3, "training-a-model-with-data-augmentation"], [4, "training-a-model-with-data-augmentation"]], "Create an EEGClassifier with the desired augmentation": [[3, "create-an-eegclassifier-with-the-desired-augmentation"], [4, "create-an-eegclassifier-with-the-desired-augmentation"]], "Manually composing Transforms": [[3, "manually-composing-transforms"]], "Setting the data augmentation at the Dataset level": [[3, "setting-the-data-augmentation-at-the-dataset-level"]], "Searching the best data augmentation on BCIC IV 2a Dataset": [[4, "searching-the-best-data-augmentation-on-bcic-iv-2a-dataset"]], "Data Augmentation": [[4, null]], "Defining a list of transforms": [[4, "defining-a-list-of-transforms"]], "Analysing the best fit": [[4, "analysing-the-best-fit"]], "Plot results": [[4, "plot-results"], [9, "plot-results"], [10, "plot-results"], [11, "plot-results"]], "References": [[4, "references"], [5, "references"], [9, "references"], [10, "references"], [11, "references"], [26, "references"], [27, "references"], [28, "references"], [29, "references"], [30, "references"], [31, "references"], [137, "references"]], "Self-supervised learning on EEG with relative positioning": [[5, "self-supervised-learning-on-eeg-with-relative-positioning"]], "Self-supervised learning": [[5, null]], "Loading the raw recordings": [[5, "loading-the-raw-recordings"]], "Preprocessing windows": [[5, "preprocessing-windows"]], "Splitting dataset into train, valid and test sets": [[5, "splitting-dataset-into-train-valid-and-test-sets"]], "Creating samplers": [[5, "creating-samplers"]], "Creating the model": [[5, "creating-the-model"]], "Visualizing the results": [[5, "visualizing-the-results"]], "Inspecting pretext task performance": [[5, "inspecting-pretext-task-performance"]], "Using the learned representation for sleep staging": [[5, "using-the-learned-representation-for-sleep-staging"]], "Conclusion": [[5, "conclusion"]], "Computation times": [[6, "computation-times"], [13, "computation-times"], [23, "computation-times"], [33, "computation-times"], [34, "computation-times"], [142, "computation-times"]], "Applied examples on real-world datasets": [[7, "applied-examples-on-real-world-datasets"], [24, "applied-examples-on-real-world-datasets"]], "Fingers flexion decoding on BCIC IV 4 ECoG Dataset": [[8, "fingers-flexion-decoding-on-bcic-iv-4-ecog-dataset"]], "Split dataset into train, valid, and test": [[8, "split-dataset-into-train-valid-and-test"]], "Sleep staging on the Sleep Physionet dataset using Chambon2018 network": [[9, "sleep-staging-on-the-sleep-physionet-dataset-using-chambon2018-network"]], "Extract windows": [[9, "extract-windows"], [10, "extract-windows"], [11, "extract-windows"]], "Window preprocessing": [[9, "window-preprocessing"], [10, "window-preprocessing"]], "Create sequence samplers": [[9, "create-sequence-samplers"], [10, "create-sequence-samplers"], [11, "create-sequence-samplers"]], "Sleep staging on the Sleep Physionet dataset using Eldele2021": [[10, "sleep-staging-on-the-sleep-physionet-dataset-using-eldele2021"]], "Sleep staging on the Sleep Physionet dataset using U-Sleep network": [[11, "sleep-staging-on-the-sleep-physionet-dataset-using-u-sleep-network"]], "Process a big data EEG resource (TUH EEG Corpus)": [[12, "process-a-big-data-eeg-resource-tuh-eeg-corpus"]], "Creating the dataset using TUHMock": [[12, "creating-the-dataset-using-tuhmock"]], "Selecting recordings": [[12, "selecting-recordings"]], "Combining preprocessing steps": [[12, "combining-preprocessing-steps"]], "Benchmarking eager and lazy loading": [[14, "benchmarking-eager-and-lazy-loading"]], "Loading and organizing data": [[15, "loading-and-organizing-data"], [24, "loading-and-organizing-data"]], "Benchmarking preprocessing with parallelization and serialization": [[16, "benchmarking-preprocessing-with-parallelization-and-serialization"]], "Custom Dataset Example": [[17, "custom-dataset-example"]], "Load and save dataset example": [[18, "load-and-save-dataset-example"]], "MNE Dataset Example": [[19, "mne-dataset-example"]], "MOABB Dataset Example": [[20, "moabb-dataset-example"]], "Split Dataset Example": [[21, "split-dataset-example"]], "Loading the dataset": [[21, "loading-the-dataset"], [28, "loading-the-dataset"]], "Splitting": [[21, "splitting"]], "By description information": [[21, "by-description-information"]], "By row index": [[21, "by-row-index"]], "Observation": [[21, "observation"]], "Multiple discrete targets with the TUH EEG Corpus": [[22, "multiple-discrete-targets-with-the-tuh-eeg-corpus"]], "Creating Temple University Hospital (TUH) EEG Corpus Dataset": [[22, "creating-temple-university-hospital-tuh-eeg-corpus-dataset"]], "Exploring Data": [[22, "exploring-data"]], "Creating Windows": [[22, "creating-windows"]], "Exploring Windows": [[22, "exploring-windows"]], "DataLoader for Model Training": [[22, "dataloader-for-model-training"]], "Exploring DataLoader": [[22, "exploring-dataloader"]], "Examples": [[24, "examples"]], "Basic model building and training": [[24, "basic-model-building-and-training"], [25, "basic-model-building-and-training"]], "Simple training on MNE epochs": [[26, "simple-training-on-mne-epochs"]], "Finding the model you want": [[26, "finding-the-model-you-want"]], "Exploring the braindecode online documentation": [[26, "exploring-the-braindecode-online-documentation"]], "Examining the model": [[26, "examining-the-model"]], "Loading your own data with MNE": [[26, "loading-your-own-data-with-mne"]], "Training your model (scikit-learn compatible)": [[26, "training-your-model-scikit-learn-compatible"]], "Cropped Decoding on BCIC IV 2a Dataset": [[27, "cropped-decoding-on-bcic-iv-2a-dataset"]], "Create model and compute windowing parameters": [[27, "create-model-and-compute-windowing-parameters"]], "Cut the data into windows": [[27, "cut-the-data-into-windows"]], "Split the dataset": [[27, "split-the-dataset"]], "Plot Confusion Matrix": [[27, "plot-confusion-matrix"]], "Basic Brain Decoding on EEG Data": [[28, "basic-brain-decoding-on-eeg-data"]], "Loading and preparing the data": [[28, "loading-and-preparing-the-data"]], "Extracting Compute Windows": [[28, "extracting-compute-windows"]], "Splitting the dataset into training and validation sets": [[28, "splitting-the-dataset-into-training-and-validation-sets"]], "Creating a model": [[28, "creating-a-model"]], "Model Training": [[28, "model-training"]], "Plotting Results": [[28, "plotting-results"]], "Plotting a  Confusion Matrix": [[28, "plotting-a-confusion-matrix"]], "How to train, test and tune your model?": [[29, "how-to-train-test-and-tune-your-model"]], "Why should I care about model evaluation?": [[29, "why-should-i-care-about-model-evaluation"], [32, "why-should-i-care-about-model-evaluation"]], "Loading and preprocessing of data, defining a model, etc.": [[29, "loading-and-preprocessing-of-data-defining-a-model-etc"]], "Loading data": [[29, "loading-data"]], "Preprocessing data": [[29, "preprocessing-data"]], "Extraction of the Windows": [[29, "extraction-of-the-windows"], [30, "extraction-of-the-windows"]], "How to train and evaluate your model": [[29, "how-to-train-and-evaluate-your-model"], [32, "how-to-train-and-evaluate-your-model"]], "Option 1: Simple Train-Test Split": [[29, "option-1-simple-train-test-split"]], "Let\u2019s visualize the first option with a util function.": [[29, "let-s-visualize-the-first-option-with-a-util-function"]], "Option 2: Train-Val-Test Split": [[29, "option-2-train-val-test-split"]], "Let\u2019s visualize the second option with a util function.": [[29, "let-s-visualize-the-second-option-with-a-util-function"]], "Option 3: k-Fold Cross Validation": [[29, "option-3-k-fold-cross-validation"]], "Let\u2019s visualize the third option with a util function.": [[29, "let-s-visualize-the-third-option-with-a-util-function"]], "How to tune your hyperparameters": [[29, "how-to-tune-your-hyperparameters"]], "Option 1: Train-Val-Test Split": [[29, "option-1-train-val-test-split"]], "Option 2: k-Fold Cross Validation": [[29, "option-2-k-fold-cross-validation"]], "Hyperparameter tuning with scikit-learn": [[30, "hyperparameter-tuning-with-scikit-learn"]], "Why do you need to tune the neural networks model?": [[30, null]], "Extraction of the Compute Windows": [[30, "extraction-of-the-compute-windows"]], "Plotting the results": [[30, "plotting-the-results"]], "Get the best hyperparameters": [[30, "get-the-best-hyperparameters"]], "Convolutional neural network regression model on fake data.": [[31, "convolutional-neural-network-regression-model-on-fake-data"]], "Fake regression data": [[31, "fake-regression-data"]], "Generating fake regression dataset": [[31, "generating-fake-regression-dataset"]], "Defining a CNN regression model": [[31, "defining-a-cnn-regression-model"]], "Choosing between GPU and CPU processors": [[31, "choosing-between-gpu-and-cpu-processors"]], "Data windowing": [[31, "data-windowing"]], "Model training": [[31, "model-training"]], "Model evaluation": [[31, "model-evaluation"]], "Model testing": [[31, "model-testing"]], "Training a Braindecode model in PyTorch": [[32, "training-a-braindecode-model-in-pytorch"]], "Loading, preprocessing, defining a model, etc.": [[32, "loading-preprocessing-defining-a-model-etc"]], "Loading the Dataset Structure": [[32, "loading-the-dataset-structure"]], "Preprocessing, the offline transformation of the raw dataset": [[32, "preprocessing-the-offline-transformation-of-the-raw-dataset"]], "Create Pytorch model": [[32, "create-pytorch-model"]], "Option 1: Pure PyTorch training loop": [[32, "option-1-pure-pytorch-training-loop"]], "Option 2: Train it with PyTorch Lightning": [[32, "option-2-train-it-with-pytorch-lightning"]], "How to cite Braindecode": [[35, "how-to-cite-braindecode"]], "Citing the Braindecode": [[35, "citing-the-braindecode"]], "Citing the MNE": [[35, "citing-the-mne"]], "Citing other algorithms": [[35, "citing-other-algorithms"]], "braindecode.augmentation.AugmentedDataLoader": [[36, "braindecode-augmentation-augmenteddataloader"]], "Examples using braindecode.augmentation.AugmentedDataLoader": [[36, "examples-using-braindecode-augmentation-augmenteddataloader"]], "braindecode.augmentation.BandstopFilter": [[37, "braindecode-augmentation-bandstopfilter"]], "braindecode.augmentation.ChannelsDropout": [[38, "braindecode-augmentation-channelsdropout"]], "Examples using braindecode.augmentation.ChannelsDropout": [[38, "examples-using-braindecode-augmentation-channelsdropout"]], "braindecode.augmentation.ChannelsShuffle": [[39, "braindecode-augmentation-channelsshuffle"]], "braindecode.augmentation.ChannelsSymmetry": [[40, "braindecode-augmentation-channelssymmetry"]], "braindecode.augmentation.Compose": [[41, "braindecode-augmentation-compose"]], "Examples using braindecode.augmentation.Compose": [[41, "examples-using-braindecode-augmentation-compose"]], "braindecode.augmentation.FTSurrogate": [[42, "braindecode-augmentation-ftsurrogate"]], "Examples using braindecode.augmentation.FTSurrogate": [[42, "examples-using-braindecode-augmentation-ftsurrogate"]], "braindecode.augmentation.FrequencyShift": [[43, "braindecode-augmentation-frequencyshift"]], "Examples using braindecode.augmentation.FrequencyShift": [[43, "examples-using-braindecode-augmentation-frequencyshift"]], "braindecode.augmentation.GaussianNoise": [[44, "braindecode-augmentation-gaussiannoise"]], "braindecode.augmentation.IdentityTransform": [[45, "braindecode-augmentation-identitytransform"]], "braindecode.augmentation.Mixup": [[46, "braindecode-augmentation-mixup"]], "braindecode.augmentation.SensorsRotation": [[47, "braindecode-augmentation-sensorsrotation"]], "braindecode.augmentation.SensorsXRotation": [[48, "braindecode-augmentation-sensorsxrotation"]], "braindecode.augmentation.SensorsYRotation": [[49, "braindecode-augmentation-sensorsyrotation"]], "braindecode.augmentation.SensorsZRotation": [[50, "braindecode-augmentation-sensorszrotation"]], "braindecode.augmentation.SignFlip": [[51, "braindecode-augmentation-signflip"]], "Examples using braindecode.augmentation.SignFlip": [[51, "examples-using-braindecode-augmentation-signflip"]], "braindecode.augmentation.SmoothTimeMask": [[52, "braindecode-augmentation-smoothtimemask"]], "Examples using braindecode.augmentation.SmoothTimeMask": [[52, "examples-using-braindecode-augmentation-smoothtimemask"]], "braindecode.augmentation.TimeReverse": [[53, "braindecode-augmentation-timereverse"]], "braindecode.augmentation.Transform": [[54, "braindecode-augmentation-transform"]], "Examples using braindecode.augmentation.Transform": [[54, "examples-using-braindecode-augmentation-transform"]], "braindecode.augmentation.functional.bandstop_filter": [[55, "braindecode-augmentation-functional-bandstop-filter"]], "braindecode.augmentation.functional.channels_dropout": [[56, "braindecode-augmentation-functional-channels-dropout"]], "braindecode.augmentation.functional.channels_permute": [[57, "braindecode-augmentation-functional-channels-permute"]], "braindecode.augmentation.functional.channels_shuffle": [[58, "braindecode-augmentation-functional-channels-shuffle"]], "braindecode.augmentation.functional.frequency_shift": [[59, "braindecode-augmentation-functional-frequency-shift"]], "braindecode.augmentation.functional.ft_surrogate": [[60, "braindecode-augmentation-functional-ft-surrogate"]], "braindecode.augmentation.functional.gaussian_noise": [[61, "braindecode-augmentation-functional-gaussian-noise"]], "braindecode.augmentation.functional.identity": [[62, "braindecode-augmentation-functional-identity"]], "braindecode.augmentation.functional.mixup": [[63, "braindecode-augmentation-functional-mixup"]], "braindecode.augmentation.functional.sensors_rotation": [[64, "braindecode-augmentation-functional-sensors-rotation"]], "braindecode.augmentation.functional.sign_flip": [[65, "braindecode-augmentation-functional-sign-flip"]], "braindecode.augmentation.functional.smooth_time_mask": [[66, "braindecode-augmentation-functional-smooth-time-mask"]], "braindecode.augmentation.functional.time_reverse": [[67, "braindecode-augmentation-functional-time-reverse"]], "braindecode.classifier.EEGClassifier": [[68, "braindecode-classifier-eegclassifier"]], "braindecode.datasets.BCICompetitionIVDataset4": [[69, "braindecode-datasets-bcicompetitionivdataset4"]], "Examples using braindecode.datasets.BCICompetitionIVDataset4": [[69, "examples-using-braindecode-datasets-bcicompetitionivdataset4"]], "braindecode.datasets.BNCI2014001": [[70, "braindecode-datasets-bnci2014001"]], "Dataset summary": [[70, null], [73, null]], "braindecode.datasets.BaseConcatDataset": [[71, "braindecode-datasets-baseconcatdataset"]], "Examples using braindecode.datasets.BaseConcatDataset": [[71, "examples-using-braindecode-datasets-baseconcatdataset"]], "braindecode.datasets.BaseDataset": [[72, "braindecode-datasets-basedataset"]], "Examples using braindecode.datasets.BaseDataset": [[72, "examples-using-braindecode-datasets-basedataset"]], "braindecode.datasets.HGD": [[73, "braindecode-datasets-hgd"]], "braindecode.datasets.MOABBDataset": [[74, "braindecode-datasets-moabbdataset"]], "Examples using braindecode.datasets.MOABBDataset": [[74, "examples-using-braindecode-datasets-moabbdataset"]], "braindecode.datasets.SleepPhysionet": [[75, "braindecode-datasets-sleepphysionet"]], "Examples using braindecode.datasets.SleepPhysionet": [[75, "examples-using-braindecode-datasets-sleepphysionet"]], "braindecode.datasets.TUH": [[76, "braindecode-datasets-tuh"]], "Examples using braindecode.datasets.TUH": [[76, "examples-using-braindecode-datasets-tuh"]], "braindecode.datasets.TUHAbnormal": [[77, "braindecode-datasets-tuhabnormal"]], "Examples using braindecode.datasets.TUHAbnormal": [[77, "examples-using-braindecode-datasets-tuhabnormal"]], "braindecode.datasets.WindowsDataset": [[78, "braindecode-datasets-windowsdataset"]], "braindecode.datasets.create_from_X_y": [[79, "braindecode-datasets-create-from-x-y"]], "Examples using braindecode.datasets.create_from_X_y": [[79, "examples-using-braindecode-datasets-create-from-x-y"]], "braindecode.datasets.create_from_mne_epochs": [[80, "braindecode-datasets-create-from-mne-epochs"]], "Examples using braindecode.datasets.create_from_mne_epochs": [[80, "examples-using-braindecode-datasets-create-from-mne-epochs"]], "braindecode.datasets.create_from_mne_raw": [[81, "braindecode-datasets-create-from-mne-raw"]], "Examples using braindecode.datasets.create_from_mne_raw": [[81, "examples-using-braindecode-datasets-create-from-mne-raw"]], "braindecode.datautil.load_concat_dataset": [[82, "braindecode-datautil-load-concat-dataset"]], "Examples using braindecode.datautil.load_concat_dataset": [[82, "examples-using-braindecode-datautil-load-concat-dataset"]], "braindecode.datautil.save_concat_dataset": [[83, "braindecode-datautil-save-concat-dataset"]], "braindecode.models.ATCNet": [[84, "braindecode-models-atcnet"]], "braindecode.models.BIOT": [[85, "braindecode-models-biot"]], "braindecode.models.Deep4Net": [[86, "braindecode-models-deep4net"]], "Examples using braindecode.models.Deep4Net": [[86, "examples-using-braindecode-models-deep4net"]], "braindecode.models.DeepSleepNet": [[87, "braindecode-models-deepsleepnet"]], "braindecode.models.EEGConformer": [[88, "braindecode-models-eegconformer"]], "braindecode.models.EEGITNet": [[89, "braindecode-models-eegitnet"]], "braindecode.models.EEGInception": [[90, "braindecode-models-eeginception"]], "braindecode.models.EEGInceptionERP": [[91, "braindecode-models-eeginceptionerp"]], "braindecode.models.EEGInceptionMI": [[92, "braindecode-models-eeginceptionmi"]], "braindecode.models.EEGModuleMixin": [[93, "braindecode-models-eegmodulemixin"]], "Examples using braindecode.models.EEGModuleMixin": [[93, "examples-using-braindecode-models-eegmodulemixin"]], "braindecode.models.EEGNetv1": [[94, "braindecode-models-eegnetv1"]], "braindecode.models.EEGNetv4": [[95, "braindecode-models-eegnetv4"]], "braindecode.models.EEGResNet": [[96, "braindecode-models-eegresnet"]], "braindecode.models.HybridNet": [[97, "braindecode-models-hybridnet"]], "braindecode.models.ShallowFBCSPNet": [[98, "braindecode-models-shallowfbcspnet"]], "Examples using braindecode.models.ShallowFBCSPNet": [[98, "examples-using-braindecode-models-shallowfbcspnet"]], "braindecode.models.SleepStagerBlanco2020": [[99, "braindecode-models-sleepstagerblanco2020"]], "braindecode.models.SleepStagerChambon2018": [[100, "braindecode-models-sleepstagerchambon2018"]], "Examples using braindecode.models.SleepStagerChambon2018": [[100, "examples-using-braindecode-models-sleepstagerchambon2018"]], "braindecode.models.SleepStagerEldele2021": [[101, "braindecode-models-sleepstagereldele2021"]], "Examples using braindecode.models.SleepStagerEldele2021": [[101, "examples-using-braindecode-models-sleepstagereldele2021"]], "braindecode.models.TCN": [[102, "braindecode-models-tcn"]], "braindecode.models.TIDNet": [[103, "braindecode-models-tidnet"]], "braindecode.models.TimeDistributed": [[104, "braindecode-models-timedistributed"]], "Examples using braindecode.models.TimeDistributed": [[104, "examples-using-braindecode-models-timedistributed"]], "braindecode.models.USleep": [[105, "braindecode-models-usleep"]], "Examples using braindecode.models.USleep": [[105, "examples-using-braindecode-models-usleep"]], "braindecode.models.get_output_shape": [[106, "braindecode-models-get-output-shape"]], "Examples using braindecode.models.get_output_shape": [[106, "examples-using-braindecode-models-get-output-shape"]], "braindecode.preprocessing.Crop": [[107, "braindecode-preprocessing-crop"]], "braindecode.preprocessing.DropChannels": [[108, "braindecode-preprocessing-dropchannels"]], "braindecode.preprocessing.Filter": [[109, "braindecode-preprocessing-filter"]], "braindecode.preprocessing.Pick": [[110, "braindecode-preprocessing-pick"]], "braindecode.preprocessing.Preprocessor": [[111, "braindecode-preprocessing-preprocessor"]], "Examples using braindecode.preprocessing.Preprocessor": [[111, "examples-using-braindecode-preprocessing-preprocessor"]], "braindecode.preprocessing.Resample": [[112, "braindecode-preprocessing-resample"]], "braindecode.preprocessing.SetEEGReference": [[113, "braindecode-preprocessing-seteegreference"]], "braindecode.preprocessing.create_fixed_length_windows": [[114, "braindecode-preprocessing-create-fixed-length-windows"]], "Examples using braindecode.preprocessing.create_fixed_length_windows": [[114, "examples-using-braindecode-preprocessing-create-fixed-length-windows"]], "braindecode.preprocessing.create_windows_from_events": [[115, "braindecode-preprocessing-create-windows-from-events"]], "Examples using braindecode.preprocessing.create_windows_from_events": [[115, "examples-using-braindecode-preprocessing-create-windows-from-events"]], "braindecode.preprocessing.create_windows_from_target_channels": [[116, "braindecode-preprocessing-create-windows-from-target-channels"]], "Examples using braindecode.preprocessing.create_windows_from_target_channels": [[116, "examples-using-braindecode-preprocessing-create-windows-from-target-channels"]], "braindecode.preprocessing.exponential_moving_demean": [[117, "braindecode-preprocessing-exponential-moving-demean"]], "braindecode.preprocessing.exponential_moving_standardize": [[118, "braindecode-preprocessing-exponential-moving-standardize"]], "Examples using braindecode.preprocessing.exponential_moving_standardize": [[118, "examples-using-braindecode-preprocessing-exponential-moving-standardize"]], "braindecode.preprocessing.filterbank": [[119, "braindecode-preprocessing-filterbank"]], "braindecode.preprocessing.preprocess": [[120, "braindecode-preprocessing-preprocess"]], "Examples using braindecode.preprocessing.preprocess": [[120, "examples-using-braindecode-preprocessing-preprocess"]], "braindecode.regressor.EEGRegressor": [[121, "braindecode-regressor-eegregressor"]], "braindecode.samplers.BalancedSequenceSampler": [[122, "braindecode-samplers-balancedsequencesampler"]], "braindecode.samplers.RecordingSampler": [[123, "braindecode-samplers-recordingsampler"]], "Examples using braindecode.samplers.RecordingSampler": [[123, "examples-using-braindecode-samplers-recordingsampler"]], "braindecode.samplers.RelativePositioningSampler": [[124, "braindecode-samplers-relativepositioningsampler"]], "Examples using braindecode.samplers.RelativePositioningSampler": [[124, "examples-using-braindecode-samplers-relativepositioningsampler"]], "braindecode.samplers.SequenceSampler": [[125, "braindecode-samplers-sequencesampler"]], "Examples using braindecode.samplers.SequenceSampler": [[125, "examples-using-braindecode-samplers-sequencesampler"]], "braindecode.training.CroppedLoss": [[126, "braindecode-training-croppedloss"]], "Examples using braindecode.training.CroppedLoss": [[126, "examples-using-braindecode-training-croppedloss"]], "braindecode.training.CroppedTimeSeriesEpochScoring": [[127, "braindecode-training-croppedtimeseriesepochscoring"]], "Examples using braindecode.training.CroppedTimeSeriesEpochScoring": [[127, "examples-using-braindecode-training-croppedtimeseriesepochscoring"]], "braindecode.training.CroppedTrialEpochScoring": [[128, "braindecode-training-croppedtrialepochscoring"]], "Examples using braindecode.training.CroppedTrialEpochScoring": [[128, "examples-using-braindecode-training-croppedtrialepochscoring"]], "braindecode.training.PostEpochTrainScoring": [[129, "braindecode-training-postepochtrainscoring"]], "braindecode.training.TimeSeriesLoss": [[130, "braindecode-training-timeseriesloss"]], "Examples using braindecode.training.TimeSeriesLoss": [[130, "examples-using-braindecode-training-timeseriesloss"]], "braindecode.training.mixup_criterion": [[131, "braindecode-training-mixup-criterion"]], "braindecode.training.predict_trials": [[132, "braindecode-training-predict-trials"]], "braindecode.training.trial_preds_from_window_preds": [[133, "braindecode-training-trial-preds-from-window-preds"]], "braindecode.util.set_random_seeds": [[134, "braindecode-util-set-random-seeds"]], "Examples using braindecode.util.set_random_seeds": [[134, "examples-using-braindecode-util-set-random-seeds"]], "braindecode.visualization.compute_amplitude_gradients": [[135, "braindecode-visualization-compute-amplitude-gradients"]], "braindecode.visualization.plot_confusion_matrix": [[136, "braindecode-visualization-plot-confusion-matrix"]], "Examples using braindecode.visualization.plot_confusion_matrix": [[136, "examples-using-braindecode-visualization-plot-confusion-matrix"]], "Frequently Asked Questions (FAQ)": [[137, "frequently-asked-questions-faq"]], "How do I cite Braindecode?": [[137, "how-do-i-cite-braindecode"]], "Help! I can\u2019t get Python and Braindecode working!": [[137, "help-i-can-t-get-python-and-braindecode-working"]], "I still can\u2019t get it to work!": [[137, "i-still-can-t-get-it-to-work"]], "I think I found a bug, what do I do?": [[137, "i-think-i-found-a-bug-what-do-i-do"]], "Braindecode Homepage": [[138, "braindecode-homepage"]], "Installation": [[139, "installation"]], "Installing from PyPI": [[140, "installing-from-pypi"]], "Installing from sources": [[141, "installing-from-sources"]], "Clone the repository from GitHub": [[141, "clone-the-repository-from-github"]], "Installing Braindecode from the source": [[141, "installing-braindecode-from-the-source"]], "Testing if your installation is working": [[141, "testing-if-your-installation-is-working"]], "What\u2019s new": [[143, "what-s-new"]], "Current 0.9 (dev0)": [[143, "current-0-9-dev0"]], "Enhancements": [[143, "enhancements"], [143, "id1"], [143, "id8"], [143, "id11"], [143, "id14"]], "Bugs": [[143, "bugs"], [143, "id6"], [143, "id9"], [143, "id12"], [143, "id15"]], "API changes": [[143, "api-changes"], [143, "id7"], [143, "id10"], [143, "id13"], [143, "id16"]], "Current 0.8 (11-2022)": [[143, "current-0-8-11-2022"]], "Current 0.7 (10-2022)": [[143, "current-0-7-10-2022"]], "Version 0.6 (2021-12-06)": [[143, "version-0-6-2021-12-06"]], "Version 0.5.1 (2021-07-14)": [[143, "version-0-5-1-2021-07-14"]], "Authors": [[143, "authors"]]}, "indexentries": {"braindecode": [[0, "module-braindecode"]], "module": [[0, "module-braindecode"]], "augmenteddataloader (class in braindecode.augmentation)": [[36, "braindecode.augmentation.AugmentedDataLoader"]], "bandstopfilter (class in braindecode.augmentation)": [[37, "braindecode.augmentation.BandstopFilter"]], "get_augmentation_params() (braindecode.augmentation.bandstopfilter method)": [[37, "braindecode.augmentation.BandstopFilter.get_augmentation_params"]], "operation() (braindecode.augmentation.bandstopfilter static method)": [[37, "braindecode.augmentation.BandstopFilter.operation"]], "channelsdropout (class in braindecode.augmentation)": [[38, "braindecode.augmentation.ChannelsDropout"]], "get_augmentation_params() (braindecode.augmentation.channelsdropout method)": [[38, "braindecode.augmentation.ChannelsDropout.get_augmentation_params"]], "operation() (braindecode.augmentation.channelsdropout static method)": [[38, "braindecode.augmentation.ChannelsDropout.operation"]], "channelsshuffle (class in braindecode.augmentation)": [[39, "braindecode.augmentation.ChannelsShuffle"]], "get_augmentation_params() (braindecode.augmentation.channelsshuffle method)": [[39, "braindecode.augmentation.ChannelsShuffle.get_augmentation_params"]], "operation() (braindecode.augmentation.channelsshuffle static method)": [[39, "braindecode.augmentation.ChannelsShuffle.operation"]], "channelssymmetry (class in braindecode.augmentation)": [[40, "braindecode.augmentation.ChannelsSymmetry"]], "get_augmentation_params() (braindecode.augmentation.channelssymmetry method)": [[40, "braindecode.augmentation.ChannelsSymmetry.get_augmentation_params"]], "operation() (braindecode.augmentation.channelssymmetry static method)": [[40, "braindecode.augmentation.ChannelsSymmetry.operation"]], "compose (class in braindecode.augmentation)": [[41, "braindecode.augmentation.Compose"]], "forward() (braindecode.augmentation.compose method)": [[41, "braindecode.augmentation.Compose.forward"]], "ftsurrogate (class in braindecode.augmentation)": [[42, "braindecode.augmentation.FTSurrogate"]], "get_augmentation_params() (braindecode.augmentation.ftsurrogate method)": [[42, "braindecode.augmentation.FTSurrogate.get_augmentation_params"]], "operation() (braindecode.augmentation.ftsurrogate static method)": [[42, "braindecode.augmentation.FTSurrogate.operation"]], "frequencyshift (class in braindecode.augmentation)": [[43, "braindecode.augmentation.FrequencyShift"]], "get_augmentation_params() (braindecode.augmentation.frequencyshift method)": [[43, "braindecode.augmentation.FrequencyShift.get_augmentation_params"]], "operation() (braindecode.augmentation.frequencyshift static method)": [[43, "braindecode.augmentation.FrequencyShift.operation"]], "gaussiannoise (class in braindecode.augmentation)": [[44, "braindecode.augmentation.GaussianNoise"]], "get_augmentation_params() (braindecode.augmentation.gaussiannoise method)": [[44, "braindecode.augmentation.GaussianNoise.get_augmentation_params"]], "operation() (braindecode.augmentation.gaussiannoise static method)": [[44, "braindecode.augmentation.GaussianNoise.operation"]], "identitytransform (class in braindecode.augmentation)": [[45, "braindecode.augmentation.IdentityTransform"]], "operation() (braindecode.augmentation.identitytransform static method)": [[45, "braindecode.augmentation.IdentityTransform.operation"]], "mixup (class in braindecode.augmentation)": [[46, "braindecode.augmentation.Mixup"]], "get_augmentation_params() (braindecode.augmentation.mixup method)": [[46, "braindecode.augmentation.Mixup.get_augmentation_params"]], "operation() (braindecode.augmentation.mixup static method)": [[46, "braindecode.augmentation.Mixup.operation"]], "sensorsrotation (class in braindecode.augmentation)": [[47, "braindecode.augmentation.SensorsRotation"]], "get_augmentation_params() (braindecode.augmentation.sensorsrotation method)": [[47, "braindecode.augmentation.SensorsRotation.get_augmentation_params"]], "operation() (braindecode.augmentation.sensorsrotation static method)": [[47, "braindecode.augmentation.SensorsRotation.operation"]], "sensorsxrotation (class in braindecode.augmentation)": [[48, "braindecode.augmentation.SensorsXRotation"]], "sensorsyrotation (class in braindecode.augmentation)": [[49, "braindecode.augmentation.SensorsYRotation"]], "sensorszrotation (class in braindecode.augmentation)": [[50, "braindecode.augmentation.SensorsZRotation"]], "signflip (class in braindecode.augmentation)": [[51, "braindecode.augmentation.SignFlip"]], "operation() (braindecode.augmentation.signflip static method)": [[51, "braindecode.augmentation.SignFlip.operation"]], "smoothtimemask (class in braindecode.augmentation)": [[52, "braindecode.augmentation.SmoothTimeMask"]], "get_augmentation_params() (braindecode.augmentation.smoothtimemask method)": [[52, "braindecode.augmentation.SmoothTimeMask.get_augmentation_params"]], "operation() (braindecode.augmentation.smoothtimemask static method)": [[52, "braindecode.augmentation.SmoothTimeMask.operation"]], "timereverse (class in braindecode.augmentation)": [[53, "braindecode.augmentation.TimeReverse"]], "operation() (braindecode.augmentation.timereverse static method)": [[53, "braindecode.augmentation.TimeReverse.operation"]], "transform (class in braindecode.augmentation)": [[54, "braindecode.augmentation.Transform"]], "forward() (braindecode.augmentation.transform method)": [[54, "braindecode.augmentation.Transform.forward"]], "get_augmentation_params() (braindecode.augmentation.transform method)": [[54, "braindecode.augmentation.Transform.get_augmentation_params"]], "bandstop_filter() (in module braindecode.augmentation.functional)": [[55, "braindecode.augmentation.functional.bandstop_filter"]], "channels_dropout() (in module braindecode.augmentation.functional)": [[56, "braindecode.augmentation.functional.channels_dropout"]], "channels_permute() (in module braindecode.augmentation.functional)": [[57, "braindecode.augmentation.functional.channels_permute"]], "channels_shuffle() (in module braindecode.augmentation.functional)": [[58, "braindecode.augmentation.functional.channels_shuffle"]], "frequency_shift() (in module braindecode.augmentation.functional)": [[59, "braindecode.augmentation.functional.frequency_shift"]], "ft_surrogate() (in module braindecode.augmentation.functional)": [[60, "braindecode.augmentation.functional.ft_surrogate"]], "gaussian_noise() (in module braindecode.augmentation.functional)": [[61, "braindecode.augmentation.functional.gaussian_noise"]], "identity() (in module braindecode.augmentation.functional)": [[62, "braindecode.augmentation.functional.identity"]], "mixup() (in module braindecode.augmentation.functional)": [[63, "braindecode.augmentation.functional.mixup"]], "sensors_rotation() (in module braindecode.augmentation.functional)": [[64, "braindecode.augmentation.functional.sensors_rotation"]], "sign_flip() (in module braindecode.augmentation.functional)": [[65, "braindecode.augmentation.functional.sign_flip"]], "smooth_time_mask() (in module braindecode.augmentation.functional)": [[66, "braindecode.augmentation.functional.smooth_time_mask"]], "time_reverse() (in module braindecode.augmentation.functional)": [[67, "braindecode.augmentation.functional.time_reverse"]], "eegclassifier (class in braindecode.classifier)": [[68, "braindecode.classifier.EEGClassifier"]], "_criteria (braindecode.classifier.eegclassifier attribute)": [[68, "braindecode.classifier.EEGClassifier._criteria"]], "_modules (braindecode.classifier.eegclassifier attribute)": [[68, "braindecode.classifier.EEGClassifier._modules"]], "_optimizers (braindecode.classifier.eegclassifier attribute)": [[68, "braindecode.classifier.EEGClassifier._optimizers"]], "callbacks_ (braindecode.classifier.eegclassifier attribute)": [[68, "braindecode.classifier.EEGClassifier.callbacks_"]], "classes_ (braindecode.classifier.eegclassifier attribute)": [[68, "braindecode.classifier.EEGClassifier.classes_"]], "criterion_ (braindecode.classifier.eegclassifier attribute)": [[68, "braindecode.classifier.EEGClassifier.criterion_"]], "cuda_dependent_attributes_ (braindecode.classifier.eegclassifier attribute)": [[68, "braindecode.classifier.EEGClassifier.cuda_dependent_attributes_"]], "get_iterator() (braindecode.classifier.eegclassifier method)": [[68, "braindecode.classifier.EEGClassifier.get_iterator"]], "get_loss() (braindecode.classifier.eegclassifier method)": [[68, "braindecode.classifier.EEGClassifier.get_loss"]], "initialized_ (braindecode.classifier.eegclassifier attribute)": [[68, "braindecode.classifier.EEGClassifier.initialized_"]], "module_ (braindecode.classifier.eegclassifier attribute)": [[68, "braindecode.classifier.EEGClassifier.module_"]], "predict() (braindecode.classifier.eegclassifier method)": [[68, "braindecode.classifier.EEGClassifier.predict"]], "predict_proba() (braindecode.classifier.eegclassifier method)": [[68, "braindecode.classifier.EEGClassifier.predict_proba"]], "predict_trials() (braindecode.classifier.eegclassifier method)": [[68, "braindecode.classifier.EEGClassifier.predict_trials"]], "prefixes_ (braindecode.classifier.eegclassifier attribute)": [[68, "braindecode.classifier.EEGClassifier.prefixes_"]], "bcicompetitionivdataset4 (class in braindecode.datasets)": [[69, "braindecode.datasets.BCICompetitionIVDataset4"]], "download() (braindecode.datasets.bcicompetitionivdataset4 static method)": [[69, "braindecode.datasets.BCICompetitionIVDataset4.download"]], "bnci2014001 (class in braindecode.datasets)": [[70, "braindecode.datasets.BNCI2014001"]], "baseconcatdataset (class in braindecode.datasets)": [[71, "braindecode.datasets.BaseConcatDataset"]], "get_metadata() (braindecode.datasets.baseconcatdataset method)": [[71, "braindecode.datasets.BaseConcatDataset.get_metadata"]], "save() (braindecode.datasets.baseconcatdataset method)": [[71, "braindecode.datasets.BaseConcatDataset.save"]], "set_description() (braindecode.datasets.baseconcatdataset method)": [[71, "braindecode.datasets.BaseConcatDataset.set_description"]], "split() (braindecode.datasets.baseconcatdataset method)": [[71, "braindecode.datasets.BaseConcatDataset.split"]], "basedataset (class in braindecode.datasets)": [[72, "braindecode.datasets.BaseDataset"]], "set_description() (braindecode.datasets.basedataset method)": [[72, "braindecode.datasets.BaseDataset.set_description"]], "hgd (class in braindecode.datasets)": [[73, "braindecode.datasets.HGD"]], "moabbdataset (class in braindecode.datasets)": [[74, "braindecode.datasets.MOABBDataset"]], "sleepphysionet (class in braindecode.datasets)": [[75, "braindecode.datasets.SleepPhysionet"]], "tuh (class in braindecode.datasets)": [[76, "braindecode.datasets.TUH"]], "tuhabnormal (class in braindecode.datasets)": [[77, "braindecode.datasets.TUHAbnormal"]], "windowsdataset (class in braindecode.datasets)": [[78, "braindecode.datasets.WindowsDataset"]], "set_description() (braindecode.datasets.windowsdataset method)": [[78, "braindecode.datasets.WindowsDataset.set_description"]], "create_from_x_y() (in module braindecode.datasets)": [[79, "braindecode.datasets.create_from_X_y"]], "create_from_mne_epochs() (in module braindecode.datasets)": [[80, "braindecode.datasets.create_from_mne_epochs"]], "create_from_mne_raw() (in module braindecode.datasets)": [[81, "braindecode.datasets.create_from_mne_raw"]], "load_concat_dataset() (in module braindecode.datautil)": [[82, "braindecode.datautil.load_concat_dataset"]], "save_concat_dataset() (in module braindecode.datautil)": [[83, "braindecode.datautil.save_concat_dataset"]], "atcnet (class in braindecode.models)": [[84, "braindecode.models.ATCNet"]], "forward() (braindecode.models.atcnet method)": [[84, "braindecode.models.ATCNet.forward"]], "biot (class in braindecode.models)": [[85, "braindecode.models.BIOT"]], "forward() (braindecode.models.biot method)": [[85, "braindecode.models.BIOT.forward"]], "deep4net (class in braindecode.models)": [[86, "braindecode.models.Deep4Net"]], "deepsleepnet (class in braindecode.models)": [[87, "braindecode.models.DeepSleepNet"]], "forward() (braindecode.models.deepsleepnet method)": [[87, "braindecode.models.DeepSleepNet.forward"]], "eegconformer (class in braindecode.models)": [[88, "braindecode.models.EEGConformer"]], "forward() (braindecode.models.eegconformer method)": [[88, "braindecode.models.EEGConformer.forward"]], "get_fc_size() (braindecode.models.eegconformer method)": [[88, "braindecode.models.EEGConformer.get_fc_size"]], "eegitnet (class in braindecode.models)": [[89, "braindecode.models.EEGITNet"]], "eeginception (class in braindecode.models)": [[90, "braindecode.models.EEGInception"]], "eeginceptionerp (class in braindecode.models)": [[91, "braindecode.models.EEGInceptionERP"]], "eeginceptionmi (class in braindecode.models)": [[92, "braindecode.models.EEGInceptionMI"]], "forward() (braindecode.models.eeginceptionmi method)": [[92, "braindecode.models.EEGInceptionMI.forward"]], "eegmodulemixin (class in braindecode.models)": [[93, "braindecode.models.EEGModuleMixin"]], "get_output_shape() (braindecode.models.eegmodulemixin method)": [[93, "braindecode.models.EEGModuleMixin.get_output_shape"]], "get_torchinfo_statistics() (braindecode.models.eegmodulemixin method)": [[93, "braindecode.models.EEGModuleMixin.get_torchinfo_statistics"]], "load_state_dict() (braindecode.models.eegmodulemixin method)": [[93, "braindecode.models.EEGModuleMixin.load_state_dict"]], "to_dense_prediction_model() (braindecode.models.eegmodulemixin method)": [[93, "braindecode.models.EEGModuleMixin.to_dense_prediction_model"]], "eegnetv1 (class in braindecode.models)": [[94, "braindecode.models.EEGNetv1"]], "eegnetv4 (class in braindecode.models)": [[95, "braindecode.models.EEGNetv4"]], "eegresnet (class in braindecode.models)": [[96, "braindecode.models.EEGResNet"]], "hybridnet (class in braindecode.models)": [[97, "braindecode.models.HybridNet"]], "forward() (braindecode.models.hybridnet method)": [[97, "braindecode.models.HybridNet.forward"]], "shallowfbcspnet (class in braindecode.models)": [[98, "braindecode.models.ShallowFBCSPNet"]], "sleepstagerblanco2020 (class in braindecode.models)": [[99, "braindecode.models.SleepStagerBlanco2020"]], "forward() (braindecode.models.sleepstagerblanco2020 method)": [[99, "braindecode.models.SleepStagerBlanco2020.forward"]], "sleepstagerchambon2018 (class in braindecode.models)": [[100, "braindecode.models.SleepStagerChambon2018"]], "forward() (braindecode.models.sleepstagerchambon2018 method)": [[100, "braindecode.models.SleepStagerChambon2018.forward"]], "sleepstagereldele2021 (class in braindecode.models)": [[101, "braindecode.models.SleepStagerEldele2021"]], "forward() (braindecode.models.sleepstagereldele2021 method)": [[101, "braindecode.models.SleepStagerEldele2021.forward"]], "tcn (class in braindecode.models)": [[102, "braindecode.models.TCN"]], "forward() (braindecode.models.tcn method)": [[102, "braindecode.models.TCN.forward"]], "tidnet (class in braindecode.models)": [[103, "braindecode.models.TIDNet"]], "forward() (braindecode.models.tidnet method)": [[103, "braindecode.models.TIDNet.forward"]], "timedistributed (class in braindecode.models)": [[104, "braindecode.models.TimeDistributed"]], "forward() (braindecode.models.timedistributed method)": [[104, "braindecode.models.TimeDistributed.forward"]], "usleep (class in braindecode.models)": [[105, "braindecode.models.USleep"]], "forward() (braindecode.models.usleep method)": [[105, "braindecode.models.USleep.forward"]], "get_output_shape() (in module braindecode.models)": [[106, "braindecode.models.get_output_shape"]], "crop (class in braindecode.preprocessing)": [[107, "braindecode.preprocessing.Crop"]], "dropchannels (class in braindecode.preprocessing)": [[108, "braindecode.preprocessing.DropChannels"]], "filter (class in braindecode.preprocessing)": [[109, "braindecode.preprocessing.Filter"]], "pick (class in braindecode.preprocessing)": [[110, "braindecode.preprocessing.Pick"]], "preprocessor (class in braindecode.preprocessing)": [[111, "braindecode.preprocessing.Preprocessor"]], "apply() (braindecode.preprocessing.preprocessor method)": [[111, "braindecode.preprocessing.Preprocessor.apply"]], "resample (class in braindecode.preprocessing)": [[112, "braindecode.preprocessing.Resample"]], "seteegreference (class in braindecode.preprocessing)": [[113, "braindecode.preprocessing.SetEEGReference"]], "create_fixed_length_windows() (in module braindecode.preprocessing)": [[114, "braindecode.preprocessing.create_fixed_length_windows"]], "create_windows_from_events() (in module braindecode.preprocessing)": [[115, "braindecode.preprocessing.create_windows_from_events"]], "create_windows_from_target_channels() (in module braindecode.preprocessing)": [[116, "braindecode.preprocessing.create_windows_from_target_channels"]], "exponential_moving_demean() (in module braindecode.preprocessing)": [[117, "braindecode.preprocessing.exponential_moving_demean"]], "exponential_moving_standardize() (in module braindecode.preprocessing)": [[118, "braindecode.preprocessing.exponential_moving_standardize"]], "filterbank() (in module braindecode.preprocessing)": [[119, "braindecode.preprocessing.filterbank"]], "preprocess() (in module braindecode.preprocessing)": [[120, "braindecode.preprocessing.preprocess"]], "eegregressor (class in braindecode.regressor)": [[121, "braindecode.regressor.EEGRegressor"]], "_criteria (braindecode.regressor.eegregressor attribute)": [[121, "braindecode.regressor.EEGRegressor._criteria"]], "_modules (braindecode.regressor.eegregressor attribute)": [[121, "braindecode.regressor.EEGRegressor._modules"]], "_optimizers (braindecode.regressor.eegregressor attribute)": [[121, "braindecode.regressor.EEGRegressor._optimizers"]], "callbacks_ (braindecode.regressor.eegregressor attribute)": [[121, "braindecode.regressor.EEGRegressor.callbacks_"]], "criterion_ (braindecode.regressor.eegregressor attribute)": [[121, "braindecode.regressor.EEGRegressor.criterion_"]], "cuda_dependent_attributes_ (braindecode.regressor.eegregressor attribute)": [[121, "braindecode.regressor.EEGRegressor.cuda_dependent_attributes_"]], "fit() (braindecode.regressor.eegregressor method)": [[121, "braindecode.regressor.EEGRegressor.fit"]], "get_iterator() (braindecode.regressor.eegregressor method)": [[121, "braindecode.regressor.EEGRegressor.get_iterator"]], "initialized_ (braindecode.regressor.eegregressor attribute)": [[121, "braindecode.regressor.EEGRegressor.initialized_"]], "module_ (braindecode.regressor.eegregressor attribute)": [[121, "braindecode.regressor.EEGRegressor.module_"]], "predict_proba() (braindecode.regressor.eegregressor method)": [[121, "braindecode.regressor.EEGRegressor.predict_proba"]], "predict_trials() (braindecode.regressor.eegregressor method)": [[121, "braindecode.regressor.EEGRegressor.predict_trials"]], "prefixes_ (braindecode.regressor.eegregressor attribute)": [[121, "braindecode.regressor.EEGRegressor.prefixes_"]], "balancedsequencesampler (class in braindecode.samplers)": [[122, "braindecode.samplers.BalancedSequenceSampler"]], "sample_class() (braindecode.samplers.balancedsequencesampler method)": [[122, "braindecode.samplers.BalancedSequenceSampler.sample_class"]], "recordingsampler (class in braindecode.samplers)": [[123, "braindecode.samplers.RecordingSampler"]], "info (braindecode.samplers.recordingsampler attribute)": [[123, "braindecode.samplers.RecordingSampler.info"]], "n_recordings (braindecode.samplers.recordingsampler attribute)": [[123, "braindecode.samplers.RecordingSampler.n_recordings"]], "sample_recording() (braindecode.samplers.recordingsampler method)": [[123, "braindecode.samplers.RecordingSampler.sample_recording"]], "sample_window() (braindecode.samplers.recordingsampler method)": [[123, "braindecode.samplers.RecordingSampler.sample_window"]], "relativepositioningsampler (class in braindecode.samplers)": [[124, "braindecode.samplers.RelativePositioningSampler"]], "presample() (braindecode.samplers.relativepositioningsampler method)": [[124, "braindecode.samplers.RelativePositioningSampler.presample"]], "sequencesampler (class in braindecode.samplers)": [[125, "braindecode.samplers.SequenceSampler"]], "file_ids (braindecode.samplers.sequencesampler attribute)": [[125, "braindecode.samplers.SequenceSampler.file_ids"]], "info (braindecode.samplers.sequencesampler attribute)": [[125, "braindecode.samplers.SequenceSampler.info"]], "croppedloss (class in braindecode.training)": [[126, "braindecode.training.CroppedLoss"]], "forward() (braindecode.training.croppedloss method)": [[126, "braindecode.training.CroppedLoss.forward"]], "croppedtimeseriesepochscoring (class in braindecode.training)": [[127, "braindecode.training.CroppedTimeSeriesEpochScoring"]], "on_epoch_end() (braindecode.training.croppedtimeseriesepochscoring method)": [[127, "braindecode.training.CroppedTimeSeriesEpochScoring.on_epoch_end"]], "croppedtrialepochscoring (class in braindecode.training)": [[128, "braindecode.training.CroppedTrialEpochScoring"]], "on_batch_end() (braindecode.training.croppedtrialepochscoring method)": [[128, "braindecode.training.CroppedTrialEpochScoring.on_batch_end"]], "on_epoch_end() (braindecode.training.croppedtrialepochscoring method)": [[128, "braindecode.training.CroppedTrialEpochScoring.on_epoch_end"]], "postepochtrainscoring (class in braindecode.training)": [[129, "braindecode.training.PostEpochTrainScoring"]], "on_epoch_end() (braindecode.training.postepochtrainscoring method)": [[129, "braindecode.training.PostEpochTrainScoring.on_epoch_end"]], "timeseriesloss (class in braindecode.training)": [[130, "braindecode.training.TimeSeriesLoss"]], "forward() (braindecode.training.timeseriesloss method)": [[130, "braindecode.training.TimeSeriesLoss.forward"]], "mixup_criterion() (in module braindecode.training)": [[131, "braindecode.training.mixup_criterion"]], "predict_trials() (in module braindecode.training)": [[132, "braindecode.training.predict_trials"]], "trial_preds_from_window_preds() (in module braindecode.training)": [[133, "braindecode.training.trial_preds_from_window_preds"]], "set_random_seeds() (in module braindecode.util)": [[134, "braindecode.util.set_random_seeds"]], "compute_amplitude_gradients() (in module braindecode.visualization)": [[135, "braindecode.visualization.compute_amplitude_gradients"]], "plot_confusion_matrix() (in module braindecode.visualization)": [[136, "braindecode.visualization.plot_confusion_matrix"]]}})